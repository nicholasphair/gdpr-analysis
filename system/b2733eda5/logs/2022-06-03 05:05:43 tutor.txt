Timeout in resolving values
Timeout in running neo4j query
Running Main.py on tutor

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:02.643337.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:02.953754.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 366 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:01.628100.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 18 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:01.301918.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 11429 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:04.353837.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 36 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:01.811548.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
Added 5 PHP_REACHES edges.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.068929.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 5125 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:05:45.719633.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 94813
Added 77834 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 154604
Added 59791 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:09.893208.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/tutor.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Addons.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Admin.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Ajax.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Assets.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Course_Filter.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Course.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Course_Settings_Tabs.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Course_Widget.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Custom_Validation.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Dashboard.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Email.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/FormHandler.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Frontend.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Gutenberg.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Instructor.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Instructors_List.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Lesson.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Options.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Post_types.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Private_Course_Access.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Q_and_A.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Question_Answers_List.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Quiz_Attempts_List.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Quiz.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/RestAPI.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Rewrite_Rules.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Shortcode.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Student.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Students_List.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Taxonomies.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Template.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Theme_Compatibility.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Tools.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Tutor_Base.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/TutorEDD.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Tutor_List_Table.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Tutor.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Tutor_Setup.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Upgrader.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/User.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Utils.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Video_Stream.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Withdraw.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/Withdraw_Requests_List.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/classes/WooCommerce.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/includes/tinymce_translate.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/includes/tutor-general-functions.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/includes/tutor-template-functions.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/includes/tutor-template-hook.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/includes/theme-compatibility/astra/functions.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/includes/theme-compatibility/flatpro/functions.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/includes/theme-compatibility/generatepress/functions.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/includes/theme-compatibility/hestia/functions.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/includes/theme-compatibility/oceanwp/functions.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/includes/theme-compatibility/storefront/functions.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/includes/theme-compatibility/twentyfifteen/functions.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/includes/theme-compatibility/twentyseventeen/functions.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/restapi/REST_Author.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/restapi/REST_Course_Announcement.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/restapi/REST_Course.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/restapi/REST_Lesson.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/restapi/REST_Quiz.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/restapi/REST_Rating.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/restapi/REST_Response.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/restapi/REST_Topic.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/archive-course-init.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/archive-course.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/course-none.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/feature_disabled.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/instructor-setting.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/login.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/permission-denied.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/public-profile-setting.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single-assignment.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single-course-enrolled-announcements.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single-course-enrolled-overview.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single-course-enrolled.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single-course-enrolled-questions.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single-course-enrolled-subpage.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single-course-instructor.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single-course.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single-lesson.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single-preview-lesson.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single-quiz.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/student-public-profile.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/template.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/course-filter/filters.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/announcements.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/assignments.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/create-course.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/dashboard-menu.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/dashboard.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/earning.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/enrolled-courses.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/index.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/logged-in.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/my-courses.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/my-profile.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/my-quiz-attempts.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/purchase_history.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/question-answer.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/quiz-attempts.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/registration.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/reviews.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/settings.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/wishlist.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/withdraw.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/announcements/create.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/announcements/details.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/announcements/update.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/assignments/review.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/assignments/submitted.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/earning/chart-body.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/earning/earning-report-top-menu.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/earning/report-date_range.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/earning/report-last_month.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/earning/report-last_week.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/earning/report-last_year.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/earning/report.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/earning/report-this_month.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/earning/report-this_week.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/earning/report-this_year.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/earning/statement.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/earning/statements.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/enrolled-courses/active-courses.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/enrolled-courses/completed-courses.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/instructor/apply_for_instructor.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/instructor/logged-in.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/instructor/registration.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/my-quiz-attempts/attempts-details.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/notifications/profile-completion.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/question-answer/answers.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/quiz-attempts/quiz-reviews.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/reviews/edit-review-form.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/reviews/given-reviews.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/settings/education.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/settings/nav-bar.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/settings/profile.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/settings/reset-password.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/settings/skill.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/settings/withdraw-settings.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/withdraw-method-fields/email.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/withdraw-method-fields/number.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/withdraw-method-fields/textarea.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/dashboard/withdraw-method-fields/text.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/email/send-reset-password.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/global/attachments.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/global/course-archive-filter-bar.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/global/login.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/add-to-cart-edd.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/add-to-cart-woocommerce.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/course-author.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/course-continue.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/course-in-cart.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/course.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/course-price-edd.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/course-price.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/course-price-woocommerce.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/end_content_wrap.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/footer.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/header.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/loop-after-content.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/loop-before-content.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/loop-end.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/loop-start.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/meta.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/rating.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/start_content_wrap.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/thumbnail.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/title.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/loop/tutor-pagination.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/profile/bio.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/profile/courses_taken.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/profile/enrolled_course.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/profile/reviews_wrote.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/shortcode/instructor-filter.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/shortcode/tutor-course.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/shortcode/tutor-instructor.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/next-previous-pagination.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/assignment/content.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/add-to-cart-edd.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/add-to-cart.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/add-to-cart-woocommerce.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/closed-enrollment.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/complete_form.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/continue-lesson.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/course-benefits.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/course-content.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/course-enroll-box.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/course-enrolled-box.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/course-requirements.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/course-target-audience.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/course-topics.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/instructors.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/lead-info.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/login.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/material-includes.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/q_and_a_turned_off.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/review-form.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/reviews.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/social_share.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/tags.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/wc-price-html.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/enrolled/announcements.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/enrolled/completing-progress.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/enrolled/lead-info.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/enrolled/nav.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/course/enrolled/question_and_answer.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/lesson/complete_form.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/lesson/content.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/lesson/lesson_sidebar.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/lesson/required-enroll.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/lesson/sidebar_question_and_answer.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/quiz/body.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/quiz/content.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/quiz/no_course_belongs.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/quiz/previous-attempts.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/quiz/single_quiz_contents.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/quiz/top.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/video/embedded.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/video/external_url.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/video/html5.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/video/shortcode.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/video/video.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/video/vimeo.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/single/video/youtube.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/template-part/form-retrieve-password.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/template-part/retrieve-password.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/templates/widget/courses.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/maintenance.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course-add-edd-product-metabox.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course-additional-data.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course-add-product-metabox.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course-contents.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course-level-metabox.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course-topics.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/instructors-metabox.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/lesson-attachments-metabox.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/lesson-metabox.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/user-profile-fields.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/video-metabox.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course/settings-tabs.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course/field-types/checkbox.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course/field-types/color.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course/field-types/group_fields.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course/field-types/media.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course/field-types/number.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course/field-types/radio.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course/field-types/select.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course/field-types/slider.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course/field-types/textarea.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course/field-types/text.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course/field-types/groups/checkbox.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course/field-types/groups/number.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course/field-types/groups/select.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/metabox/course/field-types/groups/text.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/modal/add_quiz.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/modal/edit-lesson.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/modal/edit_quiz.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/modal/question_answer_edit_form.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/modal/question_answer_form.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/modal/question_form.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/modal/review.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/option_field.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/options_generator.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/field-types/checkbox.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/field-types/color.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/field-types/group_fields.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/field-types/media.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/field-types/number.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/field-types/radio.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/field-types/select.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/field-types/slider.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/field-types/textarea.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/field-types/text.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/field-types/groups/checkbox.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/field-types/groups/number.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/field-types/groups/select.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/field-types/groups/text.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/withdraw/textarea.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/options/withdraw/withdraw_admin_options_generator.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/add_new_instructor.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/addons.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/announcements.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/answer.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/enable_disable_addons.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/get-pro.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/instructors.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/question_answer.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/quiz_attempts.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/students.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/tools.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/tutor-pro-addons.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/uninstall.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/view_attempt.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/withdraw_requests.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/tools/status.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/tutor/views/pages/tools/tutor_pages.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:22.004389.

366 PHP_REACHES edges created
18 REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
11429 PHP_REACHES edges created
21 CALLS edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
12000 PHP_REACHES edges created
13000 PHP_REACHES edges created
14000 PHP_REACHES edges created
15000 PHP_REACHES edges created
16000 PHP_REACHES edges created
17000 PHP_REACHES edges created
18000 PHP_REACHES edges created
19000 PHP_REACHES edges created
20000 PHP_REACHES edges created
21000 PHP_REACHES edges created
22000 PHP_REACHES edges created
23000 PHP_REACHES edges created
24000 PHP_REACHES edges created
25000 PHP_REACHES edges created
26000 PHP_REACHES edges created
27000 PHP_REACHES edges created
28000 PHP_REACHES edges created
29000 PHP_REACHES edges created
30000 PHP_REACHES edges created
31000 PHP_REACHES edges created
32000 PHP_REACHES edges created
33000 PHP_REACHES edges created
34000 PHP_REACHES edges created
35000 PHP_REACHES edges created
36000 PHP_REACHES edges created
37000 PHP_REACHES edges created
38000 PHP_REACHES edges created
39000 PHP_REACHES edges created
40000 PHP_REACHES edges created
41000 PHP_REACHES edges created
42000 PHP_REACHES edges created
43000 PHP_REACHES edges created
44000 PHP_REACHES edges created
45000 PHP_REACHES edges created
46000 PHP_REACHES edges created
47000 PHP_REACHES edges created
48000 PHP_REACHES edges created
49000 PHP_REACHES edges created
50000 PHP_REACHES edges created
51000 PHP_REACHES edges created
52000 PHP_REACHES edges created
53000 PHP_REACHES edges created
54000 PHP_REACHES edges created
55000 PHP_REACHES edges created
56000 PHP_REACHES edges created
57000 PHP_REACHES edges created
58000 PHP_REACHES edges created
59000 PHP_REACHES edges created
60000 PHP_REACHES edges created
61000 PHP_REACHES edges created
62000 PHP_REACHES edges created
63000 PHP_REACHES edges created
64000 PHP_REACHES edges created
65000 PHP_REACHES edges created
66000 PHP_REACHES edges created
67000 PHP_REACHES edges created
68000 PHP_REACHES edges created
69000 PHP_REACHES edges created
70000 PHP_REACHES edges created
71000 PHP_REACHES edges created
72000 PHP_REACHES edges created
73000 PHP_REACHES edges created
74000 PHP_REACHES edges created
75000 PHP_REACHES edges created
76000 PHP_REACHES edges created
77000 PHP_REACHES edges created
78000 PHP_REACHES edges created
79000 PHP_REACHES edges created
80000 PHP_REACHES edges created
81000 PHP_REACHES edges created
82000 PHP_REACHES edges created
82979 PHP_REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
12000 PHP_REACHES edges created
13000 PHP_REACHES edges created
14000 PHP_REACHES edges created
15000 PHP_REACHES edges created
16000 PHP_REACHES edges created
17000 PHP_REACHES edges created
18000 PHP_REACHES edges created
19000 PHP_REACHES edges created
20000 PHP_REACHES edges created
21000 PHP_REACHES edges created
22000 PHP_REACHES edges created
23000 PHP_REACHES edges created
24000 PHP_REACHES edges created
25000 PHP_REACHES edges created
26000 PHP_REACHES edges created
27000 PHP_REACHES edges created
28000 PHP_REACHES edges created
29000 PHP_REACHES edges created
30000 PHP_REACHES edges created
31000 PHP_REACHES edges created
32000 PHP_REACHES edges created
33000 PHP_REACHES edges created
34000 PHP_REACHES edges created
35000 PHP_REACHES edges created
36000 PHP_REACHES edges created
37000 PHP_REACHES edges created
38000 PHP_REACHES edges created
39000 PHP_REACHES edges created
40000 PHP_REACHES edges created
41000 PHP_REACHES edges created
42000 PHP_REACHES edges created
43000 PHP_REACHES edges created
44000 PHP_REACHES edges created
45000 PHP_REACHES edges created
46000 PHP_REACHES edges created
47000 PHP_REACHES edges created
48000 PHP_REACHES edges created
49000 PHP_REACHES edges created
50000 PHP_REACHES edges created
51000 PHP_REACHES edges created
52000 PHP_REACHES edges created
53000 PHP_REACHES edges created
54000 PHP_REACHES edges created
55000 PHP_REACHES edges created
56000 PHP_REACHES edges created
57000 PHP_REACHES edges created
58000 PHP_REACHES edges created
59000 PHP_REACHES edges created
59791 PHP_REACHES edges created
154604 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 34507 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:04.018370.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 1 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:01:24.870424.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 2540 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:01:21.375285.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 5659 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.555058.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:26.755352.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:32.803383.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.460221.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.027414.

1 CALLS edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
8199 PHP_REACHES edges created
8200 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 4298 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.550003.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
188 SQL operations to process.
SELECT meta_value from $wpdb WHERE meta_key = '_tutor_instructor_course_id' AND user_id = get_current_user_id()
SELECT meta_value from $wpdb WHERE meta_key = '_tutor_instructor_course_id' AND user_id = get_current_user_id()
SQL command (SELECT meta_value from $wpdb WHERE meta_key = '_tutor_instructor_course_id' AND user_id = get_current_user_id()) cannot be parsed correct.
SELECT ID from $wpdb WHERE post_type in('implode("\',\'", $post_types)') ;
SQL command (SELECT ID from $wpdb WHERE post_type in('implode("\',\'", $post_types)') ;) cannot be parsed correct.
SELECT comment_ID from $wpdb WHERE comment_agent = 'comment_agent' ;
SQL command (SELECT comment_ID from $wpdb WHERE comment_agent = 'comment_agent' ;) cannot be parsed correct.
DELETE from $wpdb WHERE comment_ID in('implode("\',\'", $tutor_comments)') 
SQL command (DELETE from $wpdb WHERE comment_ID in('implode("\',\'", $tutor_comments)') ) cannot be parsed correct.
DELETE FROM $wpdb WHERE meta_key LIKE  '%_tutor_completed_lesson_id_%' 
SQL command (DELETE FROM $wpdb WHERE meta_key LIKE '%_tutor_completed_lesson_id_%' ) cannot be parsed correct.
DROP TABLE IF EXISTS $wpdbtutor_quiz_attempts, $wpdbtutor_quiz_attempt_answers, $wpdbtutor_quiz_questions, $wpdbtutor_quiz_question_answers, $wpdbtutor_earnings, $wpdbtutor_withdraws 
SQL command (DROP TABLE IF EXISTS $wpdbtutor_quiz_attempts, $wpdbtutor_quiz_attempt_answers, $wpdbtutor_quiz_questions, $wpdbtutor_quiz_question_answers, $wpdbtutor_earnings, $wpdbtutor_withdraws ) cannot be parsed correct.
SELECT * FROM $wpdb WHERE comment_id = $wpdb->get_var($wpdb->prepare("select comment_ID from "$wpdb->comments" WHERE comment_post_ID = %d AND user_id = %d AND comment_type = \'tutor_course_rating\' LIMIT 1;", $course_id, $user_id)) AND meta_key = 'tutor_rating'; 
SELECT * FROM $wpdb WHERE comment_id = $wpdb->get_var($wpdb->prepare("select comment_ID from "$wpdb->comments" WHERE comment_post_ID = %d AND user_id = %d AND comment_type = \'tutor_course_rating\' LIMIT 1;", $course_id, $user_id)) AND meta_key = 'tutor_rating'; 
SQL command (SELECT * FROM $wpdb WHERE comment_id = $wpdb->get_var($wpdb->prepare("select comment_ID from "$wpdb->comments" WHERE comment_post_ID = %d AND user_id = %d AND comment_type = \'tutor_course_rating\' LIMIT 1;", $course_id, $user_id)) AND meta_key = 'tutor_rating'; ) cannot be parsed correct.
SELECT * from $wpdb WHERE user_id = get_current_user_id() AND meta_key = '_tutor_course_wishlist' AND meta_value = %d;
SELECT * from $wpdb WHERE user_id = get_current_user_id() AND meta_key = '_tutor_course_wishlist' AND meta_value = $course_id;
SELECT * from $wpdb WHERE user_id = get_current_user_id() AND meta_key = '_tutor_course_wishlist' AND meta_value = $course_id;
SQL command (SELECT * from $wpdb WHERE user_id = get_current_user_id() AND meta_key = '_tutor_course_wishlist' AND meta_value = $course_id;) cannot be parsed correct.
SELECT user.ID, user.display_name from $wpdb user
			INNER JOIN $wpdb meta ON user.ID = meta.user_id AND meta.meta_key = '_tutor_instructor_status' AND meta.meta_value = 'approved'
			WHERE 1=1 apply_filters("tutor_instructor_query_when_exists", " AND ID <1 ") AND (user.user_login like '%sanitize_text_field(tutor_utils()->avalue_dot("search_terms", tutor_sanitize_data($_POST)))%' or user.user_nicename like '%sanitize_text_field(tutor_utils()->avalue_dot("search_terms", tutor_sanitize_data($_POST)))%' or user.display_name like '%sanitize_text_field(tutor_utils()->avalue_dot("search_terms", tutor_sanitize_data($_POST)))%')  limit 10 
SQL command (SELECT user.ID, user.display_name from $wpdb user INNER JOIN $wpdb meta ON user.ID = meta.user_id AND meta.meta_key = '_tutor_instructor_status' AND meta.meta_value = 'approved' WHERE 1=1 apply_filters("tutor_instructor_query_when_exists", " AND ID <1 ") AND (user.user_login like '%sanitize_text_field(tutor_utils()->avalue_dot("search_terms", tutor_sanitize_data($_POST)))%' or user.user_nicename like '%sanitize_text_field(tutor_utils()->avalue_dot("search_terms", tutor_sanitize_data($_POST)))%' or user.display_name like '%sanitize_text_field(tutor_utils()->avalue_dot("search_terms", tutor_sanitize_data($_POST)))%') limit 10 ) cannot be parsed correct.
SELECT question_id FROM $wpdbtutor_quiz_questions WHERE quiz_id = $content_id 
SELECT question_id FROM $wpdbtutor_quiz_questions WHERE quiz_id = $content_id 
SQL command (SELECT question_id FROM $wpdbtutor_quiz_questions WHERE quiz_id = $content_id ) cannot be parsed correct.
SELECT question_id FROM $wpdbtutor_quiz_questions WHERE quiz_id = $content_id 
SQL command (SELECT question_id FROM $wpdbtutor_quiz_questions WHERE quiz_id = $content_id ) cannot be parsed correct.
post_status
SQL command (post_status) cannot be parsed correct.
SELECT ID, post_parent FROM $wpdb WHERE post_type='courses' AND post_name='esc_sql($p_name)' AND post_status='private'
SQL command (SELECT ID, post_parent FROM $wpdb WHERE post_type='courses' AND post_name='esc_sql($p_name)' AND post_status='private') cannot be parsed correct.
post_status
SQL command (post_status) cannot be parsed correct.
DELETE FROM $wpdb WHERE $wpdb.comment_ID = intval(sanitize_text_field($_POST["question_id"]))
DELETE FROM $wpdb WHERE $wpdb.comment_ID = intval(sanitize_text_field($_POST["question_id"]))
SQL command (DELETE FROM $wpdb WHERE $wpdb.comment_ID = intval(sanitize_text_field($_POST["question_id"]))) cannot be parsed correct.
DELETE FROM $wpdb WHERE $wpdb.comment_parent = intval(sanitize_text_field($_POST["question_id"]))
DELETE FROM $wpdb WHERE $wpdb.comment_parent = intval(sanitize_text_field($_POST["question_id"]))
SQL command (DELETE FROM $wpdb WHERE $wpdb.comment_parent = intval(sanitize_text_field($_POST["question_id"]))) cannot be parsed correct.
DELETE FROM $wpdb WHERE $wpdb.comment_id = intval(sanitize_text_field($_POST["question_id"]))
DELETE FROM $wpdb WHERE $wpdb.comment_id = intval(sanitize_text_field($_POST["question_id"]))
SQL command (DELETE FROM $wpdb WHERE $wpdb.comment_id = intval(sanitize_text_field($_POST["question_id"]))) cannot be parsed correct.
DELETE FROM $wpdb WHERE $wpdb.comment_ID IN(implode(",", array_map("absint", $question_ids)))
SQL command (DELETE FROM $wpdb WHERE $wpdb.comment_ID IN(implode(",", array_map("absint", $question_ids)))) cannot be parsed correct.
DELETE FROM $wpdb WHERE $wpdb.comment_parent IN(implode(",", array_map("absint", $question_ids)))
SQL command (DELETE FROM $wpdb WHERE $wpdb.comment_parent IN(implode(",", array_map("absint", $question_ids)))) cannot be parsed correct.
DELETE FROM $wpdb WHERE $wpdb.comment_id IN(implode(",", array_map("absint", $question_ids)))
SQL command (DELETE FROM $wpdb WHERE $wpdb.comment_id IN(implode(",", array_map("absint", $question_ids)))) cannot be parsed correct.
SELECT
									answer_id
								FROM
									$wpdbtutor_quiz_question_answers
								WHERE
									belongs_question_id = tutor_utils()->get_quiz_question_by_id($question_id)_question_id
									AND belongs_question_type = %s
									AND is_correct = 1 ;
								
SELECT
									answer_id
								FROM
									$wpdbtutor_quiz_question_answers
								WHERE
									belongs_question_id = tutor_utils()->get_quiz_question_by_id($question_id)_question_id
									AND belongs_question_type = tutor_utils()->get_quiz_question_by_id($question_id)_question_type
									AND is_correct = 1 ;
								
SELECT
									answer_id
								FROM
									$wpdbtutor_quiz_question_answers
								WHERE
									belongs_question_id = tutor_utils()->get_quiz_question_by_id($question_id)_question_id
									AND belongs_question_type = tutor_utils()->get_quiz_question_by_id($question_id)_question_type
									AND is_correct = 1 ;
								
SQL command (SELECT answer_id FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = tutor_utils()->get_quiz_question_by_id($question_id)_question_id AND belongs_question_type = tutor_utils()->get_quiz_question_by_id($question_id)_question_type AND is_correct = 1 ; ) cannot be parsed correct.
SELECT * FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = tutor_utils()->get_quiz_question_by_id($question_id)_question_id AND belongs_question_type = %s ;
SELECT * FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = tutor_utils()->get_quiz_question_by_id($question_id)_question_id AND belongs_question_type = tutor_utils()->get_quiz_question_by_id($question_id)_question_type ;
SELECT * FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = tutor_utils()->get_quiz_question_by_id($question_id)_question_id AND belongs_question_type = tutor_utils()->get_quiz_question_by_id($question_id)_question_type ;
SQL command (SELECT * FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = tutor_utils()->get_quiz_question_by_id($question_id)_question_id AND belongs_question_type = tutor_utils()->get_quiz_question_by_id($question_id)_question_type ;) cannot be parsed correct.
SELECT answer_id
								FROM $wpdbtutor_quiz_question_answers
								WHERE belongs_question_id = tutor_utils()->get_quiz_question_by_id($question_id)_question_id AND belongs_question_type = %s ORDER BY answer_order ASC ;
SELECT answer_id
								FROM $wpdbtutor_quiz_question_answers
								WHERE belongs_question_id = tutor_utils()->get_quiz_question_by_id($question_id)_question_id AND belongs_question_type = tutor_utils()->get_quiz_question_by_id($question_id)_question_type ORDER BY answer_order ASC ;
SELECT answer_id
								FROM $wpdbtutor_quiz_question_answers
								WHERE belongs_question_id = tutor_utils()->get_quiz_question_by_id($question_id)_question_id AND belongs_question_type = tutor_utils()->get_quiz_question_by_id($question_id)_question_type ORDER BY answer_order ASC ;
SQL command (SELECT answer_id FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = tutor_utils()->get_quiz_question_by_id($question_id)_question_id AND belongs_question_type = tutor_utils()->get_quiz_question_by_id($question_id)_question_type ORDER BY answer_order ASC ;) cannot be parsed correct.
SELECT answer_title
								FROM $wpdbtutor_quiz_question_answers
								WHERE belongs_question_id = $question_id AND belongs_question_type = 'image_answering' ORDER BY answer_order asc ;
SELECT answer_title
								FROM $wpdbtutor_quiz_question_answers
								WHERE belongs_question_id = $question_id AND belongs_question_type = 'image_answering' ORDER BY answer_order asc ;
SQL command (SELECT answer_title FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $question_id AND belongs_question_type = 'image_answering' ORDER BY answer_order asc ;) cannot be parsed correct.
SELECT * FROM $wpdbtutor_quiz_attempt_answers
			WHERE attempt_answer_id = $attempt_answer_id 
SELECT * FROM $wpdbtutor_quiz_attempt_answers
			WHERE attempt_answer_id = $attempt_answer_id 
SQL command (SELECT * FROM $wpdbtutor_quiz_attempt_answers WHERE attempt_answer_id = $attempt_answer_id ) cannot be parsed correct.
SELECT question_id FROM $wpdbtutor_quiz_questions WHERE quiz_id = $quiz_id 
SELECT question_id FROM $wpdbtutor_quiz_questions WHERE quiz_id = $quiz_id 
SQL command (SELECT question_id FROM $wpdbtutor_quiz_questions WHERE quiz_id = $quiz_id ) cannot be parsed correct.
SELECT question_id FROM $wpdbtutor_quiz_questions WHERE quiz_id = $quiz_id 
SQL command (SELECT question_id FROM $wpdbtutor_quiz_questions WHERE quiz_id = $quiz_id ) cannot be parsed correct.
SELECT * FROM $wpdbtutor_quiz_questions where question_id = $wpdb 
SELECT * FROM $wpdbtutor_quiz_questions where question_id = $wpdb 
SQL command (SELECT * FROM $wpdbtutor_quiz_questions where question_id = $wpdb ) cannot be parsed correct.
SELECT * FROM $wpdbtutor_quiz_questions WHERE question_id = sanitize_text_field($_POST["question_id"]) 
SELECT * FROM $wpdbtutor_quiz_questions WHERE question_id = sanitize_text_field($_POST["question_id"]) 
SQL command (SELECT * FROM $wpdbtutor_quiz_questions WHERE question_id = sanitize_text_field($_POST["question_id"]) ) cannot be parsed correct.
SELECT * FROM $wpdbtutor_quiz_question_answers where belongs_question_id = sanitize_text_field($_POST["question_id"]) AND belongs_question_type = %s order by answer_order asc ;
SELECT * FROM $wpdbtutor_quiz_question_answers where belongs_question_id = sanitize_text_field($_POST["question_id"]) AND belongs_question_type = esc_sql($question_type) order by answer_order asc ;
SELECT * FROM $wpdbtutor_quiz_question_answers where belongs_question_id = sanitize_text_field($_POST["question_id"]) AND belongs_question_type = esc_sql($question_type) order by answer_order asc ;
SQL command (SELECT * FROM $wpdbtutor_quiz_question_answers where belongs_question_id = sanitize_text_field($_POST["question_id"]) AND belongs_question_type = esc_sql($question_type) order by answer_order asc ;) cannot be parsed correct.
SELECT * FROM $wpdbtutor_quiz_question_answers WHERE answer_id = sanitize_text_field($_POST["answer_id"]) LIMIT 0,1 ;
SELECT * FROM $wpdbtutor_quiz_question_answers WHERE answer_id = sanitize_text_field($_POST["answer_id"]) LIMIT 0,1 ;
SQL command (SELECT * FROM $wpdbtutor_quiz_question_answers WHERE answer_id = sanitize_text_field($_POST["answer_id"]) LIMIT 0,1 ;) cannot be parsed correct.
SELECT meta_value from $wpdb WHERE meta_key = '_tutor_instructor_course_id' and user_id = get_current_user_id()d
SELECT meta_value from $wpdb WHERE meta_key = '_tutor_instructor_course_id' and user_id = get_current_user_id()d
SQL command (SELECT meta_value from $wpdb WHERE meta_key = '_tutor_instructor_course_id' and user_id = get_current_user_id()d) cannot be parsed correct.
SELECT meta_value from $wpdb WHERE meta_key = '_tutor_instructor_course_id' and user_id = get_current_user_id()d
SQL command (SELECT meta_value from $wpdb WHERE meta_key = '_tutor_instructor_course_id' and user_id = get_current_user_id()d) cannot be parsed correct.
SELECT post_name from $wpdb where ID = tutor_utils()->get_course_id_by("lesson", $post->ID) 
SELECT post_name from $wpdb where ID = tutor_utils()->get_course_id_by("lesson", $post->ID) 
SQL command (SELECT post_name from $wpdb where ID = tutor_utils()->get_course_id_by("lesson", $post->ID) ) cannot be parsed correct.
SELECT ID, post_name, post_type, post_parent from $wpdb where ID = "placeholder_0" 
SELECT ID, post_name, post_type, post_parent from $wpdb where ID = "placeholder_0" 
SQL command (SELECT ID, post_name, post_type, post_parent from $wpdb where ID = "placeholder_0" ) cannot be parsed correct.
SELECT ID, post_name, post_type, post_parent from $wpdb where ID = $wpdb->get_row($wpdb->prepare("SELECT ID, post_name, post_type, post_parent from "$wpdb->posts" where ID = %d ", $post->post_parent))_post_parent 
SELECT ID, post_name, post_type, post_parent from $wpdb where ID = $wpdb->get_row($wpdb->prepare("SELECT ID, post_name, post_type, post_parent from "$wpdb->posts" where ID = %d ", $post->post_parent))_post_parent 
SQL command (SELECT ID, post_name, post_type, post_parent from $wpdb where ID = $wpdb->get_row($wpdb->prepare("SELECT ID, post_name, post_type, post_parent from "$wpdb->posts" where ID = %d ", $post->post_parent))_post_parent ) cannot be parsed correct.
SELECT ID, post_name, post_type, post_parent from $wpdb where ID = $wpdb->get_row($wpdb->prepare("SELECT ID, post_name, post_type, post_parent from "$wpdb->posts" where ID = %d ", $post->post_parent))_post_parent 
SELECT ID, post_name, post_type, post_parent from $wpdb where ID = $wpdb->get_row($wpdb->prepare("SELECT ID, post_name, post_type, post_parent from "$wpdb->posts" where ID = %d ", $post->post_parent))_post_parent 
SQL command (SELECT ID, post_name, post_type, post_parent from $wpdb where ID = $wpdb->get_row($wpdb->prepare("SELECT ID, post_name, post_type, post_parent from "$wpdb->posts" where ID = %d ", $post->post_parent))_post_parent ) cannot be parsed correct.
posts_per_page
SQL command (posts_per_page) cannot be parsed correct.
orderby
SQL command (orderby) cannot be parsed correct.
order
SQL command (order) cannot be parsed correct.
orderby
SQL command (orderby) cannot be parsed correct.
order
SQL command (order) cannot be parsed correct.
orderby
SQL command (orderby) cannot be parsed correct.
order
SQL command (order) cannot be parsed correct.
orderby
SQL command (orderby) cannot be parsed correct.
order
SQL command (order) cannot be parsed correct.
SELECT display_name from $wpdb WHERE user_login = sanitize_text_field($wp_query->query["tutor_student_username"]) limit 1; 
SELECT display_name from $wpdb WHERE user_login = sanitize_text_field($wp_query->query["tutor_student_username"]) limit 1; 
SQL command (SELECT display_name from $wpdb WHERE user_login = sanitize_text_field($wp_query->query["tutor_student_username"]) limit 1; ) cannot be parsed correct.
CREATE TABLE $wpdbtutor_quiz_attempts (
				attempt_id int(11) NOT NULL AUTO_INCREMENT,
				course_id int(11) DEFAULT NULL,
				quiz_id int(11) DEFAULT NULL,
				user_id int(11) DEFAULT NULL,
				total_questions int(11) DEFAULT NULL,
				total_answered_questions int(11) DEFAULT NULL,
				total_marks decimal(9,2) DEFAULT NULL,
				earned_marks decimal(9,2) DEFAULT NULL,
				attempt_info text,
				attempt_status varchar(50) DEFAULT NULL,
				attempt_ip varchar(250) DEFAULT NULL,
				attempt_started_at datetime DEFAULT NULL,
				attempt_ended_at datetime DEFAULT NULL,
				is_manually_reviewed int(1) DEFAULT NULL,
				manually_reviewed_at datetime DEFAULT NULL,
				PRIMARY KEY  (attempt_id)
			) $wpdb->get_charset_collate();
SQL command (CREATE TABLE $wpdbtutor_quiz_attempts ( attempt_id int(11) NOT NULL AUTO_INCREMENT, course_id int(11) DEFAULT NULL, quiz_id int(11) DEFAULT NULL, user_id int(11) DEFAULT NULL, total_questions int(11) DEFAULT NULL, total_answered_questions int(11) DEFAULT NULL, total_marks decimal(9,2) DEFAULT NULL, earned_marks decimal(9,2) DEFAULT NULL, attempt_info text, attempt_status varchar(50) DEFAULT NULL, attempt_ip varchar(250) DEFAULT NULL, attempt_started_at datetime DEFAULT NULL, attempt_ended_at datetime DEFAULT NULL, is_manually_reviewed int(1) DEFAULT NULL, manually_reviewed_at datetime DEFAULT NULL, PRIMARY KEY (attempt_id) ) $wpdb->get_charset_collate();) cannot be parsed correct.
CREATE TABLE $wpdbtutor_quiz_attempt_answers (
			  	attempt_answer_id int(11) NOT NULL AUTO_INCREMENT,
				user_id int(11) DEFAULT NULL,
			  	quiz_id int(11) DEFAULT NULL,
			  	question_id int(11) DEFAULT NULL,
			  	quiz_attempt_id int(11) DEFAULT NULL,
			  	given_answer longtext,
			  	question_mark decimal(8,2) DEFAULT NULL,
			  	achieved_mark decimal(8,2) DEFAULT NULL,
			  	minus_mark decimal(8,2) DEFAULT NULL,
			  	is_correct tinyint(4) DEFAULT NULL,
			  	PRIMARY KEY  (attempt_answer_id)
			) $wpdb->get_charset_collate();
SQL command (CREATE TABLE $wpdbtutor_quiz_attempt_answers ( attempt_answer_id int(11) NOT NULL AUTO_INCREMENT, user_id int(11) DEFAULT NULL, quiz_id int(11) DEFAULT NULL, question_id int(11) DEFAULT NULL, quiz_attempt_id int(11) DEFAULT NULL, given_answer longtext, question_mark decimal(8,2) DEFAULT NULL, achieved_mark decimal(8,2) DEFAULT NULL, minus_mark decimal(8,2) DEFAULT NULL, is_correct tinyint(4) DEFAULT NULL, PRIMARY KEY (attempt_answer_id) ) $wpdb->get_charset_collate();) cannot be parsed correct.
CREATE TABLE $wpdbtutor_quiz_questions (
				question_id int(11) NOT NULL AUTO_INCREMENT,
				quiz_id int(11) DEFAULT NULL,
				question_title text,
				question_description longtext,
				question_type varchar(50) DEFAULT NULL,
				question_mark decimal(9,2) DEFAULT NULL,
				question_settings longtext,
				question_order int(11) DEFAULT NULL,
				PRIMARY KEY (question_id)
			) $wpdb->get_charset_collate();
SQL command (CREATE TABLE $wpdbtutor_quiz_questions ( question_id int(11) NOT NULL AUTO_INCREMENT, quiz_id int(11) DEFAULT NULL, question_title text, question_description longtext, question_type varchar(50) DEFAULT NULL, question_mark decimal(9,2) DEFAULT NULL, question_settings longtext, question_order int(11) DEFAULT NULL, PRIMARY KEY (question_id) ) $wpdb->get_charset_collate();) cannot be parsed correct.
CREATE TABLE $wpdbtutor_quiz_question_answers (
			 	answer_id int(11) NOT NULL AUTO_INCREMENT,
			  	belongs_question_id int(11) DEFAULT NULL,
			  	belongs_question_type varchar(250) DEFAULT NULL,
			  	answer_title text,
			  	is_correct tinyint(4) DEFAULT NULL,
			  	image_id int(11) DEFAULT NULL,
			  	answer_two_gap_match text,
			  	answer_view_format varchar(250) DEFAULT NULL,
			  	answer_settings text,
			  	answer_order int(11) DEFAULT '0',
				PRIMARY KEY (answer_id)
			) $wpdb->get_charset_collate();
SQL command (CREATE TABLE $wpdbtutor_quiz_question_answers ( answer_id int(11) NOT NULL AUTO_INCREMENT, belongs_question_id int(11) DEFAULT NULL, belongs_question_type varchar(250) DEFAULT NULL, answer_title text, is_correct tinyint(4) DEFAULT NULL, image_id int(11) DEFAULT NULL, answer_two_gap_match text, answer_view_format varchar(250) DEFAULT NULL, answer_settings text, answer_order int(11) DEFAULT '0', PRIMARY KEY (answer_id) ) $wpdb->get_charset_collate();) cannot be parsed correct.
CREATE TABLE IF NOT EXISTS $wpdbtutor_earnings (
			earning_id int(11) NOT NULL AUTO_INCREMENT,
			user_id int(11) DEFAULT NULL,
			course_id int(11) DEFAULT NULL,
			order_id int(11) DEFAULT NULL,
			order_status varchar(50) DEFAULT NULL,
			course_price_total decimal(16,2) DEFAULT NULL,
			course_price_grand_total decimal(16,2) DEFAULT NULL,
			instructor_amount decimal(16,2) DEFAULT NULL,
			instructor_rate decimal(16,2) DEFAULT NULL,
			admin_amount decimal(16,2) DEFAULT NULL,
			admin_rate decimal(16,2) DEFAULT NULL,
			commission_type varchar(20) DEFAULT NULL,
			deduct_fees_amount decimal(16,2) DEFAULT NULL,
			deduct_fees_name varchar(250) DEFAULT NULL,
			deduct_fees_type varchar(20) DEFAULT NULL,
			process_by varchar(20) DEFAULT NULL,
			created_at datetime DEFAULT NULL,
			PRIMARY KEY (earning_id)
		) $wpdb->get_charset_collate();
SQL command (CREATE TABLE IF NOT EXISTS $wpdbtutor_earnings ( earning_id int(11) NOT NULL AUTO_INCREMENT, user_id int(11) DEFAULT NULL, course_id int(11) DEFAULT NULL, order_id int(11) DEFAULT NULL, order_status varchar(50) DEFAULT NULL, course_price_total decimal(16,2) DEFAULT NULL, course_price_grand_total decimal(16,2) DEFAULT NULL, instructor_amount decimal(16,2) DEFAULT NULL, instructor_rate decimal(16,2) DEFAULT NULL, admin_amount decimal(16,2) DEFAULT NULL, admin_rate decimal(16,2) DEFAULT NULL, commission_type varchar(20) DEFAULT NULL, deduct_fees_amount decimal(16,2) DEFAULT NULL, deduct_fees_name varchar(250) DEFAULT NULL, deduct_fees_type varchar(20) DEFAULT NULL, process_by varchar(20) DEFAULT NULL, created_at datetime DEFAULT NULL, PRIMARY KEY (earning_id) ) $wpdb->get_charset_collate();) cannot be parsed correct.
CREATE TABLE IF NOT EXISTS $wpdbtutor_withdraws (
			withdraw_id int(11) NOT NULL AUTO_INCREMENT,
			user_id int(11) DEFAULT NULL,
			amount decimal(16,2) DEFAULT NULL,
			method_data text DEFAULT NULL,
			status varchar(50) DEFAULT NULL,
			updated_at datetime DEFAULT NULL,
			created_at datetime DEFAULT NULL,
			PRIMARY KEY (withdraw_id)
		) $wpdb->get_charset_collate();
SQL command (CREATE TABLE IF NOT EXISTS $wpdbtutor_withdraws ( withdraw_id int(11) NOT NULL AUTO_INCREMENT, user_id int(11) DEFAULT NULL, amount decimal(16,2) DEFAULT NULL, method_data text DEFAULT NULL, status varchar(50) DEFAULT NULL, updated_at datetime DEFAULT NULL, created_at datetime DEFAULT NULL, PRIMARY KEY (withdraw_id) ) $wpdb->get_charset_collate();) cannot be parsed correct.
CREATE TABLE IF NOT EXISTS $wpdbtutor_earnings (
			earning_id int(11) NOT NULL AUTO_INCREMENT,
			user_id int(11) DEFAULT NULL,
			course_id int(11) DEFAULT NULL,
			order_id int(11) DEFAULT NULL,
			order_status varchar(50) DEFAULT NULL,
			course_price_total decimal(16,2) DEFAULT NULL,
			course_price_grand_total decimal(16,2) DEFAULT NULL,
			instructor_amount decimal(16,2) DEFAULT NULL,
			instructor_rate decimal(16,2) DEFAULT NULL,
			admin_amount decimal(16,2) DEFAULT NULL,
			admin_rate decimal(16,2) DEFAULT NULL,
			commission_type varchar(20) DEFAULT NULL,
			deduct_fees_amount decimal(16,2) DEFAULT NULL,
			deduct_fees_name varchar(250) DEFAULT NULL,
			deduct_fees_type varchar(20) DEFAULT NULL,
			process_by varchar(20) DEFAULT NULL,
			created_at datetime DEFAULT NULL,
			PRIMARY KEY (earning_id)
		) $wpdb->get_charset_collate();
SQL command (CREATE TABLE IF NOT EXISTS $wpdbtutor_earnings ( earning_id int(11) NOT NULL AUTO_INCREMENT, user_id int(11) DEFAULT NULL, course_id int(11) DEFAULT NULL, order_id int(11) DEFAULT NULL, order_status varchar(50) DEFAULT NULL, course_price_total decimal(16,2) DEFAULT NULL, course_price_grand_total decimal(16,2) DEFAULT NULL, instructor_amount decimal(16,2) DEFAULT NULL, instructor_rate decimal(16,2) DEFAULT NULL, admin_amount decimal(16,2) DEFAULT NULL, admin_rate decimal(16,2) DEFAULT NULL, commission_type varchar(20) DEFAULT NULL, deduct_fees_amount decimal(16,2) DEFAULT NULL, deduct_fees_name varchar(250) DEFAULT NULL, deduct_fees_type varchar(20) DEFAULT NULL, process_by varchar(20) DEFAULT NULL, created_at datetime DEFAULT NULL, PRIMARY KEY (earning_id) ) $wpdb->get_charset_collate();) cannot be parsed correct.
CREATE TABLE IF NOT EXISTS $wpdbtutor_withdraws (
			withdraw_id int(11) NOT NULL AUTO_INCREMENT,
			user_id int(11) DEFAULT NULL,
			amount decimal(16,2) DEFAULT NULL,
			method_data text DEFAULT NULL,
			status varchar(50) DEFAULT NULL,
			updated_at datetime DEFAULT NULL,
			created_at datetime DEFAULT NULL,
			PRIMARY KEY (withdraw_id)
		) $wpdb->get_charset_collate();
SQL command (CREATE TABLE IF NOT EXISTS $wpdbtutor_withdraws ( withdraw_id int(11) NOT NULL AUTO_INCREMENT, user_id int(11) DEFAULT NULL, amount decimal(16,2) DEFAULT NULL, method_data text DEFAULT NULL, status varchar(50) DEFAULT NULL, updated_at datetime DEFAULT NULL, created_at datetime DEFAULT NULL, PRIMARY KEY (withdraw_id) ) $wpdb->get_charset_collate();) cannot be parsed correct.

			SELECT DISTINCT YEAR( post_date ) AS year, MONTH( post_date ) AS month
			FROM $wpdb
			WHERE post_type = $post_type
			AND post_status != 'auto-draft'
			ORDER BY post_date DESC
		

			SELECT DISTINCT YEAR( post_date ) AS year, MONTH( post_date ) AS month
			FROM $wpdb
			WHERE post_type = $post_type
			AND post_status != 'auto-draft'
			ORDER BY post_date DESC
		
SQL command ( SELECT DISTINCT YEAR( post_date ) AS year, MONTH( post_date ) AS month FROM $wpdb WHERE post_type = $post_type AND post_status != 'auto-draft' ORDER BY post_date DESC ) cannot be parsed correct.
SHOW TABLES LIKE '$wpdb';
SQL command (SHOW TABLES LIKE '$wpdb';) cannot be parsed correct.
SHOW TABLES LIKE '$wpdb';
SQL command (SHOW TABLES LIKE '$wpdb';) cannot be parsed correct.
CREATE TABLE IF NOT EXISTS $wpdb (
				gradebook_id int(11) NOT NULL AUTO_INCREMENT,
				grade_name varchar(50) DEFAULT NULL,
				grade_point varchar(20) DEFAULT NULL,
				grade_point_to varchar(20) DEFAULT NULL,
				percent_from int(3) DEFAULT NULL,
				percent_to int(3) DEFAULT NULL,
				grade_config longtext,
				PRIMARY KEY (gradebook_id)
			) $wpdb->get_charset_collate();
SQL command (CREATE TABLE IF NOT EXISTS $wpdb ( gradebook_id int(11) NOT NULL AUTO_INCREMENT, grade_name varchar(50) DEFAULT NULL, grade_point varchar(20) DEFAULT NULL, grade_point_to varchar(20) DEFAULT NULL, percent_from int(3) DEFAULT NULL, percent_to int(3) DEFAULT NULL, grade_config longtext, PRIMARY KEY (gradebook_id) ) $wpdb->get_charset_collate();) cannot be parsed correct.
CREATE TABLE IF NOT EXISTS $wpdb (
				gradebook_result_id int(11) NOT NULL AUTO_INCREMENT,
				user_id int(11) DEFAULT NULL,
				course_id int(11) DEFAULT NULL,
				quiz_id int(11) DEFAULT NULL,
				assignment_id int(11) DEFAULT NULL,
				gradebook_id int(11) DEFAULT NULL,
				result_for varchar(50) DEFAULT NULL,
				grade_name varchar(50) DEFAULT NULL,
				grade_point varchar(20) DEFAULT NULL,
				earned_grade_point varchar(20) DEFAULT NULL,
				earned_percent int(3) DEFAULT NULL,
				generate_date datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
				update_date datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
				PRIMARY KEY (gradebook_result_id)
			) $wpdb->get_charset_collate();
SQL command (CREATE TABLE IF NOT EXISTS $wpdb ( gradebook_result_id int(11) NOT NULL AUTO_INCREMENT, user_id int(11) DEFAULT NULL, course_id int(11) DEFAULT NULL, quiz_id int(11) DEFAULT NULL, assignment_id int(11) DEFAULT NULL, gradebook_id int(11) DEFAULT NULL, result_for varchar(50) DEFAULT NULL, grade_name varchar(50) DEFAULT NULL, grade_point varchar(20) DEFAULT NULL, earned_grade_point varchar(20) DEFAULT NULL, earned_percent int(3) DEFAULT NULL, generate_date datetime NOT NULL DEFAULT '0000-00-00 00:00:00', update_date datetime NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (gradebook_result_id) ) $wpdb->get_charset_collate();) cannot be parsed correct.
SHOW TABLES LIKE '$wpdb';
SQL command (SHOW TABLES LIKE '$wpdb';) cannot be parsed correct.
CREATE TABLE IF NOT EXISTS $wpdb (
				id bigint(20) unsigned NOT NULL AUTO_INCREMENT,
				mail_to varchar(255) NOT NULL,
				subject text NOT NULL,
				message text NOT NULL,
				headers text NOT NULL,
				PRIMARY KEY (id)
			) $wpdb->get_charset_collate();
SQL command (CREATE TABLE IF NOT EXISTS $wpdb ( id bigint(20) unsigned NOT NULL AUTO_INCREMENT, mail_to varchar(255) NOT NULL, subject text NOT NULL, message text NOT NULL, headers text NOT NULL, PRIMARY KEY (id) ) $wpdb->get_charset_collate();) cannot be parsed correct.
SELECT user_nicename
				FROM 	$wpdb
				WHERE  	ID = $this->get_user_id($student_id);
				
SELECT user_nicename
				FROM 	$wpdb
				WHERE  	ID = $this->get_user_id($student_id);
				
SQL command (SELECT user_nicename FROM $wpdb WHERE ID = $this->get_user_id($student_id); ) cannot be parsed correct.
SELECT *
							FROM 	$wpdb
							WHERE 	user_nicename = sanitize_text_field($user_nicename);
							
SELECT *
							FROM 	$wpdb
							WHERE 	user_nicename = sanitize_text_field($user_nicename);
							
SQL command (SELECT * FROM $wpdb WHERE user_nicename = sanitize_text_field($user_nicename); ) cannot be parsed correct.
SELECT ID,
					post_author,
					post_title,
					post_name,
					post_status,
					menu_order
			FROM 	$wpdb
			WHERE 	post_status IN (implode(",", $post_status))
					AND ID NOT IN('implode("\',\'", $excludes)')
					AND post_type = tutor()_course_post_type;
			
SELECT ID,
					post_author,
					post_title,
					post_name,
					post_status,
					menu_order
			FROM 	$wpdb
			WHERE 	post_status IN (implode(",", $post_status))
					AND ID NOT IN('implode("\',\'", $excludes)')
					AND post_type = tutor()_course_post_type;
			
SQL command (SELECT ID, post_author, post_title, post_name, post_status, menu_order FROM $wpdb WHERE post_status IN (implode(",", $post_status)) AND ID NOT IN('implode("\',\'", $excludes)') AND post_type = tutor()_course_post_type; ) cannot be parsed correct.
SELECT $wpdb.*
			FROM 	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.user_id = $this->get_user_id($instructor_id)
						   AND $wpdb.meta_key = %s
						   AND $wpdb.meta_value = $wpdb.ID
			WHERE	1 = 1 AND $wpdb.post_status IN('implode("\',\'", $post_status)') 
					AND $wpdb.post_type = %s
			ORDER BY $wpdb.post_date DESC;
			
SELECT $wpdb.*
			FROM 	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.user_id = $this->get_user_id($instructor_id)
						   AND $wpdb.meta_key = _tutor_instructor_course_id
						   AND $wpdb.meta_value = $wpdb.ID
			WHERE	1 = 1 AND $wpdb.post_status IN('implode("\',\'", $post_status)') 
					AND $wpdb.post_type = %s
			ORDER BY $wpdb.post_date DESC;
			
SELECT $wpdb.*
			FROM 	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.user_id = $this->get_user_id($instructor_id)
						   AND $wpdb.meta_key = _tutor_instructor_course_id
						   AND $wpdb.meta_value = $wpdb.ID
			WHERE	1 = 1 AND $wpdb.post_status IN('implode("\',\'", $post_statustutor()_course_post_type) 
					AND $wpdb.post_type = %s
			ORDER BY $wpdb.post_date DESC;
			
SELECT $wpdb.*
			FROM 	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.user_id = $this->get_user_id($instructor_id)
						   AND $wpdb.meta_key = _tutor_instructor_course_id
						   AND $wpdb.meta_value = $wpdb.ID
			WHERE	1 = 1 AND $wpdb.post_status IN('implode("\',\'", $post_statustutor()_course_post_type) 
					AND $wpdb.post_type = %s
			ORDER BY $wpdb.post_date DESC;
			
SQL command (SELECT $wpdb.* FROM $wpdb INNER JOIN $wpdb ON $wpdb.user_id = $this->get_user_id($instructor_id) AND $wpdb.meta_key = _tutor_instructor_course_id AND $wpdb.meta_value = $wpdb.ID WHERE 1 = 1 AND $wpdb.post_status IN('implode("\',\'", $post_statustutor()_course_post_type) AND $wpdb.post_type = %s ORDER BY $wpdb.post_date DESC; ) cannot be parsed correct.
SELECT ID,
						post_author,
						post_date,
						post_date_gmt,
						post_title
				FROM 	$wpdb
				WHERE 	post_type = tutor_enrolled
						AND post_parent = %d
						AND post_author = %d
						AND post_status = %s;
				
SELECT ID,
						post_author,
						post_date,
						post_date_gmt,
						post_title
				FROM 	$wpdb
				WHERE 	post_type = tutor_enrolled
						AND post_parent = $this->get_post_id($course_id)
						AND post_author = %d
						AND post_status = %s;
				
SELECT ID,
						po$this->get_user_id($user_id)_author,
						post_date,
						post_date_gmt,
						post_title
				FROM 	$wpdb
				WHERE 	post_type = tutor_enrolled
						AND post_parent = $this->get_post_id($course_id)
						AND post_author = %d
						AND post_status = %s;
				
SELECT ID,
						po$this->get_user_id($user_id)_author,
						pcompletedt_date,
						post_date_gmt,
						post_title
				FROM 	$wpdb
				WHERE 	post_type = tutor_enrolled
						AND post_parent = $this->get_post_id($course_id)
						AND post_author = %d
						AND post_status = %s;
				
SELECT ID,
						po$this->get_user_id($user_id)_author,
						pcompletedt_date,
						post_date_gmt,
						post_title
				FROM 	$wpdb
				WHERE 	post_type = tutor_enrolled
						AND post_parent = $this->get_post_id($course_id)
						AND post_author = %d
						AND post_status = %s;
				
SQL command (SELECT ID, po$this->get_user_id($user_id)_author, pcompletedt_date, post_date_gmt, post_title FROM $wpdb WHERE post_type = tutor_enrolled AND post_parent = $this->get_post_id($course_id) AND post_author = %d AND post_status = %s; ) cannot be parsed correct.
SELECT ID,
						post_author,
						post_date,
						post_date_gmt,
						post_title
				FROM 	$wpdb
				WHERE 	post_type = tutor_enrolled
						AND post_parent = %d
						AND post_author = %d;
				
SELECT ID,
						post_author,
						post_date,
						post_date_gmt,
						post_title
				FROM 	$wpdb
				WHERE 	post_type = tutor_enrolled
						AND post_parent = $this->get_post_id($course_id)
						AND post_author = %d;
				
SELECT ID,
						po$this->get_user_id($user_id)_author,
						post_date,
						post_date_gmt,
						post_title
				FROM 	$wpdb
				WHERE 	post_type = tutor_enrolled
						AND post_parent = $this->get_post_id($course_id)
						AND post_author = %d;
				
SELECT ID,
						po$this->get_user_id($user_id)_author,
						post_date,
						post_date_gmt,
						post_title
				FROM 	$wpdb
				WHERE 	post_type = tutor_enrolled
						AND post_parent = $this->get_post_id($course_id)
						AND post_author = %d;
				
SQL command (SELECT ID, po$this->get_user_id($user_id)_author, post_date, post_date_gmt, post_title FROM $wpdb WHERE post_type = tutor_enrolled AND post_parent = $this->get_post_id($course_id) AND post_author = %d; ) cannot be parsed correct.
SELECT items.ID
			FROM 	$wpdb topic
					INNER JOIN $wpdb items
							ON topic.ID = items.post_parent
			WHERE 	topic.post_parent = $this->get_post_id($course_id)
					AND items.post_status = %s
					 AND items.post_type='{"path": "plugin_dir_path(TUTOR_FILE)", "url": "plugin_dir_url(TUTOR_FILE)", "current_url": "get_home_url()", "basename": "plugin_basename(TUTOR_FILE)", "basepath": "rtrim($base_path, \"/\")", "version": "TUTOR_VERSION", "nonce_action": "tutor_nonce_action", "nonce": "_tutor_nonce", "course_post_type": "apply_filters(\"tutor_course_post_type\", \"courses\")", "lesson_post_type": "apply_filters(\"tutor_lesson_post_type\", \"lesson\")", "instructor_role": "apply_filters(\"tutor_instructor_role\", \"tutor_instructor\")", "instructor_role_name": "apply_filters(\"tutor_instructor_role_name\", __(\"Tutor Instructor\", \"tutor\"))", "template_path": "apply_filters(\"tutor_template_path\", \"tutor/\")", "has_pro": "apply_filters(\"tutor_has_pro\", $hasPro)"}' 
			ORDER BY topic.menu_order ASC,
					items.menu_order ASC;
			
SELECT items.ID
			FROM 	$wpdb topic
					INNER JOIN $wpdb items
							ON topic.ID = items.post_parent
			WHERE 	topic.post_parent = $this->get_post_id($course_id)
					AND items.post_status = publish
					 AND items.post_type='{"path": "plugin_dir_path(TUTOR_FILE)", "url": "plugin_dir_url(TUTOR_FILE)", "current_url": "get_home_url()", "basename": "plugin_basename(TUTOR_FILE)", "basepath": "rtrim($base_path, \"/\")", "version": "TUTOR_VERSION", "nonce_action": "tutor_nonce_action", "nonce": "_tutor_nonce", "course_post_type": "apply_filters(\"tutor_course_post_type\", \"courses\")", "lesson_post_type": "apply_filters(\"tutor_lesson_post_type\", \"lesson\")", "instructor_role": "apply_filters(\"tutor_instructor_role\", \"tutor_instructor\")", "instructor_role_name": "apply_filters(\"tutor_instructor_role_name\", __(\"Tutor Instructor\", \"tutor\"))", "template_path": "apply_filters(\"tutor_template_path\", \"tutor/\")", "has_pro": "apply_filters(\"tutor_has_pro\", $hasPro)"}' 
			ORDER BY topic.menu_order ASC,
					items.menu_order ASC;
			
SELECT items.ID
			FROM 	$wpdb topic
					INNER JOIN $wpdb items
							ON topic.ID = items.post_parent
			WHERE 	topic.post_parent = $this->get_post_id($course_id)
					AND items.post_status = publish
					 AND items.post_type='{"path": "plugin_dir_path(TUTOR_FILE)", "url": "plugin_dir_url(TUTOR_FILE)", "current_url": "get_home_url()", "basename": "plugin_basename(TUTOR_FILE)", "basepath": "rtrim($base_path, \"/\")", "version": "TUTOR_VERSION", "nonce_action": "tutor_nonce_action", "nonce": "_tutor_nonce", "course_post_type": "apply_filters(\"tutor_course_post_type\", \"courses\")", "lesson_post_type": "apply_filters(\"tutor_lesson_post_type\", \"lesson\")", "instructor_role": "apply_filters(\"tutor_instructor_role\", \"tutor_instructor\")", "instructor_role_name": "apply_filters(\"tutor_instructor_role_name\", __(\"Tutor Instructor\", \"tutor\"))", "template_path": "apply_filters(\"tutor_template_path\", \"tutor/\")", "has_pro": "apply_filters(\"tutor_has_pro\", $hasPro)"}' 
			ORDER BY topic.menu_order ASC,
					items.menu_order ASC;
			
SQL command (SELECT items.ID FROM $wpdb topic INNER JOIN $wpdb items ON topic.ID = items.post_parent WHERE topic.post_parent = $this->get_post_id($course_id) AND items.post_status = publish AND items.post_type='{"path": "plugin_dir_path(TUTOR_FILE)", "url": "plugin_dir_url(TUTOR_FILE)", "current_url": "get_home_url()", "basename": "plugin_basename(TUTOR_FILE)", "basepath": "rtrim($base_path, \"/\")", "version": "TUTOR_VERSION", "nonce_action": "tutor_nonce_action", "nonce": "_tutor_nonce", "course_post_type": "apply_filters(\"tutor_course_post_type\", \"courses\")", "lesson_post_type": "apply_filters(\"tutor_lesson_post_type\", \"lesson\")", "instructor_role": "apply_filters(\"tutor_instructor_role\", \"tutor_instructor\")", "instructor_role_name": "apply_filters(\"tutor_instructor_role_name\", __(\"Tutor Instructor\", \"tutor\"))", "template_path": "apply_filters(\"tutor_template_path\", \"tutor/\")", "has_pro": "apply_filters(\"tutor_has_pro\", $hasPro)"}' ORDER BY topic.menu_order ASC, items.menu_order ASC; ) cannot be parsed correct.
SELECT comment_ID,
					comment_post_ID AS course_id,
					comment_author AS completed_user_id,
					comment_date AS completion_date,
					comment_content AS completed_hash
			FROM	$wpdb
			WHERE 	comment_agent = TutorLMSPlugin
					AND comment_type = %s
					AND comment_post_ID = %d
					AND user_id = %d;
			
SELECT comment_ID,
					comment_post_ID AS course_id,
					comment_author AS completed_user_id,
					comment_date AS completion_date,
					comment_content AS completed_hash
			FROM	$wpdb
			WHERE 	comment_agent = TutorLMSPlugin
					AND comment_type = course_completed
					AND comment_post_ID = %d
					AND user_id = %d;
			
SELECT commen$this->get_post_id($course_id)ID,
					comment_post_ID AS course_id,
					comment_author AS completed_user_id,
					comment_date AS completion_date,
					comment_content AS completed_hash
			FROM	$wpdb
			WHERE 	comment_agent = TutorLMSPlugin
					AND comment_type = course_completed
					AND comment_post_ID = %d
					AND user_id = %d;
			
SELECT commen$this->get_post_id($course_id)ID,
					comment_post_I$this->get_user_id($user_id)AS course_id,
					comment_author AS completed_user_id,
					comment_date AS completion_date,
					comment_content AS completed_hash
			FROM	$wpdb
			WHERE 	comment_agent = TutorLMSPlugin
					AND comment_type = course_completed
					AND comment_post_ID = %d
					AND user_id = %d;
			
SELECT commen$this->get_post_id($course_id)ID,
					comment_post_I$this->get_user_id($user_id)AS course_id,
					comment_author AS completed_user_id,
					comment_date AS completion_date,
					comment_content AS completed_hash
			FROM	$wpdb
			WHERE 	comment_agent = TutorLMSPlugin
					AND comment_type = course_completed
					AND comment_post_ID = %d
					AND user_id = %d;
			
SQL command (SELECT commen$this->get_post_id($course_id)ID, comment_post_I$this->get_user_id($user_id)AS course_id, comment_author AS completed_user_id, comment_date AS completion_date, comment_content AS completed_hash FROM $wpdb WHERE comment_agent = TutorLMSPlugin AND comment_type = course_completed AND comment_post_ID = %d AND user_id = %d; ) cannot be parsed correct.
SELECT SQL_CALC_FOUND_ROWS $wpdb.*
			FROM 	$wpdb
					INNER JOIN $wpdb
							ON ( $wpdb.ID = $wpdb.user_id )
			WHERE 	$wpdb.meta_key = _is_tutor_student
					AND ( $wpdb.display_name LIKE %s OR $wpdb.user_email LIKE %s )
			ORDER BY $wpdb.meta_value DESC
			LIMIT 	20, 20;
			
SELECT SQL_CALC_FOUND_ROWS $wpdb.*
			FROM 	$wpdb
					INNER JOIN $wpdb
							ON ( $wpdb.ID = $wpdb.user_id )
			WHERE 	$wpdb.meta_key = _is_tutor_student
					AND ( $wpdb.display_name LIKE %$wpdb->esc_like($search_term)% OR $wpdb.user_email LIKE %s )
			ORDER BY $wpdb.meta_value DESC
			LIMIT 	20, 20;
			
SELECT SQL_CALC_FOUND_ROWS $wpdb.*
			FROM 	$wpdb
					INNER JOIN $wpdb
							ON ( $wpdb.ID = $wpdb.u%$wpdb->esc_like($search_term)%r_id )
			WHERE 	$wpdb.meta_key = _is_tutor_student
					AND ( $wpdb.display_name LIKE %$wpdb->esc_like($search_term)% OR $wpdb.user_email LIKE %s )
			ORDER BY $wpdb.meta_value DESC
			LIMIT 	20, 20;
			
SELECT SQL_CALC_FOUND_ROWS $wpdb.*
			FROM 	$wpdb
					INNER JOIN $wpdb
							ON ( $wpdb.ID = $wpdb.u%$wpdb->esc_like($search_term)%r_id )
			WHERE 	$wpdb.meta_key = _is_tutor_student
					AND ( $wpdb.display_name LIKE %$wpdb->esc_like($search_term)% OR $wpdb.user_email LIKE %s )
			ORDER BY $wpdb.meta_value DESC
			LIMIT 	20, 20;
			
SQL command (SELECT SQL_CALC_FOUND_ROWS $wpdb.* FROM $wpdb INNER JOIN $wpdb ON ( $wpdb.ID = $wpdb.u%$wpdb->esc_like($search_term)%r_id ) WHERE $wpdb.meta_key = _is_tutor_student AND ( $wpdb.display_name LIKE %$wpdb->esc_like($search_term)% OR $wpdb.user_email LIKE %s ) ORDER BY $wpdb.meta_value DESC LIMIT 20, 20; ) cannot be parsed correct.
SELECT comment_post_ID AS course_id
			FROM 	$wpdb
			WHERE 	comment_agent = TutorLMSPlugin
					AND comment_type = %s
					AND user_id = %d
			
SELECT comment_post_ID AS course_id
			FROM 	$wpdb
			WHERE 	comment_agent = TutorLMSPlugin
					AND comment_type = course_completed
					AND user_id = %d
			
SELECT comment_post_I$this->get_user_id($user_id)AS course_id
			FROM 	$wpdb
			WHERE 	comment_agent = TutorLMSPlugin
					AND comment_type = course_completed
					AND user_id = %d
			
SELECT comment_post_I$this->get_user_id($user_id)AS course_id
			FROM 	$wpdb
			WHERE 	comment_agent = TutorLMSPlugin
					AND comment_type = course_completed
					AND user_id = %d
			
SQL command (SELECT comment_post_I$this->get_user_id($user_id)AS course_id FROM $wpdb WHERE comment_agent = TutorLMSPlugin AND comment_type = course_completed AND user_id = %d ) cannot be parsed correct.
SELECT DISTINCT post_parent
			FROM 	$wpdb
			WHERE 	post_type = tutor_enrolled
					AND post_status = %s
					AND post_author = %d;
			
SELECT DISTINCT post_parent
			FROM 	$wpdb
			WHERE 	post_type = tutor_enrolled
					AND post_status = completed
					AND post_author = %d;
			
SELECT DISTINCT po$this->get_user_id($user_id)_parent
			FROM 	$wpdb
			WHERE 	post_type = tutor_enrolled
					AND post_status = completed
					AND post_author = %d;
			
SELECT DISTINCT po$this->get_user_id($user_id)_parent
			FROM 	$wpdb
			WHERE 	post_type = tutor_enrolled
					AND post_status = completed
					AND post_author = %d;
			
SQL command (SELECT DISTINCT po$this->get_user_id($user_id)_parent FROM $wpdb WHERE post_type = tutor_enrolled AND post_status = completed AND post_author = %d; ) cannot be parsed correct.
SELECT *
			FROM 	$wpdb
			WHERE	post_id = $order_id
					AND meta_key LIKE '_tutor_order_for_course_id_%'
			
None
SELECT ID,
					post_title
			FROM 	$wpdb
			WHERE 	post_status = publish
					AND post_type = %s;
			
SELECT ID,
					post_title
			FROM 	$wpdb
			WHERE 	post_status = publish
					AND post_type = product;
			
SELECT ID,
					post_title
			FROM 	$wpdb
			WHERE 	post_status = publish
					AND post_type = product;
			
SQL command (SELECT ID, post_title FROM $wpdb WHERE post_status = publish AND post_type = product; ) cannot be parsed correct.
SELECT ID,
					post_title
			FROM 	$wpdb
			WHERE 	post_status = publish
					AND post_type = %s;
			
SELECT ID,
					post_title
			FROM 	$wpdb
			WHERE 	post_status = publish
					AND post_type = download;
			
SELECT ID,
					post_title
			FROM 	$wpdb
			WHERE 	post_status = publish
					AND post_type = download;
			
SQL command (SELECT ID, post_title FROM $wpdb WHERE post_status = publish AND post_type = download; ) cannot be parsed correct.
SELECT *
			FROM 	$wpdb
			WHERE	meta_key = _tutor_course_product_id
					AND meta_value = %d
			limit 1
			
SELECT *
			FROM 	$wpdb
			WHERE	meta_key = _tutor_course_product_id
					AND meta_value = $item->get_product_id()
			limit 1
			
SELECT *
			FROM 	$wpdb
			WHERE	meta_key = _tutor_course_product_id
					AND meta_value = $item->get_product_id()
			limit 1
			
SQL command (SELECT * FROM $wpdb WHERE meta_key = _tutor_course_product_id AND meta_value = $item->get_product_id() limit 1 ) cannot be parsed correct.
SELECT DISTINCT user.*, user_meta.meta_value AS instructor_from_date
			FROM 	$wpdb user
					INNER JOIN $wpdb user_meta
							ON ( user.ID = user_meta.user_id )
					INNER JOIN $wpdb inst_status
							ON ( user.ID = inst_status.user_id )
					INNER JOIN $wpdb course
					ON course.post_author = user.ID
			INNER JOIN $wpdbterm_relationships term_rel
					ON term_rel.object_id = course.ID
			INNER JOIN $wpdbterm_taxonomy taxonomy
					ON taxonomy.term_taxonomy_id=term_rel.term_taxonomy_id
			INNER JOIN $wpdbterms term
					ON term.term_id=taxonomy.term_id
			WHERE 	user_meta.meta_key = _is_tutor_instructor
					AND ( user.display_name LIKE %s OR user.user_email LIKE %s )
					null
					
					$course_filter
					tutor_get_formated_date("Y-m-d", $date_filter)
			ORDER BY user_meta.meta_value $order_filter
			LIMIT 	%d, %d;
			
SELECT DISTINCT user.*, user_meta.meta_value AS instructor_from_date
			FROM 	$wpdb user
					INNER JOIN $wpdb user_meta
							ON ( user.ID = user_meta.user_id )
					INNER JOIN $wpdb inst_status
							ON ( user.ID = inst_status.user_id )
					INNER JOIN $wpdb course
					ON course.post_author = user.ID
			INNER JOIN $wpdbterm_relationships term_rel
					ON term_rel.object_id = course.ID
			INNER JOIN $wpdbterm_taxonomy taxonomy
					ON taxonomy.term_taxonomy_id=term_rel.term_taxonomy_id
			INNER JOIN $wpdbterms term
					ON term.term_id=taxonomy.term_id
			WHERE 	user_meta.meta_key = _is_tutor_instructor
					AND ( user.display_name LIKE %$wpdb->esc_like($search_filter)% OR user.user_email LIKE %s )
					null
					
					$course_filter
					tutor_get_formated_date("Y-m-d", $date_filter)
			ORDER BY user_meta.meta_value $order_filter
			LIMIT 	%d, %d;
			
SELECT DISTINCT use%$wpdb->esc_like($search_filter)%*, user_meta.meta_value AS instructor_from_date
			FROM 	$wpdb user
					INNER JOIN $wpdb user_meta
							ON ( user.ID = user_meta.user_id )
					INNER JOIN $wpdb inst_status
							ON ( user.ID = inst_status.user_id )
					INNER JOIN $wpdb course
					ON course.post_author = user.ID
			INNER JOIN $wpdbterm_relationships term_rel
					ON term_rel.object_id = course.ID
			INNER JOIN $wpdbterm_taxonomy taxonomy
					ON taxonomy.term_taxonomy_id=term_rel.term_taxonomy_id
			INNER JOIN $wpdbterms term
					ON term.term_id=taxonomy.term_id
			WHERE 	user_meta.meta_key = _is_tutor_instructor
					AND ( user.display_name LIKE %$wpdb->esc_like($search_filter)% OR user.user_email LIKE %s )
					null
					
					$course_filter
					tutor_get_formated_date("Y-m-d", $date_filter)
			ORDER BY user_meta.meta_value $order_filter
			LIMIT 	%d, %d;
			
SELECT DISTINCT use%$wpdb->esc_like($search_filter)%*, user_meta.meta_value AS instructor_from_date
			FROM 	$wpdb user
					INNER JOIN $wpdb user_meta
							ON ( user.ID = user_meta.user_id )
					INNER JOIN $wpdb inst_status
							ON ( user.ID = inst_status.user_id )
					INNER JOIN $wpdb course
					ON course.post_author = user.ID
			INNER JOIN $wpdbterm_relationships term_rel
					ON term_rel.object_id = course.ID
			INNER JOIN $wpdbterm_taxonomy taxonomy
					ON taxonomy.term_taxonomy_id=term_rel.term_taxonomy_id
			INNER JOIN $wpdbterms term
					ON term.term_id=taxonomy.term_id
			WHERE 	user_meta.meta_key = _is_tutor_instructor
					AND ( user.display_name LIKE %$wpdb->esc_like($search_filter)% OR user.user_email LIKE %s )
					null
					
					$course_filter
					tutor_get_formated_date("Y-m-d", $date_filter)
			ORDER$this->get_pagenum()Y user_meta.meta_value $order_filter
			LIMIT 	%d, %d;
			
SELECT DISTINCT use%$wpdb->esc_like($search_filter)%*, user_meta.meta_value AS instructor_from_date20		FROM 	$wpdb user
					INNER JOIN $wpdb user_meta
							ON ( user.ID = user_meta.user_id )
					INNER JOIN $wpdb inst_status
							ON ( user.ID = inst_status.user_id )
					INNER JOIN $wpdb course
					ON course.post_author = user.ID
			INNER JOIN $wpdbterm_relationships term_rel
					ON term_rel.object_id = course.ID
			INNER JOIN $wpdbterm_taxonomy taxonomy
					ON taxonomy.term_taxonomy_id=term_rel.term_taxonomy_id
			INNER JOIN $wpdbterms term
					ON term.term_id=taxonomy.term_id
			WHERE 	user_meta.meta_key = _is_tutor_instructor
					AND ( user.display_name LIKE %$wpdb->esc_like($search_filter)% OR user.user_email LIKE %s )
					null
					
					$course_filter
					tutor_get_formated_date("Y-m-d", $date_filter)
			ORDER$this->get_pagenum()Y user_meta.meta_value $order_filter
			LIMIT 	%d, %d;
			
SELECT DISTINCT use%$wpdb->esc_like($search_filter)%*, user_meta.meta_value AS instructor_from_date20		FROM 	$wpdb user
					INNER JOIN $wpdb user_meta
							ON ( user.ID = user_meta.user_id )
					INNER JOIN $wpdb inst_status
							ON ( user.ID = inst_status.user_id )
					INNER JOIN $wpdb course
					ON course.post_author = user.ID
			INNER JOIN $wpdbterm_relationships term_rel
					ON term_rel.object_id = course.ID
			INNER JOIN $wpdbterm_taxonomy taxonomy
					ON taxonomy.term_taxonomy_id=term_rel.term_taxonomy_id
			INNER JOIN $wpdbterms term
					ON term.term_id=taxonomy.term_id
			WHERE 	user_meta.meta_key = _is_tutor_instructor
					AND ( user.display_name LIKE %$wpdb->esc_like($search_filter)% OR user.user_email LIKE %s )
					null
					
					$course_filter
					tutor_get_formated_date("Y-m-d", $date_filter)
			ORDER$this->get_pagenum()Y user_meta.meta_value $order_filter
			LIMIT 	%d, %d;
			
SQL command (SELECT DISTINCT use%$wpdb->esc_like($search_filter)%*, user_meta.meta_value AS instructor_from_date20 FROM $wpdb user INNER JOIN $wpdb user_meta ON ( user.ID = user_meta.user_id ) INNER JOIN $wpdb inst_status ON ( user.ID = inst_status.user_id ) INNER JOIN $wpdb course ON course.post_author = user.ID INNER JOIN $wpdbterm_relationships term_rel ON term_rel.object_id = course.ID INNER JOIN $wpdbterm_taxonomy taxonomy ON taxonomy.term_taxonomy_id=term_rel.term_taxonomy_id INNER JOIN $wpdbterms term ON term.term_id=taxonomy.term_id WHERE user_meta.meta_key = _is_tutor_instructor AND ( user.display_name LIKE %$wpdb->esc_like($search_filter)% OR user.user_email LIKE %s ) null $course_filter tutor_get_formated_date("Y-m-d", $date_filter) ORDER$this->get_pagenum()Y user_meta.meta_value $order_filter LIMIT %d, %d; ) cannot be parsed correct.
SELECT ID,
					display_name,
					get_course.meta_value AS taught_course_id,
					tutor_job_title.meta_value AS tutor_profile_job_title,
					tutor_bio.meta_value AS tutor_profile_bio,
					tutor_photo.meta_value AS tutor_profile_photo
			FROM	$wpdb
					INNER JOIN $wpdb get_course
							ON ID = get_course.user_id
						   AND get_course.meta_key = _tutor_instructor_course_id
						   AND get_course.meta_value = %d
					LEFT  JOIN $wpdb tutor_job_title
						    ON ID = tutor_job_title.user_id
						   AND tutor_job_title.meta_key = %s
					LEFT  JOIN $wpdb tutor_bio
						    ON ID = tutor_bio.user_id
						   AND tutor_bio.meta_key = %s
					LEFT  JOIN $wpdb tutor_photo
						    ON ID = tutor_photo.user_id
						   AND tutor_photo.meta_key = %s
			
SELECT ID,
					display_name,
					get_course.meta_value AS taught_course_id,
					tutor_job_title.meta_value AS tutor_profile_job_title,
					tutor_bio.meta_value AS tutor_profile_bio,
					tutor_photo.meta_value AS tutor_profile_photo
			FROM	$wpdb
					INNER JOIN $wpdb get_course
							ON ID = get_course.user_id
						   AND get_course.meta_key = _tutor_instructor_course_id
						   AND get_course.meta_value = $this->get_post_id($course_id)
					LEFT  JOIN $wpdb tutor_job_title
						    ON ID = tutor_job_title.user_id
						   AND tutor_job_title.meta_key = %s
					LEFT  JOIN $wpdb tutor_bio
						    ON ID = tutor_bio.user_id
						   AND tutor_bio.meta_key = %s
					LEFT  JOIN $wpdb tutor_photo
						    ON ID = tutor_photo.user_id
						   AND tutor_photo.meta_key = %s
			
SELECT ID,
					display_name,
					get_course.meta_value AS taught_course_id,
					tu_tutor_profile_job_titler_job_title.meta_value AS tutor_profile_job_title,
					tutor_bio.meta_value AS tutor_profile_bio,
					tutor_photo.meta_value AS tutor_profile_photo
			FROM	$wpdb
					INNER JOIN $wpdb get_course
							ON ID = get_course.user_id
						   AND get_course.meta_key = _tutor_instructor_course_id
						   AND get_course.meta_value = $this->get_post_id($course_id)
					LEFT  JOIN $wpdb tutor_job_title
						    ON ID = tutor_job_title.user_id
						   AND tutor_job_title.meta_key = %s
					LEFT  JOIN $wpdb tutor_bio
						    ON ID = tutor_bio.user_id
						   AND tutor_bio.meta_key = %s
					LEFT  JOIN $wpdb tutor_photo
						    ON ID = tutor_photo.user_id
						   AND tutor_photo.meta_key = %s
			
SELECT ID,
					display_name,
					get_course.meta_value AS_tutor_profile_bioaught_course_id,
					tu_tutor_profile_job_titler_job_title.meta_value AS tutor_profile_job_title,
					tutor_bio.meta_value AS tutor_profile_bio,
					tutor_photo.meta_value AS tutor_profile_photo
			FROM	$wpdb
					INNER JOIN $wpdb get_course
							ON ID = get_course.user_id
						   AND get_course.meta_key = _tutor_instructor_course_id
						   AND get_course.meta_value = $this->get_post_id($course_id)
					LEFT  JOIN $wpdb tutor_job_title
						    ON ID = tutor_job_title.user_id
						   AND tutor_job_title.meta_key = %s
					LEFT  JOIN $wpdb tutor_bio
						    ON ID = tutor_bio.user_id
						   AND tutor_bio.meta_key = %s
					LEFT  JOIN $wpdb tutor_photo
						    ON ID = tutor_photo.user_id
						   AND tutor_photo.meta_key = %s
			
SELECT ID,_tutor_profile_photo				display_name,
					get_course.meta_value AS_tutor_profile_bioaught_course_id,
					tu_tutor_profile_job_titler_job_title.meta_value AS tutor_profile_job_title,
					tutor_bio.meta_value AS tutor_profile_bio,
					tutor_photo.meta_value AS tutor_profile_photo
			FROM	$wpdb
					INNER JOIN $wpdb get_course
							ON ID = get_course.user_id
						   AND get_course.meta_key = _tutor_instructor_course_id
						   AND get_course.meta_value = $this->get_post_id($course_id)
					LEFT  JOIN $wpdb tutor_job_title
						    ON ID = tutor_job_title.user_id
						   AND tutor_job_title.meta_key = %s
					LEFT  JOIN $wpdb tutor_bio
						    ON ID = tutor_bio.user_id
						   AND tutor_bio.meta_key = %s
					LEFT  JOIN $wpdb tutor_photo
						    ON ID = tutor_photo.user_id
						   AND tutor_photo.meta_key = %s
			
SELECT ID,_tutor_profile_photo				display_name,
					get_course.meta_value AS_tutor_profile_bioaught_course_id,
					tu_tutor_profile_job_titler_job_title.meta_value AS tutor_profile_job_title,
					tutor_bio.meta_value AS tutor_profile_bio,
					tutor_photo.meta_value AS tutor_profile_photo
			FROM	$wpdb
					INNER JOIN $wpdb get_course
							ON ID = get_course.user_id
						   AND get_course.meta_key = _tutor_instructor_course_id
						   AND get_course.meta_value = $this->get_post_id($course_id)
					LEFT  JOIN $wpdb tutor_job_title
						    ON ID = tutor_job_title.user_id
						   AND tutor_job_title.meta_key = %s
					LEFT  JOIN $wpdb tutor_bio
						    ON ID = tutor_bio.user_id
						   AND tutor_bio.meta_key = %s
					LEFT  JOIN $wpdb tutor_photo
						    ON ID = tutor_photo.user_id
						   AND tutor_photo.meta_key = %s
			
SQL command (SELECT ID,_tutor_profile_photo display_name, get_course.meta_value AS_tutor_profile_bioaught_course_id, tu_tutor_profile_job_titler_job_title.meta_value AS tutor_profile_job_title, tutor_bio.meta_value AS tutor_profile_bio, tutor_photo.meta_value AS tutor_profile_photo FROM $wpdb INNER JOIN $wpdb get_course ON ID = get_course.user_id AND get_course.meta_key = _tutor_instructor_course_id AND get_course.meta_value = $this->get_post_id($course_id) LEFT JOIN $wpdb tutor_job_title ON ID = tutor_job_title.user_id AND tutor_job_title.meta_key = %s LEFT JOIN $wpdb tutor_bio ON ID = tutor_bio.user_id AND tutor_bio.meta_key = %s LEFT JOIN $wpdb tutor_photo ON ID = tutor_photo.user_id AND tutor_photo.meta_key = %s ) cannot be parsed correct.
SELECT COUNT(enrollment.post_author) AS course_taken, user.*, (SELECT post_date FROM $wpdb WHERE post_author = user.ID LIMIT 1) AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_type = %s
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					
					
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )

				GROUP BY enrollment.post_author
				ORDER BY enrollment.post_date sanitize_text_field($order)
				LIMIT %d, %d
			
SELECT COUNT(enrollment.post_author) AS course_taken, user.*, (SELECT post_date FROM $wpdb WHERE post_author = user.ID LIMIT 1) AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_type = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					
					
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )

				GROUP BY enrollment.post_author
				ORDER BY enrollment.post_date sanitize_text_field($order)
				LIMIT %d, %d
			
SELECT COUNT(enrollment.post_author) AS course_taken, user.*, (SELECT post_date FROM $wpdb WHERE post_author = user.ID LIMIT 1) AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					
					
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )

				GROUP BY enrollment.post_author
				ORDER BY enrollment.post_date sanitize_text_field($order)
				LIMIT %d, %d
			
SELECT COUNT(enrollment.post_author) AS ctutor_enrolledrse_taken, user.*, (SELECT post_date FROM $wpdb WHERE post_author = user.ID LIMIT 1) AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					
					
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )

				GROUP BY enrollment.post_author
				ORDER BY enrollment.post_date sanitize_text_field($order)
				LIMIT %d, %d
			
SELECT COUNT(completedrollment.post_author) AS ctutor_enrolledrse_taken, user.*, (SELECT post_date FROM $wpdb WHERE post_author = user.ID LIMIT 1) AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					
					
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )

				GROUP BY enrollment.post_author
				ORDER BY enrollment.post_date sanitize_text_field($order)
				LIMIT %d, %d
			
SELECT COUNT(completed%$wpdb->esc_like($search_filter)%llment.post_author) AS ctutor_enrolledrse_taken, user.*, (SELECT post_date FROM $wpdb WHERE post_author = user.ID LIMIT 1) AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					
					
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )

				GROUP BY enrollment.post_author
				ORDER BY enrollment.post_date sanitize_text_field($order)
				LIMIT %d, %d
			
SELECT COUNT(completed%$wpdb->esc_like($search_filter)%llment.post_author) AS ctutor_enrolledrse_taken, user.*, (SELECT post_date FROM $wpdb WHERE post_author = user.ID LIMIT 1) AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_status = %$wpdb->esc_like($search_filter)%
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					
					
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )

				GROUP BY enrollment.post_author
				ORDER BY enrollment.post_date sanitize_text_field($order)
				LIMIT %d, %d
			
SELECT COUNT(completed%$wpdb->esc_like($search_filter)%llment.post_author) AS ctutor_enrolledrse_taken, user.*, (SELECT post_date FROM $wpdb WHERE post_author = user.ID LIMIT 1) AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_statu%$wpdb->esc_like($search_filter)%= %$wpdb->esc_like($search_filter)%
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					
					
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )

				GROUP BY enrollment.post_author
				ORDER BY enrollment.post_date sanitize_text_field($order)
				LIMIT %d, %d
			
SELECT COUNT(completed%$wpdb->esc_like($search_filter)%llment.post_author) AS ctutor_enrolledrse_%$wpdb->esc_like($search_filter)%ken, user.*, (SELECT post_date FROM $wpdb WHERE post_author = user.ID LIMIT 1) AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_statu%$wpdb->esc_like($search_filter)%= %$wpdb->esc_like($search_filter)%
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					
					
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )

				GROUP BY enrollment.post_author
				ORDER BY enrollment.post_date sanitize_text_field($order)
				LIMIT %d, %d
			
SELECT COUNT(completed%$wpdb->esc_like($search_filter)%llment.post_author) AS ctutor_enrolledrse_%$wpdb->esc_like($search_filter)%ken, user.*, (SELECT post_date FROM $wpdb WHERE post_author = user.ID LIMIT 1) AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_statu%$wpdb->esc_like($search_filter)%= %$wpdb->esc_like($search_filter)%
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					
					
					AND ( user.display_name Lsanitize_text_field($offset)E %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )

				GROUP BY enrollment.post_author
				ORDER BY enrollment.post_date sanitize_text_field($order)
				LIMIT %d, %d
			
SELECT COUNT(completed%$wpdb->esc_like($search_filter)%llment.post_author) AS ctutor_enrolledrse_%$wpdb->esc_like($search_filter)%ken, user.*, (SELECT post_date FROM $wpdb WHERE post_author = user.ID LIMIT 1) AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_statu%$wpdb->esc_like($search_filter)%=sanitize_text_field($limit)$wpdb->esc_like($search_filter)%
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					
					
					AND ( user.display_name Lsanitize_text_field($offset)E %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )

				GROUP BY enrollment.post_author
				ORDER BY enrollment.post_date sanitize_text_field($order)
				LIMIT %d, %d
			
SELECT COUNT(completed%$wpdb->esc_like($search_filter)%llment.post_author) AS ctutor_enrolledrse_%$wpdb->esc_like($search_filter)%ken, user.*, (SELECT post_date FROM $wpdb WHERE post_author = user.ID LIMIT 1) AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_statu%$wpdb->esc_like($search_filter)%=sanitize_text_field($limit)$wpdb->esc_like($search_filter)%
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					
					
					AND ( user.display_name Lsanitize_text_field($offset)E %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )

				GROUP BY enrollment.post_author
				ORDER BY enrollment.post_date sanitize_text_field($order)
				LIMIT %d, %d
			
SQL command (SELECT COUNT(completed%$wpdb->esc_like($search_filter)%llment.post_author) AS ctutor_enrolledrse_%$wpdb->esc_like($search_filter)%ken, user.*, (SELECT post_date FROM $wpdb WHERE post_author = user.ID LIMIT 1) AS enroll_date FROM $wpdb enrollment INNER JOIN $wpdb AS course ON enrollment.post_parent=course.ID INNER JOIN $wpdb AS user ON user.ID = enrollment.post_author WHERE course.post_author = sanitize_text_field($instructor_id) AND course.post_typublish = tutor()_course_post_type AND course.post_statu%$wpdb->esc_like($search_filter)%=sanitize_text_field($limit)$wpdb->esc_like($search_filter)% AND enrollment.post_type = %s AND enrollment.post_status = %s AND ( user.display_name Lsanitize_text_field($offset)E %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s ) GROUP BY enrollment.post_author ORDER BY enrollment.post_date sanitize_text_field($order) LIMIT %d, %d ) cannot be parsed correct.
SELECT COUNT(enrollment.post_author) AS course_taken, user.*, enrollment.post_date AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_type = %s
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )
					
					 AND DATE(user.user_registered) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) 
				GROUP BY enrollment.post_author
				ORDER BY user.ID sanitize_text_field($order)

			
SELECT COUNT(enrollment.post_author) AS course_taken, user.*, enrollment.post_date AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_type = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )
					
					 AND DATE(user.user_registered) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) 
				GROUP BY enrollment.post_author
				ORDER BY user.ID sanitize_text_field($order)

			
SELECT COUNT(enrollment.post_author) AS course_taken, user.*, enrollment.post_date AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )
					
					 AND DATE(user.user_registered) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) 
				GROUP BY enrollment.post_author
				ORDER BY user.ID sanitize_text_field($order)

			
SELECT COUNT(enrollment.post_author) AS ctutor_enrolledrse_taken, user.*, enrollment.post_date AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )
					
					 AND DATE(user.user_registered) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) 
				GROUP BY enrollment.post_author
				ORDER BY user.ID sanitize_text_field($order)

			
SELECT COUNT(completedrollment.post_author) AS ctutor_enrolledrse_taken, user.*, enrollment.post_date AS enroll_date
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )
					
					 AND DATE(user.user_registered) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) 
				GROUP BY enrollment.post_author
				ORDER BY user.ID sanitize_text_field($order)

			
SELECT COUNT(completedrollment.post_author) AS ctutor_enrolledrse_taken, user.*, enrollment.post_date AS enroll_date%$wpdb->esc_like($search_filter)%			FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )
					
					 AND DATE(user.user_registered) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) 
				GROUP BY enrollment.post_author
				ORDER BY user.ID sanitize_text_field($order)

			
SELECT COUNT(completedrollment.po%$wpdb->esc_like($search_filter)%_author) AS ctutor_enrolledrse_taken, user.*, enrollment.post_date AS enroll_date%$wpdb->esc_like($search_filter)%			FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )
					
					 AND DATE(user.user_registered) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) 
				GROUP BY enrollment.post_author
				ORDER BY user.ID sanitize_text_field($order)

			
SELECT COUNT(completedrollmen%$wpdb->esc_like($search_filter)%po%$wpdb->esc_like($search_filter)%_author) AS ctutor_enrolledrse_taken, user.*, enrollment.post_date AS enroll_date%$wpdb->esc_like($search_filter)%			FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )
					
					 AND DATE(user.user_registered) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) 
				GROUP BY enrollment.post_author
				ORDER BY user.ID sanitize_text_field($order)

			
SELECT COUNT(completedrol%$wpdb->esc_like($search_filter)%en%$wpdb->esc_like($search_filter)%po%$wpdb->esc_like($search_filter)%_author) AS ctutor_enrolledrse_taken, user.*, enrollment.post_date AS enroll_date%$wpdb->esc_like($search_filter)%			FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )
					
					 AND DATE(user.user_registered) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) 
				GROUP BY enrollment.post_author
				ORDER BY user.ID sanitize_text_field($order)

			
SELECT COUNT(completedrol%$wpdb->esc_like($search_filter)%en%$wpdb->esc_like($search_filter)%po%$wpdb->esc_like($search_filter)%_author) AS ctutor_enrolledrse_taken, user.*, enrollment.post_date AS enroll_date%$wpdb->esc_like($search_filter)%			FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
					INNER  JOIN $wpdb AS user
							ON user.ID = enrollment.post_author
				WHERE 	course.post_author = sanitize_text_field($instructor_id)
					AND course.post_typublish = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s )
					
					 AND DATE(user.user_registered) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) 
				GROUP BY enrollment.post_author
				ORDER BY user.ID sanitize_text_field($order)

			
SQL command (SELECT COUNT(completedrol%$wpdb->esc_like($search_filter)%en%$wpdb->esc_like($search_filter)%po%$wpdb->esc_like($search_filter)%_author) AS ctutor_enrolledrse_taken, user.*, enrollment.post_date AS enroll_date%$wpdb->esc_like($search_filter)% FROM $wpdb enrollment INNER JOIN $wpdb AS course ON enrollment.post_parent=course.ID INNER JOIN $wpdb AS user ON user.ID = enrollment.post_author WHERE course.post_author = sanitize_text_field($instructor_id) AND course.post_typublish = tutor()_course_post_type AND course.post_status = %s AND enrollment.post_type = %s AND enrollment.post_status = %s AND ( user.display_name LIKE %s OR user.user_nicename LIKE %s OR user.user_email LIKE %s OR user.user_login LIKE %s ) AND DATE(user.user_registered) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) GROUP BY enrollment.post_author ORDER BY user.ID sanitize_text_field($order) ) cannot be parsed correct.
SELECT course.*
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
				WHERE 	course.post_author = $instructor_id
					AND course.post_type = %s
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND enrollment.post_author = %d
				ORDER BY course.post_date DESC
			
SELECT course.*
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.post_parent=course.ID
				WHERE 	course.post_author = $instructor_id
					AND course.post_type = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND enrollment.post_author = %d
				ORDER BY course.post_date DESC
			
SELECT course.*
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.popublish_parent=course.ID
				WHERE 	course.post_author = $instructor_id
					AND course.post_type = tutor()_course_post_type
					AND course.post_status = %s
					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND enrollment.post_author = %d
				ORDER BY course.post_date DESC
			
SELECT course.*
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.popublish_parent=course.ID
				WHERE 	course.post_author = $instructor_id
					AND course.post_type = tutor()_course_post_type
					AND course.post_status = %tutor_enrolled					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND enrollment.post_author = %d
				ORDER BY course.post_date DESC
			
SELECT course.*
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.popublish_parent=course.ID
				WHERE 	course.post_author completed$instructor_id
					AND course.post_type = tutor()_course_post_type
					AND course.post_status = %tutor_enrolled					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND enrollment.post_author = %d
				ORDER BY course.post_date DESC
			
SELECT course.*
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.$student_idpublish_parent=course.ID
				WHERE 	course.post_author completed$instructor_id
					AND course.post_type = tutor()_course_post_type
					AND course.post_status = %tutor_enrolled					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND enrollment.post_author = %d
				ORDER BY course.post_date DESC
			
SELECT course.*
				FROM 	$wpdb enrollment
					INNER  JOIN $wpdb AS course
							ON enrollment.$student_idpublish_parent=course.ID
				WHERE 	course.post_author completed$instructor_id
					AND course.post_type = tutor()_course_post_type
					AND course.post_status = %tutor_enrolled					AND enrollment.post_type = %s
					AND enrollment.post_status = %s
					AND enrollment.post_author = %d
				ORDER BY course.post_date DESC
			
SQL command (SELECT course.* FROM $wpdb enrollment INNER JOIN $wpdb AS course ON enrollment.$student_idpublish_parent=course.ID WHERE course.post_author completed$instructor_id AND course.post_type = tutor()_course_post_type AND course.post_status = %tutor_enrolled AND enrollment.post_type = %s AND enrollment.post_status = %s AND enrollment.post_author = %d ORDER BY course.post_date DESC ) cannot be parsed correct.
SELECT ID,
					display_name,
					tutor_job_title.meta_value AS tutor_profile_job_title,
					tutor_bio.meta_value AS tutor_profile_bio,
					tutor_photo.meta_value AS tutor_profile_photo
			FROM	$wpdb
					LEFT  JOIN $wpdb tutor_job_title
							ON ID = tutor_job_title.user_id
						   AND tutor_job_title.meta_key = '_tutor_profile_job_title'
					LEFT  JOIN $wpdb tutor_bio
							ON ID = tutor_bio.user_id
						   AND tutor_bio.meta_key = '_tutor_profile_bio'
					LEFT  JOIN $wpdb tutor_photo
							ON ID = tutor_photo.user_id
						   AND tutor_photo.meta_key = '_tutor_profile_photo'
			WHERE 	ID = tutor_utils()->get_qa_question($question_id)
			
SELECT ID,
					display_name,
					tutor_job_title.meta_value AS tutor_profile_job_title,
					tutor_bio.meta_value AS tutor_profile_bio,
					tutor_photo.meta_value AS tutor_profile_photo
			FROM	$wpdb
					LEFT  JOIN $wpdb tutor_job_title
							ON ID = tutor_job_title.user_id
						   AND tutor_job_title.meta_key = '_tutor_profile_job_title'
					LEFT  JOIN $wpdb tutor_bio
							ON ID = tutor_bio.user_id
						   AND tutor_bio.meta_key = '_tutor_profile_bio'
					LEFT  JOIN $wpdb tutor_photo
							ON ID = tutor_photo.user_id
						   AND tutor_photo.meta_key = '_tutor_profile_photo'
			WHERE 	ID = tutor_utils()->get_qa_question($question_id)
			
SQL command (SELECT ID, display_name, tutor_job_title.meta_value AS tutor_profile_job_title, tutor_bio.meta_value AS tutor_profile_bio, tutor_photo.meta_value AS tutor_profile_photo FROM $wpdb LEFT JOIN $wpdb tutor_job_title ON ID = tutor_job_title.user_id AND tutor_job_title.meta_key = '_tutor_profile_job_title' LEFT JOIN $wpdb tutor_bio ON ID = tutor_bio.user_id AND tutor_bio.meta_key = '_tutor_profile_bio' LEFT JOIN $wpdb tutor_photo ON ID = tutor_photo.user_id AND tutor_photo.meta_key = '_tutor_profile_photo' WHERE ID = tutor_utils()->get_qa_question($question_id) ) cannot be parsed correct.
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_author_email,
					$wpdb.comment_date,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value AS rating,
					$wpdb.display_name

			FROM 	$wpdb
					INNER JOIN $wpdb
					ON $wpdb.comment_ID = $wpdb.comment_id
					LEFT JOIN $wpdb
					ON $wpdb.user_id = $wpdb.ID
			WHERE 	$wpdb.comment_post_ID = $this->get_post_id($course_id)
					AND comment_type = 'tutor_course_rating' AND meta_key = 'tutor_rating'
			ORDER BY comment_ID DESC
			LIMIT 	%d, %d;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_author_email,
					$wpdb.comment_date,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value AS rating,
					$wpdb.display_name

			FROM 	$wpdb
					INNER JOIN $wpdb
					ON $wpdb.comment_ID = $wpdb.comment_id
					LEFT JOIN $wpdb
					ON $wpdb.user_id = $wpdb.ID
			WHERE 	$wpdb.comment_post_ID = $this->get_post_id($course_id)
					AND comment_type = 'tutor_course_rating' AND meta_key = 'tutor_rating'
			ORDER BY comment_ID DESC
			LIMIT 	$offset, %d;
			
SELECT $wpdb.comment$limitD,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_author_email,
					$wpdb.comment_date,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value AS rating,
					$wpdb.display_name

			FROM 	$wpdb
					INNER JOIN $wpdb
					ON $wpdb.comment_ID = $wpdb.comment_id
					LEFT JOIN $wpdb
					ON $wpdb.user_id = $wpdb.ID
			WHERE 	$wpdb.comment_post_ID = $this->get_post_id($course_id)
					AND comment_type = 'tutor_course_rating' AND meta_key = 'tutor_rating'
			ORDER BY comment_ID DESC
			LIMIT 	$offset, %d;
			
SELECT $wpdb.comment$limitD,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_author_email,
					$wpdb.comment_date,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value AS rating,
					$wpdb.display_name

			FROM 	$wpdb
					INNER JOIN $wpdb
					ON $wpdb.comment_ID = $wpdb.comment_id
					LEFT JOIN $wpdb
					ON $wpdb.user_id = $wpdb.ID
			WHERE 	$wpdb.comment_post_ID = $this->get_post_id($course_id)
					AND comment_type = 'tutor_course_rating' AND meta_key = 'tutor_rating'
			ORDER BY comment_ID DESC
			LIMIT 	$offset, %d;
			
SQL command (SELECT $wpdb.comment$limitD, $wpdb.comment_post_ID, $wpdb.comment_author, $wpdb.comment_author_email, $wpdb.comment_date, $wpdb.comment_content, $wpdb.user_id, $wpdb.meta_value AS rating, $wpdb.display_name FROM $wpdb INNER JOIN $wpdb ON $wpdb.comment_ID = $wpdb.comment_id LEFT JOIN $wpdb ON $wpdb.user_id = $wpdb.ID WHERE $wpdb.comment_post_ID = $this->get_post_id($course_id) AND comment_type = 'tutor_course_rating' AND meta_key = 'tutor_rating' ORDER BY comment_ID DESC LIMIT $offset, %d; ) cannot be parsed correct.
SELECT COUNT(meta_value) AS rating_count,
					SUM(meta_value) AS rating_sum
			FROM	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
			WHERE 	$wpdb.comment_post_ID = $this->get_post_id($course_id)
					AND $wpdb.comment_type = %s
					AND meta_key = %s;
			
SELECT COUNT(meta_value) AS rating_count,
					SUM(meta_value) AS rating_sum
			FROM	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
			WHERE 	$wpdb.comment_post_ID = $this->get_post_id($course_id)
					AND $wpdb.comment_type = tutor_course_rating
					AND meta_key = %s;
			
SELECT COUNT(meta_value) AS rating_count,
					SUM(meta_value) AS rating_sum
			FROM	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
			WHERE 	$wpdb.comment_post_ID = $this->get_post_id($course_id)
					AND $wpdb.comment_type = tutor_coursetutor_ratingating
					AND meta_key = %s;
			
SELECT COUNT(meta_value) AS rating_count,
					SUM(meta_value) AS rating_sum
			FROM	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
			WHERE 	$wpdb.comment_post_ID = $this->get_post_id($course_id)
					AND $wpdb.comment_type = tutor_coursetutor_ratingating
					AND meta_key = %s;
			
SQL command (SELECT COUNT(meta_value) AS rating_count, SUM(meta_value) AS rating_sum FROM $wpdb INNER JOIN $wpdb ON $wpdb.comment_ID = $wpdb.comment_id WHERE $wpdb.comment_post_ID = $this->get_post_id($course_id) AND $wpdb.comment_type = tutor_coursetutor_ratingating AND meta_key = %s; ) cannot be parsed correct.
SELECT commentmeta.meta_value AS rating,
						COUNT(commentmeta.meta_value) as rating_count
				FROM	$wpdb comments
						INNER JOIN $wpdb commentmeta
								ON comments.comment_ID = commentmeta.comment_id
				WHERE	comments.comment_post_ID = $this->get_post_id($course_id)
						AND comments.comment_type = %s
						AND commentmeta.meta_key = %s
				GROUP BY commentmeta.meta_value;
				
SELECT commentmeta.meta_value AS rating,
						COUNT(commentmeta.meta_value) as rating_count
				FROM	$wpdb comments
						INNER JOIN $wpdb commentmeta
								ON comments.comment_ID = commentmeta.comment_id
				WHERE	comments.comment_post_ID = $this->get_post_id($course_id)
						AND comments.comment_type = tutor_course_rating
						AND commentmeta.meta_key = %s
				GROUP BY commentmeta.meta_value;
				
SELECT commentmeta.meta_value AS rating,
						COUNT(commentmeta.meta_value) as rating_count
				FROM	$wpdb comments
						INNER JOIN $wpdb commentmeta
								ON comments.comment_ID = commentmeta.comment_id
				WHERE	comments.comment_post_ID = $this->get_post_id($course_id)
					tutor_ratingND comments.comment_type = tutor_course_rating
						AND commentmeta.meta_key = %s
				GROUP BY commentmeta.meta_value;
				
SELECT commentmeta.meta_value AS rating,
						COUNT(commentmeta.meta_value) as rating_count
				FROM	$wpdb comments
						INNER JOIN $wpdb commentmeta
								ON comments.comment_ID = commentmeta.comment_id
				WHERE	comments.comment_post_ID = $this->get_post_id($course_id)
					tutor_ratingND comments.comment_type = tutor_course_rating
						AND commentmeta.meta_key = %s
				GROUP BY commentmeta.meta_value;
				
SQL command (SELECT commentmeta.meta_value AS rating, COUNT(commentmeta.meta_value) as rating_count FROM $wpdb comments INNER JOIN $wpdb commentmeta ON comments.comment_ID = commentmeta.comment_id WHERE comments.comment_post_ID = $this->get_post_id($course_id) tutor_ratingND comments.comment_type = tutor_course_rating AND commentmeta.meta_key = %s GROUP BY commentmeta.meta_value; ) cannot be parsed correct.
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_author_email,
					$wpdb.comment_date,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as rating,
					$wpdb.display_name

			FROM 	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
					INNER  JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE 	$wpdb.user_id = $this->get_user_id($user_id)
					AND comment_type = %s
					AND meta_key = %s
			ORDER BY comment_ID DESC
			LIMIT %d, %d;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_author_email,
					$wpdb.comment_date,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as rating,
					$wpdb.display_name

			FROM 	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
					INNER  JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE 	$wpdb.user_id = $this->get_user_id($user_id)
					AND comment_type = tutor_course_rating
					AND meta_key = %s
			ORDER BY comment_ID DESC
			LIMIT %d, %d;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_author_email,
					$wpdb.comment_dtutor_ratinge,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as rating,
					$wpdb.display_name

			FROM 	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
					INNER  JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE 	$wpdb.user_id = $this->get_user_id($user_id)
					AND comment_type = tutor_course_rating
					AND meta_key = %s
			ORDER BY comment_ID DESC
			LIMIT %d, %d;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_author_email,
					$wpdb.comment_dtutor_ratinge,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as rating,
					$wpdb.display_name

			FROM 	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID$offset $wpdb.comment_id
					INNER  JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE 	$wpdb.user_id = $this->get_user_id($user_id)
					AND comment_type = tutor_course_rating
					AND meta_key = %s
			ORDER BY comment_ID DESC
			LIMIT %d, %d;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_author_email,
					$wpdb.comment_dtutor_ratinge,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.me$limit_value as rating,
					$wpdb.display_name

			FROM 	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID$offset $wpdb.comment_id
					INNER  JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE 	$wpdb.user_id = $this->get_user_id($user_id)
					AND comment_type = tutor_course_rating
					AND meta_key = %s
			ORDER BY comment_ID DESC
			LIMIT %d, %d;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_author_email,
					$wpdb.comment_dtutor_ratinge,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.me$limit_value as rating,
					$wpdb.display_name

			FROM 	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID$offset $wpdb.comment_id
					INNER  JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE 	$wpdb.user_id = $this->get_user_id($user_id)
					AND comment_type = tutor_course_rating
					AND meta_key = %s
			ORDER BY comment_ID DESC
			LIMIT %d, %d;
			
SQL command (SELECT $wpdb.comment_ID, $wpdb.comment_post_ID, $wpdb.comment_author, $wpdb.comment_author_email, $wpdb.comment_dtutor_ratinge, $wpdb.comment_content, $wpdb.user_id, $wpdb.me$limit_value as rating, $wpdb.display_name FROM $wpdb INNER JOIN $wpdb ON $wpdb.comment_ID$offset $wpdb.comment_id INNER JOIN $wpdb ON $wpdb.user_id = $wpdb.ID WHERE $wpdb.user_id = $this->get_user_id($user_id) AND comment_type = tutor_course_rating AND meta_key = %s ORDER BY comment_ID DESC LIMIT %d, %d; ) cannot be parsed correct.
SELECT $wpdb.comment_ID,
						$wpdb.comment_post_ID,
						$wpdb.comment_author,
						$wpdb.comment_author_email,
						$wpdb.comment_date,
						$wpdb.comment_content,
						$wpdb.user_id,
						$wpdb.meta_value AS rating,
						$wpdb.display_name,
						$wpdb.post_title as course_title

				FROM 	$wpdb
						INNER JOIN $wpdb
								ON $wpdb.comment_ID = $wpdb.comment_id
						INNER JOIN $wpdb
								ON $wpdb.user_id = $wpdb.ID
						INNER JOIN $wpdb
								ON $wpdb.ID = $wpdb.comment_post_ID
				WHERE 	$wpdb.comment_post_ID IN(implode(",", $cours_ids))
						AND comment_type = tutor_course_rating
						AND meta_key = %s
						
						 AND DATE($wpdb.comment_date) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) 
				ORDER BY comment_ID DESC
				LIMIT %d, %d;
				
SELECT $wpdb.comment_ID,
						$wpdb.comment_post_ID,
						$wpdb.comment_author,
						$wpdb.comment_author_email,
						$wpdb.comment_date,
						$wpdb.comment_content,
						$wpdb.user_id,
						$wpdb.meta_value AS rating,
						$wpdb.display_name,
						$wpdb.post_title as course_title

				FROM 	$wpdb
						INNER JOIN $wpdb
								ON $wpdb.comment_ID = $wpdb.comment_id
						INNER JOIN $wpdb
								ON $wpdb.user_id = $wpdb.ID
						INNER JOIN $wpdb
								ON $wpdb.ID = $wpdb.comment_post_ID
				WHERE 	$wpdb.comment_post_ID IN(implode(",", $cours_ids))
						AND comment_type = tutor_course_rating
						AND meta_key = tutor_rating
						
						 AND DATE($wpdb.comment_date) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) 
				ORDER BY comment_ID DESC
				LIMIT %d, %d;
				
SELECT $wpdb.comment_ID,
						$wpdb.comment_post_ID,
						$wpdb.comment_author,
						$wpdb.comment_author_email,
						$wpdb.comment_date,
						$wpdb.comment_content,
						$wpdb.user_id,
						$wpdb.meta_value AS rating,
						$wpdb.display_name,
						$wpdb.post_title as course_title

				FROM 	$wpdb
						INNER JOIN $wpdb
								ON $wpdb.comment_Isanitize_text_field($offset)= $wpdb.comment_id
						INNER JOIN $wpdb
								ON $wpdb.user_id = $wpdb.ID
						INNER JOIN $wpdb
								ON $wpdb.ID = $wpdb.comment_post_ID
				WHERE 	$wpdb.comment_post_ID IN(implode(",", $cours_ids))
						AND comment_type = tutor_course_rating
						AND meta_key = tutor_rating
						
						 AND DATE($wpdb.comment_date) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) 
				ORDER BY comment_ID DESC
				LIMIT %d, %d;
				
SELECT $wpdb.comsanitize_text_field($limit)nt_ID,
						$wpdb.comment_post_ID,
						$wpdb.comment_author,
						$wpdb.comment_author_email,
						$wpdb.comment_date,
						$wpdb.comment_content,
						$wpdb.user_id,
						$wpdb.meta_value AS rating,
						$wpdb.display_name,
						$wpdb.post_title as course_title

				FROM 	$wpdb
						INNER JOIN $wpdb
								ON $wpdb.comment_Isanitize_text_field($offset)= $wpdb.comment_id
						INNER JOIN $wpdb
								ON $wpdb.user_id = $wpdb.ID
						INNER JOIN $wpdb
								ON $wpdb.ID = $wpdb.comment_post_ID
				WHERE 	$wpdb.comment_post_ID IN(implode(",", $cours_ids))
						AND comment_type = tutor_course_rating
						AND meta_key = tutor_rating
						
						 AND DATE($wpdb.comment_date) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) 
				ORDER BY comment_ID DESC
				LIMIT %d, %d;
				
SELECT $wpdb.comsanitize_text_field($limit)nt_ID,
						$wpdb.comment_post_ID,
						$wpdb.comment_author,
						$wpdb.comment_author_email,
						$wpdb.comment_date,
						$wpdb.comment_content,
						$wpdb.user_id,
						$wpdb.meta_value AS rating,
						$wpdb.display_name,
						$wpdb.post_title as course_title

				FROM 	$wpdb
						INNER JOIN $wpdb
								ON $wpdb.comment_Isanitize_text_field($offset)= $wpdb.comment_id
						INNER JOIN $wpdb
								ON $wpdb.user_id = $wpdb.ID
						INNER JOIN $wpdb
								ON $wpdb.ID = $wpdb.comment_post_ID
				WHERE 	$wpdb.comment_post_ID IN(implode(",", $cours_ids))
						AND comment_type = tutor_course_rating
						AND meta_key = tutor_rating
						
						 AND DATE($wpdb.comment_date) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) 
				ORDER BY comment_ID DESC
				LIMIT %d, %d;
				
SQL command (SELECT $wpdb.comsanitize_text_field($limit)nt_ID, $wpdb.comment_post_ID, $wpdb.comment_author, $wpdb.comment_author_email, $wpdb.comment_date, $wpdb.comment_content, $wpdb.user_id, $wpdb.meta_value AS rating, $wpdb.display_name, $wpdb.post_title as course_title FROM $wpdb INNER JOIN $wpdb ON $wpdb.comment_Isanitize_text_field($offset)= $wpdb.comment_id INNER JOIN $wpdb ON $wpdb.user_id = $wpdb.ID INNER JOIN $wpdb ON $wpdb.ID = $wpdb.comment_post_ID WHERE $wpdb.comment_post_ID IN(implode(",", $cours_ids)) AND comment_type = tutor_course_rating AND meta_key = tutor_rating AND DATE($wpdb.comment_date) = CAST( 'tutor_get_formated_date("Y-m-d", $date_filter)' AS DATE ) ORDER BY comment_ID DESC LIMIT %d, %d; ) cannot be parsed correct.
SELECT COUNT(rating.meta_value) as rating_count, SUM(rating.meta_value) as rating_sum
			FROM 	$wpdb courses
					INNER JOIN $wpdb reviews
							ON courses.meta_value = reviews.comment_post_ID
						   AND reviews.comment_type = 'tutor_course_rating'
					INNER JOIN $wpdb rating
							ON reviews.comment_ID = rating.comment_id
						   AND rating.meta_key = 'tutor_rating'
			WHERE 	courses.user_id = tutor_utils()->get_user_by_login($user_name)_ID
					AND courses.meta_key = %s
			
SELECT COUNT(rating.meta_value) as rating_count, SUM(rating.meta_value) as rating_sum
			FROM 	$wpdb courses
					INNER JOIN $wpdb reviews
							ON courses.meta_value = reviews.comment_post_ID
						   AND reviews.comment_type = 'tutor_course_rating'
					INNER JOIN $wpdb rating
							ON reviews.comment_ID = rating.comment_id
						   AND rating.meta_key = 'tutor_rating'
			WHERE 	courses.user_id = tutor_utils()->get_user_by_login($user_name)_ID
					AND courses.meta_key = _tutor_instructor_course_id
			
SELECT COUNT(rating.meta_value) as rating_count, SUM(rating.meta_value) as rating_sum
			FROM 	$wpdb courses
					INNER JOIN $wpdb reviews
							ON courses.meta_value = reviews.comment_post_ID
						   AND reviews.comment_type = 'tutor_course_rating'
					INNER JOIN $wpdb rating
							ON reviews.comment_ID = rating.comment_id
						   AND rating.meta_key = 'tutor_rating'
			WHERE 	courses.user_id = tutor_utils()->get_user_by_login($user_name)_ID
					AND courses.meta_key = _tutor_instructor_course_id
			
SQL command (SELECT COUNT(rating.meta_value) as rating_count, SUM(rating.meta_value) as rating_sum FROM $wpdb courses INNER JOIN $wpdb reviews ON courses.meta_value = reviews.comment_post_ID AND reviews.comment_type = 'tutor_course_rating' INNER JOIN $wpdb rating ON reviews.comment_ID = rating.comment_id AND rating.meta_key = 'tutor_rating' WHERE courses.user_id = tutor_utils()->get_user_by_login($user_name)_ID AND courses.meta_key = _tutor_instructor_course_id ) cannot be parsed correct.
SELECT meta_value AS rating,
					comment_content AS review
			FROM	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
			WHERE	$wpdb.comment_post_ID = $this->get_post_id($course_id)
					AND user_id = %d
					AND meta_key = %s;
			
SELECT meta_value AS rating,
					comment_content AS review
			FROM	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
			WHERE	$wpdb.comment_post_ID = $this->get_post_id($course_id)
					AND user_id = $this->get_user_id($user_id)
					AND meta_key = %s;
			
SELECT meta_value AS rating,
					comment_content AS review
			FROM	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
			WHERE	$wpdb.comment_post_ID = $this->get_post_id($courtutor_rating_id)
					AND user_id = $this->get_user_id($user_id)
					AND meta_key = %s;
			
SELECT meta_value AS rating,
					comment_content AS review
			FROM	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
			WHERE	$wpdb.comment_post_ID = $this->get_post_id($courtutor_rating_id)
					AND user_id = $this->get_user_id($user_id)
					AND meta_key = %s;
			
SQL command (SELECT meta_value AS rating, comment_content AS review FROM $wpdb INNER JOIN $wpdb ON $wpdb.comment_ID = $wpdb.comment_id WHERE $wpdb.comment_post_ID = $this->get_post_id($courtutor_rating_id) AND user_id = $this->get_user_id($user_id) AND meta_key = %s; ) cannot be parsed correct.
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_date_gmt,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as question_title,
					$wpdb.display_name
			FROM  	$wpdb
						INNER JOIN $wpdb
								ON $wpdb.comment_ID = $wpdb.comment_id
						INNER JOIN $wpdb
								ON $wpdb.user_id = $wpdb.ID
			WHERE 	$wpdb.comment_post_ID = $this->get_post_id($course_id) $this->get_user_id($user_id)
					AND $wpdb.comment_type = tutor_q_and_a
					AND meta_key = %s
			ORDER BY comment_ID DESC
			LIMIT %d, %d;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_date_gmt,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as question_title,
					$wpdb.display_name
			FROM  	$wpdb
						INNER JOIN $wpdb
								ON $wpdb.comment_ID = $wpdb.comment_id
						INNER JOIN $wpdb
								ON $wpdb.user_id = $wpdb.ID
			WHERE 	$wpdb.comment_post_ID = $this->get_post_id($course_id) $this->get_user_id($user_id)
					AND $wpdb.comment_type = tutor_q_and_a
					AND meta_key = tutor_question_title
			ORDER BY comment_ID DESC
			LIMIT %d, %d;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_date_gmt,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as question_title,
					$wpdb.display_name
			FROM  	$wpdb
						INNER JOIN $wpdb
								ON $wpdb.comment_ID = $wpdb.comment_id
						INNER JOIN $wpdb
								ON $wpdb.user_id = $wpdb.ID
			WHERE 	$wpdb.comment_post_ID = $this->get_post_id($course_id) $this->get_user_id($user_id)
					AND $wpdb.comment_type = tutor_q_and_a
					AND meta_key = tutor_question_title
			ORDER BY comment_ID DES$offset			LIMIT %d, %d;
			
SELECT $wpdb.comme$limit_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_date_gmt,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as question_title,
					$wpdb.display_name
			FROM  	$wpdb
						INNER JOIN $wpdb
								ON $wpdb.comment_ID = $wpdb.comment_id
						INNER JOIN $wpdb
								ON $wpdb.user_id = $wpdb.ID
			WHERE 	$wpdb.comment_post_ID = $this->get_post_id($course_id) $this->get_user_id($user_id)
					AND $wpdb.comment_type = tutor_q_and_a
					AND meta_key = tutor_question_title
			ORDER BY comment_ID DES$offset			LIMIT %d, %d;
			
SELECT $wpdb.comme$limit_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_date_gmt,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as question_title,
					$wpdb.display_name
			FROM  	$wpdb
						INNER JOIN $wpdb
								ON $wpdb.comment_ID = $wpdb.comment_id
						INNER JOIN $wpdb
								ON $wpdb.user_id = $wpdb.ID
			WHERE 	$wpdb.comment_post_ID = $this->get_post_id($course_id) $this->get_user_id($user_id)
					AND $wpdb.comment_type = tutor_q_and_a
					AND meta_key = tutor_question_title
			ORDER BY comment_ID DES$offset			LIMIT %d, %d;
			
SQL command (SELECT $wpdb.comme$limit_ID, $wpdb.comment_post_ID, $wpdb.comment_author, $wpdb.comment_date, $wpdb.comment_date_gmt, $wpdb.comment_content, $wpdb.user_id, $wpdb.meta_value as question_title, $wpdb.display_name FROM $wpdb INNER JOIN $wpdb ON $wpdb.comment_ID = $wpdb.comment_id INNER JOIN $wpdb ON $wpdb.user_id = $wpdb.ID WHERE $wpdb.comment_post_ID = $this->get_post_id($course_id) $this->get_user_id($user_id) AND $wpdb.comment_type = tutor_q_and_a AND meta_key = tutor_question_title ORDER BY comment_ID DES$offset LIMIT %d, %d; ) cannot be parsed correct.
SELECT ID
				FROM 	$wpdb
				WHERE 	post_author = get_current_user_id()
						AND post_type = %s
						AND post_status = %s
				
SELECT ID
				FROM 	$wpdb
				WHERE 	post_author = get_current_user_id()
						AND post_type = tutor()_course_post_type
						AND post_status = %s
				
SELECT ID
				FROM 	$wpdb
				WHERE 	post_author = get_current_user_id()
					publishND post_type = tutor()_course_post_type
						AND post_status = %s
				
SELECT ID
				FROM 	$wpdb
				WHERE 	post_author = get_current_user_id()
					publishND post_type = tutor()_course_post_type
						AND post_status = %s
				
SQL command (SELECT ID FROM $wpdb WHERE post_author = get_current_user_id() publishND post_type = tutor()_course_post_type AND post_status = %s ) cannot be parsed correct.
SELECT meta_value
				FROM	$wpdb
				WHERE 	meta_key = _tutor_instructor_course_id
						AND user_id = %d
				
SELECT meta_value
				FROM	$wpdb
				WHERE 	meta_key = _tutor_instructor_course_id
						AND user_id = get_current_user_id()
				
SELECT meta_value
				FROM	$wpdb
				WHERE 	meta_key = _tutor_instructor_course_id
						AND user_id = get_current_user_id()
				
SQL command (SELECT meta_value FROM $wpdb WHERE meta_key = _tutor_instructor_course_id AND user_id = get_current_user_id() ) cannot be parsed correct.
SELECT ID
				FROM 	$wpdb
				WHERE 	post_author = get_current_user_id()
						AND post_type = %s
						AND post_status = %s
				
SELECT ID
				FROM 	$wpdb
				WHERE 	post_author = get_current_user_id()
						AND post_type = tutor()_course_post_type
						AND post_status = %s
				
SELECT ID
				FROM 	$wpdb
				WHERE 	post_author = get_current_user_id()
					publishND post_type = tutor()_course_post_type
						AND post_status = %s
				
SELECT ID
				FROM 	$wpdb
				WHERE 	post_author = get_current_user_id()
					publishND post_type = tutor()_course_post_type
						AND post_status = %s
				
SQL command (SELECT ID FROM $wpdb WHERE post_author = get_current_user_id() publishND post_type = tutor()_course_post_type AND post_status = %s ) cannot be parsed correct.
SELECT meta_value
				FROM	$wpdb
				WHERE 	meta_key = _tutor_instructor_course_id
						AND user_id = %d
				
SELECT meta_value
				FROM	$wpdb
				WHERE 	meta_key = _tutor_instructor_course_id
						AND user_id = get_current_user_id()
				
SELECT meta_value
				FROM	$wpdb
				WHERE 	meta_key = _tutor_instructor_course_id
						AND user_id = get_current_user_id()
				
SQL command (SELECT meta_value FROM $wpdb WHERE meta_key = _tutor_instructor_course_id AND user_id = get_current_user_id() ) cannot be parsed correct.
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as question_title,
					$wpdb.display_name,
					$wpdb.post_title,
					(	SELECT  COUNT(answers_t.comment_ID)
						FROM 	$wpdb answers_t
						WHERE 	answers_t.comment_parent = $wpdb.comment_ID
					) AS answer_count
			FROM 	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
					INNER JOIN $wpdb
							ON $wpdb.comment_post_ID = $wpdb.ID
					INNER JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE  	$wpdb.comment_type = tutor_q_and_a
					AND $wpdb.comment_parent = 0
					AND $wpdb.meta_value LIKE %s
					
			ORDER BY $wpdb.comment_ID DESC
			LIMIT %d, %d;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as question_title,
					$wpdb.display_name,
					$wpdb.post_title,
					(	SELECT  COUNT(answers_t.comment_ID)
						FROM 	$wpdb answers_t
						WHERE 	answers_t.comment_parent = $wpdb.comment_ID
					) AS answer_count
			FROM 	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
					INNER JOIN $wpdb
							ON $wpdb.comment_post_ID = $wpdb.ID
					INNER JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE  	$wpdb.comment_type = tutor_q_and_a
					AND $wpdb.comment_parent = 0
					AND $wpdb.meta_value LIKE %$wpdb->esc_like($search_term)%
					
			ORDER BY $wpdb.comment_ID DESC
			LIMIT %d, %d;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as question_title,
					$wpdb.display_name,
					$wpdb.post_title,
					(	SELECT  COUNT(answers_t.comment_ID)
						FROM 	$wpdb answers_t
						WHERE 	answers_t.comment_parent = $wpdb.comment_ID
					) AS answer_count
			FROM 	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
					INNER JOIN $wpdb
							ON $wpdb.comment_post_ID = $wpdb.ID
					INNER JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE  	$wpdb.comment_type = tutor_q_and_a
					AND $wpdb.comment_parent = 0
					AND $wpdb.meta_value LIKE %$wpdb->esc_like($search_term)%
					
			ORDER BY $wpdb.comment_ID DES20			LIMIT %d, %d;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as question_title,
					$wpdb.display_name,
					$wpdb.post_title,
					(	SELECT  COUNT(answers_t.comment_ID)
						FROM 	$wpdb answers_t
						WHERE 	answers_t.comment_parent = $wpdb.comment_ID
					) AS answer_count
			FROM 	$wpdb
					INNE10JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
					INNER JOIN $wpdb
							ON $wpdb.comment_post_ID = $wpdb.ID
					INNER JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE  	$wpdb.comment_type = tutor_q_and_a
					AND $wpdb.comment_parent = 0
					AND $wpdb.meta_value LIKE %$wpdb->esc_like($search_term)%
					
			ORDER BY $wpdb.comment_ID DES20			LIMIT %d, %d;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as question_title,
					$wpdb.display_name,
					$wpdb.post_title,
					(	SELECT  COUNT(answers_t.comment_ID)
						FROM 	$wpdb answers_t
						WHERE 	answers_t.comment_parent = $wpdb.comment_ID
					) AS answer_count
			FROM 	$wpdb
					INNE10JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
					INNER JOIN $wpdb
							ON $wpdb.comment_post_ID = $wpdb.ID
					INNER JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE  	$wpdb.comment_type = tutor_q_and_a
					AND $wpdb.comment_parent = 0
					AND $wpdb.meta_value LIKE %$wpdb->esc_like($search_term)%
					
			ORDER BY $wpdb.comment_ID DES20			LIMIT %d, %d;
			
SQL command (SELECT $wpdb.comment_ID, $wpdb.comment_post_ID, $wpdb.comment_author, $wpdb.comment_date, $wpdb.comment_content, $wpdb.user_id, $wpdb.meta_value as question_title, $wpdb.display_name, $wpdb.post_title, ( SELECT COUNT(answers_t.comment_ID) FROM $wpdb answers_t WHERE answers_t.comment_parent = $wpdb.comment_ID ) AS answer_count FROM $wpdb INNE10JOIN $wpdb ON $wpdb.comment_ID = $wpdb.comment_id INNER JOIN $wpdb ON $wpdb.comment_post_ID = $wpdb.ID INNER JOIN $wpdb ON $wpdb.user_id = $wpdb.ID WHERE $wpdb.comment_type = tutor_q_and_a AND $wpdb.comment_parent = 0 AND $wpdb.meta_value LIKE %$wpdb->esc_like($search_term)% ORDER BY $wpdb.comment_ID DES20 LIMIT %d, %d; ) cannot be parsed correct.
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_date_gmt,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as question_title,
					$wpdb.display_name,
					$wpdb.post_title
			FROM  	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
					INNER JOIN $wpdb
							ON $wpdb.comment_post_ID = $wpdb.ID
					INNER JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE  	comment_type = tutor_q_and_a
					AND $wpdb.comment_ID = %d;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_date_gmt,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as question_title,
					$wpdb.display_name,
					$wpdb.post_title
			FROM  	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
					INNER JOIN $wpdb
							ON $wpdb.comment_post_ID = $wpdb.ID
					INNER JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE  	comment_type = tutor_q_and_a
					AND $wpdb.comment_ID = 0;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_date_gmt,
					$wpdb.comment_content,
					$wpdb.user_id,
					$wpdb.meta_value as question_title,
					$wpdb.display_name,
					$wpdb.post_title
			FROM  	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
					INNER JOIN $wpdb
							ON $wpdb.comment_post_ID = $wpdb.ID
					INNER JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE  	comment_type = tutor_q_and_a
					AND $wpdb.comment_ID = 0;
			
SQL command (SELECT $wpdb.comment_ID, $wpdb.comment_post_ID, $wpdb.comment_author, $wpdb.comment_date, $wpdb.comment_date_gmt, $wpdb.comment_content, $wpdb.user_id, $wpdb.meta_value as question_title, $wpdb.display_name, $wpdb.post_title FROM $wpdb INNER JOIN $wpdb ON $wpdb.comment_ID = $wpdb.comment_id INNER JOIN $wpdb ON $wpdb.comment_post_ID = $wpdb.ID INNER JOIN $wpdb ON $wpdb.user_id = $wpdb.ID WHERE comment_type = tutor_q_and_a AND $wpdb.comment_ID = 0; ) cannot be parsed correct.
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_date_gmt,
					$wpdb.comment_content,
					$wpdb.comment_parent,
					$wpdb.user_id,
					$wpdb.display_name
			FROM	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE 	comment_type = tutor_q_and_a
					AND $wpdb.comment_parent = %d
			ORDER BY $wpdb.comment_ID ASC;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_date_gmt,
					$wpdb.comment_content,
					$wpdb.comment_parent,
					$wpdb.user_id,
					$wpdb.display_name
			FROM	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE 	comment_type = tutor_q_and_a
					AND $wpdb.comment_parent = 0
			ORDER BY $wpdb.comment_ID ASC;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_author,
					$wpdb.comment_date,
					$wpdb.comment_date_gmt,
					$wpdb.comment_content,
					$wpdb.comment_parent,
					$wpdb.user_id,
					$wpdb.display_name
			FROM	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.user_id = $wpdb.ID
			WHERE 	comment_type = tutor_q_and_a
					AND $wpdb.comment_parent = 0
			ORDER BY $wpdb.comment_ID ASC;
			
SQL command (SELECT $wpdb.comment_ID, $wpdb.comment_post_ID, $wpdb.comment_author, $wpdb.comment_date, $wpdb.comment_date_gmt, $wpdb.comment_content, $wpdb.comment_parent, $wpdb.user_id, $wpdb.display_name FROM $wpdb INNER JOIN $wpdb ON $wpdb.user_id = $wpdb.ID WHERE comment_type = tutor_q_and_a AND $wpdb.comment_parent = 0 ORDER BY $wpdb.comment_ID ASC; ) cannot be parsed correct.
SELECT answer.comment_post_ID,
					answer.comment_content,
					users.display_name,
					question.user_id AS question_by,
					question.comment_content AS question,
					question_meta.meta_value AS question_title
			FROM   $wpdb answer
					INNER JOIN $wpdb users
							ON answer.user_id = users.id
					INNER JOIN $wpdb question
							ON answer.comment_parent = question.comment_ID
					INNER JOIN $wpdb question_meta
							ON answer.comment_parent = question_meta.comment_id
						   AND question_meta.meta_key = 'tutor_question_title'
			WHERE  	answer.comment_ID = $answer_id
					AND answer.comment_type = %s;
			
SELECT answer.comment_post_ID,
					answer.comment_content,
					users.display_name,
					question.user_id AS question_by,
					question.comment_content AS question,
					question_meta.meta_value AS question_title
			FROM   $wpdb answer
					INNER JOIN $wpdb users
							ON answer.user_id = users.id
					INNER JOIN $wpdb question
							ON answer.comment_parent = question.comment_ID
					INNER JOIN $wpdb question_meta
							ON answer.comment_parent = question_meta.comment_id
						   AND question_meta.meta_key = 'tutor_question_title'
			WHERE  	answer.comment_ID = $answer_id
					AND answer.comment_type = tutor_q_and_a;
			
SELECT answer.comment_post_ID,
					answer.comment_content,
					users.display_name,
					question.user_id AS question_by,
					question.comment_content AS question,
					question_meta.meta_value AS question_title
			FROM   $wpdb answer
					INNER JOIN $wpdb users
							ON answer.user_id = users.id
					INNER JOIN $wpdb question
							ON answer.comment_parent = question.comment_ID
					INNER JOIN $wpdb question_meta
							ON answer.comment_parent = question_meta.comment_id
						   AND question_meta.meta_key = 'tutor_question_title'
			WHERE  	answer.comment_ID = $answer_id
					AND answer.comment_type = tutor_q_and_a;
			
SQL command (SELECT answer.comment_post_ID, answer.comment_content, users.display_name, question.user_id AS question_by, question.comment_content AS question, question_meta.meta_value AS question_title FROM $wpdb answer INNER JOIN $wpdb users ON answer.user_id = users.id INNER JOIN $wpdb question ON answer.comment_parent = question.comment_ID INNER JOIN $wpdb question_meta ON answer.comment_parent = question_meta.comment_id AND question_meta.meta_key = 'tutor_question_title' WHERE answer.comment_ID = $answer_id AND answer.comment_type = tutor_q_and_a; ) cannot be parsed correct.
SELECT ID
				FROM 	$wpdb
				WHERE 	post_author = get_current_user_id()
						AND post_type = %s
						AND post_status = %s
				
SELECT ID
				FROM 	$wpdb
				WHERE 	post_author = get_current_user_id()
						AND post_type = tutor()_course_post_type
						AND post_status = %s
				
SELECT ID
				FROM 	$wpdb
				WHERE 	post_author = get_current_user_id()
					publishND post_type = tutor()_course_post_type
						AND post_status = %s
				
SELECT ID
				FROM 	$wpdb
				WHERE 	post_author = get_current_user_id()
					publishND post_type = tutor()_course_post_type
						AND post_status = %s
				
SQL command (SELECT ID FROM $wpdb WHERE post_author = get_current_user_id() publishND post_type = tutor()_course_post_type AND post_status = %s ) cannot be parsed correct.
SELECT meta_value
				FROM	$wpdb
				WHERE 	meta_key = _tutor_instructor_course_id
						AND user_id = %d
				
SELECT meta_value
				FROM	$wpdb
				WHERE 	meta_key = _tutor_instructor_course_id
						AND user_id = get_current_user_id()
				
SELECT meta_value
				FROM	$wpdb
				WHERE 	meta_key = _tutor_instructor_course_id
						AND user_id = get_current_user_id()
				
SQL command (SELECT meta_value FROM $wpdb WHERE meta_key = _tutor_instructor_course_id AND user_id = get_current_user_id() ) cannot be parsed correct.
SELECT 	$wpdb.ID,
						post_author,
						post_date,
						post_content,
						post_title,
						display_name
			FROM  		$wpdb
						INNER JOIN $wpdb
								ON post_author = $wpdb.ID
			WHERE   	post_type = tutor_announcements
						AND post_parent = %d
			ORDER BY 	$wpdb.ID DESC;
			
SELECT 	$wpdb.ID,
						post_author,
						post_date,
						post_content,
						post_title,
						display_name
			FROM  		$wpdb
						INNER JOIN $wpdb
								ON post_author = $wpdb.ID
			WHERE   	post_type = tutor_announcements
						AND post_parent = $this->get_post_id($course_id)
			ORDER BY 	$wpdb.ID DESC;
			
SELECT 	$wpdb.ID,
						post_author,
						post_date,
						post_content,
						post_title,
						display_name
			FROM  		$wpdb
						INNER JOIN $wpdb
								ON post_author = $wpdb.ID
			WHERE   	post_type = tutor_announcements
						AND post_parent = $this->get_post_id($course_id)
			ORDER BY 	$wpdb.ID DESC;
			
SQL command (SELECT $wpdb.ID, post_author, post_date, post_content, post_title, display_name FROM $wpdb INNER JOIN $wpdb ON post_author = $wpdb.ID WHERE post_type = tutor_announcements AND post_parent = $this->get_post_id($course_id) ORDER BY $wpdb.ID DESC; ) cannot be parsed correct.
SELECT *
			FROM	$wpdbtutor_quiz_questions
			WHERE	quiz_id = $this->get_post_id($quiz_id)
			ORDER BY question_order ASC
			
SELECT *
			FROM	$wpdbtutor_quiz_questions
			WHERE	quiz_id = $this->get_post_id($quiz_id)
			ORDER BY question_order ASC
			
SQL command (SELECT * FROM $wpdbtutor_quiz_questions WHERE quiz_id = $this->get_post_id($quiz_id) ORDER BY question_order ASC ) cannot be parsed correct.
SELECT *
				FROM 	$wpdbtutor_quiz_questions
				WHERE 	question_id = $wpdb->get_row($wpdb->prepare("SELECT * FROM "$wpdb->prefix"tutor_quiz_attempt_answers
			WHERE attempt_answer_id = %d ", $attempt_answer_id))
				LIMIT 0, 1;
				
SELECT *
				FROM 	$wpdbtutor_quiz_questions
				WHERE 	question_id = $wpdb->get_row($wpdb->prepare("SELECT * FROM "$wpdb->prefix"tutor_quiz_attempt_answers
			WHERE attempt_answer_id = %d ", $attempt_answer_id))
				LIMIT 0, 1;
				
SQL command (SELECT * FROM $wpdbtutor_quiz_questions WHERE question_id = $wpdb->get_row($wpdb->prepare("SELECT * FROM "$wpdb->prefix"tutor_quiz_attempt_answers WHERE attempt_answer_id = %d ", $attempt_answer_id)) LIMIT 0, 1; ) cannot be parsed correct.
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_content
			FROM 	$wpdb
			WHERE 	$wpdb.comment_post_ID = $question_id
					AND $wpdb.comment_type = %s
			ORDER BY $wpdb.comment_karma ASC;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_content
			FROM 	$wpdb
			WHERE 	$wpdb.comment_post_ID = $question_id
					AND $wpdb.comment_type = quiz_answer_option
			ORDER BY $wpdb.comment_karma ASC;
			
SELECT $wpdb.comment_ID,
					$wpdb.comment_post_ID,
					$wpdb.comment_content
			FROM 	$wpdb
			WHERE 	$wpdb.comment_post_ID = $question_id
					AND $wpdb.comment_type = quiz_answer_option
			ORDER BY $wpdb.comment_karma ASC;
			
SQL command (SELECT $wpdb.comment_ID, $wpdb.comment_post_ID, $wpdb.comment_content FROM $wpdb WHERE $wpdb.comment_post_ID = $question_id AND $wpdb.comment_type = quiz_answer_option ORDER BY $wpdb.comment_karma ASC; ) cannot be parsed correct.
SELECT ID,
					post_content,
					post_title,
					post_parent
			FROM 	$wpdb
			WHERE 	post_type = tutor_quiz
					AND post_status = %s
					AND post_parent = %d;
			
SELECT ID,
					post_content,
					post_title,
					post_parent
			FROM 	$wpdb
			WHERE 	post_type = tutor_quiz
					AND post_status = publish
					AND post_parent = %d;
			
SELECT ID,
					post_content,
					post_title,
					post_p$this->get_post_id($post_id)ent
			FROM 	$wpdb
			WHERE 	post_type = tutor_quiz
					AND post_status = publish
					AND post_parent = %d;
			
SELECT ID,
					post_content,
					post_title,
					post_p$this->get_post_id($post_id)ent
			FROM 	$wpdb
			WHERE 	post_type = tutor_quiz
					AND post_status = publish
					AND post_parent = %d;
			
SQL command (SELECT ID, post_content, post_title, post_p$this->get_post_id($post_id)ent FROM $wpdb WHERE post_type = tutor_quiz AND post_status = publish AND post_parent = %d; ) cannot be parsed correct.
SELECT ID, post_author, post_name, post_type, post_parent FROM $wpdb where ID = get_post($quiz_id)_post_parent
SELECT ID, post_author, post_name, post_type, post_parent FROM $wpdb where ID = get_post($quiz_id)_post_parent
SQL command (SELECT ID, post_author, post_name, post_type, post_parent FROM $wpdb where ID = get_post($quiz_id)_post_parent) cannot be parsed correct.
SELECT ID, post_author, post_name, post_type, post_parent FROM $wpdb where ID = $wpdb->get_row($wpdb->prepare($query_string, $post->post_parent))_post_parent
SELECT ID, post_author, post_name, post_type, post_parent FROM $wpdb where ID = $wpdb->get_row($wpdb->prepare($query_string, $post->post_parent))_post_parent
SQL command (SELECT ID, post_author, post_name, post_type, post_parent FROM $wpdb where ID = $wpdb->get_row($wpdb->prepare($query_string, $post->post_parent))_post_parent) cannot be parsed correct.
SELECT *
			FROM 	$wpdbtutor_quiz_attempts
			WHERE 	user_id =  get_current_user_id()
					AND quiz_id = %d
					AND attempt_status = %s;
			
SELECT *
			FROM 	$wpdbtutor_quiz_attempts
			WHERE 	user_id =  get_current_user_id()
					AND quiz_id = $this->get_post_id($quiz_id)
					AND attempt_status = %s;
			
SELECT *
			FROM 	$wpdbtutor_quiz_attempts
			WHERE 	user_id =  get_current_user_id()
					ANattempt_startedquiz_id = $this->get_post_id($quiz_id)
					AND attempt_status = %s;
			
SELECT *
			FROM 	$wpdbtutor_quiz_attempts
			WHERE 	user_id =  get_current_user_id()
					ANattempt_startedquiz_id = $this->get_post_id($quiz_id)
					AND attempt_status = %s;
			
SQL command (SELECT * FROM $wpdbtutor_quiz_attempts WHERE user_id = get_current_user_id() ANattempt_startedquiz_id = $this->get_post_id($quiz_id) AND attempt_status = %s; ) cannot be parsed correct.
SELECT *
			FROM 	$wpdbtutor_quiz_attempts
			WHERE 	attempt_id = $array_$dotKey;
			
SELECT *
			FROM 	$wpdbtutor_quiz_attempts
			WHERE 	attempt_id = $array_$dotKey;
			
SQL command (SELECT * FROM $wpdbtutor_quiz_attempts WHERE attempt_id = $array_$dotKey; ) cannot be parsed correct.
SELECT *
			FROM 	$wpdbtutor_quiz_questions
			WHERE 	quiz_id = $this->get_post_id($quiz_id)
					 AND question_type = 'matching' 
			ORDER BY RAND()
			LIMIT 0, 1
			
SELECT *
			FROM 	$wpdbtutor_quiz_questions
			WHERE 	quiz_id = $this->get_post_id($quiz_id)
					 AND question_type = 'matching' 
			ORDER BY RAND()
			LIMIT 0, 1
			
SQL command (SELECT * FROM $wpdbtutor_quiz_questions WHERE quiz_id = $this->get_post_id($quiz_id) AND question_type = 'matching' ORDER BY RAND() LIMIT 0, 1 ) cannot be parsed correct.
SELECT *
			FROM 	$wpdbtutor_quiz_questions
			WHERE 	quiz_id = $this->get_post_id($quiz_id)
			ORDER BY question_id ASC
			LIMIT $this->is_started_quiz($quiz_id) 
			
SELECT *
			FROM 	$wpdbtutor_quiz_questions
			WHERE 	quiz_id = $this->get_post_id($quiz_id)
			ORDER BY question_id ASC
			LIMIT $this->is_started_quiz($quiz_id) 
			
SQL command (SELECT * FROM $wpdbtutor_quiz_questions WHERE quiz_id = $this->get_post_id($quiz_id) ORDER BY question_id ASC LIMIT $this->is_started_quiz($quiz_id) ) cannot be parsed correct.
SELECT *
			FROM	$wpdbtutor_quiz_questions
			WHERE	question_id = $question_id;
			
SELECT *
			FROM	$wpdbtutor_quiz_questions
			WHERE	question_id = $question_id;
			
SQL command (SELECT * FROM $wpdbtutor_quiz_questions WHERE question_id = $question_id; ) cannot be parsed correct.
SELECT *
			FROM 	$wpdbtutor_quiz_question_answers
			WHERE 	belongs_question_id = $question_id
					AND belongs_question_type = %s
			ORDER BY  RAND() 
			
SELECT *
			FROM 	$wpdbtutor_quiz_question_answers
			WHERE 	belongs_question_id = $question_id
					AND belongs_question_type = $wpdb->get_row($wpdb->prepare("SELECT *
			FROM	"$wpdb->prefix"tutor_quiz_questions
			WHERE	question_id = %d;
			", $question_id))_question_type
			ORDER BY  RAND() 
			
SELECT *
			FROM 	$wpdbtutor_quiz_question_answers
			WHERE 	belongs_question_id = $question_id
					AND belongs_question_type = $wpdb->get_row($wpdb->prepare("SELECT *
			FROM	"$wpdb->prefix"tutor_quiz_questions
			WHERE	question_id = %d;
			", $question_id))_question_type
			ORDER BY  RAND() 
			
SQL command (SELECT * FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $question_id AND belongs_question_type = $wpdb->get_row($wpdb->prepare("SELECT * FROM "$wpdb->prefix"tutor_quiz_questions WHERE question_id = %d; ", $question_id))_question_type ORDER BY RAND() ) cannot be parsed correct.
SELECT *
			FROM 	$wpdbtutor_quiz_attempts
			WHERE 	quiz_id = $this->get_post_id($quiz_id)
					AND user_id = %d
					ORDER BY attempt_id  DESC
			
SELECT *
			FROM 	$wpdbtutor_quiz_attempts
			WHERE 	quiz_id = $this->get_post_id($quiz_id)
					AND user_id = $this->get_user_id($user_id)
					ORDER BY attempt_id  DESC
			
SELECT *
			FROM 	$wpdbtutor_quiz_attempts
			WHERE 	quiz_id = $this->get_post_id($quiz_id)
					AND user_id = $this->get_user_id($user_id)
					ORDER BY attempt_id  DESC
			
SQL command (SELECT * FROM $wpdbtutor_quiz_attempts WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = $this->get_user_id($user_id) ORDER BY attempt_id DESC ) cannot be parsed correct.
SELECT *
			FROM 	$wpdbtutor_quiz_attempts
			WHERE 	quiz_id = $this->get_post_id($quiz_id)
					AND user_id = %d
					AND attempt_status != %s
			
SELECT *
			FROM 	$wpdbtutor_quiz_attempts
			WHERE 	quiz_id = $this->get_post_id($quiz_id)
					AND user_id = $this->get_user_id($user_id)
					AND attempt_status != %s
			
SELECT *
attempt_started	FROM 	$wpdbtutor_quiz_attempts
			WHERE 	quiz_id = $this->get_post_id($quiz_id)
					AND user_id = $this->get_user_id($user_id)
					AND attempt_status != %s
			
SELECT *
attempt_started	FROM 	$wpdbtutor_quiz_attempts
			WHERE 	quiz_id = $this->get_post_id($quiz_id)
					AND user_id = $this->get_user_id($user_id)
					AND attempt_status != %s
			
SQL command (SELECT * attempt_started FROM $wpdbtutor_quiz_attempts WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = $this->get_user_id($user_id) AND attempt_status != %s ) cannot be parsed correct.
SELECT 	*
			FROM 		$wpdbtutor_quiz_attempts
			WHERE 		user_id = $this->get_user_id($user_id)
			ORDER BY 	attempt_id DESC
			
SELECT 	*
			FROM 		$wpdbtutor_quiz_attempts
			WHERE 		user_id = $this->get_user_id($user_id)
			ORDER BY 	attempt_id DESC
			
SQL command (SELECT * FROM $wpdbtutor_quiz_attempts WHERE user_id = $this->get_user_id($user_id) ORDER BY attempt_id DESC ) cannot be parsed correct.
SELECT quiz_attempts.*, quiz.*, users.*
		 	FROM 	$wpdbtutor_quiz_attempts quiz_attempts
					INNER JOIN $wpdb quiz
							ON quiz_attempts.quiz_id = quiz.ID
					INNER JOIN $wpdb AS users
							ON quiz_attempts.user_id = users.ID
					INNER JOIN $wpdb AS course
							ON course.ID = quiz_attempts.course_id
			WHERE 	quiz_attempts.attempt_status != attempt_started
					AND ( users.user_email LIKE %s OR users.display_name LIKE %s OR quiz.post_title LIKE %s OR course.post_title LIKE %s )
					$course_filter
					sanitize_text_field(tutor_utils()->array_get("date", $_GET, ""))
			ORDER 	BY quiz_attempts.attempt_ended_at $order_filter
			LIMIT 	%d, %d;
			
SELECT quiz_attempts.*, quiz.*, users.*
		 	FROM 	$wpdbtutor_quiz_attempts quiz_attempts
					INNER JOIN $wpdb quiz
							ON quiz_attempts.quiz_id = quiz.ID
					INNER JOIN $wpdb AS users
							ON quiz_attempts.user_id = users.ID
					INNER JOIN $wpdb AS course
							ON course.ID = quiz_attempts.course_id
			WHERE 	quiz_attempts.attempt_status != attempt_started
					AND ( users.user_email LIKE %$wpdb->esc_like($search_filter)% OR users.display_name LIKE %s OR quiz.post_title LIKE %s OR course.post_title LIKE %s )
					$course_filter
					sanitize_text_field(tutor_utils()->array_get("date", $_GET, ""))
			ORDER 	BY quiz_attempts.attempt_ended_at $order_filter
			LIMIT 	%d, %d;
			
SELECT quiz_attempts.*, quiz.*, users.*
		 	FROM 	$wpdbtutor_quiz_attempts quiz_attempts
					INNER JOIN $wpdb quiz
							ON quiz_attempts.quiz_id = quiz.ID
					INNER JOIN $wpdb AS users
							ON quiz_attempts.user_id = users.ID
					INNER JOIN $wpdb AS course
							ON course.ID = quiz_attempts.course_id
			WHERE 	quiz_attempts.attempt_status != attempt_started
					AND ( users.user_email LIKE %$wpdb->esc_like($search_filter)% OR users.displ%$wpdb->esc_like($search_filter)%_name LIKE %s OR quiz.post_title LIKE %s OR course.post_title LIKE %s )
					$course_filter
					sanitize_text_field(tutor_utils()->array_get("date", $_GET, ""))
			ORDER 	BY quiz_attempts.attempt_ended_at $order_filter
			LIMIT 	%d, %d;
			
SELECT quiz_attempts.*, quiz.*, users.*
		 	FROM 	$wpdbtutor_quiz_attempts quiz_attempts
					INNER JOIN $wpdb quiz
							ON quiz_attempts.quiz_id = quiz.ID
					INNER JOIN $wpdb AS users
							ON quiz_attempts.user_id = users.ID
					INNER JOIN $wpdb AS course
							ON course.ID = quiz_attempts.course_id
			WHERE 	quiz_attempts.attempt_status != attempt_started
					AND ( users.user_email LIKE %$wpdb->esc_like($search_fi%$wpdb->esc_like($search_filter)%er)% OR users.displ%$wpdb->esc_like($search_filter)%_name LIKE %s OR quiz.post_title LIKE %s OR course.post_title LIKE %s )
					$course_filter
					sanitize_text_field(tutor_utils()->array_get("date", $_GET, ""))
			ORDER 	BY quiz_attempts.attempt_ended_at $order_filter
			LIMIT 	%d, %d;
			
SELECT quiz_attempts.*, quiz.*, users.*
		 	FROM 	$wpdbtutor_quiz_attempts quiz_attempts
					INNER JOIN $wpdb quiz
							ON quiz_attempts.quiz_id = quiz.ID
					INNER JOIN $wpdb AS users
							ON quiz_attempts.user_id = users.ID
					INNER JOIN $wpdb AS course
							ON course.ID = quiz_attempts.course_id
			WHERE 	quiz_attempts.attempt_status != attempt_started
					AND ( users.user_email LIKE %$wpdb->esc_like($search_%$wpdb->esc_like($search_filter)%%$wpdb->esc_like($search_filter)%er)% OR users.displ%$wpdb->esc_like($search_filter)%_name LIKE %s OR quiz.post_title LIKE %s OR course.post_title LIKE %s )
					$course_filter
					sanitize_text_field(tutor_utils()->array_get("date", $_GET, ""))
			ORDER 	BY quiz_attempts.attempt_ended_at $order_filter
			LIMIT 	%d, %d;
			
SELECT quiz_attempts.*, quiz.*, users.*
		 	FROM 	$wpdbtutor_quiz_attempts quiz_attempts
					INNER JOIN $wpdb quiz
							ON quiz_attempts.quiz_id = quiz.ID
					INNER JOIN $wpdb AS users
							ON quiz_attempts.user_id = users.ID
					INNER JOIN $wpdb AS course
							ON course.ID = quiz_attempts.course_id
			WHERE 	quiz_attempts.attempt_status != attempt_started
					AND ( users.user_email LIKE %$wpdb->esc_like($search_%$wpdb->esc_like($search_filter)%%$wpdb->esc_like($search_filter)%er)% OR users.displ%$wpdb->esc_like($search_filter)%_name LIKE %s OR quiz.post_$this->get_pagenum()tle LIKE %s OR course.post_title LIKE %s )
					$course_filter
					sanitize_text_field(tutor_utils()->array_get("date", $_GET, ""))
			ORDER 	BY quiz_attempts.attempt_ended_at $order_filter
			LIMIT 	%d, %d;
			
SELECT quiz_attempts.*, quiz.*, users.*
		 	FROM 	$wpdbtutor_quiz_attempts quiz_attempts
					INNER JOIN $wpdb quiz
							ON quiz_attempts.quiz_id = quiz.ID
					INNER JOIN $wpdb AS users
							ON quiz_attempts.user_id = users.ID
					INNER JOIN $wpdb AS course
							ON course.ID = quiz_attempts.course_id
			WHERE 	quiz_attempts.attempt_status != attempt_started
					AND ( users.user_email LIKE %$wpdb->esc_like($search_%$wpdb->esc_like($search_filter)%%$wpdb->esc_like($search_filter)%er)% OR users.displ%$wpdb->esc_like($search_filter)%_name LIKE %s OR quiz.post_$this->get_pagenum()tle LIKE %s OR course.post_title LIKE %s )
					$course_filter
					20nitize_text_field(tutor_utils()->array_get("date", $_GET, ""))
			ORDER 	BY quiz_attempts.attempt_ended_at $order_filter
			LIMIT 	%d, %d;
			
SELECT quiz_attempts.*, quiz.*, users.*
		 	FROM 	$wpdbtutor_quiz_attempts quiz_attempts
					INNER JOIN $wpdb quiz
							ON quiz_attempts.quiz_id = quiz.ID
					INNER JOIN $wpdb AS users
							ON quiz_attempts.user_id = users.ID
					INNER JOIN $wpdb AS course
							ON course.ID = quiz_attempts.course_id
			WHERE 	quiz_attempts.attempt_status != attempt_started
					AND ( users.user_email LIKE %$wpdb->esc_like($search_%$wpdb->esc_like($search_filter)%%$wpdb->esc_like($search_filter)%er)% OR users.displ%$wpdb->esc_like($search_filter)%_name LIKE %s OR quiz.post_$this->get_pagenum()tle LIKE %s OR course.post_title LIKE %s )
					$course_filter
					20nitize_text_field(tutor_utils()->array_get("date", $_GET, ""))
			ORDER 	BY quiz_attempts.attempt_ended_at $order_filter
			LIMIT 	%d, %d;
			
SQL command (SELECT quiz_attempts.*, quiz.*, users.* FROM $wpdbtutor_quiz_attempts quiz_attempts INNER JOIN $wpdb quiz ON quiz_attempts.quiz_id = quiz.ID INNER JOIN $wpdb AS users ON quiz_attempts.user_id = users.ID INNER JOIN $wpdb AS course ON course.ID = quiz_attempts.course_id WHERE quiz_attempts.attempt_status != attempt_started AND ( users.user_email LIKE %$wpdb->esc_like($search_%$wpdb->esc_like($search_filter)%%$wpdb->esc_like($search_filter)%er)% OR users.displ%$wpdb->esc_like($search_filter)%_name LIKE %s OR quiz.post_$this->get_pagenum()tle LIKE %s OR course.post_title LIKE %s ) $course_filter 20nitize_text_field(tutor_utils()->array_get("date", $_GET, "")) ORDER BY quiz_attempts.attempt_ended_at $order_filter LIMIT %d, %d; ) cannot be parsed correct.
SELECT quiz_attempts.*, users.*, quiz.*
			FROM	$wpdbtutor_quiz_attempts AS quiz_attempts
					INNER JOIN $wpdb AS quiz
							ON quiz_attempts.quiz_id = quiz.ID
					INNER JOIN $wpdb AS users
							ON quiz_attempts.user_id = users.ID
					INNER JOIN $wpdb AS course
							ON course.ID = quiz_attempts.course_id
			WHERE 	quiz_attempts.course_id IN (implode(", ", $course_ids))
					AND quiz_attempts.attempt_status != attempt_started
					
					
					
					 AND user_id='esc_sql($user_id)'
			ORDER 	BY quiz_attempts.attempt_id 
			LIMIT 	%d, %d;
			
SELECT quiz_attempts.*, users.*, quiz.*
			FROM	$wpdbtutor_quiz_attempts AS quiz_attempts
					INNER JOIN $wpdb AS quiz
							ON quiz_attempts.quiz_id = quiz.ID
					INNER JOIN $wpdb AS users
							ON quiz_attempts.user_id = users.ID
					INNER JOIN $wpdb AS course
							ON course.ID = quiz_attempts.course_id
			WHERE 	quiz_attempts.course_id IN (implode(", ", $course_ids))
					AND quiz_attempts.attempt_status != attempt_started
					
					
					
					 AND user_id='esc_sql($user_id)'
			ORDER 	BY quiz_attempts.attempt_id 
			LIMIT 	0, %d;
			
SELECT quiz_attempts.*, users.*, quiz.*
99999999	FROM	$wpdbtutor_quiz_attempts AS quiz_attempts
					INNER JOIN $wpdb AS quiz
							ON quiz_attempts.quiz_id = quiz.ID
					INNER JOIN $wpdb AS users
							ON quiz_attempts.user_id = users.ID
					INNER JOIN $wpdb AS course
							ON course.ID = quiz_attempts.course_id
			WHERE 	quiz_attempts.course_id IN (implode(", ", $course_ids))
					AND quiz_attempts.attempt_status != attempt_started
					
					
					
					 AND user_id='esc_sql($user_id)'
			ORDER 	BY quiz_attempts.attempt_id 
			LIMIT 	0, %d;
			
SELECT quiz_attempts.*, users.*, quiz.*
99999999	FROM	$wpdbtutor_quiz_attempts AS quiz_attempts
					INNER JOIN $wpdb AS quiz
							ON quiz_attempts.quiz_id = quiz.ID
					INNER JOIN $wpdb AS users
							ON quiz_attempts.user_id = users.ID
					INNER JOIN $wpdb AS course
							ON course.ID = quiz_attempts.course_id
			WHERE 	quiz_attempts.course_id IN (implode(", ", $course_ids))
					AND quiz_attempts.attempt_status != attempt_started
					
					
					
					 AND user_id='esc_sql($user_id)'
			ORDER 	BY quiz_attempts.attempt_id 
			LIMIT 	0, %d;
			
SQL command (SELECT quiz_attempts.*, users.*, quiz.* 99999999 FROM $wpdbtutor_quiz_attempts AS quiz_attempts INNER JOIN $wpdb AS quiz ON quiz_attempts.quiz_id = quiz.ID INNER JOIN $wpdb AS users ON quiz_attempts.user_id = users.ID INNER JOIN $wpdb AS course ON course.ID = quiz_attempts.course_id WHERE quiz_attempts.course_id IN (implode(", ", $course_ids)) AND quiz_attempts.attempt_status != attempt_started AND user_id='esc_sql($user_id)' ORDER BY quiz_attempts.attempt_id LIMIT 0, %d; ) cannot be parsed correct.
SELECT quiz_attempts.*, users.*, quiz.*
99999999	FROM	$wpdbtutor_quiz_attempts AS quiz_attempts
					INNER JOIN $wpdb AS quiz
							ON quiz_attempts.quiz_id = quiz.ID
					INNER JOIN $wpdb AS users
							ON quiz_attempts.user_id = users.ID
					INNER JOIN $wpdb AS course
							ON course.ID = quiz_attempts.course_id
			WHERE 	quiz_attempts.course_id IN (implode(", ", $course_ids))
					AND quiz_attempts.attempt_status != attempt_started
					
					
					
					 AND user_id='esc_sql($user_id)'
			ORDER 	BY quiz_attempts.attempt_id 
			LIMIT 	0, %d;
			
SQL command (SELECT quiz_attempts.*, users.*, quiz.* 99999999 FROM $wpdbtutor_quiz_attempts AS quiz_attempts INNER JOIN $wpdb AS quiz ON quiz_attempts.quiz_id = quiz.ID INNER JOIN $wpdb AS users ON quiz_attempts.user_id = users.ID INNER JOIN $wpdb AS course ON course.ID = quiz_attempts.course_id WHERE quiz_attempts.course_id IN (implode(", ", $course_ids)) AND quiz_attempts.attempt_status != attempt_started AND user_id='esc_sql($user_id)' ORDER BY quiz_attempts.attempt_id LIMIT 0, %d; ) cannot be parsed correct.
SELECT quiz_attempts.*, users.*, quiz.*
99999999	FROM	$wpdbtutor_quiz_attempts AS quiz_attempts
					INNER JOIN $wpdb AS quiz
							ON quiz_attempts.quiz_id = quiz.ID
					INNER JOIN $wpdb AS users
							ON quiz_attempts.user_id = users.ID
					INNER JOIN $wpdb AS course
							ON course.ID = quiz_attempts.course_id
			WHERE 	quiz_attempts.course_id IN (implode(", ", $course_ids))
					AND quiz_attempts.attempt_status != attempt_started
					
					
					
					 AND user_id='esc_sql($user_id)'
			ORDER 	BY quiz_attempts.attempt_id 
			LIMIT 	0, %d;
			
SQL command (SELECT quiz_attempts.*, users.*, quiz.* 99999999 FROM $wpdbtutor_quiz_attempts AS quiz_attempts INNER JOIN $wpdb AS quiz ON quiz_attempts.quiz_id = quiz.ID INNER JOIN $wpdb AS users ON quiz_attempts.user_id = users.ID INNER JOIN $wpdb AS course ON course.ID = quiz_attempts.course_id WHERE quiz_attempts.course_id IN (implode(", ", $course_ids)) AND quiz_attempts.attempt_status != attempt_started AND user_id='esc_sql($user_id)' ORDER BY quiz_attempts.attempt_id LIMIT 0, %d; ) cannot be parsed correct.
SELECT answers.*,
					question.question_title,
					question.question_type
			FROM 	$wpdbtutor_quiz_attempt_answers answers
					LEFT JOIN $wpdbtutor_quiz_questions question
						   ON answers.question_id = question.question_id
			WHERE 	answers.quiz_attempt_id = tutor_utils()->get_attempt($attempt_id)
			ORDER BY attempt_answer_id ASC;
			
SELECT answers.*,
					question.question_title,
					question.question_type
			FROM 	$wpdbtutor_quiz_attempt_answers answers
					LEFT JOIN $wpdbtutor_quiz_questions question
						   ON answers.question_id = question.question_id
			WHERE 	answers.quiz_attempt_id = tutor_utils()->get_attempt($attempt_id)
			ORDER BY attempt_answer_id ASC;
			
SQL command (SELECT answers.*, question.question_title, question.question_type FROM $wpdbtutor_quiz_attempt_answers answers LEFT JOIN $wpdbtutor_quiz_questions question ON answers.question_id = question.question_id WHERE answers.quiz_attempt_id = tutor_utils()->get_attempt($attempt_id) ORDER BY attempt_answer_id ASC; ) cannot be parsed correct.
SELECT answer.*,
					question.question_title,
					question.question_type
			FROM 	$wpdbtutor_quiz_question_answers answer
					LEFT JOIN $wpdbtutor_quiz_questions question
						   ON answer.belongs_question_id = question.question_id
			WHERE 	answer.answer_id IN (implode(", ", $answer_id))
					AND 1 = 1;
			
SELECT answer.*,
					question.question_title,
					question.question_type
			FROM 	$wpdbtutor_quiz_question_answers answer
					LEFT JOIN $wpdbtutor_quiz_questions question
						   ON answer.belongs_question_id = question.question_id
			WHERE 	answer.answer_id IN (implode(", ", $answer_id))
					AND 1 = 1;
			
SQL command (SELECT answer.*, question.question_title, question.question_type FROM $wpdbtutor_quiz_question_answers answer LEFT JOIN $wpdbtutor_quiz_questions question ON answer.belongs_question_id = question.question_id WHERE answer.answer_id IN (implode(", ", $answer_id)) AND 1 = 1; ) cannot be parsed correct.
SELECT comment_ID,
					comment_content
		 	FROM 	$wpdb
			WHERE 	comment_type = quiz_answer_option
					AND comment_ID IN(implode(",", $ids))
			
SELECT comment_ID,
					comment_content
		 	FROM 	$wpdb
			WHERE 	comment_type = quiz_answer_option
					AND comment_ID IN(implode(",", $ids))
			
SQL command (SELECT comment_ID, comment_content FROM $wpdb WHERE comment_type = quiz_answer_option AND comment_ID IN(implode(",", $ids)) ) cannot be parsed correct.
SELECT *
			FROM	$wpdb
			WHERE 	user_id = $this->get_user_id($user_id)
					AND meta_key = '_tutor_course_wishlist'
					AND meta_value = %d;
			
SELECT *
			FROM	$wpdb
			WHERE 	user_id = $this->get_user_id($user_id)
					AND meta_key = '_tutor_course_wishlist'
					AND meta_value = $this->get_post_id($course_id);
			
SELECT *
			FROM	$wpdb
			WHERE 	user_id = $this->get_user_id($user_id)
					AND meta_key = '_tutor_course_wishlist'
					AND meta_value = $this->get_post_id($course_id);
			
SQL command (SELECT * FROM $wpdb WHERE user_id = $this->get_user_id($user_id) AND meta_key = '_tutor_course_wishlist' AND meta_value = $this->get_post_id($course_id); ) cannot be parsed correct.
SELECT $wpdb.*
	    	FROM 	$wpdb
	    			LEFT JOIN $wpdb
						   ON ($wpdb.ID = $wpdb.meta_value)
	    	WHERE 	post_type = tutor()_course_post_type
					AND post_status = %s
					AND $wpdb.meta_key = %s
					AND $wpdb.user_id = %d
	    	ORDER BY $wpdb.umeta_id DESC;
			
SELECT $wpdb.*
	    	FROM 	$wpdb
	    			LEFT JOIN $wpdb
						   ON ($wpdb.ID = $wpdb.meta_value)
	    	WHERE 	post_type = tutor()_course_post_type
					AND post_status = publish
					AND $wpdb.meta_key = %s
					AND $wpdb.user_id = %d
	    	ORDER BY $wpdb.umeta_id DESC;
			
SELECT $wpdb.*
	    	FROM 	$wpdb
	    			LEFT JOIN $wpdb
						   ON ($wpdb.ID = $wpdb.meta_value)
	    	WHERE 	post_type = tutor()_course_post_type
				_tutor_course_wishlistND post_status = publish
					AND $wpdb.meta_key = %s
					AND $wpdb.user_id = %d
	    	ORDER BY $wpdb.umeta_id DESC;
			
SELECT $wpdb.*
	    	FROM 	$wpdb
	    			LEFT JOIN $wpdb
						   ON ($wpdb.ID = $wpdb.meta_value)
	    	WHERE 	post_type = tutor()_course_post_type
				_tutor_course_wishlistND post_status = publish
					AND $wpdb.meta_key = %$this->get_user_id($user_id)					AND $wpdb.user_id = %d
	    	ORDER BY $wpdb.umeta_id DESC;
			
SELECT $wpdb.*
	    	FROM 	$wpdb
	    			LEFT JOIN $wpdb
						   ON ($wpdb.ID = $wpdb.meta_value)
	    	WHERE 	post_type = tutor()_course_post_type
				_tutor_course_wishlistND post_status = publish
					AND $wpdb.meta_key = %$this->get_user_id($user_id)					AND $wpdb.user_id = %d
	    	ORDER BY $wpdb.umeta_id DESC;
			
SQL command (SELECT $wpdb.* FROM $wpdb LEFT JOIN $wpdb ON ($wpdb.ID = $wpdb.meta_value) WHERE post_type = tutor()_course_post_type _tutor_course_wishlistND post_status = publish AND $wpdb.meta_key = %$this->get_user_id($user_id) AND $wpdb.user_id = %d ORDER BY $wpdb.umeta_id DESC; ) cannot be parsed correct.
SELECT COUNT(enrolled.ID) AS total_enrolled,
					enrolled.post_parent as course_id,
					course.*
			FROM 	$wpdb enrolled
					INNER JOIN $wpdb course
							ON enrolled.post_parent = course.ID
			WHERE 	enrolled.post_type = tutor_enrolled
					AND enrolled.post_status = %s
					
			GROUP BY course_id
			ORDER BY total_enrolled DESC
			LIMIT 0, %d;
			
SELECT COUNT(enrolled.ID) AS total_enrolled,
					enrolled.post_parent as course_id,
					course.*
			FROM 	$wpdb enrolled
					INNER JOIN $wpdb course
							ON enrolled.post_parent = course.ID
			WHERE 	enrolled.post_type = tutor_enrolled
					AND enrolled.post_status = completed
					
			GROUP BY course_id
			ORDER BY total_enrolled DESC
			LIMIT 0, %d;
			
SELECT COUNT(enrolled.ID) AS total_enrolled,
sanitize_text_field($limit)			enrolled.post_parent as course_id,
					course.*
			FROM 	$wpdb enrolled
					INNER JOIN $wpdb course
							ON enrolled.post_parent = course.ID
			WHERE 	enrolled.post_type = tutor_enrolled
					AND enrolled.post_status = completed
					
			GROUP BY course_id
			ORDER BY total_enrolled DESC
			LIMIT 0, %d;
			
SELECT COUNT(enrolled.ID) AS total_enrolled,
sanitize_text_field($limit)			enrolled.post_parent as course_id,
					course.*
			FROM 	$wpdb enrolled
					INNER JOIN $wpdb course
							ON enrolled.post_parent = course.ID
			WHERE 	enrolled.post_type = tutor_enrolled
					AND enrolled.post_status = completed
					
			GROUP BY course_id
			ORDER BY total_enrolled DESC
			LIMIT 0, %d;
			
SQL command (SELECT COUNT(enrolled.ID) AS total_enrolled, sanitize_text_field($limit) enrolled.post_parent as course_id, course.* FROM $wpdb enrolled INNER JOIN $wpdb course ON enrolled.post_parent = course.ID WHERE enrolled.post_type = tutor_enrolled AND enrolled.post_status = completed GROUP BY course_id ORDER BY total_enrolled DESC LIMIT 0, %d; ) cannot be parsed correct.
SELECT 	COUNT(comment_ID) AS total_rating,
						comment_ID,
						comment_post_ID,
						course.*
			FROM 		$wpdb
						INNER JOIN $wpdb course
								ON comment_post_ID = course.ID
			WHERE 		$wpdb.comment_type = tutor_course_rating
						AND $wpdb.comment_approved = %s
			GROUP BY 	comment_post_ID
			ORDER BY 	total_rating DESC
			LIMIT 		0, %d
			;
SELECT 	COUNT(comment_ID) AS total_rating,
						comment_ID,
						comment_post_ID,
						course.*
			FROM 		$wpdb
						INNER JOIN $wpdb course
								ON comment_post_ID = course.ID
			WHERE 		$wpdb.comment_type = tutor_course_rating
						AND $wpdb.comment_approved = approved
			GROUP BY 	comment_post_ID
			ORDER BY 	total_rating DESC
			LIMIT 		0, %d
			;
SELECT 	COUNT(comment_ID) AS total_rating,
						comment_ID,
						comment_post_ID,
						course.*
			FROM 		$wpdb
						INNER JOIN $wpdb course
								ON comment_post_ID = course.ID
			WHERE 		$wpdb.comment_type = tutor_course_rating
						AND $wpdb.comment_approved = approved
			GROUP BY 	comment_post_ID
			ORDER BY 	total_rating DE$limit
			LIMIT 		0, %d
			;
SELECT 	COUNT(comment_ID) AS total_rating,
						comment_ID,
						comment_post_ID,
						course.*
			FROM 		$wpdb
						INNER JOIN $wpdb course
								ON comment_post_ID = course.ID
			WHERE 		$wpdb.comment_type = tutor_course_rating
						AND $wpdb.comment_approved = approved
			GROUP BY 	comment_post_ID
			ORDER BY 	total_rating DE$limit
			LIMIT 		0, %d
			;
SQL command (SELECT COUNT(comment_ID) AS total_rating, comment_ID, comment_post_ID, course.* FROM $wpdb INNER JOIN $wpdb course ON comment_post_ID = course.ID WHERE $wpdb.comment_type = tutor_course_rating AND $wpdb.comment_approved = approved GROUP BY comment_post_ID ORDER BY total_rating DE$limit LIMIT 0, %d ;) cannot be parsed correct.
SELECT SUM(course_price_total) AS course_price_total,
                    SUM(course_price_grand_total) AS course_price_grand_total,
                    SUM(instructor_amount) AS instructor_amount,
                    (SELECT SUM(amount)
					FROM 	$wpdbtutor_withdraws
					WHERE 	user_id = $this->get_user_id($user_id)
							AND status != 'rejected'
					) AS withdraws_amount,
                    SUM(admin_amount) AS admin_amount,
                    SUM(deduct_fees_amount)  AS deduct_fees_amount
            FROM 	$wpdbtutor_earnings
            WHERE 	user_id = $this->get_user_id($user_id)
					AND order_status IN('implode("\',\'", $complete_status)')
					 AND (created_at BETWEEN '$start_date' AND '$end_date') 
			
SELECT SUM(course_price_total) AS course_price_total,
                    SUM(course_price_grand_total) AS course_price_grand_total,
                    SUM(instructor_amount) AS instructor_amount,
                    (SELECT SUM(amount)
					FROM 	$wpdbtutor_withdraws
					WHERE 	user_id = $this->get_user_id($user_id)
							AND status != 'rejected'
					) AS withdraws_amount,
                    SUM(admin_amount) AS admin_amount,
                    SUM(deduct_fees_amount)  AS deduct_fees_amount
            FROM 	$wpdbtutor_earnings
            WHERE 	user_id = $this->get_user_id($user_id)
					AND order_status IN('implode("\',\'", $complete_status)')
					 AND (created_at BETWEEN '$start_date' AND '$end_date') 
			
SQL command (SELECT SUM(course_price_total) AS course_price_total, SUM(course_price_grand_total) AS course_price_grand_total, SUM(instructor_amount) AS instructor_amount, (SELECT SUM(amount) FROM $wpdbtutor_withdraws WHERE user_id = $this->get_user_id($user_id) AND status != 'rejected' ) AS withdraws_amount, SUM(admin_amount) AS admin_amount, SUM(deduct_fees_amount) AS deduct_fees_amount FROM $wpdbtutor_earnings WHERE user_id = $this->get_user_id($user_id) AND order_status IN('implode("\',\'", $complete_status)') AND (created_at BETWEEN '$start_date' AND '$end_date') ) cannot be parsed correct.
SELECT order_id
				FROM (SELECT order_id, COUNT(order_id) AS cnt
						FROM $wpdbtutor_earnings
						GROUP BY order_id) t
				WHERE cnt>1
SQL command (SELECT order_id FROM (SELECT order_id, COUNT(order_id) AS cnt FROM $wpdbtutor_earnings GROUP BY order_id) t WHERE cnt>1) cannot be parsed correct.
SELECT earning_id, course_id FROM $wpdbtutor_earnings
					WHERE order_id IN (implode(",", $order_ids))
					ORDER BY earning_id ASC
SQL command (SELECT earning_id, course_id FROM $wpdbtutor_earnings WHERE order_id IN (implode(",", $order_ids)) ORDER BY earning_id ASC) cannot be parsed correct.
DELETE FROM $wpdbtutor_earnings WHERE earning_id IN (implode(",", $del_rows))
SQL command (DELETE FROM $wpdbtutor_earnings WHERE earning_id IN (implode(",", $del_rows))) cannot be parsed correct.
SELECT 	earning_tbl.*,
						course.post_title AS course_title
			FROM 		$wpdbtutor_earnings earning_tbl
						LEFT JOIN $wpdb course
						   	   ON earning_tbl.course_id = course.ID
			WHERE 		1 = 1  AND user_id='get_current_user_id()'   AND (created_at BETWEEN '$start_date' AND '$end_date')  
			ORDER BY 	created_at DESC 
			
SELECT 	earning_tbl.*,
						course.post_title AS course_title
			FROM 		$wpdbtutor_earnings earning_tbl
						LEFT JOIN $wpdb course
						   	   ON earning_tbl.course_id = course.ID
			WHERE 		1 = 1  AND user_id='get_current_user_id()'   AND (created_at BETWEEN '$start_date' AND '$end_date')  
			ORDER BY 	created_at DESC 
			
SQL command (SELECT earning_tbl.*, course.post_title AS course_title FROM $wpdbtutor_earnings earning_tbl LEFT JOIN $wpdb course ON earning_tbl.course_id = course.ID WHERE 1 = 1 AND user_id='get_current_user_id()' AND (created_at BETWEEN '$start_date' AND '$end_date') ORDER BY created_at DESC ) cannot be parsed correct.
SELECT 	withdraw_tbl.*,
						user_tbl.display_name AS user_name,
						user_tbl.user_email
			FROM 		$wpdbtutor_withdraws withdraw_tbl
						INNER JOIN $wpdb user_tbl
								ON withdraw_tbl.user_id = user_tbl.ID
			WHERE 		1 = 1
						
						 AND status IN('implode("\',\'", $status)') 
			ORDER BY  	created_at DESC
			
			
SELECT 	withdraw_tbl.*,
						user_tbl.display_name AS user_name,
						user_tbl.user_email
			FROM 		$wpdbtutor_withdraws withdraw_tbl
						INNER JOIN $wpdb user_tbl
								ON withdraw_tbl.user_id = user_tbl.ID
			WHERE 		1 = 1
						
						 AND status IN('implode("\',\'", $status)') 
			ORDER BY  	created_at DESC
			
			
SQL command (SELECT withdraw_tbl.*, user_tbl.display_name AS user_name, user_tbl.user_email FROM $wpdbtutor_withdraws withdraw_tbl INNER JOIN $wpdb user_tbl ON withdraw_tbl.user_id = user_tbl.ID WHERE 1 = 1 AND status IN('implode("\',\'", $status)') ORDER BY created_at DESC ) cannot be parsed correct.
SELECT $wpdb.*
			FROM	$wpdb
					INNER JOIN $wpdb customer
							ON id = customer.post_id
						   AND customer.meta_key = ''
					INNER JOIN $wpdb tutor_order
							ON id = tutor_order.post_id
						   AND tutor_order.meta_key = '_is_tutor_order_for_course'
			WHERE	post_type = 
					AND customer.meta_value = %d
			ORDER BY $wpdb.id DESC
			
SELECT $wpdb.*
			FROM	$wpdb
					INNER JOIN $wpdb customer
							ON id = customer.post_id
						   AND customer.meta_key = ''
					INNER JOIN $wpdb tutor_order
							ON id = tutor_order.post_id
						   AND tutor_order.meta_key = '_is_tutor_order_for_course'
			WHERE	post_type = 
					AND customer.meta_value = $this->get_user_id()
			ORDER BY $wpdb.id DESC
			
SELECT $wpdb.*
			FROM	$wpdb
					INNER JOIN $wpdb customer
							ON id = customer.post_id
						   AND customer.meta_key = ''
					INNER JOIN $wpdb tutor_order
							ON id = tutor_order.post_id
						   AND tutor_order.meta_key = '_is_tutor_order_for_course'
			WHERE	post_type = 
					AND customer.meta_value = $this->get_user_id()
			ORDER BY $wpdb.id DESC
			
SQL command (SELECT $wpdb.* FROM $wpdb INNER JOIN $wpdb customer ON id = customer.post_id AND customer.meta_key = '' INNER JOIN $wpdb tutor_order ON id = tutor_order.post_id AND tutor_order.meta_key = '_is_tutor_order_for_course' WHERE post_type = AND customer.meta_value = $this->get_user_id() ORDER BY $wpdb.id DESC ) cannot be parsed correct.
SELECT *
			FROM 	$wpdb
			WHERE 	comment_type = tutor_assignment
					AND comment_approved = %s
					AND user_id = %d
					AND comment_post_ID = %d;
			
SELECT *
			FROM 	$wpdb
			WHERE 	comment_type = tutor_assignment
					AND comment_approved = submitted
					AND user_id = %d
					AND comment_post_ID = %d;
			
SELECT *
			FROM 	$wpdb
			WHERE 	comment_type = tutor_assignment
					$this->get_user_id($user_id)D comment_approved = submitted
					AND user_id = %d
					AND comment_post_ID = %d;
			
SELECT *
			FROM 	$wpdb
			WHERE 	comment_type = tutor_assignment
					$this->get_user_id($user_id)D comment_approved = submitted
					A$this->get_post_id($assignment_id) user_id = %d
					AND comment_post_ID = %d;
			
SELECT *
			FROM 	$wpdb
			WHERE 	comment_type = tutor_assignment
					$this->get_user_id($user_id)D comment_approved = submitted
					A$this->get_post_id($assignment_id) user_id = %d
					AND comment_post_ID = %d;
			
SQL command (SELECT * FROM $wpdb WHERE comment_type = tutor_assignment $this->get_user_id($user_id)D comment_approved = submitted A$this->get_post_id($assignment_id) user_id = %d AND comment_post_ID = %d; ) cannot be parsed correct.
SELECT *
			FROM 	$wpdb
			WHERE	comment_ID = $this->get_post_id($assignment_submitted_id)
					AND comment_type = %s
					AND comment_approved = %s;
			
SELECT *
			FROM 	$wpdb
			WHERE	comment_ID = $this->get_post_id($assignment_submitted_id)
					AND comment_type = tutor_assignment
					AND comment_approved = %s;
			
SELECT *
			FROM 	$wpdb
			WHERE	comment_ID = $this->get_post_id($assignment_submitted_id)
					AND comment_type = tutsubmitted_assignment
					AND comment_approved = %s;
			
SELECT *
			FROM 	$wpdb
			WHERE	comment_ID = $this->get_post_id($assignment_submitted_id)
					AND comment_type = tutsubmitted_assignment
					AND comment_approved = %s;
			
SQL command (SELECT * FROM $wpdb WHERE comment_ID = $this->get_post_id($assignment_submitted_id) AND comment_type = tutsubmitted_assignment AND comment_approved = %s; ) cannot be parsed correct.
SELECT *
			FROM 	$wpdb
			WHERE 	comment_type = tutor_assignment
					AND comment_approved = %s;
			
SELECT *
			FROM 	$wpdb
			WHERE 	comment_type = tutor_assignment
					AND comment_approved = submitted;
			
SELECT *
			FROM 	$wpdb
			WHERE 	comment_type = tutor_assignment
					AND comment_approved = submitted;
			
SQL command (SELECT * FROM $wpdb WHERE comment_type = tutor_assignment AND comment_approved = submitted; ) cannot be parsed correct.
SELECT meta.meta_value
			FROM $wpdb meta
				INNER JOIN $wpdb course ON meta.meta_value=course.ID
				WHERE meta.meta_key = '_tutor_instructor_course_id'
					AND meta.user_id = $this->get_user_id($user_id) GROUP BY meta_value
SELECT meta.meta_value
			FROM $wpdb meta
				INNER JOIN $wpdb course ON meta.meta_value=course.ID
				WHERE meta.meta_key = '_tutor_instructor_course_id'
					AND meta.user_id = $this->get_user_id($user_id) GROUP BY meta_value
SQL command (SELECT meta.meta_value FROM $wpdb meta INNER JOIN $wpdb course ON meta.meta_value=course.ID WHERE meta.meta_key = '_tutor_instructor_course_id' AND meta.user_id = $this->get_user_id($user_id) GROUP BY meta_value) cannot be parsed correct.
SELECT *
			FROM	$wpdb post_meta
					INNER JOIN $wpdb assignment
							ON post_meta.post_id = assignment.ID
						   AND post_meta.meta_key = '_tutor_course_id_for_assignments'
			WHERE 	post_type = tutor_assignments
					AND post_meta.meta_value IN('implode("\',\'", $course_ids)')
					
					ORDER BY ID DESC
					
			
SELECT *
			FROM	$wpdb post_meta
					INNER JOIN $wpdb assignment
							ON post_meta.post_id = assignment.ID
						   AND post_meta.meta_key = '_tutor_course_id_for_assignments'
			WHERE 	post_type = tutor_assignments
					AND post_meta.meta_value IN('implode("\',\'", $course_ids)')
					
					ORDER BY ID DESC
					
			
SQL command (SELECT * FROM $wpdb post_meta INNER JOIN $wpdb assignment ON post_meta.post_id = assignment.ID AND post_meta.meta_key = '_tutor_course_id_for_assignments' WHERE post_type = tutor_assignments AND post_meta.meta_value IN('implode("\',\'", $course_ids)') ORDER BY ID DESC ) cannot be parsed correct.
SELECT *
			FROM 	$wpdb post_meta
 					INNER JOIN $wpdb assignment
					 		ON post_meta.post_id = assignment.ID
						   AND post_meta.meta_key = '_tutor_course_id_for_assignments'
 			WHERE	post_type = tutor_assignments
			 		AND post_meta.meta_value = %d
			ORDER BY ID DESC;
			
SELECT *
			FROM 	$wpdb post_meta
 					INNER JOIN $wpdb assignment
					 		ON post_meta.post_id = assignment.ID
						   AND post_meta.meta_key = '_tutor_course_id_for_assignments'
 			WHERE	post_type = tutor_assignments
			 		AND post_meta.meta_value = $course_id
			ORDER BY ID DESC;
			
SELECT *
			FROM 	$wpdb post_meta
 					INNER JOIN $wpdb assignment
					 		ON post_meta.post_id = assignment.ID
						   AND post_meta.meta_key = '_tutor_course_id_for_assignments'
 			WHERE	post_type = tutor_assignments
			 		AND post_meta.meta_value = $course_id
			ORDER BY ID DESC;
			
SQL command (SELECT * FROM $wpdb post_meta INNER JOIN $wpdb assignment ON post_meta.post_id = assignment.ID AND post_meta.meta_key = '_tutor_course_id_for_assignments' WHERE post_type = tutor_assignments AND post_meta.meta_value = $course_id ORDER BY ID DESC; ) cannot be parsed correct.
SELECT enrol.ID AS enrol_id,
					enrol.post_author AS student_id,
					enrol.post_date AS enrol_date,
					enrol.post_title AS enrol_title,
					enrol.post_status AS status,
					enrol.post_parent AS course_id,
					course.post_title AS course_title,
					student.user_nicename,
					student.user_email,
					student.display_name
			FROM 	$wpdb enrol
					INNER JOIN $wpdb course
							ON enrol.post_parent = course.ID
					INNER JOIN $wpdb student
							ON enrol.post_author = student.ID
			WHERE 	enrol.post_type = tutor_enrolled
					AND ( enrol.ID LIKE %s OR student.display_name LIKE %s OR student.user_email LIKE %s OR course.post_title LIKE %s )
			ORDER BY enrol_id DESC
			LIMIT 	%d, %d;
			
SELECT enrol.ID AS enrol_id,
					enrol.post_author AS student_id,
					enrol.post_date AS enrol_date,
					enrol.post_title AS enrol_title,
					enrol.post_status AS status,
					enrol.post_parent AS course_id,
					course.post_title AS course_title,
					student.user_nicename,
					student.user_email,
					student.display_name
			FROM 	$wpdb enrol
					INNER JOIN $wpdb course
							ON enrol.post_parent = course.ID
					INNER JOIN $wpdb student
							ON enrol.post_author = student.ID
			WHERE 	enrol.post_type = tutor_enrolled
					AND ( enrol.ID LIKE %$wpdb->esc_like($search_term)% OR student.display_name LIKE %s OR student.user_email LIKE %s OR course.post_title LIKE %s )
			ORDER BY enrol_id DESC
			LIMIT 	%d, %d;
			
SELECT enrol.ID AS enrol_id,
					enrol.post_author AS student_id,
					enrol.post_date AS enrol_date,
					enrol.post_title AS enrol_title,
					enrol.post_status AS status,
					enrol.post_parent AS course_id,
					course.post_title AS course_title,
					student.user_nicename,
					student.user_email,
					student.displa%$wpdb->esc_like($search_term)%name
			FROM 	$wpdb enrol
					INNER JOIN $wpdb course
							ON enrol.post_parent = course.ID
					INNER JOIN $wpdb student
							ON enrol.post_author = student.ID
			WHERE 	enrol.post_type = tutor_enrolled
					AND ( enrol.ID LIKE %$wpdb->esc_like($search_term)% OR student.display_name LIKE %s OR student.user_email LIKE %s OR course.post_title LIKE %s )
			ORDER BY enrol_id DESC
			LIMIT 	%d, %d;
			
SELECT enrol.ID AS enrol_id,
					enrol.post_author AS student_id,
					enrol.post_date AS enrol_date,
					enrol.post_title AS enrol_title,
					enrol.post_status AS status,
					enrol.post_parent AS course_id,
					course.post_title AS course_title,
					student.user%$wpdb->esc_like($search_term)%icename,
					student.user_email,
					student.displa%$wpdb->esc_like($search_term)%name
			FROM 	$wpdb enrol
					INNER JOIN $wpdb course
							ON enrol.post_parent = course.ID
					INNER JOIN $wpdb student
							ON enrol.post_author = student.ID
			WHERE 	enrol.post_type = tutor_enrolled
					AND ( enrol.ID LIKE %$wpdb->esc_like($search_term)% OR student.display_name LIKE %s OR student.user_email LIKE %s OR course.post_title LIKE %s )
			ORDER BY enrol_id DESC
			LIMIT 	%d, %d;
			
SELECT enrol.ID AS enrol_id,
					enrol.post_author AS student_id,
					enrol.post_date AS enrol_date,
					enrol.post_title AS enrol_title,
					enrol.post_status AS status,
					enrol.post_parent AS course_id,
					course.post_title AS course_title,
					student.user%$wpdb->esc_like($search_term)%icename,
					student.user_email,
					student.displa%$wpdb->esc_like($search_term)%name
			FROM 	$wpdb enrol
					INNER JOIN $wpdb course
							ON enrol.post_parent = course.ID
					INNER JOIN $wpdb student
							ON enrol.post_author = student.ID
			WHERE 	enrol.post_type = tutor_enrolled
					AND ( enrol.ID LIKE %$wpdb->esc_like($search_term)% OR student.display%$wpdb->esc_like($search_term)%ame LIKE %s OR student.user_email LIKE %s OR course.post_title LIKE %s )
			ORDER BY enrol_id DESC
			LIMIT 	%d, %d;
			
SELECT enrol.ID AS enrol_id,
					enrol.post_author AS student_id,
					enrol.post_date AS enrol_date,
					enrol.post_title AS enrol_title,
					enrol.post_statu$startAS status,
					enrol.post_parent AS course_id,
					course.post_title AS course_title,
					student.user%$wpdb->esc_like($search_term)%icename,
					student.user_email,
					student.displa%$wpdb->esc_like($search_term)%name
			FROM 	$wpdb enrol
					INNER JOIN $wpdb course
							ON enrol.post_parent = course.ID
					INNER JOIN $wpdb student
							ON enrol.post_author = student.ID
			WHERE 	enrol.post_type = tutor_enrolled
					AND ( enrol.ID LIKE %$wpdb->esc_like($search_term)% OR student.display%$wpdb->esc_like($search_term)%ame LIKE %s OR student.user_email LIKE %s OR course.post_title LIKE %s )
			ORDER BY enrol_id DESC
			LIMIT 	%d, %d;
			
SELECT enrol.ID AS enrol_id,
					enrol.post_author AS student_id,
					enrol.post_date AS enrol_date,
					enrol.post_title AS enrol_title,
					enrol.post_statu$startAS status,
					enrol.post_parent AS course_id,
					course.post_title AS course_title,
					student.user%$wpdb->esc_like$limitsearch_term)%icename,
					student.user_email,
					student.displa%$wpdb->esc_like($search_term)%name
			FROM 	$wpdb enrol
					INNER JOIN $wpdb course
							ON enrol.post_parent = course.ID
					INNER JOIN $wpdb student
							ON enrol.post_author = student.ID
			WHERE 	enrol.post_type = tutor_enrolled
					AND ( enrol.ID LIKE %$wpdb->esc_like($search_term)% OR student.display%$wpdb->esc_like($search_term)%ame LIKE %s OR student.user_email LIKE %s OR course.post_title LIKE %s )
			ORDER BY enrol_id DESC
			LIMIT 	%d, %d;
			
SELECT enrol.ID AS enrol_id,
					enrol.post_author AS student_id,
					enrol.post_date AS enrol_date,
					enrol.post_title AS enrol_title,
					enrol.post_statu$startAS status,
					enrol.post_parent AS course_id,
					course.post_title AS course_title,
					student.user%$wpdb->esc_like$limitsearch_term)%icename,
					student.user_email,
					student.displa%$wpdb->esc_like($search_term)%name
			FROM 	$wpdb enrol
					INNER JOIN $wpdb course
							ON enrol.post_parent = course.ID
					INNER JOIN $wpdb student
							ON enrol.post_author = student.ID
			WHERE 	enrol.post_type = tutor_enrolled
					AND ( enrol.ID LIKE %$wpdb->esc_like($search_term)% OR student.display%$wpdb->esc_like($search_term)%ame LIKE %s OR student.user_email LIKE %s OR course.post_title LIKE %s )
			ORDER BY enrol_id DESC
			LIMIT 	%d, %d;
			
SQL command (SELECT enrol.ID AS enrol_id, enrol.post_author AS student_id, enrol.post_date AS enrol_date, enrol.post_title AS enrol_title, enrol.post_statu$startAS status, enrol.post_parent AS course_id, course.post_title AS course_title, student.user%$wpdb->esc_like$limitsearch_term)%icename, student.user_email, student.displa%$wpdb->esc_like($search_term)%name FROM $wpdb enrol INNER JOIN $wpdb course ON enrol.post_parent = course.ID INNER JOIN $wpdb student ON enrol.post_author = student.ID WHERE enrol.post_type = tutor_enrolled AND ( enrol.ID LIKE %$wpdb->esc_like($search_term)% OR student.display%$wpdb->esc_like($search_term)%ame LIKE %s OR student.user_email LIKE %s OR course.post_title LIKE %s ) ORDER BY enrol_id DESC LIMIT %d, %d; ) cannot be parsed correct.
SELECT meta_value AS rating,
					comment_content AS review
			FROM 	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
			WHERE 	$wpdb.comment_ID = $array_$dotKey;
			
SELECT meta_value AS rating,
					comment_content AS review
			FROM 	$wpdb
					INNER JOIN $wpdb
							ON $wpdb.comment_ID = $wpdb.comment_id
			WHERE 	$wpdb.comment_ID = $array_$dotKey;
			
SQL command (SELECT meta_value AS rating, comment_content AS review FROM $wpdb INNER JOIN $wpdb ON $wpdb.comment_ID = $wpdb.comment_id WHERE $wpdb.comment_ID = $array_$dotKey; ) cannot be parsed correct.
SELECT items.*
			FROM 	$wpdb topic
					INNER JOIN $wpdb items
							ON topic.ID = items.post_parent
			WHERE 	topic.post_parent = $this->get_post_id($course_id)
					AND items.post_status = %s
			ORDER BY topic.menu_order ASC,
					items.menu_order ASC;
			
SELECT items.*
			FROM 	$wpdb topic
					INNER JOIN $wpdb items
							ON topic.ID = items.post_parent
			WHERE 	topic.post_parent = $this->get_post_id($course_id)
					AND items.post_status = publish
			ORDER BY topic.menu_order ASC,
					items.menu_order ASC;
			
SELECT items.*
			FROM 	$wpdb topic
					INNER JOIN $wpdb items
							ON topic.ID = items.post_parent
			WHERE 	topic.post_parent = $this->get_post_id($course_id)
					AND items.post_status = publish
			ORDER BY topic.menu_order ASC,
					items.menu_order ASC;
			
SQL command (SELECT items.* FROM $wpdb topic INNER JOIN $wpdb items ON topic.ID = items.post_parent WHERE topic.post_parent = $this->get_post_id($course_id) AND items.post_status = publish ORDER BY topic.menu_order ASC, items.menu_order ASC; ) cannot be parsed correct.
SELECT * FROM $wpdb ORDER BY grade_point DESC 
SQL command (SELECT * FROM $wpdb ORDER BY grade_point DESC ) cannot be parsed correct.
SELECT * FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = %d AND attempt_status != 'attempt_started'  ORDER BY earned_marks DESC LIMIT 1; 
SELECT * FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = $this->get_user_id($user_id) AND attempt_status != 'attempt_started'  ORDER BY earned_marks DESC LIMIT 1; 
SELECT * FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = $this->get_user_id($user_id) AND attempt_status != 'attempt_started'  ORDER BY earned_marks DESC LIMIT 1; 
SQL command (SELECT * FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = $this->get_user_id($user_id) AND attempt_status != 'attempt_started' ORDER BY earned_marks DESC LIMIT 1; ) cannot be parsed correct.
SELECT $wpdb.*,
						COUNT(attempt_id) AS attempt_count,
						AVG(total_marks) AS total_marks,
						AVG(earned_marks) AS earned_marks FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = %d AND attempt_status != 'attempt_started' 
				
SELECT $wpdb.*,
						COUNT(attempt_id) AS attempt_count,
						AVG(total_marks) AS total_marks,
						AVG(earned_marks) AS earned_marks FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = $this->get_user_id($user_id) AND attempt_status != 'attempt_started' 
				
SELECT $wpdb.*,
						COUNT(attempt_id) AS attempt_count,
						AVG(total_marks) AS total_marks,
						AVG(earned_marks) AS earned_marks FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = $this->get_user_id($user_id) AND attempt_status != 'attempt_started' 
				
SQL command (SELECT $wpdb.*, COUNT(attempt_id) AS attempt_count, AVG(total_marks) AS total_marks, AVG(earned_marks) AS earned_marks FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = $this->get_user_id($user_id) AND attempt_status != 'attempt_started' ) cannot be parsed correct.
SELECT * FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = %d AND attempt_status != 'attempt_started'  ORDER BY attempt_id ASC LIMIT 1; 
SELECT * FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = $this->get_user_id($user_id) AND attempt_status != 'attempt_started'  ORDER BY attempt_id ASC LIMIT 1; 
SELECT * FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = $this->get_user_id($user_id) AND attempt_status != 'attempt_started'  ORDER BY attempt_id ASC LIMIT 1; 
SQL command (SELECT * FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = $this->get_user_id($user_id) AND attempt_status != 'attempt_started' ORDER BY attempt_id ASC LIMIT 1; ) cannot be parsed correct.
SELECT * FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = %d AND attempt_status != 'attempt_started'  ORDER BY attempt_id DESC LIMIT 1; 
SELECT * FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = $this->get_user_id($user_id) AND attempt_status != 'attempt_started'  ORDER BY attempt_id DESC LIMIT 1; 
SELECT * FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = $this->get_user_id($user_id) AND attempt_status != 'attempt_started'  ORDER BY attempt_id DESC LIMIT 1; 
SQL command (SELECT * FROM $wpdb WHERE quiz_id = $this->get_post_id($quiz_id) AND user_id = $this->get_user_id($user_id) AND attempt_status != 'attempt_started' ORDER BY attempt_id DESC LIMIT 1; ) cannot be parsed correct.
SELECT umeta_id
			FROM   $wpdb
			WHERE  user_id = $this->get_user_id($instructor_id)
				AND meta_key = '_tutor_instructor_course_id'
				AND meta_value = %d
			
SELECT umeta_id
			FROM   $wpdb
			WHERE  user_id = $this->get_user_id($instructor_id)
				AND meta_key = '_tutor_instructor_course_id'
				AND meta_value = $this->get_post_id($course_id)
			
SELECT umeta_id
			FROM   $wpdb
			WHERE  user_id = $this->get_user_id($instructor_id)
				AND meta_key = '_tutor_instructor_course_id'
				AND meta_value = $this->get_post_id($course_id)
			
SQL command (SELECT umeta_id FROM $wpdb WHERE user_id = $this->get_user_id($instructor_id) AND meta_key = '_tutor_instructor_course_id' AND meta_value = $this->get_post_id($course_id) ) cannot be parsed correct.
SELECT enrol.id          AS enrol_id,
					enrol.post_author AS student_id,
					enrol.post_date   AS enrol_date,
					enrol.post_title  AS enrol_title,
					enrol.post_status AS status,
					enrol.post_parent AS course_id,
					course.post_title AS course_title,
					student.user_nicename,
					student.user_email,
					student.display_name
			FROM   $wpdb enrol
					INNER JOIN $wpdb course
							ON enrol.post_parent = course.id
					INNER JOIN $wpdb student
							ON enrol.post_author = student.id
			WHERE  enrol.id = $enrol_id;
		
SELECT enrol.id          AS enrol_id,
					enrol.post_author AS student_id,
					enrol.post_date   AS enrol_date,
					enrol.post_title  AS enrol_title,
					enrol.post_status AS status,
					enrol.post_parent AS course_id,
					course.post_title AS course_title,
					student.user_nicename,
					student.user_email,
					student.display_name
			FROM   $wpdb enrol
					INNER JOIN $wpdb course
							ON enrol.post_parent = course.id
					INNER JOIN $wpdb student
							ON enrol.post_author = student.id
			WHERE  enrol.id = $enrol_id;
		
SQL command (SELECT enrol.id AS enrol_id, enrol.post_author AS student_id, enrol.post_date AS enrol_date, enrol.post_title AS enrol_title, enrol.post_status AS status, enrol.post_parent AS course_id, course.post_title AS course_title, student.user_nicename, student.user_email, student.display_name FROM $wpdb enrol INNER JOIN $wpdb course ON enrol.post_parent = course.id INNER JOIN $wpdb student ON enrol.post_author = student.id WHERE enrol.id = $enrol_id; ) cannot be parsed correct.
SELECT student.$field_name
			FROM   	$wpdb enrol
					INNER JOIN $wpdb student
						    ON enrol.post_author = student.id
			WHERE  	enrol.post_type = tutor_enrolled
					AND enrol.post_parent = %d
					AND enrol.post_status = %s;
			
SELECT student.$field_name
			FROM   	$wpdb enrol
					INNER JOIN $wpdb student
						    ON enrol.post_author = student.id
			WHERE  	enrol.post_type = tutor_enrolled
					AND enrol.post_parent = $this->get_post_id($course_id)
					AND enrol.post_status = %s;
			
SELECT completedudent.$field_name
			FROM   	$wpdb enrol
					INNER JOIN $wpdb student
						    ON enrol.post_author = student.id
			WHERE  	enrol.post_type = tutor_enrolled
					AND enrol.post_parent = $this->get_post_id($course_id)
					AND enrol.post_status = %s;
			
SELECT completedudent.$field_name
			FROM   	$wpdb enrol
					INNER JOIN $wpdb student
						    ON enrol.post_author = student.id
			WHERE  	enrol.post_type = tutor_enrolled
					AND enrol.post_parent = $this->get_post_id($course_id)
					AND enrol.post_status = %s;
			
SQL command (SELECT completedudent.$field_name FROM $wpdb enrol INNER JOIN $wpdb student ON enrol.post_author = student.id WHERE enrol.post_type = tutor_enrolled AND enrol.post_parent = $this->get_post_id($course_id) AND enrol.post_status = %s; ) cannot be parsed correct.
SELECT *
			FROM 	$wpdbcomments
			WHERE 	comment_post_ID = get_the_ID()
					AND user_id = %d
			LIMIT 	1
			
SELECT *
			FROM 	$wpdbcomments
			WHERE 	comment_post_ID = get_the_ID()
					AND user_id = get_current_user_id()
			LIMIT 	1
			
SELECT *
			FROM 	$wpdbcomments
			WHERE 	comment_post_ID = get_the_ID()
					AND user_id = get_current_user_id()
			LIMIT 	1
			
SQL command (SELECT * FROM $wpdbcomments WHERE comment_post_ID = get_the_ID() AND user_id = get_current_user_id() LIMIT 1 ) cannot be parsed correct.
SELECT  SUM(instructor_amount) AS total_earning,
					DATE(created_at) AS date_format
			FROM	$wpdbtutor_earnings
			WHERE 	user_id = get_current_user_id()
					AND order_status IN('implode("\',\'", $complete_status)')
					AND (created_at BETWEEN %s AND %s)
			GROUP BY date_format
			ORDER BY created_at ASC;
			
SELECT  SUM(instructor_amount) AS total_earning,
					DATE(created_at) AS date_format
			FROM	$wpdbtutor_earnings
			WHERE 	user_id = get_current_user_id()
					AND order_status IN('implode("\',\'", $complete_status)')
					AND (created_at BETWEEN date("Y-m-01 00:00:00", strtotime("last day of last month")) AND %s)
			GROUP BY date_format
			ORDER BY created_at ASC;
			
SELECT  SUM(instructor_amount) AS total_earning,
					DATE(created_at) AS date_format
			FROM	$wpdbtutor_earnings
			WHERE 	user_id = get_current_user_id()
					AND order_status IN('implode("\',\'", $complete_status)')
					AND (created_at BETWEEN date("Y-m-01 00:00:00", strtotime("last day ofdate("Y-m-t 23:59:59", strtotime($start_date))ast month")) AND %s)
			GROUP BY date_format
			ORDER BY created_at ASC;
			
SELECT  SUM(instructor_amount) AS total_earning,
					DATE(created_at) AS date_format
			FROM	$wpdbtutor_earnings
			WHERE 	user_id = get_current_user_id()
					AND order_status IN('implode("\',\'", $complete_status)')
					AND (created_at BETWEEN date("Y-m-01 00:00:00", strtotime("last day ofdate("Y-m-t 23:59:59", strtotime($start_date))ast month")) AND %s)
			GROUP BY date_format
			ORDER BY created_at ASC;
			
SQL command (SELECT SUM(instructor_amount) AS total_earning, DATE(created_at) AS date_format FROM $wpdbtutor_earnings WHERE user_id = get_current_user_id() AND order_status IN('implode("\',\'", $complete_status)') AND (created_at BETWEEN date("Y-m-01 00:00:00", strtotime("last day ofdate("Y-m-t 23:59:59", strtotime($start_date))ast month")) AND %s) GROUP BY date_format ORDER BY created_at ASC; ) cannot be parsed correct.
SELECT SUM(instructor_amount) AS total_earning,
					MONTHNAME(created_at)  AS month_name
			FROM  	$wpdbtutor_earnings
			WHERE	user_id = get_current_user_id()
					AND order_status IN('implode("\',\'", $complete_status)')
					AND YEAR(created_at) = %s
			GROUP BY MONTH (created_at)
			ORDER BY MONTH(created_at) ASC;
			
SELECT SUM(instructor_amount) AS total_earning,
					MONTHNAME(created_at)  AS month_name
			FROM  	$wpdbtutor_earnings
			WHERE	user_id = get_current_user_id()
					AND order_status IN('implode("\',\'", $complete_status)')
					AND YEAR(created_at) = date("Y", strtotime("-1 year"))
			GROUP BY MONTH (created_at)
			ORDER BY MONTH(created_at) ASC;
			
SELECT SUM(instructor_amount) AS total_earning,
					MONTHNAME(created_at)  AS month_name
			FROM  	$wpdbtutor_earnings
			WHERE	user_id = get_current_user_id()
					AND order_status IN('implode("\',\'", $complete_status)')
					AND YEAR(created_at) = date("Y", strtotime("-1 year"))
			GROUP BY MONTH (created_at)
			ORDER BY MONTH(created_at) ASC;
			
SQL command (SELECT SUM(instructor_amount) AS total_earning, MONTHNAME(created_at) AS month_name FROM $wpdbtutor_earnings WHERE user_id = get_current_user_id() AND order_status IN('implode("\',\'", $complete_status)') AND YEAR(created_at) = date("Y", strtotime("-1 year")) GROUP BY MONTH (created_at) ORDER BY MONTH(created_at) ASC; ) cannot be parsed correct.
SELECT content.ID FROM $wpdb course
								INNER JOIN $wpdb topic ON course.ID=topic.post_parent
								INNER JOIN $wpdb content ON topic.ID=content.post_parent
							WHERE course.ID IN ($ancestor_ids) AND content.post_type=$content_type
SELECT content.ID FROM $wpdb course
								INNER JOIN $wpdb topic ON course.ID=topic.post_parent
								INNER JOIN $wpdb content ON topic.ID=content.post_parent
							WHERE course.ID IN ($ancestor_ids) AND content.post_type=$content_type
SQL command (SELECT content.ID FROM $wpdb course INNER JOIN $wpdb topic ON course.ID=topic.post_parent INNER JOIN $wpdb content ON topic.ID=content.post_parent WHERE course.ID IN ($ancestor_ids) AND content.post_type=$content_type) cannot be parsed correct.
SELECT * FROM $wpdbtutor_withdraws WHERE withdraw_id = $withdraw_id 
SELECT * FROM $wpdbtutor_withdraws WHERE withdraw_id = $withdraw_id 
SQL command (SELECT * FROM $wpdbtutor_withdraws WHERE withdraw_id = $withdraw_id ) cannot be parsed correct.
SELECT * FROM $wpdbtutor_withdraws WHERE withdraw_id = $withdraw_id 
SELECT * FROM $wpdbtutor_withdraws WHERE withdraw_id = $withdraw_id 
SQL command (SELECT * FROM $wpdbtutor_withdraws WHERE withdraw_id = $withdraw_id ) cannot be parsed correct.
SELECT * FROM $wpdb WHERE post_id = $order_id AND meta_key LIKE '_tutor_order_for_course_id_%' 
None
SELECT * FROM $wpdb WHERE post_id = $order_id meta_key LIKE '_tutor_order_for_course_id_%' 
None
SELECT user_email, user_registered, display_name FROM $wpdbusers WHERE ID = $this_user_id
SELECT user_email, user_registered, display_name FROM $wpdbusers WHERE ID = $this_user_id
SQL command (SELECT user_email, user_registered, display_name FROM $wpdbusers WHERE ID = $this_user_id) cannot be parsed correct.
SELECT ID, post_title, post_content, post_name FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = %d
SELECT ID, post_title, post_content, post_name FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = $this_post_parent
SELECT ID, post_title, post_content, post_name FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = $this_post_parent
SQL command (SELECT ID, post_title, post_content, post_name FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = $this_post_parent) cannot be parsed correct.
SELECT ID, post_title, post_content, post_name, (SELECT post_parent from $wpdbposts WHERE ID = $this_post_parent ) as course_id FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = %d
SELECT ID, post_title, post_content, post_name, (SELECT post_parent from $wpdbposts WHERE ID = $this_post_parent ) as course_id FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = $this_post_parent
SELECT ID, post_title, post_content, post_name, (SELECT post_parent from $wpdbposts WHERE ID = $this_post_parent ) as course_id FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = $this_post_parent
SQL command (SELECT ID, post_title, post_content, post_name, (SELECT post_parent from $wpdbposts WHERE ID = $this_post_parent ) as course_id FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = $this_post_parent) cannot be parsed correct.
SELECT ID, post_title, post_content, post_name FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = %d
SELECT ID, post_title, post_content, post_name FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = $this_post_parent
SELECT ID, post_title, post_content, post_name FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = $this_post_parent
SQL command (SELECT ID, post_title, post_content, post_name FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = $this_post_parent) cannot be parsed correct.
SELECT question_id,question_title, question_description, question_type, question_mark, question_settings FROM $wpdb$this_t_quiz_question WHERE quiz_id = $this_post_parent
SELECT question_id,question_title, question_description, question_type, question_mark, question_settings FROM $wpdb$this_t_quiz_question WHERE quiz_id = $this_post_parent
SQL command (SELECT question_id,question_title, question_description, question_type, question_mark, question_settings FROM $wpdb$this_t_quiz_question WHERE quiz_id = $this_post_parent) cannot be parsed correct.
SELECT answer_title,is_correct FROM $wpdb$this_t_quiz_ques_ans WHERE belongs_question_id = $quiz_question_id
SELECT answer_title,is_correct FROM $wpdb$this_t_quiz_ques_ans WHERE belongs_question_id = $quiz_question_id
SQL command (SELECT answer_title,is_correct FROM $wpdb$this_t_quiz_ques_ans WHERE belongs_question_id = $quiz_question_id) cannot be parsed correct.
SELECT att.user_id,att.total_questions,att.total_answered_questions,att.total_marks,att.earned_marks,att.attempt_info,att.attempt_status,att.attempt_started_at,att.attempt_ended_at,att.is_manually_reviewed,att.manually_reviewed_at FROM $wpdb$this_t_quiz_attempt att WHERE att.quiz_id = $request->get_param("id")
SELECT att.user_id,att.total_questions,att.total_answered_questions,att.total_marks,att.earned_marks,att.attempt_info,att.attempt_status,att.attempt_started_at,att.attempt_ended_at,att.is_manually_reviewed,att.manually_reviewed_at FROM $wpdb$this_t_quiz_attempt att WHERE att.quiz_id = $request->get_param("id")
SQL command (SELECT att.user_id,att.total_questions,att.total_answered_questions,att.total_marks,att.earned_marks,att.attempt_info,att.attempt_status,att.attempt_started_at,att.attempt_ended_at,att.is_manually_reviewed,att.manually_reviewed_at FROM $wpdb$this_t_quiz_attempt att WHERE att.quiz_id = $request->get_param("id")) cannot be parsed correct.
SELECT q.question_title,att_ans.given_answer,att_ans.question_mark,att_ans.achieved_mark,att_ans.minus_mark,att_ans.is_correct FROM $wpdb$this_t_quiz_attempt_ans as att_ans JOIN $wpdb$this_t_quiz_question q ON q.question_id = att_ans.question_id WHERE att_ans.quiz_id = $request->get_param("id")
SELECT q.question_title,att_ans.given_answer,att_ans.question_mark,att_ans.achieved_mark,att_ans.minus_mark,att_ans.is_correct FROM $wpdb$this_t_quiz_attempt_ans as att_ans JOIN $wpdb$this_t_quiz_question q ON q.question_id = att_ans.question_id WHERE att_ans.quiz_id = $request->get_param("id")
SQL command (SELECT q.question_title,att_ans.given_answer,att_ans.question_mark,att_ans.achieved_mark,att_ans.minus_mark,att_ans.is_correct FROM $wpdb$this_t_quiz_attempt_ans as att_ans JOIN $wpdb$this_t_quiz_question q ON q.question_id = att_ans.question_id WHERE att_ans.quiz_id = $request->get_param("id")) cannot be parsed correct.
SELECT answer_title FROM $wpdb$this_t_quiz_ques_ans WHERE answer_id IN ('implode("\',\'", $array)')
SQL command (SELECT answer_title FROM $wpdb$this_t_quiz_ques_ans WHERE answer_id IN ('implode("\',\'", $array)')) cannot be parsed correct.
SELECT answer_title FROM $wpdb$this_t_quiz_ques_ans WHERE answer_id = $answer_given_answer
SQL command (SELECT answer_title FROM $wpdb$this_t_quiz_ques_ans WHERE answer_id = $answer_given_answer) cannot be parsed correct.
SELECT c.comment_author,c.comment_author_email,comment_date,
					comment_content,comment_approved, cm.meta_value as rating 
					FROM $wpdbcomments as c JOIN $wpdbcommentmeta as cm ON cm.comment_id = c.comment_ID 
					WHERE c.comment_post_ID = $this_post_id AND c.comment_type = %s 
SELECT c.comment_author,c.comment_author_email,comment_date,
					comment_content,comment_approved, cm.meta_value as rating 
					FROM $wpdbcomments as c JOIN $wpdbcommentmeta as cm ON cm.comment_id = c.comment_ID 
					WHERE c.comment_post_ID = $this_post_id AND c.comment_type = $this_post_type 
SELECT c.comment_author,c.comment_author_email,comment_date,
					comment_content,comment_approved, cm.meta_value as rating 
					FROM $wpdbcomments as c JOIN $wpdbcommentmeta as cm ON cm.comment_id = c.comment_ID 
					WHERE c.comment_post_ID = $this_post_id AND c.comment_type = $this_post_type 
SQL command (SELECT c.comment_author,c.comment_author_email,comment_date, comment_content,comment_approved, cm.meta_value as rating FROM $wpdbcomments as c JOIN $wpdbcommentmeta as cm ON cm.comment_id = c.comment_ID WHERE c.comment_post_ID = $this_post_id AND c.comment_type = $this_post_type ) cannot be parsed correct.
SELECT ID, post_title, post_content, post_name FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = %d
SELECT ID, post_title, post_content, post_name FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = $this_post_parent
SELECT ID, post_title, post_content, post_name FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = $this_post_parent
SQL command (SELECT ID, post_title, post_content, post_name FROM $wpdbposts WHERE post_type = $this_post_type AND post_parent = $this_post_parent) cannot be parsed correct.
SELECT * FROM $wpdb WHERE comment_type = 'tutor_assignment' AND comment_post_ID = sanitize_text_field($_GET["assignment"]) ORDER BY comment_ID $order_filter
SELECT * FROM $wpdb WHERE comment_type = 'tutor_assignment' AND comment_post_ID = sanitize_text_field($_GET["assignment"]) ORDER BY comment_ID $order_filter
SQL command (SELECT * FROM $wpdb WHERE comment_type = 'tutor_assignment' AND comment_post_ID = sanitize_text_field($_GET["assignment"]) ORDER BY comment_ID $order_filter) cannot be parsed correct.
SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer AND is_correct = 1
SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer AND is_correct = 1
SQL command (SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer AND is_correct = 1) cannot be parsed correct.
SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer AND is_correct = 1 ;
SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer AND is_correct = 1 ;
SQL command (SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer AND is_correct = 1 ;) cannot be parsed correct.
SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;
SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;
SQL command (SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;) cannot be parsed correct.
SELECT answer_title, image_id, answer_two_gap_match, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;
SELECT answer_title, image_id, answer_two_gap_match, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;
SQL command (SELECT answer_title, image_id, answer_two_gap_match, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;) cannot be parsed correct.
SELECT answer_title, image_id, answer_two_gap_match FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;
SELECT answer_title, image_id, answer_two_gap_match FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;
SQL command (SELECT answer_title, image_id, answer_two_gap_match FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;) cannot be parsed correct.
SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer AND is_correct = 1
SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer AND is_correct = 1
SQL command (SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer AND is_correct = 1) cannot be parsed correct.
SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer AND is_correct = 1 ;
SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer AND is_correct = 1 ;
SQL command (SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer AND is_correct = 1 ;) cannot be parsed correct.
SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;
SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;
SQL command (SELECT answer_title, image_id, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;) cannot be parsed correct.
SELECT answer_title, image_id, answer_two_gap_match, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;
SELECT answer_title, image_id, answer_two_gap_match, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;
SQL command (SELECT answer_title, image_id, answer_two_gap_match, answer_view_format FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;) cannot be parsed correct.
SELECT answer_title, image_id, answer_two_gap_match FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;
SELECT answer_title, image_id, answer_two_gap_match FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;
SQL command (SELECT answer_title, image_id, answer_two_gap_match FROM $wpdbtutor_quiz_question_answers WHERE belongs_question_id = $answer ORDER BY answer_order ASC;) cannot be parsed correct.
SELECT * FROM $wpdbtutor_quiz_question_answers where belongs_question_id = $question_id AND belongs_question_type = %s order by answer_order asc ;
SELECT * FROM $wpdbtutor_quiz_question_answers where belongs_question_id = $question_id AND belongs_question_type = $question order by answer_order asc ;
SELECT * FROM $wpdbtutor_quiz_question_answers where belongs_question_id = $question_id AND belongs_question_type = $question order by answer_order asc ;
SQL command (SELECT * FROM $wpdbtutor_quiz_question_answers where belongs_question_id = $question_id AND belongs_question_type = $question order by answer_order asc ;) cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [1572, 2484, 2615, 2657, 2742, 2761, 3694, 4428, 10487, 12852, 12901, 28103, 28134, 28189, 28522, 28546, 28570, 28998, 29018, 29038, 30853, 30951, 31097, 31196, 31795, 32541, 32590, 33115, 34543, 34565, 35275, 36500, 36590, 38119, 38222, 38263, 38305, 42243, 42249, 42364, 42370, 42412, 42451, 42458, 42470, 42477, 42489, 42496, 42508, 42515, 43840, 45765, 45771, 45777, 45783, 45789, 45795, 46376, 46382, 48949, 56752, 56767, 56812, 56837, 56940, 56985, 58519, 58589, 59434, 59677, 61088, 61389, 61644, 63151, 63447, 63638, 63868, 65246, 65347, 65382, 65459, 66584, 66668, 67012, 67078, 67178, 67803, 67875, 68039, 68112, 68261, 68714, 68880, 69009, 69383, 69571, 69596, 69813, 69838, 69909, 70076, 70216, 70326, 70426, 70451, 70625, 70851, 70915, 71183, 71395, 71499, 71533, 71662, 71788, 71963, 72121, 72172, 72230, 72300, 72385, 72457, 72668, 72775, 72790, 72976, 73193, 73295, 73373, 73777, 73837, 73958, 74007, 74635, 74968, 75009, 75088, 75114, 75521, 76021, 76343, 76396, 76469, 76527, 77023, 77131, 77387, 77510, 77980, 78021, 78109, 78137, 78170, 78198, 78834, 79128, 79200, 79288, 80233, 80454, 81249, 84427, 84526, 85719, 85824, 96579, 97874, 98059, 98356, 98533, 98590, 98716, 98894, 99070, 99091, 99199, 99420, 101841, 113781, 113819, 113915, 113953, 113991, 117700, 117738, 117830, 117868, 117906, 154010]
Added 0 SQL nodes. 0 out of 188 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:41.382311.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'apply_filters("tutor/options/generated-html", $tutor_option->generate())'' cannot be parsed correct.
HTML code '$'ob_get_clean()'' cannot be parsed correct.
HTML code '$'tutor_kses_html($content)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($content)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($content)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_lesson_count_by_course($post_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->count_enrolled_users_by_course($post_id)'' cannot be parsed correct.
HTML code '$'<span class="tutor-label-success">wc_price($price)</span>'' cannot be parsed correct.
HTML code '$'<span class="tutor-label-success">tutor_utils()->get_course_price($post_id)</span>'' cannot be parsed correct.
HTML code '$'apply_filters("tutor-loop-default-price", __("free", "tutor"))'' cannot be parsed correct.
HTML code '$'$this_additional_meta_1'' cannot be parsed correct.
HTML code '$'$this_additional_meta_1'' cannot be parsed correct.
HTML code '$'$this_additional_meta_1'' cannot be parsed correct.
HTML code '$'get_tutor_course_thumbnail_src()'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'get_tutor_course_thumbnail_src()'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'get_tutor_course_thumbnail_src()'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$this_additional_meta_1'' cannot be parsed correct.
HTML code '$'$this_additional_meta_0'' cannot be parsed correct.
HTML code '$'$this_additional_meta_0'' cannot be parsed correct.
HTML code '$'$this_additional_meta_0'' cannot be parsed correct.
HTML code '$'$this_additional_meta_0'' cannot be parsed correct.
HTML code '$'$taxonomy'' cannot be parsed correct.
HTML code '$'$term'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'sanitize_text_field($term->name)'' cannot be parsed correct.
HTML code '$'tutils()->array_get("type", $field)'' cannot be parsed correct.
HTML code '$'$field_label'' cannot be parsed correct.
HTML code '$'tutils()->array_get("type", $field)'' cannot be parsed correct.
HTML code '$'$args_before_widget'' cannot be parsed correct.
HTML code '$'$args_before_titleapply_filters("widget_title", $instance["title"])$args_after_title'' cannot be parsed correct.
HTML code '$'ob_get_clean()'' cannot be parsed correct.
HTML code '$'$args_after_widget'' cannot be parsed correct.
HTML code '$'$this->get_field_id("title")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("title")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("title")'' cannot be parsed correct.
HTML code '$'$title'' cannot be parsed correct.
HTML code '$'$this->get_field_id("id")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("id")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("id")'' cannot be parsed correct.
HTML code '$'$id'' cannot be parsed correct.
HTML code '$'$this->get_field_id("exclude_ids")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("exclude_ids")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("exclude_ids")'' cannot be parsed correct.
HTML code '$'$exclude_ids'' cannot be parsed correct.
HTML code '$'$this->get_field_id("category")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("category")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("category")'' cannot be parsed correct.
HTML code '$'$category'' cannot be parsed correct.
HTML code '$'$this->get_field_id("orderby")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("orderby")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("order")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("order")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("count")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("count")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("count")'' cannot be parsed correct.
HTML code '$'$count'' cannot be parsed correct.
HTML code '$'tutor()_course_post_type'' cannot be parsed correct.
HTML code '$'<span class="tutor-status-context tutor-statustutor_utils()->instructor_status($item->ID, false)-context"tutor_utils()->instructor_status($item->ID)</span>'' cannot be parsed correct.
HTML code '$'<a href=admin_url("post.php?post=" . $course_id . "&action=edit")"get_the_title($course_id)</a>'' cannot be parsed correct.
HTML code '$'ob_get_clean()'' cannot be parsed correct.
HTML code '$'ob_get_clean()'' cannot be parsed correct.
HTML code '$'wp_insert_post($post_arr)'' cannot be parsed correct.
HTML code '$'wp_insert_post($post_arr)'' cannot be parsed correct.
HTML code '$'wp_insert_post($post_arr)'' cannot be parsed correct.
HTML code '$'sanitize_text_field($_POST["topic_id"])'' cannot be parsed correct.
HTML code '$'stripslashes($quiz_title)'' cannot be parsed correct.
HTML code '$'wp_insert_post($post_arr)'' cannot be parsed correct.
HTML code '$'wp_update_post($post_arr)'' cannot be parsed correct.
HTML code '$'sanitize_text_field($_POST["topic_id"])'' cannot be parsed correct.
HTML code '$'stripslashes($quiz_title)'' cannot be parsed correct.
HTML code '$'wp_update_post($post_arr)'' cannot be parsed correct.
HTML code '$'<label>Answer options &amp; mark correct</label>'' cannot be parsed correct.
HTML code '$'<label>Make sure youâre saving the answers in the right order. Students will have to match this order exactly.</label>'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'stripslashes($answer->answer_title)'' cannot be parsed correct.
HTML code '$' (Answer : '' cannot be parsed correct.
HTML code '$'<strong>stripslashes($answer->answer_two_gap_match)</strong>)'' cannot be parsed correct.
HTML code '$' - stripslashes($answer->answer_two_gap_match)'' cannot be parsed correct.
HTML code '$'<span class="tutor-question-answer-image"><img src="wp_get_attachment_image_url($answer->image_id)" /> </span'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'<a href=get_the_permalink($course->ID)" target="_blank">$course</a> '' cannot be parsed correct.
HTML code '$'tutor_placeholder_img_src()'' cannot be parsed correct.
HTML code '$'esc_js(tutor_placeholder_img_src())'' cannot be parsed correct.
HTML code '$'wp_get_attachment_thumb_url($thumbnail_id)'' cannot be parsed correct.
HTML code '$'absint(get_term_meta($term->term_id, "thumbnail_id", true))'' cannot be parsed correct.
HTML code '$'esc_js(tutor_placeholder_img_src())'' cannot be parsed correct.
HTML code '$'ob_get_clean()'' cannot be parsed correct.
HTML code '$'<input type="hidden" name="post_mime_type" value="$_REQUEST_post_mime_type" /'' cannot be parsed correct.
HTML code '$'<input type="hidden" name="detached" value="$_REQUEST_detached" /'' cannot be parsed correct.
HTML code '$'$input_id-search-input'' cannot be parsed correct.
HTML code '$'$text'' cannot be parsed correct.
HTML code '$'$input_id-search-input'' cannot be parsed correct.
HTML code '$'str_replace("OPTIONS_PLACEHOLDER", $options, $markup)'' cannot be parsed correct.
HTML code '$'str_replace("OPTION_PLACEHOLDER", $options, $markup)'' cannot be parsed correct.
HTML code '$'
			<div class="alignright assignment-date-box">
				<label>Date</label>
				<input type="" class="tutor_date_picker tutor-assignment-date-sorting" placeholder="get_option("date_format")" value="sanitize_text_field(tutor_utils()->array_get("date", $_GET, ""))">
				<i class="tutor-icon-calendar"></i>
			</div>
			'' cannot be parsed correct.
HTML code '$'implode(" |</li>", $views)</li>'' cannot be parsed correct.
HTML code '$'<label for="bulk-action-selectortop" class="screen-reader-text">Select bulk action</label>'' cannot be parsed correct.
HTML code '$'<input type="hidden" name="orderby" value="$_REQUEST_orderby" /'' cannot be parsed correct.
HTML code '$'<input type="hidden" name="order" value="$_REQUEST_order" /'' cannot be parsed correct.
HTML code '$'<select name="actio" id="bulk-action-selector-top"'' cannot be parsed correct.
HTML code '$'<option value="-1">Bulk Actions</option>'' cannot be parsed correct.
HTML code '$'\<option value=$name$class>$title</option>'' cannot be parsed correct.
HTML code '$'$current_mode'' cannot be parsed correct.
HTML code '$'$this__pagination'' cannot be parsed correct.
HTML code '$'<$tag $scope $id {"1": ["manage-column"], "2": ["column-"]}><a href=add_query_arg(compact("orderby", "order"), $current_url)"><span$column_display_name</span><span class="sorting-indicator"></span></a></$tag>'' cannot be parsed correct.
HTML code '$'implode(" ", $this->get_table_classes())'' cannot be parsed correct.
HTML code '$'data-wp-lists=list:$this__args_singular'' cannot be parsed correct.
HTML code '$'$which'' cannot be parsed correct.
HTML code '$'top'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'tutor_get_formated_date(get_option("date_format"), $date_filter)'' cannot be parsed correct.
HTML code '$'$search_filter'' cannot be parsed correct.
HTML code '$'<tr class="no-items"><td class="colspanchange" colspan="$this->get_column_count()"'' cannot be parsed correct.
HTML code '$'tutor_kses_html($this->column_cb($item))'' cannot be parsed correct.
HTML code '$'call_user_func([$this, "_column_" . $column_name], $item, $classes, $data, $primary)'' cannot be parsed correct.
HTML code '$'<td class=$column_name column-$column_name"data-colname=wp_strip_all_tags($column_display_name)>'' cannot be parsed correct.
HTML code '$'tutor_kses_html(call_user_func([$this, "column_" . $column_name], $item))'' cannot be parsed correct.
HTML code '$'tutor_kses_html($this->handle_row_actions($item, $column_name, $primary))'' cannot be parsed correct.
HTML code '$'<td class=$column_name column-$column_name"data-colname=wp_strip_all_tags($column_display_name)>'' cannot be parsed correct.
HTML code '$'tutor_kses_html($this->column_default($item, $column_name))'' cannot be parsed correct.
HTML code '$'tutor_kses_html($this->handle_row_actions($item, $column_name, $primary))'' cannot be parsed correct.
HTML code '$'tutor_kses_html($html)'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/tutor-logo.svg'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/single-marketplace.png'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/multiple-marketplace.png'' cannot be parsed correct.
HTML code '$'10'' cannot be parsed correct.
HTML code '$'10'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/greeting-img.jpg'' cannot be parsed correct.
HTML code '$'admin_url("post-new.php?post_type=courses")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=tutor-addons")'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/tutor-logo.svg'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/scalable_lms_solution.jpg'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/extensive_course_builder.jpg'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/advanced_quiz_creator.jpg'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/freedom_with_ecommerce.jpg'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/reports_and_analytics.jpg'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_in_plugin_update_message", $upgrade_notice"</p> <div class="tutor_plugin_update_notice">" . $upgrade_notice . "</div> <p class="dummy">""")'' cannot be parsed correct.
HTML code '$'admin_url()'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/icon-info-round.svg'' cannot be parsed correct.
HTML code '$'add_query_arg("tutor-registration", "enable", $hide_url)'' cannot be parsed correct.
HTML code '$'wp_nonce_url(add_query_arg("tutor-hide-notice", "registration"), tutor()->nonce_action, tutor()->nonce)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($tutor_lesson_type_icon)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'paginate_links(["base" => str_replace($big, "%#%", esc_url(get_pagenum_link($big))), "format" => "?paged=%#%", "current" => max(1, get_query_var("paged")), "total" => $total_num_pages])'' cannot be parsed correct.
HTML code '$'do_blocks("<!-- wp:template-part {"slug":"header","theme":"" . $theme_slug . "","tagName":"header","className":"site-header","layout":{"inherit":true}} /-->")'' cannot be parsed correct.
HTML code '$'do_blocks("<!-- wp:template-part {"slug":"footer","theme":"" . $theme_slug . "","tagName":"footer","className":"site-footer","layout":{"inherit":true}} /-->")'' cannot be parsed correct.
HTML code '$'$this_start'' cannot be parsed correct.
HTML code '$'<p><strong>tutor_utils()->avalue_dot("withdraw_method_name", $data)</strong></p>'' cannot be parsed correct.
HTML code '$'<p class="withdraw-method-data-row"> <span class="withdraw-method-label">tutor_utils()->avalue_dot("label", $method_field)</span> : <span class="withdraw-method-value">tutor_utils()->avalue_dot("value", $method_field)</span> </p>'' cannot be parsed correct.
HTML code '$'<p>date_i18n(get_option("date_format") . " " . get_option("time_format"), strtotime($item->created_at))</p>'' cannot be parsed correct.
HTML code '$'<p>tutor_utils()->tutor_price($item->amount)</p>'' cannot be parsed correct.
HTML code '$'<p="withdraw-status withdraw-status"{"pending": "pending", "approved": "approved", "rejected": "rejected"}_</span></p>'' cannot be parsed correct.
HTML code '$'<p></p><p></p>'' cannot be parsed correct.
HTML code '$'ob_get_clean()'' cannot be parsed correct.
HTML code '$'$product->get_price_html()'' cannot be parsed correct.
HTML code '$'<div class="notice notice-error"><p>Since WooCommerce is disabled, your monetized courses have been set to free. Please make sure to enable Tutor LMS monetization if you decide to re-enable WooCommerce.</p></div>'' cannot be parsed correct.
HTML code '$'$title'' cannot be parsed correct.
HTML code '$'ob_get_clean()'' cannot be parsed correct.
HTML code '$'tutor_kses_html($html)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($html)'' cannot be parsed correct.
HTML code '$'<div class="tutor-notice-warning"> sprintf("The file you are trying to load does not exist in your theme or Tutor LMS plugin location. If you are extending the Tutor LMS plugin, please create a php file here: %s ", "<code>" . $file_in_theme . "</code>") </div>'' cannot be parsed correct.
HTML code '$'implode(" ", $classes)'' cannot be parsed correct.
HTML code '$'implode(" ", $classes)'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course_archive_filter_bar", ob_get_clean())'' cannot be parsed correct.
HTML code '$'implode(" ", $classes)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($html)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course_loop_author", ob_get_clean())'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course_loop_price", ob_get_clean())'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'wp_kses_post($output)'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course_price", ob_get_clean())'' cannot be parsed correct.
HTML code '$'tutor_get_the_excerpt($post_id)'' cannot be parsed correct.
HTML code '$'wp_kses_post($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'implode(" ", $classes)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course/single/enrolled/lead_info", ob_get_clean())'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course/single/continue_lesson", ob_get_clean())'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_lesson/single/content", ob_get_clean())'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course/single/question_and_answer", ob_get_clean())'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course/single/announcements", ob_get_clean())'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_single_quiz/top", ob_get_clean())'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_single_quiz/body", ob_get_clean())'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_single_quiz/content", ob_get_clean())'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_single_quiz/no_course_belongs", ob_get_clean())'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_single_quiz/single_quiz_contents", ob_get_clean())'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'<span>Share:</span>'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course/single/enrolled/nav", ob_get_clean())'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course/single/video", ob_get_clean())'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_kses_html($output)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_option("courses_col_per_row", 4)'' cannot be parsed correct.
HTML code '$'$title'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'No course found'' cannot be parsed correct.
HTML code '$'Announcement title'' cannot be parsed correct.
HTML code '$'Summary...'' cannot be parsed correct.
HTML code '$'$value'' cannot be parsed correct.
HTML code '$'$title'' cannot be parsed correct.
HTML code '$'$value'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'date_format($dateObj, "j M, Y,<\\b\\r>h:i a")'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'paginate_links(["format" => "?current_page=%#%", "current" => $paged, "total" => $the_query->max_num_pages])'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'esc_attr__("Summary...", "tutor")'' cannot be parsed correct.
HTML code '$'Announcement'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("assignments/submitted")?assignment=$array_$dotKey'' cannot be parsed correct.
HTML code '$'get_the_permalink($submitted_assignment->comment_post_ID)'' cannot be parsed correct.
HTML code '$'get_the_title($submitted_assignment->comment_post_ID)'' cannot be parsed correct.
HTML code '$'get_the_permalink($submitted_assignment->comment_parent)'' cannot be parsed correct.
HTML code '$'get_the_title($submitted_assignment->comment_parent)'' cannot be parsed correct.
HTML code '$'get_user_by("login", $submitted_assignment->comment_author)_display_name (get_user_by("login", $submitted_assignment->comment_author)_user_email)'' cannot be parsed correct.
HTML code '$'date("j M, Y, h:i a", strtotime($submitted_assignment->comment_date))'' cannot be parsed correct.
HTML code '$'wp_kses_post(nl2br(stripslashes($submitted_assignment->comment_content)))'' cannot be parsed correct.
HTML code '$'trailingslashit(tutor_utils()->array_get("baseurl", $upload_dir))tutor_utils()->array_get("uploaded_path", $attached_file)'' cannot be parsed correct.
HTML code '$'tutor_utils()->array_get("name", $attached_file)'' cannot be parsed correct.
HTML code '$'$array_$dotKey'' cannot be parsed correct.
HTML code '$'get_comment_meta($assignment_submitted_id, "assignment_mark", true)0'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("Evaluate this assignment out of %s", "tutor"), "<code>" . $max_mark . "</code>")'' cannot be parsed correct.
HTML code '$'get_comment_meta($assignment_submitted_id, "instructor_note", true)'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'tutor_get_formated_date(get_option("date_format"), $date_filter)'' cannot be parsed correct.
HTML code '$'get_option("date_format")'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'date_format($dateObj, "j M, Y,<\\b\\r>h:i a")'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'get_the_permalink($assignment_id)'' cannot be parsed correct.
HTML code '$'get_the_title($assignment_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_assignment_deadline_date($assignment_id, $format, __("No Limit", "tutor"))'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_assignment_option($assignment_id, "total_mark")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_assignment_option($assignment_id, "pass_mark")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("assignments")'' cannot be parsed correct.
HTML code '$'get_the_permalink($assignments_submitted[0]->comment_parent)'' cannot be parsed correct.
HTML code '$'get_the_title($assignments_submitted[0]->comment_parent)'' cannot be parsed correct.
HTML code '$'<p>No assignment available</p>'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course_builder_logo_src", tutor()->url . "assets/images/tutor-logo.png")'' cannot be parsed correct.
HTML code '$'get_the_permalink($course_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_dashboard_url()'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'date("j M, Y,<\\b\\r>h:i a", strtotime($assignment->comment_date))'' cannot be parsed correct.
HTML code '$'tutils()->get_tutor_avatar($comment_author->ID)'' cannot be parsed correct.
HTML code '$'get_user_by("login", $assignment->comment_author)_display_name'' cannot be parsed correct.
HTML code '$'get_user_by("login", $assignment->comment_author)_user_email'' cannot be parsed correct.
HTML code '$'get_comment_meta($assignment->comment_ID, "assignment_mark", true)/tutor_utils()->get_assignment_option($assignment_id, "total_mark")tutor_utils()->get_assignment_option($assignment_id, "total_mark")'' cannot be parsed correct.
HTML code '$'sprintf(__("%1$s Pending %2$s", "tutor"), "<span class="review-required">", "</span>")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("assignments/review")?view_assignment=$assignment&assignment=sanitize_text_field($_GET["assignment"])'' cannot be parsed correct.
HTML code '$'Evaluate'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'tutor_get_formated_date(get_option("date_format"), $date_filter)'' cannot be parsed correct.
HTML code '$'get_option("date_format")'' cannot be parsed correct.
HTML code '$'get_user_meta($user_id, "tutor_frontend_course_action_message", true)'' cannot be parsed correct.
HTML code '$'get_the_title()'' cannot be parsed correct.
HTML code '$'tutor_course_categories_dropdown($course_id, ["classes" => "tutor_select2"])'' cannot be parsed correct.
HTML code '$'tutor_course_tags_dropdown($course_id, ["classes" => "tutor_select2"])'' cannot be parsed correct.
HTML code '$'tutor_utils()->currency_symbol()'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_raw_course_price(get_the_ID())_regular_price'' cannot be parsed correct.
HTML code '$'get_the_post_thumbnail_url($course_id)'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/placeholder-course.jpg'' cannot be parsed correct.
HTML code '$'blocknone'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("Important Guideline: %1$s 700x430 pixels %2$s %3$s File Support: %1$s jpg, .jpeg,. gif, or .png %2$s no text on the image.", "tutor"), "<strong>", "</strong>", "<br>")'' cannot be parsed correct.
HTML code '$'get_post_thumbnail_id($course_id)'' cannot be parsed correct.
HTML code '$'$item'' cannot be parsed correct.
HTML code '$'Course'' cannot be parsed correct.
HTML code '$'get_the_permalink($course_id)'' cannot be parsed correct.
HTML code '$'get_the_title($course_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_assignment_option($item->ID, "total_mark")'' cannot be parsed correct.
HTML code '$'$wpdb->get_var($wpdb->prepare("SELECT COUNT(comment_ID) FROM "$wpdb->comments" WHERE comment_type = \\'tutor_assignment\\' AND comment_post_ID = %d", $item->ID))'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("assignments/submitted")?assignment=$item'' cannot be parsed correct.
HTML code '$'paginate_links(["format" => "?current_page=%#%", "current" => $current_page, "total" => ceil($assignments->count / $per_page)])'' cannot be parsed correct.
HTML code '$'<img alt=\'\' src=\'get_avatar_url(get_current_user_id(), "thumbnail")\' />'' cannot be parsed correct.
HTML code '$'<li class=\'tutor-dashboard-menu-divider-header\'>tutor_utils()->array_get("title", $dashboard_page)</li>'' cannot be parsed correct.
HTML code '$'<li><a href=\'$dashboard_page_url\'>$dashboard_page </a></li>'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_enrolled_courses_by_user()'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'count($completed_courses)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_avatar(get_current_user_id(), "thumbnail")'' cannot be parsed correct.
HTML code '$'get_option("date_format")'' cannot be parsed correct.
HTML code '$'<p>No Earning info available</p>'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->instructor_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->course_price_total)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->admin_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->deduct_fees_amount)'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("Showing Result from %1$s to %2$s", "tutor"), $begin->format("d F, Y"), $end->format("d F, Y"))'' cannot be parsed correct.
HTML code '$'<p>No Earning info available</p>'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_total_students_by_instructor(get_current_user_id())'' cannot be parsed correct.
HTML code '$'count($my_courses)'' cannot be parsed correct.
HTML code '$'tutor_kses_html(tutor_utils()->tutor_price($earning_sum->instructor_amount))'' cannot be parsed correct.
HTML code '$'get_the_permalink($course->ID)'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'tutor_utils()->count_enrolled_users_by_course($course->ID)'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'{"publish": "Published", "pending": "Pending", "trash": "Trash"}'' cannot be parsed correct.
HTML code '$'wp_json_encode(array_keys($chartData))'' cannot be parsed correct.
HTML code '$'wp_json_encode(array_values($chartData))'' cannot be parsed correct.
HTML code '$'<a href=remove_query_arg(["date_range_from", "date_range_to", "tutor_report_action"], $timePeriodPageURL)" class="$activeClass"$period_name</a> '' cannot be parsed correct.
HTML code '$'<input type="hidden" name="$name" value="$value" /'' cannot be parsed correct.
HTML code '$'sanitize_title_with_dashes("" !== $date_range_fromtutor_get_formated_date(get_option("date_format"), $date_range_from)"")'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->instructor_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->course_price_total)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->admin_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->deduct_fees_amount)'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("Earning Data for the month of %s", "tutor"), date("F, Y", strtotime($start_date)))'' cannot be parsed correct.
HTML code '$'<p>No Earning info available</p>'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->instructor_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->course_price_total)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->admin_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->deduct_fees_amount)'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("Showing Result from %1$s to %2$s", "tutor"), $begin->format("d F, Y"), $end->format("d F, Y"))'' cannot be parsed correct.
HTML code '$'get_option("date_format")'' cannot be parsed correct.
HTML code '$'sanitize_title_with_dashes("" !== $date_range_totutor_get_formated_date(get_option("date_format"), $date_range_to)"")'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->course_price_total)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->admin_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->deduct_fees_amount)'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("Earning Data for the year of %s", "tutor"), $year)'' cannot be parsed correct.
HTML code '$'<p>No Earning info available</p>'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->instructor_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->course_price_total)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->admin_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->deduct_fees_amount)'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("Earning Data for the month of %s", "tutor"), date("F, Y", strtotime($start_date)))'' cannot be parsed correct.
HTML code '$'<p>No Earning info available</p>'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->instructor_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("earning")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("earning/report")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("earning/statements")'' cannot be parsed correct.
HTML code '$'get_the_permalink($statement->course_id)'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($statement->course_price_total)'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format"), strtotime($statement->created_at)) date_i18n(get_option("time_format"), strtotime($statement->created_at))'' cannot be parsed correct.
HTML code '$'<div class="statement-address"> <strong>Purchaser</strong> <address>$order->get_formatted_billing_address()</address></div>'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($statement->instructor_amount)'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($statement->admin_amount)'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($statement->deduct_fees_amount)'' cannot be parsed correct.
HTML code '$'<p>No Earning info available</p>'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->instructor_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->course_price_total)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->admin_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->deduct_fees_amount)'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("Showing Result from %1$s to %2$s", "tutor"), $begin->format("d F, Y"), $end->format("d F, Y"))'' cannot be parsed correct.
HTML code '$'<p>No Earning info available</p>'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->instructor_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->course_price_total)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->admin_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->deduct_fees_amount)'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("Earning Data for the year of %s", "tutor"), $year)'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("earning")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("earning/report")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("earning/statements")'' cannot be parsed correct.
HTML code '$'date("F")'' cannot be parsed correct.
HTML code '$'wp_json_encode(array_keys($chartData))'' cannot be parsed correct.
HTML code '$'sprintf(__("Showing results %1$d to %2$d of %3$d", "tutor"), $offset + 1, min($statements->count, $offset + 1 + tutor_utils()->count($statements->results)), $statements->count)'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format"), strtotime($statement->created_at)) date_i18n(get_option("time_format"), strtotime($statement->created_at))'' cannot be parsed correct.
HTML code '$'get_the_permalink($statement->course_id)'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($statement->course_price_total)'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'<div class="statement-address">
										<strong>Purchaser: </strong> <address>$order->get_formatted_billing_address()</address>
									</div>'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($statement->instructor_amount)'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($statement->admin_amount)'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($statement->deduct_fees_amount)'' cannot be parsed correct.
HTML code '$'$statement'' cannot be parsed correct.
HTML code '$'paginate_links(["format" => "?current_page=%#%", "current" => $current_page, "total" => ceil($statements->count / $per_page)])'' cannot be parsed correct.
HTML code '$'<p>No Earning info available</p>'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("earning")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("earning/report")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("earning/statements")'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->balance)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->instructor_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->course_price_total)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->withdraws_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->admin_amount)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->deduct_fees_amount)'' cannot be parsed correct.
HTML code '$'<div class="tutor-mycourse-wrap"><div class="tutor-mycourse-content">You haven\'t purchased any course</div></div>'' cannot be parsed correct.
HTML code '$'get_avatar_url($user_id, ["size" => 150])'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_option("tutor_primary_color")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_option("tutor_primary_color")'' cannot be parsed correct.
HTML code '$'wp_json_encode(array_values($chartData))'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("enrolled-courses")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("enrolled-courses/active-courses")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("enrolled-courses/completed-courses")'' cannot be parsed correct.
HTML code '$'get_tutor_course_thumbnail_src()'' cannot be parsed correct.
HTML code '$'<span>tutor_utils()->get_lesson_count_by_course()</span>'' cannot be parsed correct.
HTML code '$'<span>tutor_utils()->get_completed_lesson_count_by_course() / tutor_utils()->get_lesson_count_by_course()</span>'' cannot be parsed correct.
HTML code '$'<div class="tutor-mycourse-wrap"><div class="tutor-mycourse-content">You are not enrolled in any course at this moment.</div></div>'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("enrolled-courses")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("enrolled-courses/active-courses")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("enrolled-courses/completed-courses")'' cannot be parsed correct.
HTML code '$'get_tutor_course_thumbnail_src()'' cannot be parsed correct.
HTML code '$'<span>tutor_utils()->get_lesson_count_by_course()</span>'' cannot be parsed correct.
HTML code '$'<span>tutor_utils()->get_completed_lesson_count_by_course() / tutor_utils()->get_lesson_count_by_course()</span>'' cannot be parsed correct.
HTML code '$'<div class="tutor-mycourse-wrap"><div class="tutor-mycourse-content">There\'s no completed course</div></div>'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("enrolled-courses")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("enrolled-courses/active-courses")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("enrolled-courses/completed-courses")'' cannot be parsed correct.
HTML code '$'home_url($post->post_type . "/" . $post->post_name)'' cannot be parsed correct.
HTML code '$'get_tutor_course_thumbnail_src()'' cannot be parsed correct.
HTML code '$'home_url($post->post_type . "/" . $post->post_name)'' cannot be parsed correct.
HTML code '$'<span>tutor_utils()->get_lesson_count_by_course()</span>'' cannot be parsed correct.
HTML code '$'<span>tutor_utils()->get_completed_lesson_count_by_course() / tutor_utils()->get_lesson_count_by_course()</span>'' cannot be parsed correct.
HTML code '$'<li>$error_value</li>'' cannot be parsed correct.
HTML code '$'tutor_utils()->input_old("first_name")'' cannot be parsed correct.
HTML code '$'tutor_utils()->input_old("last_name")'' cannot be parsed correct.
HTML code '$'tutor_utils()->input_old("user_login")'' cannot be parsed correct.
HTML code '$'get_user_by("ID", $user_id)_display_name'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_instructor_ratings($user->ID)_rating_avg'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("%d Ratings", "tutor"), $instructor_rating->rating_count)'' cannot be parsed correct.
HTML code '$'apply_filters("frontend_course_create_url", admin_url("post-new.php?post_type=" . tutor()->course_post_type))'' cannot be parsed correct.
HTML code '$'tutor_utils()->instructor_register_url()'' cannot be parsed correct.
HTML code '$'<li class="tutor-dashboard-menu-divider-header">tutils()->array_get("title", $dashboard_page)</li>'' cannot be parsed correct.
HTML code '$'<li class=tutor-dashboard-menu- "><a href="tutils()->get_tutor_dashboard_page_permalink($dashboard_key)">tutils()->array_get("title", $dashboard_page) </a> </li>'' cannot be parsed correct.
HTML code '$'tutor-alert-infotutor-alert-successtutor-alert-danger'' cannot be parsed correct.
HTML code '$'tutor_utils()->input_old("email")'' cannot be parsed correct.
HTML code '$'tutor_utils()->input_old("password")'' cannot be parsed correct.
HTML code '$'tutor_utils()->input_old("password_confirmation")'' cannot be parsed correct.
HTML code '$'get_tutor_course_thumbnail_src()'' cannot be parsed correct.
HTML code '$'<span>ucwords($post->post_status)</span>'' cannot be parsed correct.
HTML code '$'<span>get_tutor_course_duration_context()</span>'' cannot be parsed correct.
HTML code '$'<span>tutor_utils()->count_enrolled_users_by_course()</span>'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price(tutor_utils()->get_course_price())'' cannot be parsed correct.
HTML code '$'tutor_utils()->course_edit_link($post->ID)'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/delete-icon.png'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/new-user.png'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_dashboard_url()'' cannot be parsed correct.
HTML code '$'<span class="image"><img src="wp_get_attachment_image_url($ans->image_id)" /></span'' cannot be parsed correct.
HTML code '$'<span class="caption">stripslashes($ans->answer_title)</span>'' cannot be parsed correct.
HTML code '$'<span class="text-item-caption">stripslashes($ans->answer_title)</span>'' cannot be parsed correct.
HTML code '$'date("D d M Y, h:i:s a", strtotime($user->user_registered))'' cannot be parsed correct.
HTML code '$'get_current_user_id()________'' cannot be parsed correct.
HTML code '$'get_current_user_id()________'' cannot be parsed correct.
HTML code '$'get_current_user_id()'' cannot be parsed correct.
HTML code '$'get_current_user_id()'' cannot be parsed correct.
HTML code '$'get_user_meta($uid, "phone_number", true)________'' cannot be parsed correct.
HTML code '$'nl2br(strip_tags(get_user_meta($uid, "_tutor_profile_bio", true)))________'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_question_types($answer->question_type)_name'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_question_types($answer->question_type)_icon'' cannot be parsed correct.
HTML code '$'stripslashes($answer->question_title)'' cannot be parsed correct.
HTML code '$'<p>implode("</p><p>", $answer_titles)</p>'' cannot be parsed correct.
HTML code '$'<p>implode("</p><p>", $answer_titles)</p>'' cannot be parsed correct.
HTML code '$'<span class="image"><img src="wp_get_attachment_image_url($ans->image_id)"/></span'' cannot be parsed correct.
HTML code '$'<div class="image-match">stripslashes($ans->answer_two_gap_match)</div>'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("my-quiz-attempts")'' cannot be parsed correct.
HTML code '$'Quiz: <a href=\'get_permalink($attempt_data->quiz_id)\'>get_the_title($attempt_data->quiz_id)</a>'' cannot be parsed correct.
HTML code '$'Course: <a href=\'get_permalink($attempt_data->course_id)\'>get_the_title($attempt_data->course_id)</a>'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_attempt($attempt_id)_attempt_id'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format"), strtotime($attempt_data->attempt_started_at)) date_i18n(get_option("time_format"), strtotime($attempt_data->attempt_started_at))'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_attempt($attempt_id)_total_questions'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_attempt($attempt_id)_total_marks'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_quiz_option($attempt_data->quiz_id, "passing_grade", 0)%'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_attempt($attempt_id)_earned_marks'' cannot be parsed correct.
HTML code '$'(tutor_utils()->get_attempt($attempt_id)%)'' cannot be parsed correct.
HTML code '$'<span class="result-pass">Pass</span>'' cannot be parsed correct.
HTML code '$'<span class="result-fail">Fail</span>'' cannot be parsed correct.
HTML code '$'htmlspecialchars($feedback)'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'<span class="quiz-correct-answer-text"><i class="tutor-icon-mark"></i> Correct</span>'' cannot be parsed correct.
HTML code '$'<span class="tutor-status-blocked-context"><i class="tutor-icon-line-cross"></i> Incorrect</span>'' cannot be parsed correct.
HTML code '$'<p style="color: #878A8F;"><span style="color: #ff282a;">&ast;</span> Review Required</p>'' cannot be parsed correct.
HTML code '$'<span class="quiz-incorrect-answer-text"><i class="tutor-icon-line-cross"></i> Incorrect</span>'' cannot be parsed correct.
HTML code '$'tutor_get_template_html("dashboard.my-quiz-attempts.attempts-details")'' cannot be parsed correct.
HTML code '$'str_replace("{dash}", "_____", esc_attr(stripslashes($answer_title)))'' cannot be parsed correct.
HTML code '$'wpautop(stripslashes($answer->given_answer))'' cannot be parsed correct.
HTML code '$'<p>implode("</p><p>", $answer_titles)</p>'' cannot be parsed correct.
HTML code '$'stripslashes($original_saved_answer->answer_title) - stripslashes($provided_answer_order->answer_two_gap_match)<br />'' cannot be parsed correct.
HTML code '$'wp_get_attachment_image_url($original_saved_answer->image_id)'' cannot be parsed correct.
HTML code '$'stripslashes($provided_answer_order->answer_title)'' cannot be parsed correct.
HTML code '$'wp_get_attachment_image_url($db_answer->image_id)'' cannot be parsed correct.
HTML code '$'$image_answer'' cannot be parsed correct.
HTML code '$'$wpdb->get_var($wpdb->prepare("SELECT answer_title 
										FROM "$wpdb->prefix"tutor_quiz_question_answers 
										WHERE belongs_question_id = %d 
											AND is_correct = 1", $answer->question_id))'' cannot be parsed correct.
HTML code '$'implode(", ", explode("|", esc_attr(stripslashes($correct_answer))))'' cannot be parsed correct.
HTML code '$'<p>get_the_title($course["course_id"])</p>'' cannot be parsed correct.
HTML code '$'tutils()->tutor_price($wc_order->get_total())'' cannot be parsed correct.
HTML code '$'tutils()->order_status_context($order->post_status)'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format"), strtotime($order->post_date))'' cannot be parsed correct.
HTML code '$'tutils()->profile_url($question->user_id)'' cannot be parsed correct.
HTML code '$'tutils()->get_tutor_avatar($question->user_id)'' cannot be parsed correct.
HTML code '$'tutils()->profile_url($question->user_id)'' cannot be parsed correct.
HTML code '$'tutils()->get_qa_question($question_id)_display_name'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("%s ago", "tutor"), human_time_diff(strtotime($question->comment_date_gmt)))'' cannot be parsed correct.
HTML code '$'tutils()->get_qa_question($question_id)_question_title'' cannot be parsed correct.
HTML code '$'wp_kses_post(wpautop(stripslashes($question->comment_content)))'' cannot be parsed correct.
HTML code '$'tutor-bg-whitetutor-bg-light'' cannot be parsed correct.
HTML code '$'tutils()->profile_url($answer->user_id)'' cannot be parsed correct.
HTML code '$'tutils()->get_tutor_avatar($answer->user_id)'' cannot be parsed correct.
HTML code '$'get_the_permalink($attempt->course_id)'' cannot be parsed correct.
HTML code '$'get_the_title($attempt->course_id)'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format") . " " . get_option("time_format"), strtotime($attempt->attempt_ended_at))'' cannot be parsed correct.
HTML code '$'count($answers)'' cannot be parsed correct.
HTML code '$'$attempt'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'$attempt ($earned_percentage%)'' cannot be parsed correct.
HTML code '$'<span class="result-review-required">Under Review</span>'' cannot be parsed correct.
HTML code '$'<span class="result-pass">Pass</span><span class="result-fail">Fail</span>'' cannot be parsed correct.
HTML code '$'You have not attempted any quiz yet'' cannot be parsed correct.
HTML code '$'tutils()->tutor_dashboard_url("settings")'' cannot be parsed correct.
HTML code '$'<li>Set Your<span> $empty_field</span></li>'' cannot be parsed correct.
HTML code '$'tutils()->user_profile_completion()_progress% Complete'' cannot be parsed correct.
HTML code '$'tutils()->user_profile_completion()_progress'' cannot be parsed correct.
HTML code '$'tutils()->profile_url($answer->user_id)'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("%s ago", "tutor"), human_time_diff(strtotime($answer->comment_date_gmt)))'' cannot be parsed correct.
HTML code '$'wp_kses_post(wpautop(stripslashes($answer->comment_content)))'' cannot be parsed correct.
HTML code '$'admin_url("admin-post.php")'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'tutils()->get_tutor_dashboard_page_permalink("question-answer/answers?question_id=" . $question->comment_ID)'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'paginate_links(["format" => "?current_page=%#%", "current" => $current_page, "total" => ceil($total_items / $per_page)])'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/delete-icon.png'' cannot be parsed correct.
HTML code '$'$order'' cannot be parsed correct.
HTML code '$'<span class="image"><img src="wp_get_attachment_image_url($ans->image_id)" /></span'' cannot be parsed correct.
HTML code '$'<span class="caption">stripslashes($ans->answer_title)</span>'' cannot be parsed correct.
HTML code '$'<span class="text-item-caption">stripslashes($ans->answer_title)'' cannot be parsed correct.
HTML code '$'<span class="image"><img src="wp_get_attachment_image_url($ans->image_id)" /</span>'' cannot be parsed correct.
HTML code '$'<div class="image-match">stripslashes($ans->answer_two_gap_match)</div>'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("quiz-attempts")'' cannot be parsed correct.
HTML code '$'Quiz: <a href=\'get_permalink($attempt_data->quiz_id)\'>get_the_title($attempt_data->quiz_id)</a>'' cannot be parsed correct.
HTML code '$'Course: <a href=\'get_permalink($attempt_data->course_id)\'>get_the_title($attempt_data->course_id)</a>'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_attempt($attempt_id)_attempt_id'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format"), strtotime($attempt_data->attempt_started_at)) date_i18n(get_option("time_format"), strtotime($attempt_data->attempt_started_at))'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_attempt($attempt_id)_total_questions'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_attempt($attempt_id)_total_marks'' cannot be parsed correct.
HTML code '$'<p>implode("</p><p>", $answer_titles)</p>'' cannot be parsed correct.
HTML code '$'<p>implode("</p><p>", $answer_titles)</p>'' cannot be parsed correct.
HTML code '$'str_replace("{dash}", "_____", stripslashes($answer_title))'' cannot be parsed correct.
HTML code '$'wpautop(stripslashes($answer->given_answer))'' cannot be parsed correct.
HTML code '$'<p>implode("</p><p>", $answer_titles)</p>'' cannot be parsed correct.
HTML code '$'stripslashes($original_saved_answer->answer_title) - stripslashes($provided_answer_order->answer_two_gap_match) <br />'' cannot be parsed correct.
HTML code '$'wp_get_attachment_image_url($original_saved_answer->image_id)'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($provided_answer_order->answer_title))'' cannot be parsed correct.
HTML code '$'wp_get_attachment_image_url($db_answer->image_id)'' cannot be parsed correct.
HTML code '$'$image_answer'' cannot be parsed correct.
HTML code '$'$wpdb->get_var($wpdb->prepare("SELECT answer_title FROM "$wpdb->prefix"tutor_quiz_question_answers WHERE belongs_question_id = %d AND is_correct = 1", $answer->question_id))'' cannot be parsed correct.
HTML code '$'implode(", ", explode("|", stripslashes($correct_answer)))'' cannot be parsed correct.
HTML code '$'<span class="tutor-status-approved-context"><i class="tutor-icon-mark"></i> Correct</span>'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_quiz_option($attempt_data->quiz_id, "passing_grade", 0)%'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_attempt($attempt_id)_earned_marks'' cannot be parsed correct.
HTML code '$'(tutor_utils()->get_attempt($attempt_id)%)'' cannot be parsed correct.
HTML code '$'<span class="result-pass">Pass</span>'' cannot be parsed correct.
HTML code '$'<span class="result-fail">Fail</span>'' cannot be parsed correct.
HTML code '$'get_post_meta($attempt_id, "instructor_feedback", true)'' cannot be parsed correct.
HTML code '$'<p class="attempt-review-notice"> <i class="tutor-icon-warning-2"></i> <strong>Reminder: </strong> sprintf(__("Please review answers for question no. %s", "tutor"), implode(", ", $required_review))</p>'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format"), strtotime($attempt->manually_reviewed_at)) date_i18n(get_option("time_format"), strtotime($attempt->manually_reviewed_at))'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_question_types($answer->question_type)_icon'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($answer->question_title))'' cannot be parsed correct.
HTML code '$'<span class="tutor-status-blocked-context"><i class="tutor-icon-line-cross"></i> Incorrect</span>'' cannot be parsed correct.
HTML code '$'<p style="color: #878A8F;"><span style="color: #ff282a;">&ast;</span> Review Required</p>'' cannot be parsed correct.
HTML code '$'<span class="tutor-status-blocked-context"><i class="tutor-icon-line-cross"></i> Incorrect</span>'' cannot be parsed correct.
HTML code '$'$attempt_id'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'$attempt_id'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'get_post_meta($attempt_id, "instructor_feedback", true)'' cannot be parsed correct.
HTML code '$'$attempt_id'' cannot be parsed correct.
HTML code '$'get_the_permalink($attempt->course_id)'' cannot be parsed correct.
HTML code '$'get_the_title($attempt->course_id)'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format") . " " . get_option("time_format"), strtotime($attempt->attempt_ended_at))'' cannot be parsed correct.
HTML code '$'count($answers)'' cannot be parsed correct.
HTML code '$'$attempt'' cannot be parsed correct.
HTML code '$'$attempt'' cannot be parsed correct.
HTML code '$'stripslashes(esc_textarea($rating->review))'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("reviews")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_reviews_by_instructor(0, 0, 0)_count'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("reviews/given-reviews")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_reviews_by_user(0, 0, 150, true)_count'' cannot be parsed correct.
HTML code '$'$review'' cannot be parsed correct.
HTML code '$'get_the_permalink($review->comment_post_ID)'' cannot be parsed correct.
HTML code '$'get_the_title($review->comment_post_ID)'' cannot be parsed correct.
HTML code '$'$review'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("%s ago", "tutor"), human_time_diff(strtotime($review->comment_date)))'' cannot be parsed correct.
HTML code '$'wp_kses_post(wpautop(stripslashes($review->comment_content)))'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("reviews")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_reviews_by_instructor(get_current_user_id(), $offset, $per_page)_count'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("reviews/given-reviews")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_reviews_by_user(0, 0, 0, true)_count'' cannot be parsed correct.
HTML code '$'sprintf(__("Showing results %1$d to %2$d out of %3$d", "tutor"), $offset + 1, min($reviews->count, $offset + 1 + tutor_utils()->count($reviews->results)), $reviews->count)'' cannot be parsed correct.
HTML code '$'$review'' cannot be parsed correct.
HTML code '$'get_the_permalink($review->comment_post_ID)'' cannot be parsed correct.
HTML code '$'get_the_title($review->comment_post_ID)'' cannot be parsed correct.
HTML code '$'sprintf(__("%s ago", "tutor"), human_time_diff(strtotime($review->comment_date)))'' cannot be parsed correct.
HTML code '$'wp_kses_post(wpautop(stripslashes($review->comment_content)))'' cannot be parsed correct.
HTML code '$'$item'' cannot be parsed correct.
HTML code '$'$attempt'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'$attempt ($earned_percentage%)'' cannot be parsed correct.
HTML code '$'<span class="result-review-required">Under Review</span>'' cannot be parsed correct.
HTML code '$'<span class="result-pass">Pass</span><span class="result-fail">Fail</span>'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("quiz-attempts/quiz-reviews/?attempt_id=" . $attempt->attempt_id)'' cannot be parsed correct.
HTML code '$'paginate_links(["format" => "?current_page=%#%", "current" => $current_page, "total" => ceil($quiz_attempts_count / $per_page)])'' cannot be parsed correct.
HTML code '$'tutor_sanitize_data($_GET["id"])'' cannot be parsed correct.
HTML code '$'<li>$error_value</li>'' cannot be parsed correct.
HTML code '$'paginate_links(["format" => "?current_page=%#%", "current" => $current_page, "total" => ceil($reviews->count / $per_page)])'' cannot be parsed correct.
HTML code '$'active'' cannot be parsed correct.
HTML code '$'$menu_url'' cannot be parsed correct.
HTML code '$'$menu_title'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/cover-photo.jpg'' cannot be parsed correct.
HTML code '$'$cover_placeholder'' cannot be parsed correct.
HTML code '$'Update Cover PhotoUpload Cover Photo'' cannot be parsed correct.
HTML code '$'tutor()_url/assets/images/info-icon.svg'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/profile-photo.png'' cannot be parsed correct.
HTML code '$'$url'' cannot be parsed correct.
HTML code '$'<li>$error_value</li>'' cannot be parsed correct.
HTML code '$'wp_get_current_user()'' cannot be parsed correct.
HTML code '$'wp_get_current_user()'' cannot be parsed correct.
HTML code '$'wp_get_current_user()'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, "phone_number", true)'' cannot be parsed correct.
HTML code '$'strip_tags(get_user_meta($user->ID, "_tutor_profile_bio", true))'' cannot be parsed correct.
HTML code '$'<div class="tutor-col">You do not have any course on the wishlist yet.</div>'' cannot be parsed correct.
HTML code '$'$method_id'' cannot be parsed correct.
HTML code '$'$field_name'' cannot be parsed correct.
HTML code '$'$old_value'' cannot be parsed correct.
HTML code '$'$method_id'' cannot be parsed correct.
HTML code '$'$field_name'' cannot be parsed correct.
HTML code '$'$old_value'' cannot be parsed correct.
HTML code '$'$method_id'' cannot be parsed correct.
HTML code '$'$field_name'' cannot be parsed correct.
HTML code '$'$old_value'' cannot be parsed correct.
HTML code '$'$key'' cannot be parsed correct.
HTML code '$'$social_icon_label'' cannot be parsed correct.
HTML code '$'$key'' cannot be parsed correct.
HTML code '$'$key'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, $key, true)'' cannot be parsed correct.
HTML code '$'$social_icon_placeholder'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_flash_msg("success")'' cannot be parsed correct.
HTML code '$'<li>$error_value</li>'' cannot be parsed correct.
HTML code '$'$method_id'' cannot be parsed correct.
HTML code '$'$method_id'' cannot be parsed correct.
HTML code '$'$method_id'' cannot be parsed correct.
HTML code '$'$method_id'' cannot be parsed correct.
HTML code '$'$method_id'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("method_name", $method)'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($min_withdraw_amount)'' cannot be parsed correct.
HTML code '$'$method_id'' cannot be parsed correct.
HTML code '$'$method_id'' cannot be parsed correct.
HTML code '$'$field_name $field_type'' cannot be parsed correct.
HTML code '$'<label for="field$method_id_$field_name"$field_label</label>'' cannot be parsed correct.
HTML code '$'<p class="withdraw-field-desc">$field_desc</p>'' cannot be parsed correct.
HTML code '$'$page_url'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($withdraw_history->amount)'' cannot be parsed correct.
HTML code '$'$withdraw_history'' cannot be parsed correct.
HTML code '$'ucfirst($withdraw_history->status)'' cannot be parsed correct.
HTML code '$'tutor()_url/assets/images/'' cannot be parsed correct.
HTML code '$'{"rejected": "Please contact the site administrator for more information.", "pending": "Withdrawal request is pending for approval, please hold tight."}_$withdraw_history'' cannot be parsed correct.
HTML code '$'$method_id'' cannot be parsed correct.
HTML code '$'$field_name'' cannot be parsed correct.
HTML code '$'$old_value'' cannot be parsed correct.
HTML code '$'Withdrawal'' cannot be parsed correct.
HTML code '$'tutor()_url/assets/images/'' cannot be parsed correct.
HTML code '$'sprintf(__("You currently have %1$s %2$s %3$s ready to withdraw", "tutor"), "<strong class=\\'available_balance\\'>", $balance_formatted, "</strong>")'' cannot be parsed correct.
HTML code '$'sprintf(__("You currently have %1$s %2$s %3$s and this is insufficient balance to withdraw", "tutor"), "<strong class=\\'available_balance\\'>", $balance_formatted, "</strong>")'' cannot be parsed correct.
HTML code '$'tutor()_url/assets/images/'' cannot be parsed correct.
HTML code '$'sprintf(__("The preferred payment method is selected as %s. ", "tutor"), $withdraw_method_name)'' cannot be parsed correct.
HTML code '$'sprintf(__("You can change your %1$s withdrawal preference %2$s", "tutor"), "<a href=" . esc_url($my_profile_url) . """, "</a>")'' cannot be parsed correct.
HTML code '$'tutor()_url/assets/images/'' cannot be parsed correct.
HTML code '$'tutor()_url/assets/images/'' cannot be parsed correct.
HTML code '$'tutor_utils()->tutor_price($earning_sum->balance)'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("withdraw_method_name", $saved_account)'' cannot be parsed correct.
HTML code '$'get_woocommerce_currency_symbol()'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_option("min_withdraw_amount")'' cannot be parsed correct.
HTML code '$'tutor()_url/assets/images/'' cannot be parsed correct.
HTML code '$'get_avatar_url($user_id, ["size" => 150])'' cannot be parsed correct.
HTML code '$'get_user_by("ID", $user_id)_display_name'' cannot be parsed correct.
HTML code '$'tutils()->get_instructor_ratings($user->ID)_rating_avg'' cannot be parsed correct.
HTML code '$'sprintf(__("%d Ratings", "tutor"), $instructor_rating->rating_count)'' cannot be parsed correct.
HTML code '$'tutils()->instructor_register_url()'' cannot be parsed correct.
HTML code '$'apply_filters("frontend_course_create_url", admin_url("post-new.php?post_type=" . tutor()->course_post_type))'' cannot be parsed correct.
HTML code '$'<span style=display:inline-block; color:#7A7A7A; font-size: 15px;">
										<i class="dashicons dashicons-info" style="color:#E53935; vertical-align: middle; margin-right: 7px;"></iYour Application is pending from <b>date("d F, Y", $on)</b></span>'' cannot be parsed correct.
HTML code '$'ob_get_clean()'' cannot be parsed correct.
HTML code '$'Your application to become an instructor was rejected on date("d F, Y", $rejected_on)</span>
											<a href="?tutor_action=hide_instructor_notice">
												â
											</a>'' cannot be parsed correct.
HTML code '$'Minimum withdraw amount is strip_tags($formatted_min_withdraw_amount)'' cannot be parsed correct.
HTML code '$'{"bank_transfer_withdraw": "tutor()_url", "echeck_withdraw": "tutor()_url", "paypal_withdraw": "tutor()_url"}_maybe_unserialize($withdraw_history->method_data)_withdraw_method_key'' cannot be parsed correct.
HTML code '$'<strong class="withdraw-method-name">tutor_utils()->avalue_dot("withdraw_method_name", $method_data)</strong>'' cannot be parsed correct.
HTML code '$'<small></small>'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format") . " " . get_option("time_format"), strtotime($withdraw_history->created_at))'' cannot be parsed correct.
HTML code '$'add_query_arg(["reset_key" => $reset_key, "user_id" => $user_id], tutils()->tutor_dashboard_url("retrieve-password"))'' cannot be parsed correct.
HTML code '$'$image_path'' cannot be parsed correct.
HTML code '$'$title'' cannot be parsed correct.
HTML code '$'wp_kses_post($description)'' cannot be parsed correct.
HTML code '$'$button_url'' cannot be parsed correct.
HTML code '$'<li class="tutor-dashboard-menu-divider-header">tutils()->array_get("title", $dashboard_page)</li>'' cannot be parsed correct.
HTML code '$'<li class=tutor-dashboard-menu- $wp_query_tutor_dashboard_page"><a href="tutils()->get_tutor_dashboard_page_permalink($dashboard_key)">$dashboard_page </a> </li>'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'{"echo": "true", "redirect": "https://", "form_id": "loginform", "label_username": "Username or Email Address", "label_password": "Password", "label_remember": "Remember Me", "label_log_in": "Log In", "label_create_new_account": "Create a new account", "id_username": "user_login", "id_password": "user_pass", "id_remember": "rememberme", "id_submit": "wp-submit", "remember": "true", "value_username": "tutils()->input_old(\"log\")", "value_remember": "false", "wp_lostpassword_url": "apply_filters(\"tutor_lostpassword_url\", wp_lostpassword_url())", "wp_lostpassword_label": "Forgot Password?"}_label_remember'' cannot be parsed correct.
HTML code '$'{"echo": "true", "redirect": "https://", "form_id": "loginform", "label_username": "Username or Email Address", "label_password": "Password", "label_remember": "Remember Me", "label_log_in": "Log In", "label_create_new_account": "Create a new account", "id_username": "user_login", "id_password": "user_pass", "id_remember": "rememberme", "id_submit": "wp-submit", "remember": "true", "value_username": "tutils()->input_old(\"log\")", "value_remember": "false", "wp_lostpassword_url": "apply_filters(\"tutor_lostpassword_url\", wp_lostpassword_url())", "wp_lostpassword_label": "Forgot Password?"}_wp_lostpassword_url'' cannot be parsed correct.
HTML code '$'{"echo": "true", "redirect": "https://", "form_id": "loginform", "label_username": "Username or Email Address", "label_password": "Password", "label_remember": "Remember Me", "label_log_in": "Log In", "label_create_new_account": "Create a new account", "id_username": "user_login", "id_password": "user_pass", "id_remember": "rememberme", "id_submit": "wp-submit", "remember": "true", "value_username": "tutils()->input_old(\"log\")", "value_remember": "false", "wp_lostpassword_url": "apply_filters(\"tutor_lostpassword_url\", wp_lostpassword_url())", "wp_lostpassword_label": "Forgot Password?"}_wp_lostpassword_label'' cannot be parsed correct.
HTML code '$'{"echo": "true", "redirect": "https://", "form_id": "loginform", "label_username": "Username or Email Address", "label_password": "Password", "label_remember": "Remember Me", "label_log_in": "Log In", "label_create_new_account": "Create a new account", "id_username": "user_login", "id_password": "user_pass", "id_remember": "rememberme", "id_submit": "wp-submit", "remember": "true", "value_username": "tutils()->input_old(\"log\")", "value_remember": "false", "wp_lostpassword_url": "apply_filters(\"tutor_lostpassword_url\", wp_lostpassword_url())", "wp_lostpassword_label": "Forgot Password?"}_id_submit'' cannot be parsed correct.
HTML code '$'{"echo": "true", "redirect": "https://", "form_id": "loginform", "label_username": "Username or Email Address", "label_password": "Password", "label_remember": "Remember Me", "label_log_in": "Log In", "label_create_new_account": "Create a new account", "id_username": "user_login", "id_password": "user_pass", "id_remember": "rememberme", "id_submit": "wp-submit", "remember": "true", "value_username": "tutils()->input_old(\"log\")", "value_remember": "false", "wp_lostpassword_url": "apply_filters(\"tutor_lostpassword_url\", wp_lostpassword_url())", "wp_lostpassword_label": "Forgot Password?"}_label_log_in'' cannot be parsed correct.
HTML code '$'{"echo": "true", "redirect": "https://", "form_id": "loginform", "label_username": "Username or Email Address", "label_password": "Password", "label_remember": "Remember Me", "label_log_in": "Log In", "label_create_new_account": "Create a new account", "id_username": "user_login", "id_password": "user_pass", "id_remember": "rememberme", "id_submit": "wp-submit", "remember": "true", "value_username": "tutils()->input_old(\"log\")", "value_remember": "false", "wp_lostpassword_url": "apply_filters(\"tutor_lostpassword_url\", wp_lostpassword_url())", "wp_lostpassword_label": "Forgot Password?"}_redirect'' cannot be parsed correct.
HTML code '$'add_query_arg($query_args, $register_page)'' cannot be parsed correct.
HTML code '$'{"echo": "true", "redirect": "https://", "form_id": "loginform", "label_username": "Username or Email Address", "label_password": "Password", "label_remember": "Remember Me", "label_log_in": "Log In", "label_create_new_account": "Create a new account", "id_username": "user_login", "id_password": "user_pass", "id_remember": "rememberme", "id_submit": "wp-submit", "remember": "true", "value_username": "tutils()->input_old(\"log\")", "value_remember": "false", "wp_lostpassword_url": "apply_filters(\"tutor_lostpassword_url\", wp_lostpassword_url())", "wp_lostpassword_label": "Forgot Password?"}_label_create_new_account'' cannot be parsed correct.
HTML code '$'selected-template'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/instructor-layout/$template.jpg'' cannot be parsed correct.
HTML code '$'$template'' cannot be parsed correct.
HTML code '$'$button_text'' cannot be parsed correct.
HTML code '$'$attachment'' cannot be parsed correct.
HTML code '$'$open_mode_view download=$attachment"'' cannot be parsed correct.
HTML code '$'$attachment'' cannot be parsed correct.
HTML code '$'$attachment'' cannot be parsed correct.
HTML code '$'$attachment'' cannot be parsed correct.
HTML code '$'sprintf($count_text, "<strong>" . $courseCount . "</strong>")'' cannot be parsed correct.
HTML code '$'<button class=implode(" ", [$args["style"], $args["color"], $args["class"]])"edd_currency_filter(edd_format_amount($download->price))&nbsp;&ndash;&nbsp;apply_filters("edd_purchase_link_defaults", ["text" => $button_behavior == "direct"edd_get_option("buy_now_text", __("Buy Now", "easy-digital-downloads"))edd_get_option("add_to_cart_text", __("Purchase", "easy-digital-downloads")), "style" => edd_get_option("button_style", "button"), "color" => edd_get_option("checkout_color", "blue"), "class" => "edd-submit cart-required-login"])_text</button>'' cannot be parsed correct.
HTML code '$'edd_get_purchase_link(["download_id" => $download->ID])'' cannot be parsed correct.
HTML code '$'{"echo": "true", "redirect": "https://", "form_id": "loginform", "label_username": "Username or Email Address", "label_password": "Password", "label_remember": "Remember Me", "label_log_in": "Log In", "label_create_new_account": "Create a new account", "id_username": "user_login", "id_password": "user_pass", "id_remember": "rememberme", "id_submit": "wp-submit", "remember": "true", "value_username": "tutils()->input_old(\"log\")", "value_remember": "false", "wp_lostpassword_url": "apply_filters(\"tutor_lostpassword_url\", wp_lostpassword_url())", "wp_lostpassword_label": "Forgot Password?"}_form_id'' cannot be parsed correct.
HTML code '$'{"echo": "true", "redirect": "https://", "form_id": "loginform", "label_username": "Username or Email Address", "label_password": "Password", "label_remember": "Remember Me", "label_log_in": "Log In", "label_create_new_account": "Create a new account", "id_username": "user_login", "id_password": "user_pass", "id_remember": "rememberme", "id_submit": "wp-submit", "remember": "true", "value_username": "tutils()->input_old(\"log\")", "value_remember": "false", "wp_lostpassword_url": "apply_filters(\"tutor_lostpassword_url\", wp_lostpassword_url())", "wp_lostpassword_label": "Forgot Password?"}_form_id'' cannot be parsed correct.
HTML code '$'sanitize_text_field($post->ID)'' cannot be parsed correct.
HTML code '$'ob_get_clean()'' cannot be parsed correct.
HTML code '$'{"echo": "true", "redirect": "https://", "form_id": "loginform", "label_username": "Username or Email Address", "label_password": "Password", "label_remember": "Remember Me", "label_log_in": "Log In", "label_create_new_account": "Create a new account", "id_username": "user_login", "id_password": "user_pass", "id_remember": "rememberme", "id_submit": "wp-submit", "remember": "true", "value_username": "tutils()->input_old(\"log\")", "value_remember": "false", "wp_lostpassword_url": "apply_filters(\"tutor_lostpassword_url\", wp_lostpassword_url())", "wp_lostpassword_label": "Forgot Password?"}_label_username'' cannot be parsed correct.
HTML code '$'{"echo": "true", "redirect": "https://", "form_id": "loginform", "label_username": "Username or Email Address", "label_password": "Password", "label_remember": "Remember Me", "label_log_in": "Log In", "label_create_new_account": "Create a new account", "id_username": "user_login", "id_password": "user_pass", "id_remember": "rememberme", "id_submit": "wp-submit", "remember": "true", "value_username": "tutils()->input_old(\"log\")", "value_remember": "false", "wp_lostpassword_url": "apply_filters(\"tutor_lostpassword_url\", wp_lostpassword_url())", "wp_lostpassword_label": "Forgot Password?"}_id_username'' cannot be parsed correct.
HTML code '$'{"echo": "true", "redirect": "https://", "form_id": "loginform", "label_username": "Username or Email Address", "label_password": "Password", "label_remember": "Remember Me", "label_log_in": "Log In", "label_create_new_account": "Create a new account", "id_username": "user_login", "id_password": "user_pass", "id_remember": "rememberme", "id_submit": "wp-submit", "remember": "true", "value_username": "tutils()->input_old(\"log\")", "value_remember": "false", "wp_lostpassword_url": "apply_filters(\"tutor_lostpassword_url\", wp_lostpassword_url())", "wp_lostpassword_label": "Forgot Password?"}_value_username'' cannot be parsed correct.
HTML code '$'{"echo": "true", "redirect": "https://", "form_id": "loginform", "label_username": "Username or Email Address", "label_password": "Password", "label_remember": "Remember Me", "label_log_in": "Log In", "label_create_new_account": "Create a new account", "id_username": "user_login", "id_password": "user_pass", "id_remember": "rememberme", "id_submit": "wp-submit", "remember": "true", "value_username": "tutils()->input_old(\"log\")", "value_remember": "false", "wp_lostpassword_url": "apply_filters(\"tutor_lostpassword_url\", wp_lostpassword_url())", "wp_lostpassword_label": "Forgot Password?"}_label_password'' cannot be parsed correct.
HTML code '$'{"echo": "true", "redirect": "https://", "form_id": "loginform", "label_username": "Username or Email Address", "label_password": "Password", "label_remember": "Remember Me", "label_log_in": "Log In", "label_create_new_account": "Create a new account", "id_username": "user_login", "id_password": "user_pass", "id_remember": "rememberme", "id_submit": "wp-submit", "remember": "true", "value_username": "tutils()->input_old(\"log\")", "value_remember": "false", "wp_lostpassword_url": "apply_filters(\"tutor_lostpassword_url\", wp_lostpassword_url())", "wp_lostpassword_label": "Forgot Password?"}_id_password'' cannot be parsed correct.
HTML code '$'{"echo": "true", "redirect": "https://", "form_id": "loginform", "label_username": "Username or Email Address", "label_password": "Password", "label_remember": "Remember Me", "label_log_in": "Log In", "label_create_new_account": "Create a new account", "id_username": "user_login", "id_password": "user_pass", "id_remember": "rememberme", "id_submit": "wp-submit", "remember": "true", "value_username": "tutils()->input_old(\"log\")", "value_remember": "false", "wp_lostpassword_url": "apply_filters(\"tutor_lostpassword_url\", wp_lostpassword_url())", "wp_lostpassword_label": "Forgot Password?"}_id_remember'' cannot be parsed correct.
HTML code '$'<div class="price"> $product->get_price_html()<div  class="tutor-loop-cart-btn-wrap"><a href="get_the_permalink()"Continue Course</a></div> </div>'' cannot be parsed correct.
HTML code '$'<div class="price"> $product->get_price_html()<div  class="tutor-loop-cart-btn-wrap"><a href="$cart_url"View Cart</a></div> </div>'' cannot be parsed correct.
HTML code '$'<div class="price"> Free<div  class="tutor-public-course-start-learning">apply_filters("tutor_course_restrict_new_entry", "<a href=" . get_the_permalink() . """ . __("Get Enrolled", "tutor") . "</a>")</div></div>'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course_restrict_new_entry", apply_filters("woocommerce_loop_add_to_cart_link", sprintf("<a href="%s" data-quantity="%s" class="%s" %s>%s</a>", esc_url($product->add_to_cart_url()), esc_attr(isset($args["quantity"])$args["quantity"]1), esc_attr(isset($args["class"])$args["class"]"button"), isset($args["attributes"])wc_implode_html_attributes($args["attributes"])"", esc_html($product->add_to_cart_text())), $product, $args))'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($authordata->ID)'' cannot be parsed correct.
HTML code '$'get_the_author()'' cannot be parsed correct.
HTML code '$'$option'' cannot be parsed correct.
HTML code '$'tutor_utils()->count_enrolled_users_by_course()'' cannot be parsed correct.
HTML code '$'get_tutor_course_duration_context()'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($authordata->ID)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_avatar($post->post_author)'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($authordata->ID)'' cannot be parsed correct.
HTML code '$'get_the_author()'' cannot be parsed correct.
HTML code '$'<a href=get_term_link($course_category->term_id)">$course_category</a>'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course_rating_average", $course_rating->rating_avg)'' cannot be parsed correct.
HTML code '$'<i>(apply_filters("tutor_course_rating_count", $course_rating->rating_count))</i>'' cannot be parsed correct.
HTML code '$'<div class="price"> apply_filters("tutor-loop-default-price", $is_public""__("Free", "tutor"))<div  class="tutor-public-course-start-learning">apply_filters("tutor_course_restrict_new_entry", "<a href=" . get_the_permalink() . """ . __("Get Enrolled", "tutor") . "</a>")</div></div>'' cannot be parsed correct.
HTML code '$'<div class="price"> apply_filters("tutor-loop-default-price", __("Free", "tutor"))<div  class="tutor-public-course-start-learning">apply_filters("tutor_course_restrict_new_entry", "<a href=" . get_the_permalink() . """ . __("Get Enrolled", "tutor") . "</a>")</div></div>'' cannot be parsed correct.
HTML code '$'<span class="tutor-course-loop-level">get_tutor_course_level()</span>'' cannot be parsed correct.
HTML code '$'<span class="tutor-course-wishlist"><a href="javascript:;" class="tutor-icon-fav-line apply_filters("tutor_wishlist_btn_class", "tutor-course-wishlist-btn") has-wish-listed " data-course-id="get_the_ID()"></a> </span'' cannot be parsed correct.
HTML code '$'get_the_permalink()'' cannot be parsed correct.
HTML code '$'paginate_links(["base" => str_replace($big, "%#%", esc_url(get_pagenum_link($big))), "format" => "?paged=%#%", "current" => max(1, get_query_var("paged")), "total" => $wp_query->max_num_pages])'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/denied.png'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/tutor-logo.png'' cannot be parsed correct.
HTML code '$'$headlinePermission Denied'' cannot be parsed correct.
HTML code '$'$messageYou don\'t have enough privilege to access this page'' cannot be parsed correct.
HTML code '$'$descriptionPlease make sure you are logged in to correct account if the content needs authorization.'' cannot be parsed correct.
HTML code '$'{"url": "get_home_url()", "text": "Homepage"}_url'' cannot be parsed correct.
HTML code '$'{"url": "get_home_url()", "text": "Homepage"}_text'' cannot be parsed correct.
HTML code '$'wp_kses_post(wpautop($profile_bio))'' cannot be parsed correct.
HTML code '$'$review'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($review->user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_avatar($review->user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($review->user_id)'' cannot be parsed correct.
HTML code '$'$review'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("%s ago", "tutor"), human_time_diff(strtotime($review->comment_date)))'' cannot be parsed correct.
HTML code '$'get_the_permalink($review->comment_post_ID)'' cannot be parsed correct.
HTML code '$'get_the_title($review->comment_post_ID)'' cannot be parsed correct.
HTML code '$'wp_kses_post(wpautop($review->comment_content))'' cannot be parsed correct.
HTML code '$'selected-template'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/public-profile/$template.jpg'' cannot be parsed correct.
HTML code '$'$layout_option_name'' cannot be parsed correct.
HTML code '$'$template'' cannot be parsed correct.
HTML code '$'$category'' cannot be parsed correct.
HTML code '$'<a class="page-numbers" href="$prev_url" data-page_number="$previous_page">Â«Previous</a>'' cannot be parsed correct.
HTML code '$'&nbsp; <a class="next page-numbers" href="$next_url" data-page_number="$next_page"Next Â»</a>'' cannot be parsed correct.
HTML code '$'get_the_permalink($course_id)'' cannot be parsed correct.
HTML code '$'Go to Course Home'' cannot be parsed correct.
HTML code '$'$category'' cannot be parsed correct.
HTML code '$'data-$key=$value"'' cannot be parsed correct.
HTML code '$'ob_get_clean()'' cannot be parsed correct.
HTML code '$'ob_get_clean()'' cannot be parsed correct.
HTML code '$'$content'' cannot be parsed correct.
HTML code '$'$GLOBALS_tutor_shortcode_arg_column_per_row'' cannot be parsed correct.
HTML code '$'$GLOBALS_tutor_shortcode_arg_course_per_page'' cannot be parsed correct.
HTML code '$'$column_count'' cannot be parsed correct.
HTML code '$'$column_count'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($instructor->ID)'' cannot be parsed correct.
HTML code '$'$layout'' cannot be parsed correct.
HTML code '$'$instructor'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_cover_photo_url($instructor->ID)'' cannot be parsed correct.
HTML code '$'get_avatar_url($instructor->ID, ["size" => 500])'' cannot be parsed correct.
HTML code '$' <span class="rating-digits">tutor_utils()->get_instructor_ratings($instructor->ID)_rating_avg</span> '' cannot be parsed correct.
HTML code '$' <span class="rating-total-meta">(tutor_utils()->get_instructor_ratings($instructor->ID)_rating_count)</span> '' cannot be parsed correct.
HTML code '$'$instructor'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_course_count_by_instructor($instructor->ID)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_assignment_option(get_the_ID(), "time_duration", ["time" => "", "value" => 0])_value tutor_utils()->get_assignment_option(get_the_ID(), "time_duration", ["time" => "", "value" => 0])_timeNo limit'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_assignment_option(get_the_ID(), "total_mark")'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_assignment_option(get_the_ID(), "pass_mark")'' cannot be parsed correct.
HTML code '$'wp_get_attachment_url($attachment_id)'' cannot be parsed correct.
HTML code '$'substr($attachment_name, strrpos($attachment_name, "/") + 1)'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'1'' cannot be parsed correct.
HTML code '$'1'' cannot be parsed correct.
HTML code '$'No Instructor Found'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_assignment/single/results/after", ob_get_clean(), $submit_id, $assignment_id)'' cannot be parsed correct.
HTML code '$'wp_kses_post(nl2br(stripslashes($submitted_assignment->comment_content)))'' cannot be parsed correct.
HTML code '$'trailingslashit(tutor_utils()->array_get("baseurl", $upload_dir))tutor_utils()->array_get("uploaded_path", $attached_file)'' cannot be parsed correct.
HTML code '$'tutor_utils()->array_get("name", $attached_file)'' cannot be parsed correct.
HTML code '$'nl2br(get_comment_meta($submitted_assignment->comment_ID, "instructor_note", true))'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'edd_get_purchase_link(["download_id" => $download->ID])'' cannot be parsed correct.
HTML code '$'wc_get_cart_url()'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course_add_to_cart_form_action", get_permalink(get_the_ID()))'' cannot be parsed correct.
HTML code '$'sprintf(__("You received %1$s points out of %2$s", "tutor"), "<span class="received-marks">" . $given_mark . "</span>", "<span class="out-of-marks">" . $max_mark . "</span>")'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_course_first_lesson()'' cannot be parsed correct.
HTML code '$'<li>$benefit</li>'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_course_first_lesson()'' cannot be parsed correct.
HTML code '$'tutor-course-entry-button tutor-button tutor-button-primary tutor-course-retake-button'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'sprintf(__("You have been enrolled on %s.", "tutor"), "<span>" . date_i18n(get_option("date_format"), strtotime($enrolled->post_date)) . "</span>")'' cannot be parsed correct.
HTML code '$'<li>$requirement</li>'' cannot be parsed correct.
HTML code '$'<li>$audience</li>'' cannot be parsed correct.
HTML code '$'<span>tutor_utils()->get_lesson_count_by_course($course_id) Lessons</span>'' cannot be parsed correct.
HTML code '$'<span>get_tutor_course_duration_context($course_id)</span>'' cannot be parsed correct.
HTML code '$'<a href=get_term_link($course_category->term_id)"$course_category</a>'' cannot be parsed correct.
HTML code '$'$product->get_id()'' cannot be parsed correct.
HTML code '$'$product->single_add_to_cart_text()'' cannot be parsed correct.
HTML code '$'tutils()->get_option("disable_tutor_native_login")'' cannot be parsed correct.
HTML code '$'implode(" ", $tutor_form_class)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_course_first_lesson(get_the_ID())'' cannot be parsed correct.
HTML code '$'implode(" ", $tutor_form_class)'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'has-summery'' cannot be parsed correct.
HTML code '$'wp_kses_post($topic_summery)'' cannot be parsed correct.
HTML code '$'display: none'' cannot be parsed correct.
HTML code '$'false'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course/contents/lesson/title", $lesson_title, get_the_ID())'' cannot be parsed correct.
HTML code '$'$announcement'' cannot be parsed correct.
HTML code '$'tutor_utils()->announcement_content(wpautop(stripslashes($announcement->post_content)))'' cannot be parsed correct.
HTML code '$'get_tutor_course_duration_context()'' cannot be parsed correct.
HTML code '$'get_the_modified_date()'' cannot be parsed correct.
HTML code '$'tutor_get_the_excerpt()'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'active'' cannot be parsed correct.
HTML code '$'get_permalink()'' cannot be parsed correct.
HTML code '$'<li class=$active_class">
							<a href="trailingslashit(get_permalink())$nav_key"$nav_item</a> 
						</li>'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($question->user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_avatar($question->user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($question->user_id)'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("%s ago", "tutor"), human_time_diff(strtotime($question->comment_date_gmt)))'' cannot be parsed correct.
HTML code '$'stripslashes($question->question_title)'' cannot be parsed correct.
HTML code '$'wp_kses_post(stripslashes($question->comment_content))'' cannot be parsed correct.
HTML code '$'tutor-bg-whitetutor-bg-light'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($answer->user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_avatar($answer->user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($answer->user_id)'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("%s ago", "tutor"), human_time_diff(strtotime($answer->comment_date_gmt)))'' cannot be parsed correct.
HTML code '$'wp_kses_post(stripslashes($answer->comment_content))'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'<li>$material</li>'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_course_completed_percent()%;'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_course_completed_percent()'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_course_rating()_rating_avg'' cannot be parsed correct.
HTML code '$'<i>(tutor_utils()->get_course_rating()_rating_count)</i>'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($authordata->ID)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_avatar($post->post_author)'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($authordata->ID)'' cannot be parsed correct.
HTML code '$'get_the_author()'' cannot be parsed correct.
HTML code '$'get_tutor_course_level()'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($instructor->ID)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_avatar($instructor->ID)'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($instructor->ID)'' cannot be parsed correct.
HTML code '$'$instructor'' cannot be parsed correct.
HTML code '$'<h4>$instructor</h4>'' cannot be parsed correct.
HTML code '$'$instructor'' cannot be parsed correct.
HTML code '$' <span class="rating-digits">tutor_utils()->get_instructor_ratings($instructor->ID)_rating_avg</span> '' cannot be parsed correct.
HTML code '$' <span class="rating-total-meta">(tutor_utils()->get_instructor_ratings($instructor->ID)_rating_count ratings)</span> '' cannot be parsed correct.
HTML code '$'tutor_utils()->get_course_count_by_instructor($instructor->ID)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_total_students_by_instructor($instructor->ID)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_course_rating()_rating_avg'' cannot be parsed correct.
HTML code '$'<i>(tutor_utils()->get_course_rating()_rating_count)</i>'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($authordata->ID)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_avatar($post->post_author)'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($authordata->ID)'' cannot be parsed correct.
HTML code '$'get_the_author()'' cannot be parsed correct.
HTML code '$'get_tutor_course_level()'' cannot be parsed correct.
HTML code '$'stripslashes(esc_textarea($rating->review))'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course/global/login", ob_get_clean())'' cannot be parsed correct.
HTML code '$'number_format($rating->rating_avg, 1)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_course_rating()_rating_count'' cannot be parsed correct.
HTML code '$'$key'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_course_rating()'' cannot be parsed correct.
HTML code '$'$value '' cannot be parsed correct.
HTML code '$'ratingsrating'' cannot be parsed correct.
HTML code '$'$review'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($review->user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_avatar($review->user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($review->user_id)'' cannot be parsed correct.
HTML code '$'$review'' cannot be parsed correct.
HTML code '$'sprintf(__("%s ago", "tutor"), human_time_diff(strtotime($review->comment_date)))'' cannot be parsed correct.
HTML code '$'wp_kses_post(wpautop(stripslashes($review->comment_content)))'' cannot be parsed correct.
HTML code '$'json_encode($share_config)'' cannot be parsed correct.
HTML code '$'<button class="tutor_share$icon_share_class">$icon_icon_html </button>'' cannot be parsed correct.
HTML code '$'<a href=get_term_link($course_category->term_id)"$course_category</a>'' cannot be parsed correct.
HTML code '$'get_tutor_course_duration_context()'' cannot be parsed correct.
HTML code '$'get_the_modified_date()'' cannot be parsed correct.
HTML code '$'tutor_get_the_excerpt()'' cannot be parsed correct.
HTML code '$'get_the_permalink($course_id)'' cannot be parsed correct.
HTML code '$'Go to Course Home'' cannot be parsed correct.
HTML code '$'json_encode($jsonData)'' cannot be parsed correct.
HTML code '$'<a href=get_term_link($course_tag->term_id)">$course_tag </a>'' cannot be parsed correct.
HTML code '$'<div class="price">apply_filters("get_tutor_course_price", null, get_the_ID())</div>'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'active'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'has-summery'' cannot be parsed correct.
HTML code '$'wp_kses_post($topic_summery)'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'active'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'get_permalink($quiz->ID)'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'<span class="quiz-time-limit">tutor_utils()->get_quiz_option($quiz->ID, "time_limit.time_value") tutor_utils()->get_quiz_option($quiz->ID, "time_limit.time_type")</span>'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'active'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'get_permalink($post->ID)'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'active'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'get_permalink($post->ID)'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($question->user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_avatar($question->user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($question->user_id)'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("%s ago", "tutor"), human_time_diff(strtotime($question->comment_date_gmt)))'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($question->question_title))'' cannot be parsed correct.
HTML code '$'wp_kses_post(wpautop(stripslashes($question->comment_content)))'' cannot be parsed correct.
HTML code '$'tutor-bg-whitetutor-bg-light'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($answer->user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_avatar($answer->user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->profile_url($answer->user_id)'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("%s ago", "tutor"), human_time_diff(strtotime($answer->comment_date_gmt)))'' cannot be parsed correct.
HTML code '$'wp_kses_post(wpautop(stripslashes($answer->comment_content)))'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'tutils()->get_course_id_by_content($post)'' cannot be parsed correct.
HTML code '$'TUTOR_ZOOM()assets/images/zoom-icon-grey.svg'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'active'' cannot be parsed correct.
HTML code '$'<i class="tutor-icontutor_utils()->get_video_info()_playtime"></i'' cannot be parsed correct.
HTML code '$'<i class="tutor-play-duration">tutor_utils()->get_optimized_duration($play_time)</i>'' cannot be parsed correct.
HTML code '$'<i class="tutor-lesson-completetutor_utils()->is_completed_lesson()"></i'' cannot be parsed correct.
HTML code '$'json_encode($is_started_quiz)'' cannot be parsed correct.
HTML code '$'json_encode($quiz_attempt_info)'' cannot be parsed correct.
HTML code '$'tutor_utils()->seconds_to_time_context($remaining_time_secs)'' cannot be parsed correct.
HTML code '$'single_question'' cannot be parsed correct.
HTML code '$'<li><a href="#quiz-attempt-single-question$question" class="tutor-quiz-question-paginate-item">0</a> </li>'' cannot be parsed correct.
HTML code '$'$previous_id'' cannot be parsed correct.
HTML code '$'get_the_permalink($previous_id)'' cannot be parsed correct.
HTML code '$'$next_id'' cannot be parsed correct.
HTML code '$'get_the_permalink($next_id)'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'stripslashes($answer->answer_title)'' cannot be parsed correct.
HTML code '$'str_replace($dash_string, $input_data, $answer_title)'' cannot be parsed correct.
HTML code '$'<p class="tutor-quiz-answer-title">stripslashes($answer->answer_title)</p>'' cannot be parsed correct.
HTML code '$'wp_get_attachment_image_url($answer->image_id, "full")'' cannot be parsed correct.
HTML code '$'tutor_utils()->is_started_quiz()_attempt_id'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'answer-type-$question'' cannot be parsed correct.
HTML code '$'<span class="draggable-answer-title">stripslashes($rand_answer->answer_two_gap_match)</span>'' cannot be parsed correct.
HTML code '$'<span class="draggable-answer-title">stripslashes($rand_answer->answer_title)</span>'' cannot be parsed correct.
HTML code '$'tutor_utils()->is_started_quiz()_attempt_id'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'tutor_utils()->is_started_quiz()_attempt_id'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'block'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_random_questions_by_quiz()'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_quiz_option($quiz_id, "feedback_mode", 0)'' cannot be parsed correct.
HTML code '$'tutor_utils()->is_started_quiz()_attempt_id'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'0. '' cannot be parsed correct.
HTML code '$'stripslashes($question->question_title)'' cannot be parsed correct.
HTML code '$'<p class="question-marks"> Marks : $question </p>'' cannot be parsed correct.
HTML code '$'<p class="question-description">nl2br(stripslashes($question->question_description))</p>'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'quiz-answer-required'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'wp_get_attachment_image_url($answer->image_id, "full")'' cannot be parsed correct.
HTML code '$'tutor_utils()->is_started_quiz()_attempt_id'' cannot be parsed correct.
HTML code '$'$rand_answer'' cannot be parsed correct.
HTML code '$'<p class="tutor-quiz-answer-title">stripslashes($answer->answer_title)</p>'' cannot be parsed correct.
HTML code '$'wp_get_attachment_image_url($answer->image_id, "full")'' cannot be parsed correct.
HTML code '$'<img src=wp_get_attachment_image_url($answer->image_id, "full")" /'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'tutor_utils()->is_started_quiz()_attempt_id'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'<p class="answer_limit_desc">characters remaining :<span class="characters_remaining">tutor_utils()->avalue_dot("short_answer_characters_limit", $quiz_attempt_info)</span> </p>'' cannot be parsed correct.
HTML code '$'<p class="answer_limit_desc">characters remaining :<span class="characters_remaining">tutor_utils()->get_quiz_option($quiz_id)_open_ended_answer_characters_limit</span> </p>'' cannot be parsed correct.
HTML code '$'<img src=wp_get_attachment_image_url($answer->image_id, "full")" /'' cannot be parsed correct.
HTML code '$'tutor_utils()->is_started_quiz()_attempt_id'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'tutor-quiz-answer-next-btntutor-quiz-submit-btn'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_quiz/previous_attempts_html", $previous_attempts_html, $previous_attempts, $quiz_id)'' cannot be parsed correct.
HTML code '$'No limittutor_utils()->get_quiz_option(get_the_ID(), "attempts_allowed", 0)'' cannot be parsed correct.
HTML code '$'tutor_utils()->quiz_attempts()'' cannot be parsed correct.
HTML code '$'No limittutor_utils()->get_quiz_option(get_the_ID(), "attempts_allowed", 0)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_quiz_option(get_the_ID(), "passing_grade", 0)%'' cannot be parsed correct.
HTML code '$'tutor_utils()->array_get("source_embedded", $video_info)'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("poster", $video_info)'' cannot be parsed correct.
HTML code '$'tutor_utils()->array_get("source_external_url", $video_info)'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("type", $video_info)'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("poster", $video_info)'' cannot be parsed correct.
HTML code '$'wp_get_attachment_url($video_info->source_video_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("type", $video_info)'' cannot be parsed correct.
HTML code '$'do_shortcode(tutor_utils()->array_get("source_shortcode", $video_info))'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'stripslashes($answer->answer_title)'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'wp_get_attachment_image_url($answer->image_id, "full")'' cannot be parsed correct.
HTML code '$'tutor_utils()->is_started_quiz()_attempt_id'' cannot be parsed correct.
HTML code '$'strrev(base64_encode(json_encode($quiz_answers)))'' cannot be parsed correct.
HTML code '$'get_the_permalink($attempt->course_id)'' cannot be parsed correct.
HTML code '$'get_the_title($attempt->course_id)'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format") . " " . get_option("time_format"), strtotime($attempt->attempt_ended_at))'' cannot be parsed correct.
HTML code '$'count($answers)'' cannot be parsed correct.
HTML code '$'$attempt'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'$attempt ($earned_percentage%)'' cannot be parsed correct.
HTML code '$'<span class="result-review-required">Under Review</span>'' cannot be parsed correct.
HTML code '$'<span class="result-pass">Pass</span><span class="result-fail">Fail</span>'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_dashboard_page_permalink("my-quiz-attempts/attempts-details/?attempt_id=" . $attempt->attempt_id)'' cannot be parsed correct.
HTML code '$'get_the_permalink($course->ID)'' cannot be parsed correct.
HTML code '$'Go to Course Home'' cannot be parsed correct.
HTML code '$'get_the_title()'' cannot be parsed correct.
HTML code '$'get_the_permalink($course->ID)'' cannot be parsed correct.
HTML code '$'get_the_title($course->ID)'' cannot be parsed correct.
HTML code '$'tutor_utils()->total_questions_for_student_by_quiz(get_the_ID())'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_quiz_option(get_the_ID(), "time_limit.time_value") sprintf(__("%s", "tutor"), isset($available_time_type[$time_type])$available_time_type[$time_type]$time_type)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_vimeo_video_id(tutor_utils()->avalue_dot("source_vimeo", $video_info))'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_vimeo_video_id(tutor_utils()->avalue_dot("source_vimeo", $video_info))'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_youtube_video_id(tutor_utils()->avalue_dot("source_youtube", $video_info))'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_youtube_video_id(tutor_utils()->avalue_dot("source_youtube", $video_info))'' cannot be parsed correct.
HTML code '$'tutor-spotlight-mode'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'has-summery'' cannot be parsed correct.
HTML code '$'wp_kses_post($topic_summery)'' cannot be parsed correct.
HTML code '$'active'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_course/contents/lesson/title", $lesson_title, get_the_ID())'' cannot be parsed correct.
HTML code '$'get_the_permalink($course_id)'' cannot be parsed correct.
HTML code '$'Go to Course Home'' cannot be parsed correct.
HTML code '$'json_encode($jsonData)'' cannot be parsed correct.
HTML code '$'tutor-spotlight-mode'' cannot be parsed correct.
HTML code '$'get_the_permalink($course->ID)'' cannot be parsed correct.
HTML code '$'Go to Course Home'' cannot be parsed correct.
HTML code '$' <span class="rating-digits">tutor_utils()->get_instructor_ratings($user_id)_rating_avg</span> '' cannot be parsed correct.
HTML code '$' <span class="rating-total-meta">(tutor_utils()->get_instructor_ratings($user_id)_rating_count)</span> '' cannot be parsed correct.
HTML code '$'<a href=$social_icon_url" target="_blank" rel="noopener noreferrer nofollow" class="$social_icon_icon_classes" title="$social_icon_label"></a'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_cover_photo_url($user_id)'' cannot be parsed correct.
HTML code '$'get_avatar_url($user_id, ["size" => 150])'' cannot be parsed correct.
HTML code '$'ob_get_clean()'' cannot be parsed correct.
HTML code '$'ob_get_clean()'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_user_by_login($user_name)_display_name'' cannot be parsed correct.
HTML code '$'tutor-spotlight-mode'' cannot be parsed correct.
HTML code '$'tutor-spotlight-mode'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_course_count_by_instructor($user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_total_students_by_instructor($user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_enrolled_courses_by_user($user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_completed_courses_ids_by_user($user_id)'' cannot be parsed correct.
HTML code '$'ob_get_clean()'' cannot be parsed correct.
HTML code '$'ob_get_clean()'' cannot be parsed correct.
HTML code '$'<a href=$social_icon_url" target="_blank" rel="noopener noreferrer nofollow" class="$social_icon_icon_classes" title="$social_icon_label"></a'' cannot be parsed correct.
HTML code '$'tutils()->array_get("reset_key", tutor_sanitize_data($_GET))'' cannot be parsed correct.
HTML code '$'tutils()->array_get("user_id", tutor_sanitize_data($_GET))'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_reset_password_message", esc_html__("Enter Password and Confirm Password to reset your password", "tutor"))'' cannot be parsed correct.
HTML code '$'apply_filters("tutor_lost_password_message", esc_html__("Lost your password? Please enter your username or email address. You will receive a link to create a new password via email.", "tutor"))'' cannot be parsed correct.
HTML code '$'get_option("blogname")'' cannot be parsed correct.
HTML code '$'$field_field_key'' cannot be parsed correct.
HTML code '$'$label_title'' cannot be parsed correct.
HTML code '$'$field_field_key'' cannot be parsed correct.
HTML code '$'$field_option_key'' cannot be parsed correct.
HTML code '$'$field_option'' cannot be parsed correct.
HTML code '$'$field_field_key'' cannot be parsed correct.
HTML code '$'$field_default'' cannot be parsed correct.
HTML code '$'$input_name'' cannot be parsed correct.
HTML code '$'$label'' cannot be parsed correct.
HTML code '$'$input_name'' cannot be parsed correct.
HTML code '$'$input_value'' cannot be parsed correct.
HTML code '$'<p>$label</p>'' cannot be parsed correct.
HTML code '$'$input_name'' cannot be parsed correct.
HTML code '$'<option value="-1">Select Option</option>'' cannot be parsed correct.
HTML code '$'tutor_widget_course_loop_classes()'' cannot be parsed correct.
HTML code '$'get_edit_post_link($product_id)'' cannot be parsed correct.
HTML code '$'$optionKey'' cannot be parsed correct.
HTML code '$'$option'' cannot be parsed correct.
HTML code '$'$input_name'' cannot be parsed correct.
HTML code '$'$input_value'' cannot be parsed correct.
HTML code '$'<p>$label</p>'' cannot be parsed correct.
HTML code '$'wp_get_attachment_url($value)'' cannot be parsed correct.
HTML code '$'$field_field_key'' cannot be parsed correct.
HTML code '$'$value'' cannot be parsed correct.
HTML code '$'$field_label'' cannot be parsed correct.
HTML code '$'$field_field_key'' cannot be parsed correct.
HTML code '$'$this->get($field["field_key"])'' cannot be parsed correct.
HTML code '$'$field_field_key'' cannot be parsed correct.
HTML code '$'$optionKey'' cannot be parsed correct.
HTML code '$'$option'' cannot be parsed correct.
HTML code '$'$field_field_key'' cannot be parsed correct.
HTML code '$'<option value="-1">Select Option</option>'' cannot be parsed correct.
HTML code '$'$optionKey'' cannot be parsed correct.
HTML code '$'$option'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("options.min", $field)'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("options.max", $field)'' cannot be parsed correct.
HTML code '$'$this->get($field["field_key"], $field["default"])'' cannot be parsed correct.
HTML code '$'$this->get($field["field_key"], $field["default"])'' cannot be parsed correct.
HTML code '$'$field_field_key'' cannot be parsed correct.
HTML code '$'$field_field_key'' cannot be parsed correct.
HTML code '$'$field_default'' cannot be parsed correct.
HTML code '$'$instructor'' cannot be parsed correct.
HTML code '$'$this->get($field["field_key"])'' cannot be parsed correct.
HTML code '$'<li class=$active">
							<a href="$url" data-target="#settings-tab-$key" tutils()->array_get("label", $arg)</a>
						</li>'' cannot be parsed correct.
HTML code '$'<div id="settings-tab$key" class="settings-tab-wrap tutils()->array_get("settings_tab", tutor_sanitize_data($_GET))" style="display: tutils()->array_get("settings_tab", tutor_sanitize_data($_GET));"'' cannot be parsed correct.
HTML code '$'<option value=$product"selected($product->ID, $product_id) >$product</option>'' cannot be parsed correct.
HTML code '$'<option value=$product"selected($product->ID, $product_id) >$product</option>'' cannot be parsed correct.
HTML code '$'<option value=$product"selected($product->ID, $product_id) >$product</option>'' cannot be parsed correct.
HTML code '$'$instructor '' cannot be parsed correct.
HTML code '$'$attachment'' cannot be parsed correct.
HTML code '$'$attachment'' cannot be parsed correct.
HTML code '$'$attachment'' cannot be parsed correct.
HTML code '$'<option value=$course"selected($course->ID, $course_id)>$course</option>'' cannot be parsed correct.
HTML code '$'$durationHours00'' cannot be parsed correct.
HTML code '$'$durationMinutes00'' cannot be parsed correct.
HTML code '$'$durationSeconds00'' cannot be parsed correct.
HTML code '$'get_post_meta($course_id, "_tutor_course_benefits", true)'' cannot be parsed correct.
HTML code '$'get_post_meta($course_id, "_tutor_course_requirements", true)'' cannot be parsed correct.
HTML code '$'get_post_meta($course_id, "_tutor_course_target_audience", true)'' cannot be parsed correct.
HTML code '$'get_post_meta($course_id, "_tutor_course_material_includes", true)'' cannot be parsed correct.
HTML code '$'<p class="course-empty-content">Add a topic to build your course</p>'' cannot be parsed correct.
HTML code '$'$topic'' cannot be parsed correct.
HTML code '$'stripslashes($topic->post_title)'' cannot be parsed correct.
HTML code '$'wp_nonce_url(admin_url("admin.php?action=tutor_delete_topic&topic_id=" . esc_attr($topic->ID)), tutor()->nonce_action, tutor()->nonce)'' cannot be parsed correct.
HTML code '$'$topic'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($topic->post_title))'' cannot be parsed correct.
HTML code '$'$topic'' cannot be parsed correct.
HTML code '$'blocknone'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$topic'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$topic'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($quiz->post_title))'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$topic'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$topic'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($lesson->post_title))'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$topic'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($lesson->post_title))'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$topic'' cannot be parsed correct.
HTML code '$'$topic'' cannot be parsed correct.
HTML code '$'$topic'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$topic'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$topic'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($quiz->post_title))'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$topic'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($lesson->post_title))'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$topic'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($lesson->post_title))'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$level_key'' cannot be parsed correct.
HTML code '$'$level'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, "_tutor_profile_job_title", true)'' cannot be parsed correct.
HTML code '$'<img src=wp_get_attachment_image_url($user_profile_photo)"/'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, "_tutor_profile_photo", true)'' cannot be parsed correct.
HTML code '$'<option value=$value"selected($value, $videoSource)  data-icon=$source_icon" $source_title</option>'' cannot be parsed correct.
HTML code '$'noneblock'' cannot be parsed correct.
HTML code '$'blocknone'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("source_video_id", $video)'' cannot be parsed correct.
HTML code '$'blocknone'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("source_video_id", $video)'' cannot be parsed correct.
HTML code '$'$builder_course_img_src'' cannot be parsed correct.
HTML code '$'tutor()_urlassets/images/placeholder-course.jpg'' cannot be parsed correct.
HTML code '$'blocknone'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("poster", $video)'' cannot be parsed correct.
HTML code '$'blocknone'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("source_external_url", $video)'' cannot be parsed correct.
HTML code '$'blocknone'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("source_shortcode", $video)'' cannot be parsed correct.
HTML code '$'blocknone'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("source_youtube", $video)'' cannot be parsed correct.
HTML code '$'tutils()->get_option("lesson_video_duration_youtube_api_key", "")'' cannot be parsed correct.
HTML code '$'blocknone'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("source_vimeo", $video)'' cannot be parsed correct.
HTML code '$'blocknone'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("source_embedded", $video)'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("runtime.hours", $video)00'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("runtime.minutes", $video)00'' cannot be parsed correct.
HTML code '$'tutor_utils()->avalue_dot("runtime.seconds", $video)00'' cannot be parsed correct.
HTML code '$'<input id="tutor_quiz_builder_quiz_id" value="sanitize_text_field($_POST["tutor_quiz_builder_quiz_id"])" /'' cannot be parsed correct.
HTML code '$'$instructor'' cannot be parsed correct.
HTML code '$'$instructor'' cannot be parsed correct.
HTML code '$'$instructor'' cannot be parsed correct.
HTML code '$'str_replace("\\'", "", get_avatar($instructor->ID, 30))'' cannot be parsed correct.
HTML code '$'stripslashes($quiz->post_content)'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($question->question_title))'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_question_types($question->question_type)_icon tutor_utils()->get_question_types($question->question_type)_name'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_quiz_option($quiz_id, "time_limit.time_value", 0)'' cannot be parsed correct.
HTML code '$'maybe_unserialize(get_post_meta($post_id, "tutor_quiz_option", true))'' cannot be parsed correct.
HTML code '$'maybe_unserialize(get_post_meta($post_id, "tutor_quiz_option", true))'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_quiz_option($quiz_id, "passing_grade", 80)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_quiz_option($quiz_id, "max_questions_for_answer", 10)'' cannot be parsed correct.
HTML code '$'<input type="hidden" id="current_topic_id_for_quiz" value="sanitize_text_field($_POST["current_topic_id"])" /'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$topic_id'' cannot be parsed correct.
HTML code '$'get_admin_url()'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'Classic Editor'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($post->post_title))'' cannot be parsed correct.
HTML code '$'get_the_post_thumbnail($post->ID)'' cannot be parsed correct.
HTML code '$'blocknone'' cannot be parsed correct.
HTML code '$'Update Feature Image'' cannot be parsed correct.
HTML code '$'<input type="hidden"  id="tutor_quiz_builder_quiz_id" value="sanitize_text_field($_POST["tutor_quiz_builder_quiz_id"])" /'' cannot be parsed correct.
HTML code '$'<input type="hidden" id="tutor_quiz_builder_quiz_id" value="$quiz_id" /'' cannot be parsed correct.
HTML code '$'<input type="hidden" id="current_topic_id_for_quiz" value="sanitize_text_field($_POST["topic_id"])" /'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($quiz->post_title))'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_quiz_option($quiz_id, "short_answer_characters_limit", 200)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_quiz_option($quiz_id, "open_ended_answer_characters_limit", 500)'' cannot be parsed correct.
HTML code '$'<p class="open-ended-notice" style="color: #ff0000;">No option is necessary for this answer type</p>'' cannot be parsed correct.
HTML code '$'$old_answer'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$answer_title'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$image_id'' cannot be parsed correct.
HTML code '$'<img src=wp_get_attachment_image_url($image_id)" /'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'checked("text", $answer_view_format)checked'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'checked("image", $answer_view_format)'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'checked("text_image", $answer_view_format)'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$quiz_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'htmlspecialchars(stripslashes($question->question_title))'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$type'' cannot be parsed correct.
HTML code '$' data-selected="selected"'' cannot be parsed correct.
HTML code '$'truefalse'' cannot be parsed correct.
HTML code '$'$question_type_icon $question_type_name'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'stripslashes($question->question_description)'' cannot be parsed correct.
HTML code '$'Input options for the question and select the correct answer.'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$answer_title'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$answer_two_gap_match'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$answer_title'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$answer_two_gap_match'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$image_id'' cannot be parsed correct.
HTML code '$'<img src=wp_get_attachment_image_url($image_id)" /'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'checked("text", $answer_view_format)checked'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'checked("image", $answer_view_format)'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'checked("text_image", $answer_view_format)'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$image_id'' cannot be parsed correct.
HTML code '$'<img src=wp_get_attachment_image_url($image_id)" /'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$answer_title'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$image_id'' cannot be parsed correct.
HTML code '$'<img src=wp_get_attachment_image_url($image_id)" /'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$answer_title'' cannot be parsed correct.
HTML code '$'<p class="open-ended-notice" style="color: #ff0000;">No option is necessary for this answer type</p>'' cannot be parsed correct.
HTML code '$'Make sure youâre saving the answers in the right order. Students will have to match this order.'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'stripslashes($answer->answer_title)'' cannot be parsed correct.
HTML code '$' (Answer : <strong>stripslashes($answer->answer_two_gap_match)</strong>)'' cannot be parsed correct.
HTML code '$' - stripslashes($answer->answer_two_gap_match)'' cannot be parsed correct.
HTML code '$'<span class="tutor-question-answer-image">
													<img src="wp_get_attachment_image_url($answer->image_id)"/> 
												</span'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'$question_id'' cannot be parsed correct.
HTML code '$'$course_id'' cannot be parsed correct.
HTML code '$'<p>$label</p>'' cannot be parsed correct.
HTML code '$'wp_get_attachment_url($value)'' cannot be parsed correct.
HTML code '$'none'' cannot be parsed correct.
HTML code '$'<option value="-1">Select Option</option>'' cannot be parsed correct.
HTML code '$'<option value="-1">Select Option</option>'' cannot be parsed correct.
HTML code '$'$field_label'' cannot be parsed correct.
HTML code '$'<p class="desc">$field_desc</p>'' cannot be parsed correct.
HTML code '$'<li class="option-nav-item$current_class">
						<a href="add_query_arg(["tab_page" => $key])" data-tab="#$key" class="tutor-option-nav-item">$option_group_label</a> 
					</li>'' cannot be parsed correct.
HTML code '$'$key'' cannot be parsed correct.
HTML code '$'current-page'' cannot be parsed correct.
HTML code '$'blocknone'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("Last checked %1$s ago, It will check again after %2$s from now"), human_time_diff($last_checked_time), human_time_diff(tutor_time(), $last_checked_time + 6 * HOUR_IN_SECONDS))'' cannot be parsed correct.
HTML code '$'<p>$label</p>'' cannot be parsed correct.
HTML code '$'<option value="-1">Select Option</option>'' cannot be parsed correct.
HTML code '$'$field_group_label'' cannot be parsed correct.
HTML code '$'Save Settings'' cannot be parsed correct.
HTML code '$'<p class="desc">$field_desc</p>'' cannot be parsed correct.
HTML code '$'<li>$error_value</li>'' cannot be parsed correct.
HTML code '$'tutor_utils()->input_old("first_name")'' cannot be parsed correct.
HTML code '$'tutor_utils()->input_old("last_name")'' cannot be parsed correct.
HTML code '$'tutor_utils()->input_old("user_login")'' cannot be parsed correct.
HTML code '$'<a href=$addon" target="_blank">$addon</a>'' cannot be parsed correct.
HTML code '$'<img src=$addon" class="plugin-icon" alt="">'' cannot be parsed correct.
HTML code '$'$addon'' cannot be parsed correct.
HTML code '$'<span class="addon-regular-price"><del>$addon</del></span>'' cannot be parsed correct.
HTML code '$'<span class="addon-current-price">$addon</span>'' cannot be parsed correct.
HTML code '$'<p>$addon</p>'' cannot be parsed correct.
HTML code '$'<div class="plugin-version"> Version : $addon</div>'' cannot be parsed correct.
HTML code '$'sprintf(__("No %s currently avaialable", "tutor"), $page_name)'' cannot be parsed correct.
HTML code '$'sprintf(__("No %s currently avaialable", "tutor"), $page_name)'' cannot be parsed correct.
HTML code '$'sanitize_text_field(tutor_utils()->array_get("search", $_GET, ""))'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'tutor_get_formated_date(get_option("date_format"), $date_filter)'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'date_format($dateObj, "F j, Y, g:i a")'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'paginate_links(["base" => str_replace($big, "%#%", esc_url(get_pagenum_link($big))), "format" => "?current_page=%#%", "current" => $paged, "total" => $the_query->max_num_pages])'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'tutor_utils()->input_old("email")'' cannot be parsed correct.
HTML code '$'tutor_utils()->input_old("phone_number")'' cannot be parsed correct.
HTML code '$'tutor_utils()->input_old("password")'' cannot be parsed correct.
HTML code '$'tutor_utils()->input_old("password_confirmation")'' cannot be parsed correct.
HTML code '$'current'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=tutor-addons")'' cannot be parsed correct.
HTML code '$'current'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=tutor-addons&tab=themes")'' cannot be parsed correct.
HTML code '$'implode(", ", $plugins_required)'' cannot be parsed correct.
HTML code '$'<li>$req</li>'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'$post'' cannot be parsed correct.
HTML code '$'admin_url("admin-post.php")'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_avatar($question->user_id)'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_qa_question($question_id)_display_name'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("%s ago", "tutor"), human_time_diff(strtotime($question->comment_date)))'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($question->question_title))'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_qa_question($question_id)_post_title'' cannot be parsed correct.
HTML code '$'wp_kses_post(wpautop(stripslashes($question->comment_content)))'' cannot be parsed correct.
HTML code '$'tutor-bg-whitetutor-bg-light'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_tutor_avatar($answer->user_id)'' cannot be parsed correct.
HTML code '$'$answer'' cannot be parsed correct.
HTML code '$'wp_sprintf(__("%s ago", "tutor"), human_time_diff(strtotime($answer->comment_date)))'' cannot be parsed correct.
HTML code '$'wp_kses_post(wpautop(stripslashes($answer->comment_content)))'' cannot be parsed correct.
HTML code '$'<div class="plugin-version"> Version : TUTOR_VERSION 
										</div>'' cannot be parsed correct.
HTML code '$'add_query_arg(["sub_page" => "add_new_instructor"])'' cannot be parsed correct.
HTML code '$'$addon_name'' cannot be parsed correct.
HTML code '$'<img src=$addon_urlassets/images/thumbnail.jpg" class="plugin-icon" alt="">'' cannot be parsed correct.
HTML code '$'$basName'' cannot be parsed correct.
HTML code '$'$addon_description'' cannot be parsed correct.
HTML code '$'<mark class="error"><span class="dashicons dashicons-warning"></span> sprintf(esc_html__("%1$s - There is a newer version of WordPress available (%2$s)", "tutor"), esc_html($environment["wp_version"]), esc_html($latest_version))</mark>'' cannot be parsed correct.
HTML code '$'<mark class="yes">$environment_wp_version</mark>'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("The version of tutor.", "tutor"))'' cannot be parsed correct.
HTML code '$'$environment_version'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("Whether or not you have WordPress Multisite enabled.", "tutor"))'' cannot be parsed correct.
HTML code '$'<span class="dashicons dashicons-yes"></span>&ndash;'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("The maximum amount of memory (RAM) that your site can use at one time.", "tutor"))'' cannot be parsed correct.
HTML code '$'<mark class="error"><span class="dashicons dashicons-warning"></span> sprintf(esc_html__("%1$s - We recommend setting memory to at least 64MB. See: %2$s", "tutor"), esc_html(size_format($environment["wp_memory_limit"])), "<a href="https://codex.wordpress.org/Editing_wp-config.php#Increasing_memory_allocated_to_PHP" target="_blank">" . esc_html__("Increasing memory allocated to PHP", "tutor") . "</a>")</mark>'' cannot be parsed correct.
HTML code '$'<mark class="yes">size_format($environment["wp_memory_limit"])</mark>'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("Displays whether or not WordPress is in Debug Mode.", "tutor"))'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("Displays whether or not WP Cron Jobs are enabled.", "tutor"))'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("The current language used by WordPress. Default = English", "tutor"))'' cannot be parsed correct.
HTML code '$'$environment_language'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("Displays whether or not WordPress is using an external object cache.", "tutor"))'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("Information about the web server that is currently hosting your site.", "tutor"))'' cannot be parsed correct.
HTML code '$'$environment_server_info'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("The version of PHP installed on your hosting server.", "tutor"))'' cannot be parsed correct.
HTML code '$'<mark class="yes">$environment_php_version</mark>'' cannot be parsed correct.
HTML code '$'<mark class=recommendation"$environment_php_version - wp_kses_post($notice)</mark>'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("The largest filesize that can be contained in one post.", "tutor"))'' cannot be parsed correct.
HTML code '$'size_format($environment["php_post_max_size"])'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("The amount of time (in seconds) that your site will spend on a single operation before timing out (to avoid server lockups)", "tutor"))'' cannot be parsed correct.
HTML code '$'$environment_php_max_execution_time'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("The maximum number of variables your server can use for a single function to avoid overloads.", "tutor"))'' cannot be parsed correct.
HTML code '$'$environment_php_max_input_vars'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("The version of cURL installed on your server.", "tutor"))'' cannot be parsed correct.
HTML code '$'$environment_curl_version'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("Suhosin is an advanced protection system for PHP installations. It was designed to protect your servers on the one hand against a number of well known problems in PHP applications and on the other hand against potential unknown vulnerabilities within these applications or the PHP core itself. If enabled on your server, Suhosin may need to be configured to increase its data submission limits.", "tutor"))'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("The homepage URL of your site.", "tutor"))'' cannot be parsed correct.
HTML code '$'$environment_home_url'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("The root URL of your site.", "tutor"))'' cannot be parsed correct.
HTML code '$'$environment_site_url'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("The version of WordPress installed on your site.", "tutor"))'' cannot be parsed correct.
HTML code '$'<mark class="error"><span class="dashicons dashicons-warning"></span> sprintf(esc_html__("Default timezone is %s - it should be UTC", "tutor"), esc_html($environment["default_timezone"]))</mark>'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("Payment gateways can use cURL to communicate with remote servers to authorize payments, other plugins may also use it when communicating with remote services.", "tutor"))'' cannot be parsed correct.
HTML code '$'<mark class="error">
							<span class="dashicons dashicons-warning"></span> Your server does not have fsockopen or cURL enabled - PayPal IPN and other scripts which communicate with other servers will not work. Contact your hosting provider.</mark>'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("HTML/Multipart emails use DOMDocument to generate inline CSS in templates.", "tutor"))'' cannot be parsed correct.
HTML code '$'<mark class="error">
							<span class="dashicons dashicons-warning"></span> sprintf(esc_html__("Your server does not have the %s class enabled - HTML/Multipart emails, and also some extensions, will not work without DOMDocument.", "tutor"), "<a href="https://php.net/manual/en/class.domdocument.php">DOMDocument</a>")</mark>'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("GZip (gzopen) is used to open the GEOIP database from MaxMind.", "tutor"))'' cannot be parsed correct.
HTML code '$'<mark class="error">
							<span class="dashicons dashicons-warning"></span> sprintf(esc_html__("Your server does not support the %s function - this is required to use the GeoIP database from MaxMind.", "tutor"), "<a href="https://php.net/manual/en/zlib.installation.php">gzopen</a>")</mark>'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("Multibyte String (mbstring) is used to convert character encoding, like for emails or converting characters to lowercase.", "tutor"))'' cannot be parsed correct.
HTML code '$'<mark class="error">
								<span class="dashicons dashicons-warning"></span> sprintf(esc_html__("Your server does not support the %s functions - this is required for better character encoding. Some fallbacks will be used instead for it.", "tutor"), "<a href="https://php.net/manual/en/mbstring.installation.php">mbstring</a>")</mark>'' cannot be parsed correct.
HTML code '$'$file,<br />'' cannot be parsed correct.
HTML code '$'get_post($page_id)_page_id'' cannot be parsed correct.
HTML code '$'<a href=admin_url("post.php?post="$page_id"&action=edit")" target="_blank">get_post($page_id)_page_name</a>'' cannot be parsed correct.
HTML code '$'get_post($page_id)_page_name'' cannot be parsed correct.
HTML code '$'<a href=get_permalink($page)" target="_blank" style="color: green;"> 
											<i class="dashicons dashicons-yes-alt"></i> /get_post($page_id)_post_name 
										</a>'' cannot be parsed correct.
HTML code '$'<a href=add_query_arg(["sub_page" => $key])" class="nav-tab-item $active_class"$title</a>'' cannot be parsed correct.
HTML code '$'<span class="dashicons dashicons-yes"></span>&ndash;'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("The version of MySQL installed on your hosting server.", "tutor"))'' cannot be parsed correct.
HTML code '$'<mark class="error">
									<span class="dashicons dashicons-warning"></span> sprintf(esc_html__("%1$s - We recommend a minimum MySQL version of 5.6. See: %2$s", "tutor"), esc_html($environment["mysql_version_string"]), "<a href="https://wordpress.org)/about/requirements/" target="_blank">" . esc_html__("WordPress requirements", "tutor") . "</a>")</mark>'' cannot be parsed correct.
HTML code '$'<mark class="yes">$environment_mysql_version_string</mark>'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("The largest filesize that can be uploaded to your WordPress installation.", "tutor"))'' cannot be parsed correct.
HTML code '$'size_format($environment["max_upload_size"])'' cannot be parsed correct.
HTML code '$'tutor_utils()->help_tip(esc_html__("The default timezone for your server.", "tutor"))'' cannot be parsed correct.
HTML code '$'0'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($answer->question_title))'' cannot be parsed correct.
HTML code '$'<p>implode("</p><p>", $answer_titles)</p>'' cannot be parsed correct.
HTML code '$'<p>implode("</p><p>", $answer_titles)</p>'' cannot be parsed correct.
HTML code '$'str_replace("{dash}", "_____", stripslashes($answer_title))'' cannot be parsed correct.
HTML code '$'wpautop(stripslashes($answer->given_answer))'' cannot be parsed correct.
HTML code '$'$addon_name'' cannot be parsed correct.
HTML code '$'<img src=trailingslashit(tutor()->url . "assets/addons/" . $basName)thumbnail.svg" class="plugin-icon" alt="">'' cannot be parsed correct.
HTML code '$'$addon_description'' cannot be parsed correct.
HTML code '$'<div class="plugin-version"> Version : TUTOR_VERSION </div>'' cannot be parsed correct.
HTML code '$'wp_nonce_url("plugins.php?action=deactivate&amp;plugin=" . urlencode($plugin_file) . "&amp;plugin_status=all&amp;paged=1&amp;s=", "deactivate-plugin_" . $plugin_file)'' cannot be parsed correct.
HTML code '$'get_avatar_url($user_id)'' cannot be parsed correct.
HTML code '$'get_userdata($user_id)_display_name'' cannot be parsed correct.
HTML code '$'Student Name'' cannot be parsed correct.
HTML code '$'get_userdata($user_id)_display_name'' cannot be parsed correct.
HTML code '$'Quiz'' cannot be parsed correct.
HTML code '$'<a href=admin_url("post.php?post="$attempt->quiz_id"&action=edit")"get_the_title($attempt->quiz_id)</a>'' cannot be parsed correct.
HTML code '$'Attempt Time'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format"), strtotime($attempt->attempt_started_at)) date_i18n(get_option("time_format"), strtotime($attempt->attempt_started_at))'' cannot be parsed correct.
HTML code '$'<p>implode("</p><p>", $answer_titles)</p>'' cannot be parsed correct.
HTML code '$'stripslashes($original_saved_answer->answer_title) - stripslashes($provided_answer_order->answer_two_gap_match)<br/>'' cannot be parsed correct.
HTML code '$'wp_get_attachment_image_url($original_saved_answer->image_id)'' cannot be parsed correct.
HTML code '$'stripslashes(esc_attr($provided_answer_order->answer_title))'' cannot be parsed correct.
HTML code '$'wp_get_attachment_image_url($db_answer->image_id)'' cannot be parsed correct.
HTML code '$'$image_answer'' cannot be parsed correct.
HTML code '$'<span class="quiz-correct-answer-text"><i class="tutor-icon-mark"></i> Correct</span>'' cannot be parsed correct.
HTML code '$'<p style="color: #878A8F;"><span style="color: #ff282a;">&ast;</span> Review Required</p>'' cannot be parsed correct.
HTML code '$'<span class="tutor-status-blocked-context"><i class="tutor-icon-line-cross"></i> Incorrect</span>'' cannot be parsed correct.
HTML code '$'<span class="quiz-correct-answer-text"><i class="tutor-icon-mark"></i> Correct</span>'' cannot be parsed correct.
HTML code '$'<span class="quiz-incorrect-answer-text"><i class="tutor-icon-line-cross"></i> Incorrect</span>'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?"$nonce_key"="$nonce_value"&action=review_quiz_answer&attempt_id="$attempt_id"&attempt_answer_id="$answer->attempt_answer_id"&mark_as=correct")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?"$nonce_key"="$nonce_value"&action=review_quiz_answer&attempt_id="$attempt_id"&attempt_answer_id="$answer->attempt_answer_id"&mark_as=incorrect")'' cannot be parsed correct.
HTML code '$'Status'' cannot be parsed correct.
HTML code '$'Course'' cannot be parsed correct.
HTML code '$'<a href=admin_url("post.php?post=" . $quiz->ID . "&action=edit")"get_the_title($quiz->ID)</a>'' cannot be parsed correct.
HTML code '$'Result'' cannot be parsed correct.
HTML code '$'<span class="result-review-required">Under Review</span>'' cannot be parsed correct.
HTML code '$'Quiz Time'' cannot be parsed correct.
HTML code '$'tutor_utils()->seconds_to_time_context($time_limit_seconds)'' cannot be parsed correct.
HTML code '$'Attempt Time'' cannot be parsed correct.
HTML code '$'tutor_utils()->seconds_to_time_context($attempt_time_sec)'' cannot be parsed correct.
HTML code '$'<p class="attempt-review-notice"> <i class="tutor-icon-warning-2"></i> <strong>Reminder: </strong> sprintf(__("Please review answers for question no. %s", "tutor"), implode(", ", $required_review))</p>'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format"), strtotime($attempt->manually_reviewed_at)) date_i18n(get_option("time_format"), strtotime($attempt->manually_reviewed_at))'' cannot be parsed correct.
HTML code '$'get_post_meta($attempt_id, "instructor_feedback", true)'' cannot be parsed correct.
HTML code '$'$attempt_id'' cannot be parsed correct.
HTML code '$'tutor_utils()->get_question_types($answer->question_type)_icon'' cannot be parsed correct.
HTML code '$'<ul class="subsubsub">'' cannot be parsed correct.
HTML code '$'</ul>'' cannot be parsed correct.
HTML code '$'</select>'' cannot be parsed correct.
HTML code '$'</td></tr>'' cannot be parsed correct.
HTML code '$'<tr>'' cannot be parsed correct.
HTML code '$'</tr>'' cannot be parsed correct.
HTML code '$'<th scope="row" class="check-column">'' cannot be parsed correct.
HTML code '$'</th>'' cannot be parsed correct.
HTML code '$'</td>'' cannot be parsed correct.
HTML code '$'</td>'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'"/></div>
                                <div class="slide-title">'' cannot be parsed correct.
HTML code '$'"/></div>
                                <div class="slide-title">'' cannot be parsed correct.
HTML code '$'<pre>'' cannot be parsed correct.
HTML code '$'</pre>'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'</body>'' cannot be parsed correct.
HTML code '$'</html>'' cannot be parsed correct.
HTML code '$'</button>
                    <button type="button" class="quiz-modal-tab-navigation-btn  quiz-modal-btn-cancel tutor-announcement-close-btn tutor-announcement-cancel-btn">'' cannot be parsed correct.
HTML code '$'</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!--create announcements modal end-->'' cannot be parsed correct.
HTML code '$'</label>
                        <p></p>
                    </div>
                    <div class="tutor-announcement-detail-date-info">
                        <label for="">'' cannot be parsed correct.
HTML code '$'</label>
                        <p></p>
                    </div>
                </div>
                <div class="tutor-announce-detail-popup-button-wrap">
                    <div class="announcement-detail-cancel-button">
                        <button type="button" class="quiz-modal-tab-navigation-btn  quiz-modal-btn-cancel tutor-announcement-close-btn tutor-announcement-cancel-btn">'' cannot be parsed correct.
HTML code '$'</button>
                    </div>
                    <div class="announcement-detail-edit-delete-button">
                        <button class="tutor-btn tutor-announcement-delete tutor-border-none" id="tutor-announcement-delete-from-detail">'' cannot be parsed correct.
HTML code '$'</button>
                        <button class="tutor-btn tutor-border-none tutor-announcement-edit" id="tutor-announcement-edit-from-detail">'' cannot be parsed correct.
HTML code '$'</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!--details announcements modal end-->'' cannot be parsed correct.
HTML code '$'</button>
                    <button type="button" class="quiz-modal-tab-navigation-btn  quiz-modal-btn-cancel tutor-announcement-close-btn tutor-announcement-cancel-btn ">'' cannot be parsed correct.
HTML code '$'</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!--update announcements modal end-->'' cannot be parsed correct.
HTML code '$'
	<div class="submitted-assignment-title">
		<a class="prev-btn" href="'' cannot be parsed correct.
HTML code '$'<li class="tutor-dashboard-menu-divider"></li>'' cannot be parsed correct.
HTML code '$'<div class="tutor-alert-warning"><ul class="tutor-required-fields">'' cannot be parsed correct.
HTML code '$'</ul></div>'' cannot be parsed correct.
HTML code '$'<li class="tutor-dashboard-menu-divider"></li>'' cannot be parsed correct.
HTML code '$'</h2>'' cannot be parsed correct.
HTML code '$'<div class="correct-answer-wrap">'' cannot be parsed correct.
HTML code '$'<div class="matching-type">'' cannot be parsed correct.
HTML code '$'<div class="text-image-type">'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div class="text-type">'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div class="image-type">'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div class="matching-separator">&nbsp;-&nbsp;</div>'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div class="answer-image-matched-wrap">'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div class="answer-image-matched-wrap">'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div class="text-type">'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div class="image-type">'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div class="matching-separator">&nbsp;-&nbsp;</div>'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div class="correct-answer-wrap">'' cannot be parsed correct.
HTML code '$'<div class="matching-type">'' cannot be parsed correct.
HTML code '$'<div class="text-image-type">'' cannot be parsed correct.
HTML code '$'<div class="answer-image-matched-wrap">'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div class="answer-image-matched-wrap">'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div class="tutor-alert-warning tutor-mb-10"><ul class="tutor-required-fields">'' cannot be parsed correct.
HTML code '$'</ul></div>'' cannot be parsed correct.
HTML code '$'</h3>

<div class="tutor-dashboard-content-inner">

    <div class="tutor-dashboard-inline-links">
        '' cannot be parsed correct.
HTML code '$'<div class="tutor-alert-warning tutor-mb-10"><ul class="tutor-required-fields">'' cannot be parsed correct.
HTML code '$'</ul></div>'' cannot be parsed correct.
HTML code '$'<div class="tutor-alert-warning tutor-mb-10"><ul class="tutor-required-fields">'' cannot be parsed correct.
HTML code '$'</ul></div>'' cannot be parsed correct.
HTML code '$'</h3>

<div class="tutor-dashboard-content-inner">

    <div class="tutor-dashboard-inline-links">
        '' cannot be parsed correct.
HTML code '$'<script>window.location.replace('' cannot be parsed correct.
HTML code '$'");</script'' cannot be parsed correct.
HTML code '$'<span>
												<i class="dashicons dashicons-info"></i>'' cannot be parsed correct.
HTML code '$'<li class="tutor-dashboard-menu-divider"></li>'' cannot be parsed correct.
HTML code '$'<div>'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'disabled'' cannot be parsed correct.
HTML code '$'tutor-active'' cannot be parsed correct.
HTML code '$'<span class="toggle-information-icon">&quest;</span>'' cannot be parsed correct.
HTML code '$'<span class="toggle-information-icon">&quest;</span>'' cannot be parsed correct.
HTML code '$'<h4 class="question-text">'' cannot be parsed correct.
HTML code '$'</h4>'' cannot be parsed correct.
HTML code '$'<span class="toggle-information-icon">&quest;</span>'' cannot be parsed correct.
HTML code '$' />
		'' cannot be parsed correct.
HTML code '$']['' cannot be parsed correct.
HTML code '$']" value="1" '' cannot be parsed correct.
HTML code '$' />
			'' cannot be parsed correct.
HTML code '$'"'' cannot be parsed correct.
HTML code '$' /> '' cannot be parsed correct.
HTML code '$'            </label>
        </p>
		'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<style> 
			#tutor-course-topics .toggle-indicator:before { 
				margin-top: 0; 
			} 
		</style>'' cannot be parsed correct.
HTML code '$'<i class="tutor-icon-image1"></i>'' cannot be parsed correct.
HTML code '$'<i class="tutor-icon-image1"></i>'' cannot be parsed correct.
HTML code '$'<i class="tutor-icon-image1"></i>'' cannot be parsed correct.
HTML code '$'<i class="tutor-icon-image1"></i>'' cannot be parsed correct.
HTML code '$' >'' cannot be parsed correct.
HTML code '$'<div class="tutor-alert-warning"><ul class="tutor-required-fields">'' cannot be parsed correct.
HTML code '$'</ul></div>'' cannot be parsed correct.
HTML code '$'<mark class="yes"><span class="dashicons dashicons-yes"></span></mark>'' cannot be parsed correct.
HTML code '$'<mark class="yes"><span class="dashicons dashicons-yes"></span></mark>'' cannot be parsed correct.
HTML code '$'<mark class="yes"><span class="dashicons dashicons-yes"></span></mark>'' cannot be parsed correct.
HTML code '$'<mark class="yes"><span class="dashicons dashicons-yes"></span></mark>'' cannot be parsed correct.
HTML code '$'<mark class="yes">
								<span class="dashicons dashicons-yes"></span>
							</mark>'' cannot be parsed correct.
HTML code '$'<div class="answer-image-matched-wrap">'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div class="answer-image-matched-wrap">'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:02:22.385742.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.037944.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 677 do_action/apply_filters calls and 283 add_action/add_filter calls. Now connecting do-add pairs.
Added 55 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:36.654904.

55 PHP_REACHES edges created
55 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running FileProDetector
### Start running FrontBaseDetector
### Finish running DbaseDetector
### Start running HashDetector
### Finish running DbplusDetector
### Start running IBMDb2Detector
### Finish running ArrayElementDetector
### Start running InformixDetector
### Finish running CubridDetector
### Start running IngresDetector
### Finish running FirebirdInterBaseDetector
### Start running maxdbDetector
### Finish running IBMDb2Detector
### Start running MongoDbDetector
### Finish running MongoDbDetector
### Start running MongoDetector
### Finish running MongoDetector
### Start running MsqlDetector
### Finish running FrontBaseDetector
### Start running MySQLDetector
### Finish running InformixDetector
### Start running MySQLiDetector
### Finish running IngresDetector
### Start running Oci8Detector
### Finish running MySQLDetector
### Start running OpenSSLDetector
### Finish running MsqlDetector
### Start running ParadoxDetector
### Finish running Oci8Detector
### Start running PasswordHashingDetector
### Finish running ParadoxDetector
### Start running PhpCurlDetector
### Finish running PhpCurlDetector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running HashDetector
### Start running PHPRetrievalDetector
### Finish running PasswordHashingDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PHPRetrievalDetector
### Start running PhpVarDetector
### Finish running PHPStorageDetector
### Start running PostgreSQLDetector
### Finish running PostgreSQLDetector
### Start running PropertyDetector
### Finish running PHPIncludedDetector
### Start running Sqlite3Detector
### Finish running Sqlite3Detector
### Start running SqliteDetector
### Finish running maxdbDetector
### Start running SqlServerDetector
### Finish running MySQLiDetector
### Start running SybaseDetector
### Finish running PropertyDetector
### Start running TokyoTyrantDetector
### Finish running SqliteDetector
### Start running UserInputDetector
### Finish running TokyoTyrantDetector
### Start running VariableDetector
### Finish running SqlServerDetector
### Start running WordpressHashingFnDetector
### Finish running OpenSSLDetector
### Start running WordPressRemoteDetector
### Finish running PhpVarDetector
### Start running WordPressRetrievalDetector
### Finish running UserInputDetector
### Start running WordPressStorageDetector
### Finish running SybaseDetector
### Start running WP_UserDetector
### Finish running WordPressRemoteDetector
### Start running GenericDatabaseUsageDetector
### Finish running WP_UserDetector
### Start running GenericEncryptionDetector
### Finish running WordpressHashingFnDetector
### Start running DeletionDetector
### Finish running GenericEncryptionDetector
### Start running UninstallDetector
### Finish running GenericDatabaseUsageDetector
### Finish running UninstallDetector
### Finish running VariableDetector
### Finish running DeletionDetector
### Finish running WordPressStorageDetector
### Finish running WordPressRetrievalDetector
### Finished running detectors
classes/Student.php:224
  - Request variable '$_POST["previous_password"]' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:225
  - Request variable '$_POST["new_password"]' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:226
  - Request variable '$_POST["confirm_new_password"]' of personal types {'password'} is found.
  - Data types: password 

classes/Course.php:639
  - MD5 called with parameters [wp_generate_password, user_id, course_id, date]. Ignore if [wp_generate_password, user_id, course_id, date] does not contain personal information.
classes/Utils.php:3317
  - MD5 called with parameters [initial_avatar]. Ignore if [initial_avatar] does not contain personal information. 

classes/Utils.php:6252
  - RETRIEVAL call to file_get_contents($flash_msg_file_name).
  - Data types: file 

includes/tutor-general-functions.php:730
  - STORAGE call to file_put_contents($file, $maintenance_string).
  - Data types: file 

classes/FormHandler.php:172
  - object property '$user_data->user_email' of personal types {'email'} is found.
  - Data types: email
classes/Quiz_Attempts_List.php:45
  - object property '$item->user_email' of personal types {'email'} is found.
  - Data types: email
classes/Student.php:228
  - object property '$user->user_pass' of personal types {'password'} is found.
  - Data types: password
classes/Tutor.php:90
  - object property '$wpdb->tutor_email_queue' of personal types {'email'} is found.
  - Data types: email
classes/Tutor.php:137
  - object property '$this->email' of personal types {'email'} is found.
  - Data types: email
classes/Upgrader.php:140
  - object property '$wpdb->tutor_email_queue' of personal types {'email'} is found.
  - Data types: email
classes/Upgrader.php:146
  - object property '$wpdb->tutor_email_queue' of personal types {'email'} is found.
  - Data types: email
classes/Utils.php:189
  - object property '$user->user_nicename' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
classes/Withdraw_Requests_List.php:49
  - object property '$item->user_email' of personal types {'email'} is found.
  - Data types: email
classes/Withdraw_Requests_List.php:49
  - object property '$item->user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
templates/dashboard/assignments/review.php:51
  - object property '$comment_author->user_email' of personal types {'email'} is found.
  - Data types: email
templates/dashboard/assignments/submitted.php:106
  - object property '$comment_author->user_email' of personal types {'email'} is found.
  - Data types: email
templates/dashboard/my-profile.php:13
  - object property '$user->first_name' of personal types {'user_meta', 'user', 'first_name'} is found.
  - Data types: user_meta, user, first_name
templates/dashboard/my-profile.php:14
  - object property '$user->last_name' of personal types {'user_meta', 'last_name', 'user'} is found.
  - Data types: user_meta, last_name, user
templates/dashboard/my-profile.php:16
  - object property '$user->user_email' of personal types {'email'} is found.
  - Data types: email
templates/dashboard/quiz-attempts.php:62
  - object property '$attempt->user_email' of personal types {'email'} is found.
  - Data types: email
templates/dashboard/settings/profile.php:98
  - object property '$user->first_name' of personal types {'user_meta', 'user', 'first_name'} is found.
  - Data types: user_meta, user, first_name
templates/dashboard/settings/profile.php:107
  - object property '$user->last_name' of personal types {'user_meta', 'last_name', 'user'} is found.
  - Data types: user_meta, last_name, user
templates/dashboard/settings/profile.php:155
  - object property '$user->first_name' of personal types {'user_meta', 'user', 'first_name'} is found.
  - Data types: user_meta, user, first_name
templates/dashboard/settings/profile.php:156
  - object property '$user->first_name' of personal types {'user_meta', 'user', 'first_name'} is found.
  - Data types: user_meta, user, first_name
templates/dashboard/settings/profile.php:159
  - object property '$user->last_name' of personal types {'user_meta', 'last_name', 'user'} is found.
  - Data types: user_meta, last_name, user
templates/dashboard/settings/profile.php:160
  - object property '$user->last_name' of personal types {'user_meta', 'last_name', 'user'} is found.
  - Data types: user_meta, last_name, user
templates/dashboard/settings/profile.php:163
  - object property '$user->first_name' of personal types {'user_meta', 'user', 'first_name'} is found.
  - Data types: user_meta, user, first_name
templates/dashboard/settings/profile.php:163
  - object property '$user->last_name' of personal types {'user_meta', 'last_name', 'user'} is found.
  - Data types: user_meta, last_name, user
templates/dashboard/settings/profile.php:164
  - object property '$user->first_name' of personal types {'user_meta', 'user', 'first_name'} is found.
  - Data types: user_meta, user, first_name
templates/dashboard/settings/profile.php:164
  - object property '$user->last_name' of personal types {'user_meta', 'last_name', 'user'} is found.
  - Data types: user_meta, last_name, user
templates/dashboard/settings/profile.php:165
  - object property '$user->first_name' of personal types {'user_meta', 'user', 'first_name'} is found.
  - Data types: user_meta, user, first_name
templates/dashboard/settings/profile.php:165
  - object property '$user->last_name' of personal types {'user_meta', 'last_name', 'user'} is found.
  - Data types: user_meta, last_name, user 

classes/Ajax.php:449
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
classes/Ajax.php:455
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
classes/Course.php:1211
  - variable '$is_pass' of personal types {'password'} is found.
  - Data types: password
classes/Course.php:1212
  - variable '$required_quiz_pass' of personal types {'password'} is found.
  - Data types: password
classes/Course.php:1223
  - variable '$required_quiz_pass' of personal types {'password'} is found.
  - Data types: password
classes/Course.php:1224
  - variable '$is_pass' of personal types {'password'} is found.
  - Data types: password
classes/Course.php:1227
  - variable '$required_quiz_pass' of personal types {'password'} is found.
  - Data types: password
classes/Course.php:1228
  - variable '$is_pass' of personal types {'password'} is found.
  - Data types: password
classes/Course.php:1233
  - variable '$is_pass' of personal types {'password'} is found.
  - Data types: password
classes/Course.php:1234
  - variable '$required_quiz_pass' of personal types {'password'} is found.
  - Data types: password
classes/FormHandler.php:106
  - variable '$confirm_password' of personal types {'password'} is found.
  - Data types: password
classes/FormHandler.php:122
  - variable '$confirm_password' of personal types {'password'} is found.
  - Data types: password
classes/Instructor.php:100
  - variable '$first_name' of personal types {'first_name'} is found.
  - Data types: first_name
classes/Instructor.php:101
  - variable '$last_name' of personal types {'last_name'} is found.
  - Data types: last_name
classes/Instructor.php:102
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
classes/Instructor.php:108
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
classes/Instructor.php:109
  - variable '$first_name' of personal types {'first_name'} is found.
  - Data types: first_name
classes/Instructor.php:110
  - variable '$last_name' of personal types {'last_name'} is found.
  - Data types: last_name
classes/Instructor.php:211
  - variable '$first_name' of personal types {'first_name'} is found.
  - Data types: first_name
classes/Instructor.php:212
  - variable '$last_name' of personal types {'last_name'} is found.
  - Data types: last_name
classes/Instructor.php:213
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
classes/Instructor.php:221
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
classes/Instructor.php:222
  - variable '$first_name' of personal types {'first_name'} is found.
  - Data types: first_name
classes/Instructor.php:223
  - variable '$last_name' of personal types {'last_name'} is found.
  - Data types: last_name
classes/Student.php:82
  - variable '$first_name' of personal types {'first_name'} is found.
  - Data types: first_name
classes/Student.php:83
  - variable '$last_name' of personal types {'last_name'} is found.
  - Data types: last_name
classes/Student.php:84
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
classes/Student.php:90
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
classes/Student.php:91
  - variable '$first_name' of personal types {'first_name'} is found.
  - Data types: first_name
classes/Student.php:92
  - variable '$last_name' of personal types {'last_name'} is found.
  - Data types: last_name
classes/Student.php:141
  - variable '$first_name' of personal types {'first_name'} is found.
  - Data types: first_name
classes/Student.php:142
  - variable '$last_name' of personal types {'last_name'} is found.
  - Data types: last_name
classes/Student.php:150
  - variable '$first_name' of personal types {'first_name'} is found.
  - Data types: first_name
classes/Student.php:151
  - variable '$last_name' of personal types {'last_name'} is found.
  - Data types: last_name
classes/Student.php:190
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
classes/Student.php:191
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
classes/Student.php:192
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
classes/Student.php:193
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
classes/Student.php:194
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
classes/Student.php:196
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
classes/Student.php:197
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
classes/Student.php:199
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
classes/Student.php:200
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
classes/Student.php:224
  - variable '$previous_password' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:225
  - variable '$new_password' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:226
  - variable '$confirm_new_password' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:228
  - variable '$previous_password_checked' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:228
  - variable '$previous_password' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:231
  - variable '$previous_password_checked' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:234
  - variable '$new_password' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:237
  - variable '$confirm_new_password' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:240
  - variable '$new_password' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:240
  - variable '$confirm_new_password' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:249
  - variable '$previous_password_checked' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:249
  - variable '$new_password' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:249
  - variable '$new_password' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:249
  - variable '$confirm_new_password' of personal types {'password'} is found.
  - Data types: password
classes/Student.php:250
  - variable '$new_password' of personal types {'password'} is found.
  - Data types: password
classes/Template.php:437
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
classes/Template.php:438
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
classes/Upgrader.php:140
  - variable '$exists_email_queue_table' of personal types {'email'} is found.
  - Data types: email
classes/Upgrader.php:145
  - variable '$exists_email_queue_table' of personal types {'email'} is found.
  - Data types: email
classes/Utils.php:175
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
classes/Utils.php:189
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
classes/Utils.php:192
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
classes/Utils.php:195
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
classes/Utils.php:209
  - variable '$user_nicename' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
classes/Utils.php:209
  - variable '$user_nicename' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
classes/Utils.php:216
  - variable '$user_nicename' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
classes/Utils.php:4341
  - variable '$user_display_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
classes/Utils.php:4344
  - variable '$user_display_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
classes/Utils.php:4347
  - variable '$user_display_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
classes/Utils.php:5661
  - variable '$ipaddress' of personal types {'address', 'ip'} is found.
  - Data types: address, ip
classes/Utils.php:5663
  - variable '$ipaddress' of personal types {'address', 'ip'} is found.
  - Data types: address, ip
classes/Utils.php:5665
  - variable '$ipaddress' of personal types {'address', 'ip'} is found.
  - Data types: address, ip
classes/Utils.php:5667
  - variable '$ipaddress' of personal types {'address', 'ip'} is found.
  - Data types: address, ip
classes/Utils.php:5669
  - variable '$ipaddress' of personal types {'address', 'ip'} is found.
  - Data types: address, ip
classes/Utils.php:5671
  - variable '$ipaddress' of personal types {'address', 'ip'} is found.
  - Data types: address, ip
classes/Utils.php:5673
  - variable '$ipaddress' of personal types {'address', 'ip'} is found.
  - Data types: address, ip
classes/Utils.php:5675
  - variable '$ipaddress' of personal types {'address', 'ip'} is found.
  - Data types: address, ip
classes/Utils.php:5677
  - variable '$ipaddress' of personal types {'address', 'ip'} is found.
  - Data types: address, ip
classes/Utils.php:7164
  - variable '$new_pass' of personal types {'password'} is found.
  - Data types: password
classes/Utils.php:7166
  - variable '$new_pass' of personal types {'password'} is found.
  - Data types: password
templates/dashboard/earning/statements.php:164
  - variable '$billing_address' of personal types {'address'} is found.
  - Data types: address
templates/dashboard/earning/statements.php:165
  - variable '$billing_address' of personal types {'address'} is found.
  - Data types: address
templates/dashboard/earning/statements.php:167
  - variable '$billing_address' of personal types {'address'} is found.
  - Data types: address
templates/dashboard/my-profile.php:16
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
templates/dashboard/my-profile.php:65
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
templates/dashboard/settings/nav-bar.php:6
  - variable '$reset_password' of personal types {'password'} is found.
  - Data types: password
templates/dashboard/settings/nav-bar.php:15
  - variable '$reset_password' of personal types {'password'} is found.
  - Data types: password
templates/dashboard/withdraw.php:207
  - variable '$email_base' of personal types {'email'} is found.
  - Data types: email
templates/dashboard/withdraw.php:208
  - variable '$email_base' of personal types {'email'} is found.
  - Data types: email
templates/dashboard/withdraw.php:208
  - variable '$email_base' of personal types {'email'} is found.
  - Data types: email
templates/profile/bio.php:7
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
templates/profile/bio.php:8
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
templates/profile/courses_taken.php:7
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
templates/profile/courses_taken.php:8
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
templates/profile/enrolled_course.php:15
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
templates/profile/enrolled_course.php:16
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
templates/profile/reviews_wrote.php:16
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
templates/profile/reviews_wrote.php:17
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
templates/student-public-profile.php:15
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
templates/student-public-profile.php:16
  - variable '$user_name' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user 

classes/Student.php:154
  - CRYPTOGRAPHY call to wp_update_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
classes/Student.php:250
  - CRYPTOGRAPHY call to wp_set_password($new_password, $user->ID) alters data types {'user_meta'}. Passed arguments: 0: $password (string), 1: $user_id (int).
  - Data types: user_meta
classes/Utils.php:7166
  - CRYPTOGRAPHY call to wp_set_password($new_pass, $user->ID) alters data types {'user_meta'}. Passed arguments: 0: $password (string), 1: $user_id (int).
  - Data types: user_meta 

views/pages/tools/status.php:35
  - API call to wp_remote_get("https://api.wordpress.org/core/version-check/1.7/"). Passed arguments: 0: $url (string). Returns (array|WP_Error).
  - Data types: remote 

classes/Admin.php:52
  - RETRIEVAL call to tutils()->get_option("enable_course_marketplace") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Admin.php:231
  - RETRIEVAL call to get_post($get_post_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Admin.php:325
  - RETRIEVAL call to get_option("home") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Admin.php:326
  - RETRIEVAL call to get_option("siteurl") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Admin.php:358
  - RETRIEVAL call to tutor_utils()->get_option("delete_on_uninstall") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Admin.php:442
  - RETRIEVAL call to tutor_utils()->get_option("delete_on_uninstall") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Ajax.php:115
  - RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
classes/Ajax.php:215
  - RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
classes/Ajax.php:266
  - RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
classes/Ajax.php:352
  - RETRIEVAL call to get_option("tutor_addons_config") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Ajax.php:473
  - RETRIEVAL call to get_user_by(is_email($creds["user_login"])"email""login", $creds["user_login"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
classes/Ajax.php:565
  - RETRIEVAL call to get_post($post_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Assets.php:125
  - RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Assets.php:198
  - RETRIEVAL call to tutils()->get_option("quiz_when_time_expires") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Assets.php:251
  - RETRIEVAL call to tutor_utils()->get_option("tutor_primary_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Assets.php:252
  - RETRIEVAL call to tutor_utils()->get_option("tutor_primary_hover_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Assets.php:253
  - RETRIEVAL call to tutor_utils()->get_option("tutor_text_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Assets.php:254
  - RETRIEVAL call to tutor_utils()->get_option("tutor_light_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Assets.php:259
  - RETRIEVAL call to tutor_utils()->get_option("tutor_button_primary") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Assets.php:260
  - RETRIEVAL call to tutor_utils()->get_option("tutor_button_danger") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Assets.php:261
  - RETRIEVAL call to tutor_utils()->get_option("tutor_button_success") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Assets.php:262
  - RETRIEVAL call to tutor_utils()->get_option("tutor_button_warning") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Assets.php:307
  - RETRIEVAL call to get_user_option("rich_editing") alters data types {'user_meta'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: user_meta
classes/Course.php:189
  - RETRIEVAL call to tutor_utils()->get_option("enable_course_marketplace") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Course.php:518
  - RETRIEVAL call to tutils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Course.php:690
  - RETRIEVAL call to get_option($key) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Course.php:869
  - RETRIEVAL call to tutor_utils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Course.php:870
  - RETRIEVAL call to get_post($post_ID) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Course.php:876
  - RETRIEVAL call to get_post_meta($attached_product_id, "_product_version", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Course.php:906
  - RETRIEVAL call to get_post_meta($post_ID, "_thumbnail_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Course.php:917
  - RETRIEVAL call to get_post_meta($attached_product_id, "edd_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Course.php:944
  - RETRIEVAL call to get_post_meta($post_ID, "_thumbnail_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Course.php:973
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_started", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Course.php:1084
  - RETRIEVAL call to get_post_meta($post->ID, "_tutor_disable_qa", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Course.php:1188
  - RETRIEVAL call to tutils()->get_option("course_completion_process") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Course.php:1282
  - RETRIEVAL call to get_posts($args). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).
classes/Course.php:1338
  - RETRIEVAL call to get_post_meta($post->ID, $disable_qa, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Course.php:1339
  - RETRIEVAL call to get_post_meta($post->ID, $is_public, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Course.php:1404
  - RETRIEVAL call to get_post_field("post_parent", $enroll_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: post, wp_post, post_meta
classes/Course.php:1405
  - RETRIEVAL call to get_post_field("post_author", $enroll_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: post, wp_post, post_meta
classes/Course_Filter.php:22
  - RETRIEVAL call to tutils()->get_option("courses_per_page", 12) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
classes/Course_Settings_Tabs.php:55
  - RETRIEVAL call to get_post_meta(get_the_ID(), "_tutor_course_settings", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Dashboard.php:57
  - RETRIEVAL call to get_post($post_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Dashboard.php:87
  - RETRIEVAL call to tutils()->get_option("enable_profile_completion") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Email.php:33
  - RETRIEVAL call to get_option("blogname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Email.php:39
  - RETRIEVAL call to get_option("admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/FormHandler.php:38
  - RETRIEVAL call to get_user_by("login", $login) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
classes/FormHandler.php:43
  - RETRIEVAL call to get_user_by("email", $login) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
classes/FormHandler.php:108
  - RETRIEVAL call to get_user_by("ID", $user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
classes/FormHandler.php:109
  - RETRIEVAL call to check_password_reset_key($reset_key, $user->user_login). Passed arguments: 0: $key (string), 1: $login (string). Returns (WP_User|WP_Error).
classes/FormHandler.php:156
  - RETRIEVAL call to get_user_by("login", $user_login) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
classes/FormHandler.php:165
  - RETRIEVAL call to get_option("blogname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Instructor.php:122
  - RETRIEVAL call to get_user_by("id", $user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
classes/Instructor.php:124
  - RETRIEVAL call to wp_set_current_user($user_id, $user->user_login) alters data types {'user_meta'}. Passed arguments: 0: $id (int), 1: $name (string). Returns (WP_User).
  - Data types: user_meta
classes/Instructor.php:178
  - RETRIEVAL call to get_option("users_can_register", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
classes/Instructor.php:310
  - RETRIEVAL call to tutor_utils()->get_option("instructor_can_publish_course") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Instructors_List.php:37
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Lesson.php:140
  - RETRIEVAL call to get_post($lesson_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Lesson.php:239
  - RETRIEVAL call to get_post($lesson_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Lesson.php:247
  - RETRIEVAL call to get_post($is_course) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Lesson.php:262
  - RETRIEVAL call to get_option("required_rewrite_flush") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Lesson.php:336
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_is_public_course", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Lesson.php:350
  - RETRIEVAL call to get_post($lesson_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Options.php:17
  - RETRIEVAL call to get_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Options.php:92
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
classes/Post_types.php:327
  - RETRIEVAL call to get_post() alters data types {'post', 'wp_post', 'post_meta'}. Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Post_types.php:379
  - RETRIEVAL call to tutor_utils()->get_option("enable_gutenberg_course_edit") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Q_and_A.php:31
  - RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
classes/Quiz.php:177
  - RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
classes/Quiz.php:181
  - RETRIEVAL call to get_post($quiz_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Quiz.php:191
  - RETRIEVAL call to get_post_meta($quiz_id, "tutor_quiz_option", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Quiz.php:706
  - RETRIEVAL call to get_post($quiz_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Quiz.php:1333
  - RETRIEVAL call to get_post($quiz_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Rewrite_Rules.php:26
  - RETRIEVAL call to tutor_utils()->get_option("enable_public_profile") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Rewrite_Rules.php:66
  - RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Rewrite_Rules.php:67
  - RETRIEVAL call to get_post_field("post_name", $dashboard_page_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: post, wp_post, post_meta
classes/Rewrite_Rules.php:89
  - RETRIEVAL call to get_post($id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Shortcode.php:196
  - RETRIEVAL call to tutor_utils()->get_option("instructor_list_layout", $this->instructor_layout[0]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
classes/Shortcode.php:225
  - RETRIEVAL call to tutor_utils()->get_option("instructor_list_show_filter", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
classes/Student.php:32
  - RETRIEVAL call to get_option("users_can_register", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
classes/Student.php:99
  - RETRIEVAL call to get_user_by("id", $user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
classes/Student.php:101
  - RETRIEVAL call to wp_set_current_user($user_id, $user->user_login) alters data types {'user_meta'}. Passed arguments: 0: $id (int), 1: $name (string). Returns (WP_User).
  - Data types: user_meta
classes/Student.php:210
  - RETRIEVAL call to get_user_meta($user_id, "_tutor_profile_photo", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
classes/Student.php:222
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
classes/Template.php:79
  - RETRIEVAL call to tutor_utils()->get_option("courses_per_page", 12) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
classes/Template.php:85
  - RETRIEVAL call to tutor_utils()->get_option("course_archive_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Template.php:145
  - RETRIEVAL call to tutor_utils()->get_option("student_must_login_to_view_course") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Template.php:223
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_is_public_course", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Template.php:280
  - RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Template.php:287
  - RETRIEVAL call to tutor_utils()->get_option("instructor_register_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Template.php:293
  - RETRIEVAL call to tutor_utils()->get_option("student_register_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Template.php:305
  - RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor.php:175
  - RETRIEVAL call to get_option("tutor_wizard") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor.php:231
  - RETRIEVAL call to get_option("tutor_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor.php:261
  - RETRIEVAL call to get_option("tutor_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor.php:275
  - RETRIEVAL call to get_option("tutor_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor.php:278
  - RETRIEVAL call to get_option("is_course_post_type_updated") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor.php:289
  - RETRIEVAL call to get_option("tutor_first_activation_time") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor.php:409
  - RETRIEVAL call to dbDelta($quiz_attempts_sql). Passed arguments: 0: $queries (string[]|string). Returns (array).
classes/Tutor.php:410
  - RETRIEVAL call to dbDelta($quiz_attempt_answers). Passed arguments: 0: $queries (string[]|string). Returns (array).
classes/Tutor.php:411
  - RETRIEVAL call to dbDelta($tutor_quiz_questions). Passed arguments: 0: $queries (string[]|string). Returns (array).
classes/Tutor.php:412
  - RETRIEVAL call to dbDelta($tutor_quiz_question_answers). Passed arguments: 0: $queries (string[]|string). Returns (array).
classes/Tutor.php:413
  - RETRIEVAL call to dbDelta($earning_table). Passed arguments: 0: $queries (string[]|string). Returns (array).
classes/Tutor.php:414
  - RETRIEVAL call to dbDelta($withdraw_table). Passed arguments: 0: $queries (string[]|string). Returns (array).
classes/Tutor.php:481
  - RETRIEVAL call to tutor_utils()->get_option("instructor_can_publish_course") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor.php:576
  - RETRIEVAL call to get_option("blogname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor.php:577
  - RETRIEVAL call to get_option("admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor.php:639
  - RETRIEVAL call to dbDelta($earning_table). Passed arguments: 0: $queries (string[]|string). Returns (array).
classes/Tutor.php:640
  - RETRIEVAL call to dbDelta($withdraw_table). Passed arguments: 0: $queries (string[]|string). Returns (array).
classes/Tutor.php:645
  - RETRIEVAL call to tutor_utils()->get_option("student_dashboard") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/TutorEDD.php:23
  - RETRIEVAL call to tutils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/TutorEDD.php:137
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_product_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Tutor_Base.php:27
  - RETRIEVAL call to tutor_utils()->get_option("lesson_permalink_base") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor_List_Table.php:433
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor_List_Table.php:435
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor_List_Table.php:822
  - RETRIEVAL call to get_user_option($option) alters data types {'user_meta'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: user_meta
classes/Tutor_List_Table.php:1370
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor_List_Table.php:1370
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor_Setup.php:19
  - RETRIEVAL call to get_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor_Setup.php:34
  - RETRIEVAL call to get_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor_Setup.php:58
  - RETRIEVAL call to get_option("tutor_withdraw_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor_Setup.php:101
  - RETRIEVAL call to get_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor_Setup.php:102
  - RETRIEVAL call to get_option("tutor_withdraw_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor_Setup.php:554
  - RETRIEVAL call to get_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor_Setup.php:574
  - RETRIEVAL call to tutor_utils()->get_option("enable_course_marketplace") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor_Setup.php:576
  - RETRIEVAL call to tutor_utils()->get_option("enable_tutor_earning") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Tutor_Setup.php:690
  - RETRIEVAL call to tutor_utils()->get_option("enable_course_marketplace") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Upgrader.php:36
  - RETRIEVAL call to get_option("tutor_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Upgrader.php:50
  - RETRIEVAL call to get_option("tutor_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Upgrader.php:53
  - RETRIEVAL call to get_option("is_course_post_type_updated") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Upgrader.php:98
  - RETRIEVAL call to dbDelta($gradebook_table). Passed arguments: 0: $queries (string[]|string). Returns (array).
classes/Upgrader.php:117
  - RETRIEVAL call to dbDelta($gradebook_results). Passed arguments: 0: $queries (string[]|string). Returns (array).
classes/Upgrader.php:155
  - RETRIEVAL call to dbDelta($table). Passed arguments: 0: $queries (string[]|string). Returns (array).
classes/User.php:65
  - RETRIEVAL call to get_user_meta($user_id, $meta_key, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
classes/User.php:175
  - RETRIEVAL call to get_option("users_can_register") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:28
  - RETRIEVAL call to get_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:66
  - RETRIEVAL call to get_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:156
  - RETRIEVAL call to $this->get_option("course_archive_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:242
  - RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:261
  - RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:289
  - RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:520
  - RETRIEVAL call to get_posts(["post_type" => $course_post_type, "author" => $instructor_id, "post_status" => ["publish", "pending"], "posts_per_page" => -1]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).
classes/Utils.php:705
  - RETRIEVAL call to get_posts($args). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).
classes/Utils.php:987
  - RETRIEVAL call to $this->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:1023
  - RETRIEVAL call to $this->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:1028
  - RETRIEVAL call to get_post_meta($product_id, "_regular_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:1029
  - RETRIEVAL call to get_post_meta($product_id, "_sale_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:1031
  - RETRIEVAL call to get_post_meta($product_id, "edd_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:1032
  - RETRIEVAL call to get_post_meta($product_id, "edd_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:1050
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_price_type", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:1219
  - RETRIEVAL call to get_post($course_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Utils.php:1309
  - RETRIEVAL call to get_user_meta($user_id, "_tutor_completed_lesson_id_"$lesson->ID, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
classes/Utils.php:1348
  - RETRIEVAL call to get_post_meta($post_id, "_video", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:1380
  - RETRIEVAL call to get_post_meta($post_id, "_tutor_attachments", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:1541
  - RETRIEVAL call to get_post_meta($sourceVideoID, "_wp_attachment_metadata", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:1554
  - RETRIEVAL call to get_post_meta($lesson_id, "_video", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:1648
  - RETRIEVAL call to get_user_meta($user_id, "_tutor_completed_lesson_id_" . $lesson_id, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
classes/Utils.php:2030
  - RETRIEVAL call to get_post($post_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Utils.php:2056
  - RETRIEVAL call to get_user_meta($user_id, "_lesson_reading_info", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
classes/Utils.php:2135
  - RETRIEVAL call to get_user_meta($user_id, "_lesson_reading_info", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
classes/Utils.php:2224
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:2224
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:2326
  - RETRIEVAL call to get_post_meta($enrolled->ID, "_tutor_enrolled_by_order_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:2478
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_product_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:2541
  - RETRIEVAL call to get_post_meta($order_id, "_is_tutor_order_for_course", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:2683
  - RETRIEVAL call to tutils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:2721
  - RETRIEVAL call to get_user_meta($user_id, "_is_tutor_instructor", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
classes/Utils.php:2746
  - RETRIEVAL call to get_user_meta($user_id, "_tutor_instructor_status", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
classes/Utils.php:4343
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
classes/Utils.php:4363
  - RETRIEVAL call to get_post_meta($post_id, "tutor_quiz_option", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:4631
  - RETRIEVAL call to get_post($quiz_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Utils.php:5405
  - RETRIEVAL call to tutor_utils()->get_option("show_courses_completed_by_student") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:5406
  - RETRIEVAL call to tutor_utils()->get_option("students_own_review_show_at_profile") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:5427
  - RETRIEVAL call to $this->get_option("student_register_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:5444
  - RETRIEVAL call to $this->get_option("instructor_register_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:5459
  - RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:5470
  - RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:5644
  - RETRIEVAL call to get_option("tutor_addons_config") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:5953
  - RETRIEVAL call to get_option("tutor_duplicated_earning_deleted", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
classes/Utils.php:6051
  - RETRIEVAL call to tutor_utils()->get_option("enable_tutor_edd") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:6052
  - RETRIEVAL call to $this->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:6075
  - RETRIEVAL call to get_user_meta($user_id, "_tutor_withdraw_method_data", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
classes/Utils.php:6270
  - RETRIEVAL call to tutils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:6343
  - RETRIEVAL call to get_post_meta($assignment_id, "assignment_option", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:6934
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_settings", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:6953
  - RETRIEVAL call to get_post_meta($lesson_id, "_content_drip_settings", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Utils.php:6967
  - RETRIEVAL call to get_post($post) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Utils.php:7009
  - RETRIEVAL call to get_post($post) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Utils.php:7197
  - RETRIEVAL call to get_post($page_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
classes/Utils.php:7331
  - RETRIEVAL call to get_user_meta($user_id, "_tutor_instructor_status", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
classes/Utils.php:7349
  - RETRIEVAL call to get_user_meta($user_id, $key, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
classes/Utils.php:7487
  - RETRIEVAL call to $this->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:7514
  - RETRIEVAL call to get_user_meta($user_id, "_tutor_cover_photo", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
classes/Utils.php:7723
  - RETRIEVAL call to get_post_field("post_date", $assignment_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: post, wp_post, post_meta
classes/Utils.php:7892
  - RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
classes/Utils.php:7964
  - RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Utils.php:8100
  - RETRIEVAL call to get_post_meta($course_id, "_course_duration", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/Withdraw.php:130
  - RETRIEVAL call to get_option("tutor_withdraw_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Withdraw.php:205
  - RETRIEVAL call to tutor_utils()->get_option("min_withdraw_amount") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Withdraw_Requests_List.php:98
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/Withdraw_Requests_List.php:98
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/WooCommerce.php:27
  - RETRIEVAL call to tutils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/WooCommerce.php:128
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_product_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
classes/WooCommerce.php:231
  - RETRIEVAL call to get_post_field("post_author", $enrolled_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: post, wp_post, post_meta
classes/WooCommerce.php:232
  - RETRIEVAL call to get_post_field("post_parent", $enrolled_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: post, wp_post, post_meta
classes/WooCommerce.php:353
  - RETRIEVAL call to tutor_utils()->get_option("enable_tutor_earning") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/WooCommerce.php:387
  - RETRIEVAL call to tutor_utils()->get_option("tutor_earning_fees") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/WooCommerce.php:417
  - RETRIEVAL call to tutor_utils()->get_option("earning_instructor_commission") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/WooCommerce.php:418
  - RETRIEVAL call to tutor_utils()->get_option("earning_admin_commission") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/WooCommerce.php:554
  - RETRIEVAL call to tutils()->get_option("wc_automatic_order_complete_redirect_to_courses") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/WooCommerce.php:586
  - RETRIEVAL call to get_post_meta($woo_product_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int). Returns (mixed).
  - Data types: post_meta
classes/WooCommerce.php:607
  - RETRIEVAL call to get_option("tutor_show_woocommerce_notice") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
classes/WooCommerce.php:607
  - RETRIEVAL call to tutils()->get_option("monetize_by", "free") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
includes/tutor-general-functions.php:442
  - RETRIEVAL call to tutor_utils()->get_option("enable_spotlight_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
includes/tutor-general-functions.php:467
  - RETRIEVAL call to tutor_utils()->get_option("enable_spotlight_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
includes/tutor-general-functions.php:495
  - RETRIEVAL call to tutils()->get_option($key, $default) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
includes/tutor-general-functions.php:707
  - RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
includes/tutor-general-functions.php:771
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
includes/tutor-template-functions.php:320
  - RETRIEVAL call to tutor_utils()->get_option("course_archive_filter", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
includes/tutor-template-functions.php:322
  - RETRIEVAL call to tutor_utils()->get_option("courses_col_per_row", 3) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
includes/tutor-template-functions.php:601
  - RETRIEVAL call to get_post($post_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
includes/tutor-template-functions.php:617
  - RETRIEVAL call to get_the_author_meta("display_name", $post->post_author) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).
  - Data types: user_meta
includes/tutor-template-functions.php:640
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_benefits", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
includes/tutor-template-functions.php:714
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_requirements", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
includes/tutor-template-functions.php:763
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_target_audience", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
includes/tutor-template-functions.php:803
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_material_includes", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
includes/tutor-template-functions.php:833
  - RETRIEVAL call to tutor_utils()->get_option("display_course_instructors") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
includes/tutor-template-functions.php:864
  - RETRIEVAL call to tutils()->get_option("disable_course_review") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
includes/tutor-template-functions.php:1371
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_level", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
includes/tutor-template-functions.php:1387
  - RETRIEVAL call to get_post_meta($course_id, "_course_duration", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
restapi/REST_Author.php:31
  - RETRIEVAL call to get_user_meta($this->user_id, "_tutor_instructor_course_id", false) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
restapi/REST_Course.php:104
  - RETRIEVAL call to get_post_meta($post_id, "_tutor_course_settings", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
restapi/REST_Course.php:106
  - RETRIEVAL call to get_post_meta($post_id, "_tutor_course_price_type", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
restapi/REST_Course.php:108
  - RETRIEVAL call to get_post_meta($post_id, "_course_duration", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
restapi/REST_Course.php:110
  - RETRIEVAL call to get_post_meta($post_id, "_tutor_course_level", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
restapi/REST_Course.php:112
  - RETRIEVAL call to get_post_meta($post_id, "_tutor_course_benefits", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
restapi/REST_Course.php:114
  - RETRIEVAL call to get_post_meta($post_id, "_tutor_course_requirements", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
restapi/REST_Course.php:116
  - RETRIEVAL call to get_post_meta($post_id, "_tutor_course_target_audience", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
restapi/REST_Course.php:118
  - RETRIEVAL call to get_post_meta($post_id, "_tutor_course_material_includes", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
restapi/REST_Course.php:120
  - RETRIEVAL call to get_post_meta($post_id, "_video", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
restapi/REST_Course.php:122
  - RETRIEVAL call to get_post_meta($post_id, "_tutor_disable_qa", "_video", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
restapi/REST_Course.php:266
  - RETRIEVAL call to get_post_meta($post->ID, "_regular_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
restapi/REST_Lesson.php:40
  - RETRIEVAL call to get_post_meta($lesson->ID, "_tutor_attachments", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
restapi/REST_Lesson.php:49
  - RETRIEVAL call to get_post_meta($lesson->ID, "_video", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
restapi/REST_Quiz.php:39
  - RETRIEVAL call to get_post_meta($quiz->ID, "tutor_quiz_option", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
templates/archive-course.php:17
  - RETRIEVAL call to tutor_utils()->get_option("course_archive_filter", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
templates/archive-course.php:18
  - RETRIEVAL call to tutor_utils()->get_option("supported_course_filters", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
templates/archive-course.php:27
  - RETRIEVAL call to tutor_utils()->get_option("courses_col_per_row", 4) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
templates/course-filter/filters.php:13
  - RETRIEVAL call to tutor_utils()->get_option("supported_course_filters", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
templates/dashboard.php:38
  - RETRIEVAL call to get_user_by("ID", $user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
templates/dashboard.php:39
  - RETRIEVAL call to tutils()->get_option("enable_profile_completion") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard.php:82
  - RETRIEVAL call to get_user_meta($user->ID, "_is_tutor_instructor_rejected", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
templates/dashboard.php:87
  - RETRIEVAL call to tutils()->get_option("enable_become_instructor_btn") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard.php:104
  - RETRIEVAL call to get_user_meta($user->ID, "_is_tutor_instructor", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
templates/dashboard.php:123
  - RETRIEVAL call to get_user_meta(get_current_user_id(), "tutor_instructor_show_rejection_message", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
templates/dashboard/announcements.php:114
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/announcements.php:114
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/announcements.php:131
  - RETRIEVAL call to get_post($post->post_parent) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
templates/dashboard/assignments.php:60
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/assignments.php:60
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/assignments/review.php:28
  - RETRIEVAL call to get_comment_meta($assignment_submitted_id, "assignment_mark", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: comment_meta
templates/dashboard/assignments/review.php:29
  - RETRIEVAL call to get_comment_meta($assignment_submitted_id, "instructor_note", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: comment_meta
templates/dashboard/assignments/review.php:30
  - RETRIEVAL call to get_user_by("login", $submitted_assignment->comment_author) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
templates/dashboard/assignments/review.php:66
  - RETRIEVAL call to get_comment_meta($submitted_assignment->comment_ID, "uploaded_attachments", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: comment_meta
templates/dashboard/assignments/submitted.php:16
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/assignments/submitted.php:16
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/assignments/submitted.php:83
  - RETRIEVAL call to get_user_by("login", $assignment->comment_author) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
templates/dashboard/assignments/submitted.php:84
  - RETRIEVAL call to get_comment_meta($assignment->comment_ID, "evaluate_time", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: comment_meta
templates/dashboard/assignments/submitted.php:85
  - RETRIEVAL call to get_comment_meta($assignment->comment_ID, "assignment_mark", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: comment_meta
templates/dashboard/create-course.php:19
  - RETRIEVAL call to tutor_utils()->get_option("instructor_can_publish_course") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/create-course.php:91
  - RETRIEVAL call to get_user_meta($user_id, "tutor_frontend_course_message_expires", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
templates/dashboard/create-course.php:92
  - RETRIEVAL call to get_user_meta($user_id, "tutor_frontend_course_action_message", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
templates/dashboard/create-course.php:174
  - RETRIEVAL call to tutils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/dashboard-menu.php:99
  - RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/earning.php:110
  - RETRIEVAL call to tutor_utils()->get_option("tutor_primary_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/earning/earning-report-top-menu.php:57
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/earning/earning-report-top-menu.php:57
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/earning/earning-report-top-menu.php:62
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/earning/earning-report-top-menu.php:62
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/earning/statement.php:37
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/earning/statement.php:37
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/earning/statements.php:145
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/earning/statements.php:145
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/index.php:41
  - RETRIEVAL call to get_user_by("ID", $user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
templates/dashboard/index.php:90
  - RETRIEVAL call to tutor_utils()->get_option("enable_become_instructor_btn") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/instructor/logged-in.php:13
  - RETRIEVAL call to get_user_meta($user_id, "_tutor_instructor_status", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
templates/dashboard/instructor/registration.php:9
  - RETRIEVAL call to get_option("users_can_register", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
templates/dashboard/my-profile.php:9
  - RETRIEVAL call to get_userdata($uid) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
templates/dashboard/my-profile.php:17
  - RETRIEVAL call to get_user_meta($uid, "phone_number", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
templates/dashboard/my-profile.php:18
  - RETRIEVAL call to get_user_meta($uid, "_tutor_profile_bio", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
templates/dashboard/my-quiz-attempts.php:52
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/my-quiz-attempts.php:52
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/my-quiz-attempts/attempts-details.php:133
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/my-quiz-attempts/attempts-details.php:133
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/my-quiz-attempts/attempts-details.php:185
  - RETRIEVAL call to get_post_meta($attempt_id, "instructor_feedback", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
templates/dashboard/purchase_history.php:13
  - RETRIEVAL call to tutils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/purchase_history.php:54
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/quiz-attempts.php:52
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/quiz-attempts.php:52
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/quiz-attempts/quiz-reviews.php:31
  - RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
templates/dashboard/quiz-attempts/quiz-reviews.php:119
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/quiz-attempts/quiz-reviews.php:119
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/quiz-attempts/quiz-reviews.php:171
  - RETRIEVAL call to get_post_meta($attempt_id, "instructor_feedback", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
templates/dashboard/quiz-attempts/quiz-reviews.php:211
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/quiz-attempts/quiz-reviews.php:211
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/quiz-attempts/quiz-reviews.php:423
  - RETRIEVAL call to get_post_meta($attempt_id, "instructor_feedback", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
templates/dashboard/registration.php:9
  - RETRIEVAL call to get_option("users_can_register", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
templates/dashboard/reviews.php:21
  - RETRIEVAL call to tutils()->get_option("pagination_per_page", 20) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
templates/dashboard/settings/profile.php:7
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
templates/dashboard/settings/profile.php:11
  - RETRIEVAL call to get_user_meta($user->ID, "_tutor_profile_photo", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
templates/dashboard/settings/profile.php:19
  - RETRIEVAL call to get_user_meta($user->ID, "_tutor_cover_photo", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
templates/dashboard/settings/profile.php:127
  - RETRIEVAL call to get_user_meta($user->ID, "phone_number", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
templates/dashboard/settings/profile.php:138
  - RETRIEVAL call to get_user_meta($user->ID, "_tutor_profile_bio", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
templates/dashboard/settings/profile.php:203
  - RETRIEVAL call to get_user_meta($user->ID, $key, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
templates/dashboard/settings/withdraw-settings.php:25
  - RETRIEVAL call to tutor_utils()->get_option("min_withdraw_amount") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/withdraw.php:9
  - RETRIEVAL call to tutor_utils()->get_option("min_withdraw_amount") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/withdraw.php:225
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/dashboard/withdraw.php:225
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/email/send-reset-password.php:13
  - RETRIEVAL call to get_option("blogname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/global/login.php:119
  - RETRIEVAL call to get_option("users_can_register", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
templates/instructor-setting.php:18
  - RETRIEVAL call to tutor_utils()->get_option("instructor_list_layout") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/login.php:18
  - RETRIEVAL call to tutils()->get_option("disable_tutor_native_login") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/loop/add-to-cart-woocommerce.php:29
  - RETRIEVAL call to tutor_utils()->get_option("enable_guest_course_cart") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/loop/course-author.php:21
  - RETRIEVAL call to get_the_author() alters data types {'user_meta'}. Returns (string|null).
  - Data types: user_meta
templates/loop/course-price-woocommerce.php:18
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_is_public_course", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
templates/loop/loop-start.php:18
  - RETRIEVAL call to tutor_utils()->get_option("courses_col_per_row", 4) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
templates/loop/meta.php:18
  - RETRIEVAL call to tutor_utils()->get_option("disable_course_total_enrolled") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/loop/meta.php:41
  - RETRIEVAL call to get_the_author() alters data types {'user_meta'}. Returns (string|null).
  - Data types: user_meta
templates/profile/bio.php:12
  - RETRIEVAL call to get_user_meta($user_id, "_tutor_profile_bio", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
templates/profile/enrolled_course.php:10
  - RETRIEVAL call to tutor_utils()->get_option("show_courses_completed_by_student") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/profile/reviews_wrote.php:11
  - RETRIEVAL call to tutor_utils()->get_option("students_own_review_show_at_profile") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/public-profile-setting.php:18
  - RETRIEVAL call to tutor_utils()->get_option($layout_option_name . "_public_profile_layout") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/shortcode/tutor-course.php:9
  - RETRIEVAL call to tutor_utils()->get_option("course_archive_filter", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
templates/shortcode/tutor-course.php:10
  - RETRIEVAL call to tutor_utils()->get_option("supported_course_filters", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
templates/single-assignment.php:18
  - RETRIEVAL call to tutor_utils()->get_option("enable_spotlight_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/single-lesson.php:19
  - RETRIEVAL call to tutor_utils()->get_option("enable_spotlight_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/single-preview-lesson.php:46
  - RETRIEVAL call to tutor_utils()->get_option("enable_spotlight_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/single-quiz.php:18
  - RETRIEVAL call to tutor_utils()->get_option("enable_spotlight_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/single/assignment/content.php:151
  - RETRIEVAL call to get_post_meta(get_the_ID(), "_tutor_assignment_attachments", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
templates/single/assignment/content.php:160
  - RETRIEVAL call to get_post_meta($attachment_id, "_wp_attached_file", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
templates/single/assignment/content.php:225
  - RETRIEVAL call to get_comment_meta($submitted_assignment->comment_ID, "evaluate_time", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: comment_meta
templates/single/assignment/content.php:233
  - RETRIEVAL call to get_comment_meta($submitted_assignment->comment_ID, "assignment_mark", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: comment_meta
templates/single/assignment/content.php:271
  - RETRIEVAL call to get_comment_meta($submitted_assignment->comment_ID, "uploaded_attachments", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: comment_meta
templates/single/assignment/content.php:299
  - RETRIEVAL call to get_comment_meta($submitted_assignment->comment_ID, "instructor_note", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: comment_meta
templates/single/course/add-to-cart.php:19
  - RETRIEVAL call to tutils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/single/course/add-to-cart.php:20
  - RETRIEVAL call to tutor_utils()->get_option("enable_guest_course_cart") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/single/course/add-to-cart.php:22
  - RETRIEVAL call to get_post_meta(get_the_ID(), "_tutor_is_public_course", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
templates/single/course/add-to-cart.php:44
  - RETRIEVAL call to tutils()->get_option("disable_tutor_native_login") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/single/course/course-enrolled-box.php:42
  - RETRIEVAL call to tutor_utils()->get_option("course_retake_feature", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
templates/single/course/course-enrolled-box.php:80
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/single/course/course-topics.php:136
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_is_public_course", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
templates/single/course/enrolled/lead-info.php:64
  - RETRIEVAL call to get_the_author() alters data types {'user_meta'}. Returns (string|null).
  - Data types: user_meta
templates/single/course/enrolled/question_and_answer.php:13
  - RETRIEVAL call to get_post_meta($post->ID, "_tutor_disable_qa", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
templates/single/course/enrolled/question_and_answer.php:14
  - RETRIEVAL call to tutor_utils()->get_option("enable_q_and_a_on_course") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/single/course/lead-info.php:64
  - RETRIEVAL call to get_the_author() alters data types {'user_meta'}. Returns (string|null).
  - Data types: user_meta
templates/single/lesson/lesson_sidebar.php:28
  - RETRIEVAL call to get_post_meta($post->ID, "_tutor_zm_for_course", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
templates/single/lesson/lesson_sidebar.php:32
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_disable_qa", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
templates/single/lesson/lesson_sidebar.php:33
  - RETRIEVAL call to tutor_utils()->get_option("enable_q_and_a_on_course") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/single/lesson/sidebar_question_and_answer.php:17
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_disable_qa", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
templates/single/lesson/sidebar_question_and_answer.php:18
  - RETRIEVAL call to tutor_utils()->get_option("enable_q_and_a_on_course") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/single/quiz/body.php:40
  - RETRIEVAL call to tutor_utils()->get_option("quiz_previous_button_disabled", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
templates/single/quiz/previous-attempts.php:40
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/single/quiz/previous-attempts.php:40
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/single/video/vimeo.php:17
  - RETRIEVAL call to tutor_utils()->get_option("disable_default_player_vimeo") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/single/video/youtube.php:16
  - RETRIEVAL call to tutor_utils()->get_option("disable_default_player_youtube") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
templates/student-public-profile.php:26
  - RETRIEVAL call to tutor_utils()->get_option($is_instructor"instructor""student" . "_public_profile_layout", "pp-circle") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
templates/student-public-profile.php:32
  - RETRIEVAL call to get_user_meta($user_id, $key, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
views/maintenance.php:51
  - RETRIEVAL call to get_option("blogname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
views/metabox/course-additional-data.php:7
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_benefits", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
views/metabox/course-additional-data.php:8
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_requirements", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
views/metabox/course-additional-data.php:9
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_target_audience", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
views/metabox/course-additional-data.php:10
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_material_includes", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
views/metabox/course-contents.php:24
  - RETRIEVAL call to get_posts($topic_args). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).
views/metabox/course-contents.php:96
  - RETRIEVAL call to get_posts(["post_type" => $post_type, "post_parent" => $topic->ID, "posts_per_page" => -1, "orderby" => "menu_order", "order" => "ASC"]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).
views/metabox/course-level-metabox.php:5
  - RETRIEVAL call to get_post_meta($course_id, "_tutor_course_level", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
views/metabox/user-profile-fields.php:15
  - RETRIEVAL call to get_user_meta($user->ID, "_tutor_profile_job_title", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
views/metabox/user-profile-fields.php:29
  - RETRIEVAL call to get_user_meta($user->ID, "_tutor_profile_bio", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
views/metabox/user-profile-fields.php:42
  - RETRIEVAL call to get_user_meta($user->ID, "_tutor_profile_photo", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
views/metabox/video-metabox.php:10
  - RETRIEVAL call to get_post_meta($post->ID, "_video", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
views/metabox/video-metabox.php:46
  - RETRIEVAL call to tutor_utils()->get_option("supported_video_sources", $video_sources) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
views/metabox/video-metabox.php:49
  - RETRIEVAL call to tutor_utils()->get_option("default_video_source", null) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
views/metabox/video-metabox.php:147
  - RETRIEVAL call to tutils()->get_option("lesson_video_duration_youtube_api_key", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
views/modal/edit-lesson.php:50
  - RETRIEVAL call to get_post_meta($post->ID, "_thumbnail_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
views/modal/edit_quiz.php:5
  - RETRIEVAL call to get_post($quiz_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
views/modal/edit_quiz.php:9
  - RETRIEVAL call to get_post($quiz_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
views/modal/edit_quiz.php:222
  - RETRIEVAL call to tutor_utils()->get_option("quiz_attempts_allowed") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
views/pages/announcements.php:97
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
views/pages/announcements.php:97
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
views/pages/announcements.php:122
  - RETRIEVAL call to get_post($post->post_parent) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
views/pages/instructors.php:31
  - RETRIEVAL call to get_option("users_can_register", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
views/pages/tools/status.php:32
  - RETRIEVAL call to get_transient("tutor_system_status_wp_version_check") alters data types {'site'}. Passed arguments: 0: $transient (string). Returns (mixed).
  - Data types: site
views/pages/tools/tutor_pages.php:57
  - RETRIEVAL call to get_post($page_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
views/pages/view_attempt.php:16
  - RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
views/pages/view_attempt.php:52
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
views/pages/view_attempt.php:52
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
views/pages/view_attempt.php:164
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
views/pages/view_attempt.php:164
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
views/pages/view_attempt.php:350
  - RETRIEVAL call to get_post_meta($attempt_id, "instructor_feedback", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta 

classes/Admin.php:416
  - STORAGE call to delete_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
classes/Ajax.php:330
  - STORAGE call to add_user_meta($user_id, "_tutor_course_wishlist", $course_id) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|false).
  - Data types: user_meta
classes/Ajax.php:362
  - STORAGE call to update_option("tutor_addons_config", $addonsConfig) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Ajax.php:370
  - STORAGE call to update_option("tutor_addons_config", $addonsConfig) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Ajax.php:563
  - STORAGE call to wp_insert_post($form_data). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
classes/Ajax.php:601
  - STORAGE call to wp_delete_post($announcement_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Course.php:284
  - STORAGE call to update_post_meta($post_ID, "_tutor_course_price_type", $price_type) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:290
  - STORAGE call to update_post_meta($post_ID, "_course_duration", $video) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:295
  - STORAGE call to update_post_meta($post_ID, "_tutor_course_level", $course_level) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:302
  - STORAGE call to update_post_meta($post_ID, "_tutor_course_benefits", $course_benefits) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:304
  - STORAGE call to delete_post_meta($post_ID, "_tutor_course_benefits") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Course.php:309
  - STORAGE call to update_post_meta($post_ID, "_tutor_course_requirements", $requirements) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:311
  - STORAGE call to delete_post_meta($post_ID, "_tutor_course_requirements") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Course.php:316
  - STORAGE call to update_post_meta($post_ID, "_tutor_course_target_audience", $target_audience) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:318
  - STORAGE call to delete_post_meta($post_ID, "_tutor_course_target_audience") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Course.php:323
  - STORAGE call to update_post_meta($post_ID, "_tutor_course_material_includes", $material_includes) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:325
  - STORAGE call to delete_post_meta($post_ID, "_tutor_course_material_includes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Course.php:384
  - STORAGE call to update_post_meta($post_ID, "_video", $video) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:386
  - STORAGE call to delete_post_meta($post_ID, "_video") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Course.php:405
  - STORAGE call to add_user_meta($author_id, "_tutor_instructor_course_id", $post_ID) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|false).
  - Data types: user_meta
classes/Course.php:415
  - STORAGE call to update_post_meta($post_ID, $key, isset($_POST[$key])"yes""no") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:450
  - STORAGE call to wp_insert_post($post_arr). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
classes/Course.php:478
  - STORAGE call to wp_update_post($topic_attr). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).
classes/Course.php:551
  - STORAGE call to wp_delete_post($topic_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Course.php:560
  - STORAGE call to wp_delete_post($announcement_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Course.php:672
  - STORAGE call to update_option("tutor_course_complete_popup_" . $user_id, ["course_id" => $course_id, "course_url" => $permalink, "expires" => time() + 10]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Course.php:699
  - STORAGE call to delete_option($key) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
classes/Course.php:770
  - STORAGE call to add_user_meta($instructor_id, "_tutor_instructor_course_id", $course_id) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|false).
  - Data types: user_meta
classes/Course.php:889
  - STORAGE call to update_post_meta($attached_product_id, "_subscription_price", $course_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:901
  - STORAGE call to update_post_meta($post_ID, "_tutor_course_product_id", $product_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:903
  - STORAGE call to update_post_meta($product_id, "_virtual", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:904
  - STORAGE call to update_post_meta($product_id, "_tutor_product", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:925
  - STORAGE call to update_post_meta($attached_product_id, "edd_price", $course_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:935
  - STORAGE call to wp_insert_post($post_arr). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
classes/Course.php:938
  - STORAGE call to update_post_meta($download_id, "edd_price", $course_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:940
  - STORAGE call to update_post_meta($post_ID, "_tutor_course_product_id", $download_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:942
  - STORAGE call to update_post_meta($download_id, "_tutor_product", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:975
  - STORAGE call to update_post_meta($course_id, "_tutor_course_started", tutor_time()) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Course.php:1314
  - STORAGE call to wp_delete_post($content_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Course.php:1316
  - STORAGE call to wp_delete_post($topic_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Course.php:1322
  - STORAGE call to wp_delete_post($child_post_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Course_Settings_Tabs.php:110
  - STORAGE call to update_post_meta($post_ID, "_tutor_course_settings", $_tutor_course_settings) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Dashboard.php:48
  - STORAGE call to wp_insert_post(["post_title" => __("Auto Draft", "tutor"), "post_type" => $post_type, "post_status" => "draft"]). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
classes/Instructor.php:115
  - STORAGE call to wp_insert_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
classes/Instructor.php:117
  - STORAGE call to update_user_meta($user_id, "_is_tutor_instructor", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructor.php:118
  - STORAGE call to update_user_meta($user_id, "_tutor_instructor_status", apply_filters("tutor_initial_instructor_status", "pending")) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructor.php:159
  - STORAGE call to update_user_meta($user_id, "_is_tutor_instructor", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructor.php:160
  - STORAGE call to update_user_meta($user_id, "_tutor_instructor_status", apply_filters("tutor_initial_instructor_status", "pending")) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructor.php:230
  - STORAGE call to wp_insert_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
classes/Instructor.php:232
  - STORAGE call to update_user_meta($user_id, "phone_number", $phone_number) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructor.php:233
  - STORAGE call to update_user_meta($user_id, "description", $tutor_profile_bio) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructor.php:234
  - STORAGE call to update_user_meta($user_id, "_tutor_profile_bio", $tutor_profile_bio) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructor.php:235
  - STORAGE call to update_user_meta($user_id, "_is_tutor_instructor", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructor.php:236
  - STORAGE call to update_user_meta($user_id, "_tutor_instructor_status", apply_filters("tutor_initial_instructor_status", "approved")) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructor.php:259
  - STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_status", "approved") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructor.php:260
  - STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_approved", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructor.php:271
  - STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_status", "blocked") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructor.php:288
  - STORAGE call to update_user_meta($instructor_id, "_is_tutor_instructor_rejected", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructor.php:289
  - STORAGE call to update_user_meta($instructor_id, "tutor_instructor_show_rejection_message", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructor.php:300
  - STORAGE call to delete_user_meta(get_current_user_id(), "tutor_instructor_show_rejection_message") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
classes/Instructors_List.php:155
  - STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_status", "approved") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructors_List.php:156
  - STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_approved", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructors_List.php:169
  - STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_status", "blocked") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Instructors_List.php:186
  - STORAGE call to wp_delete_user($instructor) alters data types {'user_meta', 'user'}. Passed arguments: 0: $id (int). Returns (bool).
  - Data types: user_meta, user
classes/Lesson.php:83
  - STORAGE call to update_post_meta($post_ID, "_tutor_course_id_for_lesson", $course_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Lesson.php:90
  - STORAGE call to delete_post_meta($post_ID, "_video") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Lesson.php:93
  - STORAGE call to update_post_meta($post_ID, "_video", $video) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Lesson.php:110
  - STORAGE call to update_post_meta($post_ID, "_tutor_attachments", $attachments) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Lesson.php:112
  - STORAGE call to delete_post_meta($post_ID, "_tutor_attachments") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Lesson.php:183
  - STORAGE call to wp_insert_post($lesson_data). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
classes/Lesson.php:187
  - STORAGE call to update_post_meta($lesson_id, "_tutor_course_id_for_lesson", $course_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Lesson.php:195
  - STORAGE call to wp_update_post($lesson_data). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).
classes/Lesson.php:197
  - STORAGE call to update_post_meta($lesson_id, "_thumbnail_id", $_lesson_thumbnail_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Lesson.php:199
  - STORAGE call to delete_post_meta($lesson_id, "_thumbnail_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Lesson.php:223
  - STORAGE call to wp_delete_post($lesson_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Lesson.php:224
  - STORAGE call to delete_post_meta($lesson_id, "_tutor_course_id_for_lesson") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Lesson.php:265
  - STORAGE call to delete_option("required_rewrite_flush") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
classes/Options.php:81
  - STORAGE call to update_option("tutor_option", $option) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Quiz.php:114
  - STORAGE call to update_post_meta($attempt_id, "instructor_feedback", $feedback) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Quiz.php:124
  - STORAGE call to update_post_meta($post_ID, "tutor_quiz_option", $quiz_option) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Quiz.php:667
  - STORAGE call to wp_insert_post($post_arr). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
classes/Quiz.php:727
  - STORAGE call to wp_delete_post($quiz_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Quiz.php:728
  - STORAGE call to delete_post_meta($quiz_id, "_tutor_course_id_for_lesson") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Quiz.php:761
  - STORAGE call to wp_update_post($post_arr). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).
classes/Quiz.php:1298
  - STORAGE call to update_post_meta($quiz_id, "tutor_quiz_option", $quiz_option) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Student.php:97
  - STORAGE call to wp_insert_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
classes/Student.php:154
  - STORAGE call to wp_update_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
classes/Student.php:157
  - STORAGE call to update_user_meta($user_id, "phone_number", $phone_number) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Student.php:158
  - STORAGE call to update_user_meta($user_id, "_tutor_profile_bio", $tutor_profile_bio) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Student.php:164
  - STORAGE call to update_user_meta($user_id, $key, $user_social_value) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Student.php:166
  - STORAGE call to delete_user_meta($user_id, $key) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
classes/Student.php:250
  - STORAGE call to wp_set_password($new_password, $user->ID) alters data types {'user_meta'}. Passed arguments: 0: $password (string), 1: $user_id (int).
  - Data types: user_meta
classes/Tools.php:65
  - STORAGE call to wp_insert_post($page_arg). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
classes/Tutor.php:176
  - STORAGE call to update_option("tutor_wizard", "active") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Tutor.php:243
  - STORAGE call to update_option("tutor_option", $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Tutor.php:246
  - STORAGE call to update_option("required_rewrite_flush", tutor_time()) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Tutor.php:250
  - STORAGE call to update_option("tutor_version", TUTOR_VERSION) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Tutor.php:267
  - STORAGE call to update_option("tutor_version", "1.2.0") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Tutor.php:269
  - STORAGE call to update_option("required_rewrite_flush", tutor_time()) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Tutor.php:280
  - STORAGE call to update_option("is_course_post_type_updated", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Tutor.php:281
  - STORAGE call to update_option("tutor_version", "1.3.1") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Tutor.php:291
  - STORAGE call to update_option("tutor_first_activation_time", tutor_time()) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Tutor.php:524
  - STORAGE call to wp_insert_post($student_dashboard_args). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
classes/Tutor.php:525
  - STORAGE call to tutor_utils()->update_option("tutor_dashboard_page_id", $student_dashboard_page_id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Tutor.php:533
  - STORAGE call to wp_insert_post($student_registration_args). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
classes/Tutor.php:534
  - STORAGE call to tutor_utils()->update_option("student_register_page", $student_register_page_id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Tutor.php:542
  - STORAGE call to wp_insert_post($instructor_registration_args). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
classes/Tutor.php:543
  - STORAGE call to tutor_utils()->update_option("instructor_register_page", $instructor_registration_id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Tutor.php:646
  - STORAGE call to tutor_utils()->update_option("tutor_dashboard_page_id", $previous_dashboard_page_id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/TutorEDD.php:123
  - STORAGE call to update_post_meta($post_ID, "_tutor_course_product_id", $product_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/TutorEDD.php:124
  - STORAGE call to update_post_meta($product_id, "_tutor_product", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/TutorEDD.php:127
  - STORAGE call to delete_post_meta($post_ID, "_tutor_course_product_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Tutor_Setup.php:54
  - STORAGE call to update_option("tutor_option", $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Tutor_Setup.php:71
  - STORAGE call to update_option("tutor_withdraw_options", $payments) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Tutor_Setup.php:74
  - STORAGE call to update_option("tutor_wizard", "active") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Upgrader.php:55
  - STORAGE call to update_option("is_course_post_type_updated", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Upgrader.php:56
  - STORAGE call to update_option("tutor_version", "1.3.1") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/User.php:67
  - STORAGE call to delete_user_meta($user_id, $meta_key) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
classes/User.php:122
  - STORAGE call to update_user_meta($user_id, $meta_key, $media_id) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/User.php:139
  - STORAGE call to update_user_meta($user_id, "_tutor_profile_job_title", $_tutor_profile_job_title) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/User.php:140
  - STORAGE call to update_user_meta($user_id, "_tutor_profile_bio", $_tutor_profile_bio) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/User.php:141
  - STORAGE call to update_user_meta($user_id, "_tutor_profile_photo", $_tutor_profile_image) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/User.php:162
  - STORAGE call to update_option("users_can_register", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Utils.php:68
  - STORAGE call to update_option("tutor_option", $option) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Utils.php:1140
  - STORAGE call to delete_user_meta($user_id, "_tutor_completed_lesson_id_" . $id) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
classes/Utils.php:1367
  - STORAGE call to update_post_meta($post_id, "_video", $video_data) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Utils.php:2137
  - STORAGE call to update_user_meta($user_id, "_lesson_reading_info", $lesson_info) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Utils.php:2195
  - STORAGE call to update_user_meta($user_id, "_tutor_completed_lesson_id_" . $post_id, tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Utils.php:2253
  - STORAGE call to wp_insert_post($enroll_data). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
classes/Utils.php:2265
  - STORAGE call to update_user_meta($user_id, "_is_tutor_student", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Utils.php:2270
  - STORAGE call to update_post_meta($isEnrolled, "_tutor_enrolled_by_order_id", $order_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Utils.php:2271
  - STORAGE call to update_post_meta($isEnrolled, "_tutor_enrolled_by_product_id", $product_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Utils.php:2272
  - STORAGE call to update_post_meta($order_id, "_is_tutor_order_for_course", tutor_time()) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Utils.php:2273
  - STORAGE call to update_post_meta($order_id, "_tutor_order_for_course_id_" . $course_id, $isEnrolled) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/Utils.php:2325
  - STORAGE call to delete_post_meta($enrolled->ID, "_tutor_enrolled_by_product_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Utils.php:2328
  - STORAGE call to delete_post_meta($enrolled->ID, "_tutor_enrolled_by_order_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Utils.php:2329
  - STORAGE call to delete_post_meta($order_id, "_is_tutor_order_for_course") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Utils.php:2330
  - STORAGE call to delete_post_meta($order_id, "_tutor_order_for_course_id_" . $course_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Utils.php:5990
  - STORAGE call to update_option("tutor_duplicated_earning_deleted", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Utils.php:6179
  - STORAGE call to update_user_meta($instructor_id, "_is_tutor_instructor", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Utils.php:6180
  - STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_status", "approved") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Utils.php:6181
  - STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_approved", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Utils.php:6200
  - STORAGE call to delete_user_meta($instructor_id, "_is_tutor_instructor") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
classes/Utils.php:6201
  - STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_status", "blocked") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/Utils.php:7166
  - STORAGE call to wp_set_password($new_pass, $user->ID) alters data types {'user_meta'}. Passed arguments: 0: $password (string), 1: $user_id (int).
  - Data types: user_meta
classes/Withdraw.php:148
  - STORAGE call to update_option("tutor_withdraw_options", $option) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/Withdraw.php:184
  - STORAGE call to update_user_meta($user_id, "_tutor_withdraw_method_data", $saved_data) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
classes/WooCommerce.php:191
  - STORAGE call to delete_post_meta($post_ID, "_tutor_course_product_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/WooCommerce.php:193
  - STORAGE call to update_post_meta($post_ID, "_tutor_course_product_id", $product_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/WooCommerce.php:195
  - STORAGE call to update_post_meta($product_id, "_virtual", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/WooCommerce.php:196
  - STORAGE call to update_post_meta($product_id, "_tutor_product", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/WooCommerce.php:203
  - STORAGE call to update_post_meta($post_ID, "_tutor_product", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
classes/WooCommerce.php:205
  - STORAGE call to delete_post_meta($post_ID, "_tutor_product") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/WooCommerce.php:542
  - STORAGE call to tutils()->update_option("monetize_by", "free") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
classes/WooCommerce.php:543
  - STORAGE call to update_option("tutor_show_woocommerce_notice", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
includes/tutor-general-functions.php:509
  - STORAGE call to tutils()->update_option($key, $value) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
templates/dashboard/create-course.php:103
  - STORAGE call to delete_user_meta($user_id, "tutor_frontend_course_message_expires") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
templates/dashboard/create-course.php:104
  - STORAGE call to delete_user_meta($user_id, "tutor_frontend_course_action_message") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
views/pages/tools/status.php:43
  - STORAGE call to set_transient("tutor_system_status_wp_version_check", $latest_version, DAY_IN_SECONDS) alters data types {'site'}. Passed arguments: 0: $transient (string), 1: $value (mixed), 2: $expiration (int). Returns (bool).
  - Data types: site 

classes/Instructor.php:262
  - WP_User object is created.
  - Data types: user_meta, user
classes/Instructor.php:273
  - WP_User object is created.
  - Data types: user_meta, user
classes/Instructor.php:284
  - WP_User object is created.
  - Data types: user_meta, user
classes/Instructors_List.php:158
  - WP_User object is created.
  - Data types: user_meta, user
classes/Instructors_List.php:171
  - WP_User object is created.
  - Data types: user_meta, user
classes/Utils.php:6183
  - WP_User object is created.
  - Data types: user_meta, user
classes/Utils.php:6203
  - WP_User object is created.
  - Data types: user_meta, user 

classes/Admin.php:397
  - Data from table $wpdb deleted: "$wpdb->delete($wpdb->postmeta, ["post_id" => $post_id])"
classes/Admin.php:398
  - Data from table $wpdb deleted: "$wpdb->delete($wpdb->posts, ["ID" => $post_id])"
classes/Admin.php:410
  - Data from table $wpdb deleted: "$wpdb->delete($wpdb->comments, ["comment_agent" => "comment_agent"])"
classes/Admin.php:416
  - DELETION call to delete_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
classes/Admin.php:417
  - Data from table $wpdb deleted: "$wpdb->delete($wpdb->usermeta, ["meta_key" => "_is_tutor_student"])"
classes/Admin.php:418
  - Data from table $wpdb deleted: "$wpdb->delete($wpdb->usermeta, ["meta_key" => "_tutor_instructor_approved"])"
classes/Admin.php:419
  - Data from table $wpdb deleted: "$wpdb->delete($wpdb->usermeta, ["meta_key" => "_tutor_instructor_status"])"
classes/Admin.php:420
  - Data from table $wpdb deleted: "$wpdb->delete($wpdb->usermeta, ["meta_key" => "_is_tutor_instructor"])"
classes/Ajax.php:312
  - Data from table $wpdb deleted: "$wpdb->delete($wpdb->usermeta, ["user_id" => $user_id, "meta_key" => "_tutor_course_wishlist", "meta_value" => $course_id])"
classes/Ajax.php:601
  - DELETION call to wp_delete_post($announcement_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Course.php:304
  - DELETION call to delete_post_meta($post_ID, "_tutor_course_benefits") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Course.php:311
  - DELETION call to delete_post_meta($post_ID, "_tutor_course_requirements") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Course.php:318
  - DELETION call to delete_post_meta($post_ID, "_tutor_course_target_audience") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Course.php:325
  - DELETION call to delete_post_meta($post_ID, "_tutor_course_material_includes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Course.php:386
  - DELETION call to delete_post_meta($post_ID, "_video") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Course.php:546
  - Data from table $wpdb deleted: "$wpdb->delete($wpdb->postmeta, ["post_id" => $topic_id])"
classes/Course.php:551
  - DELETION call to wp_delete_post($topic_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Course.php:560
  - DELETION call to wp_delete_post($announcement_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Course.php:699
  - DELETION call to delete_option($key) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
classes/Course.php:805
  - Data from table $wpdb deleted: "$wpdb->delete($wpdb->usermeta, ["user_id" => $instructor_id, "meta_key" => "_tutor_instructor_course_id", "meta_value" => $course_id])"
classes/Course.php:1304
  - Data from table $wpdbtutor_quiz_attempts deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_attempts", ["quiz_id" => $content_id])"
classes/Course.php:1305
  - Data from table $wpdbtutor_quiz_attempt_answers deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_attempt_answers", ["quiz_id" => $content_id])"
classes/Course.php:1312
  - Data from table $wpdbtutor_quiz_questions deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_questions", ["quiz_id" => $content_id])"
classes/Course.php:1314
  - DELETION call to wp_delete_post($content_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Course.php:1316
  - DELETION call to wp_delete_post($topic_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Course.php:1322
  - DELETION call to wp_delete_post($child_post_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Instructor.php:300
  - DELETION call to delete_user_meta(get_current_user_id(), "tutor_instructor_show_rejection_message") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
classes/Instructors_List.php:186
  - DELETION call to wp_delete_user($instructor) alters data types {'user_meta', 'user'}. Passed arguments: 0: $id (int). Returns (bool).
  - Data types: user_meta, user
classes/Lesson.php:90
  - DELETION call to delete_post_meta($post_ID, "_video") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Lesson.php:112
  - DELETION call to delete_post_meta($post_ID, "_tutor_attachments") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Lesson.php:199
  - DELETION call to delete_post_meta($lesson_id, "_thumbnail_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Lesson.php:223
  - DELETION call to wp_delete_post($lesson_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Lesson.php:224
  - DELETION call to delete_post_meta($lesson_id, "_tutor_course_id_for_lesson") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Lesson.php:265
  - DELETION call to delete_option("required_rewrite_flush") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
classes/Quiz.php:715
  - Data from table $wpdbtutor_quiz_attempts deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_attempts", ["quiz_id" => $quiz_id])"
classes/Quiz.php:716
  - Data from table $wpdbtutor_quiz_attempt_answers deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_attempt_answers", ["quiz_id" => $quiz_id])"
classes/Quiz.php:725
  - Data from table $wpdbtutor_quiz_questions deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_questions", ["quiz_id" => $quiz_id])"
classes/Quiz.php:727
  - DELETION call to wp_delete_post($quiz_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
classes/Quiz.php:728
  - DELETION call to delete_post_meta($quiz_id, "_tutor_course_id_for_lesson") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Quiz.php:916
  - Data from table $wpdbtutor_quiz_questions deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_questions", ["question_id" => esc_sql($question_id)])"
classes/Quiz.php:1005
  - Data from table $wpdbtutor_quiz_question_answers deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_question_answers", ["belongs_question_id" => $question_id, "belongs_question_type" => $question_type])"
classes/Quiz.php:1050
  - Data from table $wpdbtutor_quiz_question_answers deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_question_answers", ["belongs_question_id" => $question_id, "belongs_question_type" => $question_type])"
classes/Quiz.php:1213
  - Data from table $wpdbtutor_quiz_question_answers deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_question_answers", ["answer_id" => esc_sql($answer_id)])"
classes/Student.php:166
  - DELETION call to delete_user_meta($user_id, $key) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
classes/TutorEDD.php:127
  - DELETION call to delete_post_meta($post_ID, "_tutor_course_product_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/User.php:66
  - DELETION call to wp_delete_attachment($photo_id, true) alters data types {'attachment', 'attachment_meta'}. Passed arguments: 0: $post_id (int), 1: $force_delete (bool). Returns (WP_Post|false|null).
  - Data types: attachment, attachment_meta
classes/User.php:67
  - DELETION call to delete_user_meta($user_id, $meta_key) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
classes/Utils.php:1135
  - Data from table $wpdb deleted: "$wpdb->delete($wpdb->comments, $del_where)"
classes/Utils.php:1140
  - DELETION call to delete_user_meta($user_id, "_tutor_completed_lesson_id_" . $id) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
classes/Utils.php:2315
  - Data from table $wpdb deleted: "$wpdb->delete($wpdb->posts, ["post_type" => "tutor_enrolled", "post_author" => $user_id, "post_parent" => $course_id])"
classes/Utils.php:2325
  - DELETION call to delete_post_meta($enrolled->ID, "_tutor_enrolled_by_product_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Utils.php:2328
  - DELETION call to delete_post_meta($enrolled->ID, "_tutor_enrolled_by_order_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Utils.php:2329
  - DELETION call to delete_post_meta($order_id, "_is_tutor_order_for_course") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Utils.php:2330
  - DELETION call to delete_post_meta($order_id, "_tutor_order_for_course_id_" . $course_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/Utils.php:6200
  - DELETION call to delete_user_meta($instructor_id, "_is_tutor_instructor") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
classes/Withdraw_Requests_List.php:145
  - Data from table $wpdbtutor_withdraws deleted: "$wpdb->delete($wpdb->prefix . "tutor_withdraws", ["withdraw_id" => $withdraw_id])"
classes/WooCommerce.php:191
  - DELETION call to delete_post_meta($post_ID, "_tutor_course_product_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
classes/WooCommerce.php:205
  - DELETION call to delete_post_meta($post_ID, "_tutor_product") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
templates/dashboard/create-course.php:103
  - DELETION call to delete_user_meta($user_id, "tutor_frontend_course_message_expires") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
templates/dashboard/create-course.php:104
  - DELETION call to delete_user_meta($user_id, "tutor_frontend_course_action_message") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta 

By data type:
address
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address'}
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address'}
	VariableDetector.(unknown) - {'address'}
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address', 'ip'}
attachment
	DeletionDetector.wp_delete_attachment($photo_id, true) - {'attachment', 'attachment_meta'}
attachment_meta
	DeletionDetector.wp_delete_attachment($photo_id, true) - {'attachment', 'attachment_meta'}
comment_meta
	WordPressRetrievalDetector.get_comment_meta($submitted_assignment->comment_ID, "assignment_mark", true) - {'comment_meta'}
	WordPressRetrievalDetector.get_comment_meta($assignment->comment_ID, "assignment_mark", true) - {'comment_meta'}
	WordPressRetrievalDetector.get_comment_meta($submitted_assignment->comment_ID, "uploaded_attachments", true) - {'comment_meta'}
	WordPressRetrievalDetector.get_comment_meta($submitted_assignment->comment_ID, "instructor_note", true) - {'comment_meta'}
	WordPressRetrievalDetector.get_comment_meta($assignment->comment_ID, "evaluate_time", true) - {'comment_meta'}
	WordPressRetrievalDetector.get_comment_meta($assignment_submitted_id, "instructor_note", true) - {'comment_meta'}
	WordPressRetrievalDetector.get_comment_meta($submitted_assignment->comment_ID, "uploaded_attachments", true) - {'comment_meta'}
	WordPressRetrievalDetector.get_comment_meta($assignment_submitted_id, "assignment_mark", true) - {'comment_meta'}
	WordPressRetrievalDetector.get_comment_meta($submitted_assignment->comment_ID, "evaluate_time", true) - {'comment_meta'}
email
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
file
	PHPRetrievalDetector.file_get_contents($flash_msg_file_name) - {'file'}
	PHPStorageDetector.file_put_contents($file, $maintenance_string) - {'file'}
first_name
	VariableDetector.(unknown) - {'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	VariableDetector.(unknown) - {'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	VariableDetector.(unknown) - {'first_name'}
	VariableDetector.(unknown) - {'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	VariableDetector.(unknown) - {'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	VariableDetector.(unknown) - {'first_name'}
	VariableDetector.(unknown) - {'first_name'}
	VariableDetector.(unknown) - {'first_name'}
ip
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address', 'ip'}
	VariableDetector.(unknown) - {'address', 'ip'}
last_name
	VariableDetector.(unknown) - {'last_name'}
	VariableDetector.(unknown) - {'last_name'}
	VariableDetector.(unknown) - {'last_name'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	VariableDetector.(unknown) - {'last_name'}
	VariableDetector.(unknown) - {'last_name'}
	VariableDetector.(unknown) - {'last_name'}
	VariableDetector.(unknown) - {'last_name'}
	VariableDetector.(unknown) - {'last_name'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
none
	DeletionDetector.$wpdb->delete($wpdb->usermeta, ["user_id" => $instructor_id, "meta_key" => "_tutor_instructor_course_id", "meta_value" => $course_id]) - set()
	WordPressStorageDetector.wp_insert_post($enroll_data) - set()
	DeletionDetector.$wpdb->delete($wpdb->usermeta, ["meta_key" => "_is_tutor_instructor"]) - set()
	PHPIncludedDetector.(unknown) - set()
	DeletionDetector.$wpdb->delete($wpdb->usermeta, ["meta_key" => "_tutor_instructor_approved"]) - set()
	DeletionDetector.$wpdb->delete($wpdb->prefix . "tutor_quiz_question_answers", ["answer_id" => esc_sql($answer_id)]) - set()
	WordPressStorageDetector.wp_insert_post(["post_title" => __("Auto Draft", "tutor"), "post_type" => $post_type, "post_status" => "draft"]) - set()
	DeletionDetector.$wpdb->delete($wpdb->usermeta, ["user_id" => $user_id, "meta_key" => "_tutor_course_wishlist", "meta_value" => $course_id]) - set()
	DeletionDetector.$wpdb->delete($wpdb->prefix . "tutor_quiz_attempts", ["quiz_id" => $content_id]) - set()
	WordPressStorageDetector.wp_update_post($post_arr) - set()
	DeletionDetector.$wpdb->delete($wpdb->prefix . "tutor_quiz_attempts", ["quiz_id" => $quiz_id]) - set()
	DeletionDetector.$wpdb->delete($wpdb->usermeta, ["meta_key" => "_tutor_instructor_status"]) - set()
	WordPressStorageDetector.wp_update_post($topic_attr) - set()
	WordPressStorageDetector.wp_insert_post($post_arr) - set()
	WordPressStorageDetector.wp_insert_post($lesson_data) - set()
	DeletionDetector.$wpdb->delete($wpdb->prefix . "tutor_withdraws", ["withdraw_id" => $withdraw_id]) - set()
	WordPressRetrievalDetector.dbDelta($table) - set()
	WordPressRetrievalDetector.get_posts(["post_type" => $post_type, "post_parent" => $topic->ID, "posts_per_page" => -1, "orderby" => "menu_order", "order" => "ASC"]) - set()
	PHPIncludedDetector.(unknown) - set()
	WordPressRetrievalDetector.dbDelta($gradebook_results) - set()
	DeletionDetector.$wpdb->delete($wpdb->prefix . "tutor_quiz_attempt_answers", ["quiz_id" => $content_id]) - set()
	WordPressRetrievalDetector.dbDelta($gradebook_table) - set()
	WordPressRetrievalDetector.dbDelta($earning_table) - set()
	DeletionDetector.$wpdb->delete($wpdb->prefix . "tutor_quiz_questions", ["quiz_id" => $content_id]) - set()
	WordPressRetrievalDetector.check_password_reset_key($reset_key, $user->user_login) - set()
	DeletionDetector.$wpdb->delete($wpdb->comments, $del_where) - set()
	DeletionDetector.$wpdb->delete($wpdb->prefix . "tutor_quiz_questions", ["quiz_id" => $quiz_id]) - set()
	WordPressRetrievalDetector.dbDelta($withdraw_table) - set()
	WordPressRetrievalDetector.dbDelta($tutor_quiz_question_answers) - set()
	WordPressRetrievalDetector.dbDelta($quiz_attempt_answers) - set()
	WordPressRetrievalDetector.dbDelta($earning_table) - set()
	WordPressRetrievalDetector.dbDelta($withdraw_table) - set()
	WordPressStorageDetector.wp_update_post($lesson_data) - set()
	DeletionDetector.$wpdb->delete($wpdb->posts, ["post_type" => "tutor_enrolled", "post_author" => $user_id, "post_parent" => $course_id]) - set()
	DeletionDetector.$wpdb->delete($wpdb->postmeta, ["post_id" => $topic_id]) - set()
	WordPressRetrievalDetector.dbDelta($quiz_attempts_sql) - set()
	DeletionDetector.$wpdb->delete($wpdb->prefix . "tutor_quiz_attempt_answers", ["quiz_id" => $quiz_id]) - set()
	DeletionDetector.$wpdb->delete($wpdb->posts, ["ID" => $post_id]) - set()
	DeletionDetector.$wpdb->delete($wpdb->prefix . "tutor_quiz_question_answers", ["belongs_question_id" => $question_id, "belongs_question_type" => $question_type]) - set()
	WordPressRetrievalDetector.dbDelta($tutor_quiz_questions) - set()
	WordPressRetrievalDetector.get_posts($args) - set()
	DeletionDetector.$wpdb->delete($wpdb->postmeta, ["post_id" => $post_id]) - set()
	WordPressStorageDetector.wp_insert_post($instructor_registration_args) - set()
	DeletionDetector.$wpdb->delete($wpdb->comments, ["comment_agent" => "comment_agent"]) - set()
	WordPressStorageDetector.wp_insert_post($student_registration_args) - set()
	WordPressStorageDetector.wp_insert_post($page_arg) - set()
	WordPressStorageDetector.wp_insert_post($form_data) - set()
	WordPressRetrievalDetector.get_posts($topic_args) - set()
	WordPressStorageDetector.wp_insert_post($student_dashboard_args) - set()
	DeletionDetector.$wpdb->delete($wpdb->prefix . "tutor_quiz_question_answers", ["belongs_question_id" => $question_id, "belongs_question_type" => $question_type]) - set()
	DeletionDetector.$wpdb->delete($wpdb->usermeta, ["meta_key" => "_is_tutor_student"]) - set()
	WordPressStorageDetector.wp_insert_post($post_arr) - set()
	WordPressStorageDetector.wp_insert_post($post_arr) - set()
	WordPressRetrievalDetector.get_posts($args) - set()
	DeletionDetector.$wpdb->delete($wpdb->prefix . "tutor_quiz_questions", ["question_id" => esc_sql($question_id)]) - set()
	WordPressRetrievalDetector.get_posts(["post_type" => $course_post_type, "author" => $instructor_id, "post_status" => ["publish", "pending"], "posts_per_page" => -1]) - set()
option
	WordPressRetrievalDetector.tutor_utils()->get_option("quiz_attempts_allowed") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("disable_tutor_native_login") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("monetize_by") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_q_and_a_on_course") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option($is_instructor"instructor""student" . "_public_profile_layout", "pp-circle") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_spotlight_mode") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("students_own_review_show_at_profile") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_guest_course_cart") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_guest_course_cart") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_spotlight_mode") - {'option'}
	WordPressRetrievalDetector.$this->get_option("course_archive_page") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_version") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("disable_course_total_enrolled") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("course_archive_filter", false) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option($layout_option_name . "_public_profile_layout") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_q_and_a_on_course") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("default_video_source", null) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("courses_col_per_row", 4) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_dashboard_page_id") - {'option'}
	WordPressRetrievalDetector.get_option("users_can_register", false) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("supported_video_sources", $video_sources) - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_spotlight_mode") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("show_courses_completed_by_student") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("disable_default_player_vimeo") - {'option'}
	WordPressStorageDetector.update_option("tutor_first_activation_time", tutor_time()) - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("users_can_register", false) - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_option") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_option") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_withdraw_options") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_withdraw_options") - {'option'}
	WordPressRetrievalDetector.get_option("users_can_register", false) - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("delete_on_uninstall") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_addons_config") - {'option'}
	WordPressRetrievalDetector.get_option("blogname") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("enable_course_marketplace") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("instructor_register_page") - {'option'}
	WordPressStorageDetector.delete_option("tutor_option") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_option") - {'option'}
	WordPressStorageDetector.update_option("is_course_post_type_updated", true) - {'option'}
	WordPressRetrievalDetector.get_option("admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("is_course_post_type_updated") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("courses_per_page", 12) - {'option'}
	WordPressRetrievalDetector.get_option("tutor_duplicated_earning_deleted", false) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_public_profile") - {'option'}
	WordPressRetrievalDetector.get_option("users_can_register") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("monetize_by") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("courses_col_per_row", 3) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("instructor_list_layout", $this->instructor_layout[0]) - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("monetize_by") - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_dashboard_page_id") - {'option'}
	WordPressRetrievalDetector.get_option("users_can_register", false) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_dashboard_page_id") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_tutor_edd") - {'option'}
	WordPressStorageDetector.update_option("tutor_withdraw_options", $option) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_dashboard_page_id") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_dashboard_page_id") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("student_must_login_to_view_course") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_option") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_dashboard_page_id") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("instructor_can_publish_course") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("student_dashboard") - {'option'}
	WordPressRetrievalDetector.get_option("active_plugins") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_dashboard_page_id") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("enable_profile_completion") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("instructor_list_show_filter", false) - {'option'}
	WordPressStorageDetector.tutils()->update_option("monetize_by", "free") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("quiz_previous_button_disabled", false) - {'option'}
	WordPressRetrievalDetector.get_option("active_plugins") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_course_marketplace") - {'option'}
	WordPressRetrievalDetector.get_option("blogname") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("lesson_permalink_base") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("enable_become_instructor_btn") - {'option'}
	WordPressStorageDetector.update_option("tutor_duplicated_earning_deleted", true) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_tutor_earning") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_option") - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressStorageDetector.update_option("users_can_register", 1) - {'option'}
	WordPressStorageDetector.tutor_utils()->update_option("tutor_dashboard_page_id", $student_dashboard_page_id) - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("supported_course_filters", []) - {'option'}
	WordPressStorageDetector.tutils()->update_option($key, $value) - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("courses_per_page", 12) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_q_and_a_on_course") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("course_archive_filter", false) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("display_course_instructors") - {'option'}
	WordPressStorageDetector.tutor_utils()->update_option("tutor_dashboard_page_id", $previous_dashboard_page_id) - {'option'}
	WordPressStorageDetector.tutor_utils()->update_option("instructor_register_page", $instructor_registration_id) - {'option'}
	WordPressStorageDetector.tutor_utils()->update_option("student_register_page", $student_register_page_id) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("disable_default_player_youtube") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_tutor_earning") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_spotlight_mode") - {'option'}
	WordPressRetrievalDetector.get_option("blogname") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressStorageDetector.update_option("tutor_withdraw_options", $payments) - {'option'}
	WordPressRetrievalDetector.get_option("tutor_show_woocommerce_notice") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_primary_color") - {'option'}
	WordPressRetrievalDetector.get_option("users_can_register", false) - {'option'}
	WordPressRetrievalDetector.get_option("is_course_post_type_updated") - {'option'}
	WordPressRetrievalDetector.get_option("gmt_offset") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_button_primary") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressStorageDetector.update_option("tutor_wizard", "active") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_option") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_version") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_wizard") - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("blogname") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("course_archive_page") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("instructor_list_layout") - {'option'}
	WordPressStorageDetector.update_option("tutor_version", "1.3.1") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_option") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_become_instructor_btn") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("min_withdraw_amount") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("disable_tutor_native_login") - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("supported_course_filters", []) - {'option'}
	WordPressRetrievalDetector.get_option("tutor_withdraw_options") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("course_archive_filter", false) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("instructor_can_publish_course") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_version") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("student_register_page") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_first_activation_time") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("supported_course_filters", []) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("courses_col_per_row", 4) - {'option'}
	WordPressStorageDetector.update_option("tutor_option", $options) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_button_danger") - {'option'}
	WordPressStorageDetector.update_option("is_course_post_type_updated", true) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("min_withdraw_amount") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("disable_course_review") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressStorageDetector.update_option("tutor_option", $option) - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	DeletionDetector.delete_option($key) - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("pagination_per_page", 20) - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressStorageDetector.update_option("tutor_addons_config", $addonsConfig) - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("monetize_by") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("wc_automatic_order_complete_redirect_to_courses") - {'option'}
	WordPressStorageDetector.update_option("tutor_course_complete_popup_" . $user_id, ["course_id" => $course_id, "course_url" => $permalink, "expires" => time() + 10]) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_primary_color") - {'option'}
	WordPressRetrievalDetector.get_option("users_can_register", false) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_primary_hover_color") - {'option'}
	WordPressStorageDetector.update_option("tutor_show_woocommerce_notice", true) - {'option'}
	DeletionDetector.delete_option("required_rewrite_flush") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressStorageDetector.delete_option($key) - {'option'}
	WordPressRetrievalDetector.get_option("tutor_version") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_button_success") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("delete_on_uninstall") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	DeletionDetector.delete_option("tutor_option") - {'option'}
	WordPressStorageDetector.update_option("required_rewrite_flush", tutor_time()) - {'option'}
	WordPressRetrievalDetector.get_option("tutor_addons_config") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("monetize_by") - {'option'}
	WordPressStorageDetector.update_option("tutor_version", "1.2.0") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("monetize_by") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option($key) - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressStorageDetector.update_option("required_rewrite_flush", tutor_time()) - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("course_retake_feature", false) - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("course_completion_process") - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressStorageDetector.update_option("tutor_wizard", "active") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_course_marketplace") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_button_warning") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("monetize_by") - {'option'}
	WordPressStorageDetector.update_option("tutor_version", TUTOR_VERSION) - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.get_option("required_rewrite_flush") - {'option'}
	WordPressStorageDetector.update_option("tutor_option", $options) - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("monetize_by") - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_text_color") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_course_marketplace") - {'option'}
	WordPressRetrievalDetector.$this->get_option("student_register_page") - {'option'}
	WordPressStorageDetector.delete_option("required_rewrite_flush") - {'option'}
	WordPressRetrievalDetector.$this->get_option("monetize_by") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("quiz_when_time_expires") - {'option'}
	WordPressRetrievalDetector.get_option("active_plugins") - {'option'}
	WordPressStorageDetector.update_option("tutor_addons_config", $addonsConfig) - {'option'}
	WordPressRetrievalDetector.$this->get_option("monetize_by") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option($key, $default) - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_spotlight_mode") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("tutor_dashboard_page_id") - {'option'}
	WordPressStorageDetector.update_option("tutor_version", "1.3.1") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_dashboard_page_id") - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.$this->get_option("monetize_by") - {'option'}
	WordPressRetrievalDetector.get_option("siteurl") - {'option'}
	WordPressRetrievalDetector.get_option("tutor_version") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("min_withdraw_amount") - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("show_courses_completed_by_student") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("enable_profile_completion") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("lesson_video_duration_youtube_api_key", "") - {'option'}
	WordPressRetrievalDetector.$this->get_option("monetize_by") - {'option'}
	WordPressRetrievalDetector.tutils()->get_option("monetize_by", "free") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("blogname") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("earning_admin_commission") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("instructor_can_publish_course") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_gutenberg_course_edit") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("earning_instructor_commission") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_earning_fees") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("enable_spotlight_mode") - {'option'}
	WordPressRetrievalDetector.get_option("home") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("tutor_light_color") - {'option'}
	WordPressRetrievalDetector.tutor_utils()->get_option("students_own_review_show_at_profile") - {'option'}
	WordPressStorageDetector.update_option("tutor_option", $option) - {'option'}
	WordPressRetrievalDetector.$this->get_option("instructor_register_page") - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.get_option("admin_email") - {'option'}
password
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	ArrayElementDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	PropertyDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	ArrayElementDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	ArrayElementDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
post
	WordPressRetrievalDetector.get_post($post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($announcement_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($child_post_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($announcement_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($topic_id) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($quiz_id, true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($lesson_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_name", $dashboard_page_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($topic_id, true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($topic_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post_ID) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($topic_id, true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($announcement_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($child_post_id, true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($content_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($content_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($lesson_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_author", $enrolled_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_date", $assignment_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($lesson_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_author", $enroll_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post() - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post->post_parent) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post->post_parent) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($announcement_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_parent", $enroll_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($page_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_parent", $enrolled_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($page_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($lesson_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($quiz_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($is_course) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($get_post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($course_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($lesson_id, true) - {'post', 'wp_post', 'post_meta'}
post_meta
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_is_public_course", true) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($order_id, "_tutor_order_for_course_id_" . $course_id) - {'post_meta'}
	DeletionDetector.delete_post_meta($post_ID, "_tutor_course_benefits") - {'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_tutor_course_settings", $_tutor_course_settings) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($order_id, "_tutor_order_for_course_id_" . $course_id, $isEnrolled) - {'post_meta'}
	DeletionDetector.delete_post_meta($order_id, "_tutor_order_for_course_id_" . $course_id) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "tutor_quiz_option", true) - {'post_meta'}
	DeletionDetector.delete_post_meta($post_ID, "_tutor_course_target_audience") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_tutor_disable_qa", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_product_id", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($isEnrolled, "_tutor_enrolled_by_order_id", $order_id) - {'post_meta'}
	DeletionDetector.delete_post_meta($post_ID, "_video") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($isEnrolled, "_tutor_enrolled_by_product_id", $product_id) - {'post_meta'}
	DeletionDetector.wp_delete_post($announcement_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.delete_post_meta($enrolled->ID, "_tutor_enrolled_by_order_id") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_tutor_course_requirements", $requirements) - {'post_meta'}
	DeletionDetector.wp_delete_post($child_post_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($announcement_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($topic_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_tutor_disable_qa", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_is_public_course", true) - {'post_meta'}
	DeletionDetector.wp_delete_post($quiz_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($lesson_id, "_tutor_course_id_for_lesson", $course_id) - {'post_meta'}
	DeletionDetector.wp_delete_post($lesson_id, true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.delete_post_meta($order_id, "_is_tutor_order_for_course") - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($post_ID, "_video") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, $key, isset($_POST[$key])"yes""no") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_benefits", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "tutor_quiz_option", $quiz_option) - {'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_name", $dashboard_page_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_virtual", "yes") - {'post_meta'}
	DeletionDetector.delete_post_meta($enrolled->ID, "_tutor_enrolled_by_product_id") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($order_id, "_is_tutor_order_for_course", tutor_time()) - {'post_meta'}
	WordPressStorageDetector.wp_delete_post($topic_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($attempt_id, "instructor_feedback", true) - {'post_meta'}
	DeletionDetector.wp_delete_post($topic_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($id) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.delete_post_meta($lesson_id, "_tutor_course_id_for_lesson") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_tutor_course_price_type", $price_type) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($enrolled->ID, "_tutor_enrolled_by_order_id", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($post_ID) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($attached_product_id, "edd_price", true) - {'post_meta'}
	DeletionDetector.delete_post_meta($lesson_id, "_thumbnail_id") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_ID, "_thumbnail_id", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($attached_product_id, "_product_version", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_level", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_ID, "_thumbnail_id", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($lesson_id, "_video", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_course_duration", $video) - {'post_meta'}
	DeletionDetector.wp_delete_post($topic_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_tutor_course_benefits", $course_benefits) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_tutor_course_level", $course_level) - {'post_meta'}
	DeletionDetector.wp_delete_post($announcement_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($sourceVideoID, "_wp_attachment_metadata", true) - {'post_meta'}
	WordPressStorageDetector.wp_delete_post($child_post_id, true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($content_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($download_id, "_tutor_product", "yes") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_tutor_course_id_for_lesson", $course_id) - {'post_meta'}
	WordPressRetrievalDetector.get_post($post) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($content_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_video", $video) - {'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($download_id, "edd_price", $course_price) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($course_id, "_tutor_course_started", tutor_time()) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_started", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_tutor_course_product_id", $download_id) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($post_ID, "_tutor_course_product_id") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_product_id", true) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($quiz_id, "_tutor_course_id_for_lesson") - {'post_meta'}
	DeletionDetector.delete_post_meta($post_ID, "_tutor_course_product_id") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_target_audience", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($lesson_id, "_thumbnail_id", $_lesson_thumbnail_id) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta(get_the_ID(), "_tutor_course_settings", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($lesson_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($product_id, "_sale_price", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_video", $video) - {'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_author", $enrolled_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_date", $assignment_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.delete_post_meta($post_ID, "_tutor_attachments") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_tutor_attachments", $attachments) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_tutor_course_price_type", false) - {'post_meta'}
	DeletionDetector.delete_post_meta($quiz_id, "_tutor_course_id_for_lesson") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_tutor_course_product_id", $product_id) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($order_id, "_is_tutor_order_for_course", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_requirements", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($lesson_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta(get_the_ID(), "_tutor_is_public_course", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_author", $enroll_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_course_duration", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_product_id", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($assignment_id, "assignment_option", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($woo_product_id) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_is_public_course", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_tutor_course_material_includes", $material_includes) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_material_includes", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post() - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post->post_parent) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_tutor_product", "yes") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_disable_qa", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_tutor_course_target_audience", $target_audience) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_disable_qa", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($attempt_id, "instructor_feedback", true) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($post_ID, "_tutor_course_requirements") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_tutor_zm_for_course", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($post->post_parent) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($announcement_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($lesson->ID, "_video", false) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_tutor_product", "yes") - {'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_parent", $enroll_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($page_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($quiz->ID, "tutor_quiz_option", false) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($attached_product_id, "edd_price", $course_price) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($post_ID, "_video") - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($post_ID, "_tutor_product") - {'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_parent", $enrolled_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($quiz_id, "tutor_quiz_option", true) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($post_ID, "_tutor_course_target_audience") - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($post_ID, "_tutor_course_material_includes") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta(get_the_ID(), "_tutor_assignment_attachments", true) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($post_ID, "_tutor_course_benefits") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($product_id, "_regular_price", true) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($order_id, "_is_tutor_order_for_course") - {'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, $disable_qa, true) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($enrolled->ID, "_tutor_enrolled_by_product_id") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_target_audience", true) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($post_ID, "_tutor_course_product_id") - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($enrolled->ID, "_tutor_enrolled_by_order_id") - {'post_meta'}
	WordPressRetrievalDetector.get_post($page_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_tutor_product", "yes") - {'post_meta'}
	WordPressRetrievalDetector.get_post($post) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_requirements", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($lesson_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($attachment_id, "_wp_attached_file", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_is_public_course", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_settings", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_thumbnail_id", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_video", true) - {'post_meta'}
	DeletionDetector.delete_post_meta($post_ID, "_tutor_course_product_id") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, $is_public, true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_tutor_course_product_id", $product_id) - {'post_meta'}
	WordPressStorageDetector.wp_delete_post($quiz_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_material_includes", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_video", $video_data) - {'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.delete_post_meta($post_ID, "_tutor_product") - {'post_meta'}
	WordPressRetrievalDetector.get_post($is_course) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_benefits", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($attempt_id, "instructor_feedback", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_regular_price", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($lesson_id, "_content_drip_settings", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_tutor_attachments", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_ID, "_tutor_course_product_id", $product_id) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($product_id, "edd_price", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_tutor_product", "yes") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($product_id, "edd_price", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($quiz_id, "tutor_quiz_option", $quiz_option) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_course_duration", true) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($lesson_id, "_thumbnail_id") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_tutor_course_material_includes", false) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($attached_product_id, "_subscription_price", $course_price) - {'post_meta'}
	WordPressRetrievalDetector.get_post($get_post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_tutor_course_target_audience", false) - {'post_meta'}
	DeletionDetector.delete_post_meta($post_ID, "_tutor_course_requirements") - {'post_meta'}
	DeletionDetector.delete_post_meta($post_ID, "_tutor_course_material_includes") - {'post_meta'}
	WordPressRetrievalDetector.get_post($course_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_video", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_tutor_course_benefits", false) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_tutor_course_requirements", false) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_course_duration", false) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($lesson->ID, "_tutor_attachments", false) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($attempt_id, "instructor_feedback", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($attempt_id, "instructor_feedback", $feedback) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_price_type", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_tutor_course_settings", false) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_virtual", "yes") - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($lesson_id, "_tutor_course_id_for_lesson") - {'post_meta'}
	DeletionDetector.delete_post_meta($post_ID, "_tutor_attachments") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_video", false) - {'post_meta'}
	WordPressStorageDetector.wp_delete_post($lesson_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($course_id, "_tutor_course_level", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_tutor_course_level", false) - {'post_meta'}
	DeletionDetector.delete_post_meta($post_ID, "_video") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_tutor_disable_qa", "_video", false) - {'post_meta'}
remote
	WordPressRemoteDetector.(unknown) - {'remote'}
site
	WordPressRetrievalDetector.get_transient("tutor_system_status_wp_version_check") - {'site'}
	WordPressStorageDetector.set_transient("tutor_system_status_wp_version_check", $latest_version, DAY_IN_SECONDS) - {'site'}
user
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_insert_user($userdata) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("id", $user_id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("email", $login) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $user_login) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $login) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	WordPressRetrievalDetector.get_user_by("id", $user_id) - {'user_meta', 'user'}
	WP_UserDetector.WP_User($instructor_id) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WP_UserDetector.WP_User($instructor_id) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WP_UserDetector.WP_User($instructor_id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by(is_email($creds["user_login"])"email""login", $creds["user_login"]) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("ID", $user_id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $submitted_assignment->comment_author) - {'user_meta', 'user'}
	WP_UserDetector.WP_User($instructor_id) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $assignment->comment_author) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	WP_UserDetector.WP_User($instructor_id) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_update_user($userdata) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	WP_UserDetector.WP_User($instructor_id) - {'user_meta', 'user'}
	DeletionDetector.wp_delete_user($instructor) - {'user_meta', 'user'}
	WP_UserDetector.WP_User($instructor_id) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_update_user($userdata) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressStorageDetector.wp_insert_user($userdata) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressRetrievalDetector.get_user_by("ID", $user_id) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($uid) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("ID", $user_id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressStorageDetector.wp_insert_user($userdata) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_delete_user($instructor) - {'user_meta', 'user'}
user_meta
	WordPressStorageDetector.update_user_meta($user_id, "phone_number", $phone_number) - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_insert_user($userdata) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($instructor_id, "_tutor_instructor_status", "approved") - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, $key, $user_social_value) - {'user_meta'}
	WordPressStorageDetector.delete_user_meta($user_id, $key) - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "_lesson_reading_info", $lesson_info) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "_tutor_completed_lesson_id_" . $post_id, tutor_time()) - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "_is_tutor_instructor", tutor_time()) - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "_tutor_profile_photo", true) - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("id", $user_id) - {'user_meta', 'user'}
	WordPressStorageDetector.add_user_meta($author_id, "_tutor_instructor_course_id", $post_ID) - {'user_meta'}
	WordPressRetrievalDetector.get_user_by("email", $login) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $user_login) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_the_author() - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user_id, "_lesson_reading_info", true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "_tutor_instructor_status", apply_filters("tutor_initial_instructor_status", "pending")) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($uid, "_tutor_profile_bio", true) - {'user_meta'}
	WordPressStorageDetector.wp_set_password($new_password, $user->ID) - {'user_meta'}
	WordPressRetrievalDetector.get_user_by("login", $login) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	DeletionDetector.delete_user_meta($user_id, "tutor_frontend_course_message_expires") - {'user_meta'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "_tutor_profile_job_title", true) - {'user_meta'}
	WordPressRetrievalDetector.get_the_author() - {'user_meta'}
	WordPressStorageDetector.wp_set_password($new_pass, $user->ID) - {'user_meta'}
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, $key, true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($instructor_id, "_is_tutor_instructor", tutor_time()) - {'user_meta'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	WordPressStorageDetector.update_user_meta($user_id, "_tutor_profile_bio", $_tutor_profile_bio) - {'user_meta'}
	WordPressRetrievalDetector.get_user_by("id", $user_id) - {'user_meta', 'user'}
	WP_UserDetector.WP_User($instructor_id) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	WordPressStorageDetector.delete_user_meta($user_id, "_tutor_completed_lesson_id_" . $id) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, $meta_key, $media_id) - {'user_meta'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "_tutor_profile_photo", $_tutor_profile_image) - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "_tutor_profile_job_title", $_tutor_profile_job_title) - {'user_meta'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "_tutor_profile_photo", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user_id, $meta_key, true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($instructor_id, "_tutor_instructor_status", "approved") - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WP_UserDetector.WP_User($instructor_id) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "_tutor_profile_bio", true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($instructor_id, "_tutor_instructor_approved", tutor_time()) - {'user_meta'}
	WordPressStorageDetector.delete_user_meta($instructor_id, "_is_tutor_instructor") - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "_tutor_withdraw_method_data", $saved_data) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($instructor_id, "_tutor_instructor_status", "blocked") - {'user_meta'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	WordPressStorageDetector.delete_user_meta(get_current_user_id(), "tutor_instructor_show_rejection_message") - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user_id, "_tutor_profile_photo", true) - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user_id, "_tutor_instructor_status", true) - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WP_UserDetector.WP_User($instructor_id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user_id, "_tutor_completed_lesson_id_" . $lesson_id, true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_by(is_email($creds["user_login"])"email""login", $creds["user_login"]) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_the_author() - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_set_current_user($user_id, $user->user_login) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($this->user_id, "_tutor_instructor_course_id", false) - {'user_meta'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user_id, $key, true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "_is_tutor_student", tutor_time()) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "phone_number", $phone_number) - {'user_meta'}
	DeletionDetector.delete_user_meta(get_current_user_id(), "tutor_instructor_show_rejection_message") - {'user_meta'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_set_current_user($user_id, $user->user_login) - {'user_meta'}
	DeletionDetector.delete_user_meta($user_id, $key) - {'user_meta'}
	WordPressRetrievalDetector.get_user_by("ID", $user_id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $submitted_assignment->comment_author) - {'user_meta', 'user'}
	WordPressStorageDetector.delete_user_meta($user_id, $meta_key) - {'user_meta'}
	WP_UserDetector.WP_User($instructor_id) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	WordPressRetrievalDetector.get_user_meta($user_id, "_lesson_reading_info", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_option($option) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "_tutor_profile_bio", $tutor_profile_bio) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user_id, "_tutor_cover_photo", true) - {'user_meta'}
	WordPressRetrievalDetector.get_the_author_meta("display_name", $post->post_author) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user_id, "tutor_frontend_course_message_expires", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user_id, "_tutor_instructor_status", true) - {'user_meta'}
	WordPressStorageDetector.delete_user_meta($user_id, "tutor_frontend_course_action_message") - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $assignment->comment_author) - {'user_meta', 'user'}
	DeletionDetector.delete_user_meta($instructor_id, "_is_tutor_instructor") - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	DeletionDetector.delete_user_meta($user_id, $meta_key) - {'user_meta'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	WordpressHashingFnDetector.wp_set_password($new_password, $user->ID) - {'user_meta'}
	WordPressRetrievalDetector.get_the_author() - {'user_meta'}
	DeletionDetector.delete_user_meta($user_id, "_tutor_completed_lesson_id_" . $id) - {'user_meta'}
	WP_UserDetector.WP_User($instructor_id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user_id, $key, true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($instructor_id, "_tutor_instructor_approved", tutor_time()) - {'user_meta'}
	WordPressStorageDetector.wp_update_user($userdata) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($instructor_id, "tutor_instructor_show_rejection_message", true) - {'user_meta'}
	WP_UserDetector.WP_User($instructor_id) - {'user_meta', 'user'}
	DeletionDetector.wp_delete_user($instructor) - {'user_meta', 'user'}
	WP_UserDetector.WP_User($instructor_id) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_update_user($userdata) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user_id, "tutor_frontend_course_action_message", true) - {'user_meta'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	WordPressStorageDetector.delete_user_meta($user_id, "tutor_frontend_course_message_expires") - {'user_meta'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressStorageDetector.wp_insert_user($userdata) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "_is_tutor_instructor", true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "_is_tutor_instructor", tutor_time()) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "_tutor_instructor_status", apply_filters("tutor_initial_instructor_status", "pending")) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "description", $tutor_profile_bio) - {'user_meta'}
	WordPressStorageDetector.add_user_meta($user_id, "_tutor_course_wishlist", $course_id) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta(get_current_user_id(), "tutor_instructor_show_rejection_message", true) - {'user_meta'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "_tutor_profile_bio", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user_id, "_is_tutor_instructor", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user_id, "_tutor_withdraw_method_data", true) - {'user_meta'}
	WordpressHashingFnDetector.wp_set_password($new_pass, $user->ID) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "_is_tutor_instructor_rejected", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user_id, "_tutor_profile_bio", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_by("ID", $user_id) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "phone_number", true) - {'user_meta'}
	DeletionDetector.delete_user_meta($user_id, "tutor_frontend_course_action_message") - {'user_meta'}
	WordPressRetrievalDetector.get_user_option("rich_editing") - {'user_meta'}
	WordPressStorageDetector.update_user_meta($instructor_id, "_tutor_instructor_status", "blocked") - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user_id, "_tutor_completed_lesson_id_"$lesson->ID, true) - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "_is_tutor_instructor", tutor_time()) - {'user_meta'}
	WordPressRetrievalDetector.get_userdata($uid) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($instructor_id, "_tutor_instructor_status", "blocked") - {'user_meta'}
	WordPressRetrievalDetector.get_user_by("ID", $user_id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "_tutor_cover_photo", true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "_tutor_instructor_status", apply_filters("tutor_initial_instructor_status", "approved")) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($instructor_id, "_tutor_instructor_approved", tutor_time()) - {'user_meta'}
	WordPressStorageDetector.add_user_meta($instructor_id, "_tutor_instructor_course_id", $course_id) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($instructor_id, "_is_tutor_instructor_rejected", tutor_time()) - {'user_meta'}
	WordPressStorageDetector.wp_insert_user($userdata) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($uid, "phone_number", true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($instructor_id, "_tutor_instructor_status", "approved") - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "_tutor_profile_bio", $tutor_profile_bio) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user_id, "_tutor_instructor_status", true) - {'user_meta'}
	WordPressStorageDetector.wp_delete_user($instructor) - {'user_meta', 'user'}
wp_post
	WordPressRetrievalDetector.get_post($post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($announcement_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($child_post_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($announcement_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($topic_id) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($quiz_id, true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($lesson_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_name", $dashboard_page_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($topic_id, true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($topic_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post_ID) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($topic_id, true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($announcement_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($child_post_id, true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($content_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($content_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($lesson_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_author", $enrolled_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_date", $assignment_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($lesson_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_author", $enroll_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post() - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post->post_parent) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post->post_parent) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($announcement_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_parent", $enroll_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($page_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_parent", $enrolled_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($page_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($lesson_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($quiz_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($quiz_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($is_course) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($get_post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($course_id) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($lesson_id, true) - {'post', 'wp_post', 'post_meta'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:01:17.574486.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 16155 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:02.018804.

!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 22702
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 40673
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 70697
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 120325
1000 STORE_REACHES edges created
2000 STORE_REACHES edges created
3000 STORE_REACHES edges created
4000 STORE_REACHES edges created
5000 STORE_REACHES edges created
6000 STORE_REACHES edges created
7000 STORE_REACHES edges created
8000 STORE_REACHES edges created
9000 STORE_REACHES edges created
10000 STORE_REACHES edges created
11000 STORE_REACHES edges created
12000 STORE_REACHES edges created
13000 STORE_REACHES edges created
14000 STORE_REACHES edges created
15000 STORE_REACHES edges created
16000 STORE_REACHES edges created
16155 STORE_REACHES edges created
16155 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 1000 nodes as PERSONAL
Tainted 2000 nodes as PERSONAL
Tainted 3000 nodes as PERSONAL
Tainted 4000 nodes as PERSONAL
Tainted 5000 nodes as PERSONAL
Tainted 6000 nodes as PERSONAL
Tainted 7000 nodes as PERSONAL
Tainted 8000 nodes as PERSONAL
Tainted 9000 nodes as PERSONAL
Tainted 10000 nodes as PERSONAL
Tainted 11000 nodes as PERSONAL
Tainted 11324 nodes as PERSONAL
In total, tainted 11324 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
Tainted 1000 nodes as ENCRYPTED
Tainted 2000 nodes as ENCRYPTED
Tainted 3000 nodes as ENCRYPTED
Tainted 4000 nodes as ENCRYPTED
Tainted 5000 nodes as ENCRYPTED
Tainted 6000 nodes as ENCRYPTED
Tainted 7000 nodes as ENCRYPTED
Tainted 8000 nodes as ENCRYPTED
Tainted 9000 nodes as ENCRYPTED
Tainted 10000 nodes as ENCRYPTED
Tainted 11000 nodes as ENCRYPTED
Tainted 11049 nodes as ENCRYPTED
In total, tainted 11049 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:38:24.737722.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:56:32.218956!
Request variable '$_POST["previous_password"]' of personal types {'password'} is found.,,None
Request variable '$_POST["new_password"]' of personal types {'password'} is found.,,None
Request variable '$_POST["confirm_new_password"]' of personal types {'password'} is found.,,None
Data from table $wpdb deleted: "$wpdb->delete($wpdb->postmeta, ["post_id" => $post_id])",None,None
Data from table $wpdb deleted: "$wpdb->delete($wpdb->posts, ["ID" => $post_id])",None,None
Data from table $wpdb deleted: "$wpdb->delete($wpdb->comments, ["comment_agent" => "comment_agent"])",None,None
DELETION call to delete_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Data from table $wpdb deleted: "$wpdb->delete($wpdb->usermeta, ["meta_key" => "_is_tutor_student"])",None,None
Data from table $wpdb deleted: "$wpdb->delete($wpdb->usermeta, ["meta_key" => "_tutor_instructor_approved"])",None,None
Data from table $wpdb deleted: "$wpdb->delete($wpdb->usermeta, ["meta_key" => "_tutor_instructor_status"])",None,None
Data from table $wpdb deleted: "$wpdb->delete($wpdb->usermeta, ["meta_key" => "_is_tutor_instructor"])",None,None
Data from table $wpdb deleted: "$wpdb->delete($wpdb->usermeta, ["user_id" => $user_id, "meta_key" => "_tutor_course_wishlist", "meta_value" => $course_id])",None,None
DELETION call to wp_delete_post($announcement_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).,None,None
Data from table $wpdbtutor_quiz_attempts deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_attempts", ["quiz_id" => $content_id])",None,None
Data from table $wpdbtutor_quiz_attempt_answers deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_attempt_answers", ["quiz_id" => $content_id])",None,None
Data from table $wpdbtutor_quiz_questions deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_questions", ["quiz_id" => $content_id])",None,None
DELETION call to wp_delete_post($content_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
DELETION call to wp_delete_post($topic_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
DELETION call to wp_delete_post($child_post_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
DELETION call to delete_post_meta($post_ID, "_tutor_course_benefits") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($post_ID, "_tutor_course_requirements") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($post_ID, "_tutor_course_target_audience") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($post_ID, "_tutor_course_material_includes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($post_ID, "_video") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
Data from table $wpdb deleted: "$wpdb->delete($wpdb->postmeta, ["post_id" => $topic_id])",None,None
DELETION call to wp_delete_post($topic_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).,None,None
DELETION call to wp_delete_post($announcement_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).,None,None
DELETION call to delete_option($key) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Data from table $wpdb deleted: "$wpdb->delete($wpdb->usermeta, ["user_id" => $instructor_id, "meta_key" => "_tutor_instructor_course_id", "meta_value" => $course_id])",None,None
DELETION call to delete_user_meta(get_current_user_id(), "tutor_instructor_show_rejection_message") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to wp_delete_user($instructor) alters data types {'user_meta', 'user'}. Passed arguments: 0: $id (int). Returns (bool).,None,None
DELETION call to delete_post_meta($post_ID, "_tutor_attachments") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($lesson_id, "_thumbnail_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to wp_delete_post($lesson_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
DELETION call to delete_post_meta($lesson_id, "_tutor_course_id_for_lesson") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_option("required_rewrite_flush") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_post_meta($post_ID, "_video") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
Data from table $wpdbtutor_quiz_question_answers deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_question_answers", ["belongs_question_id" => $question_id, "belongs_question_type" => $question_type])",None,None
Data from table $wpdbtutor_quiz_question_answers deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_question_answers", ["belongs_question_id" => $question_id, "belongs_question_type" => $question_type])",None,None
Data from table $wpdbtutor_quiz_question_answers deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_question_answers", ["answer_id" => esc_sql($answer_id)])",None,None
Data from table $wpdbtutor_quiz_attempts deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_attempts", ["quiz_id" => $quiz_id])",None,None
Data from table $wpdbtutor_quiz_attempt_answers deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_attempt_answers", ["quiz_id" => $quiz_id])",None,None
Data from table $wpdbtutor_quiz_questions deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_questions", ["quiz_id" => $quiz_id])",None,None
DELETION call to wp_delete_post($quiz_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
DELETION call to delete_post_meta($quiz_id, "_tutor_course_id_for_lesson") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
Data from table $wpdbtutor_quiz_questions deleted: "$wpdb->delete($wpdb->prefix . "tutor_quiz_questions", ["question_id" => esc_sql($question_id)])",None,None
DELETION call to delete_user_meta($user_id, $key) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($post_ID, "_tutor_course_product_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to wp_delete_attachment($photo_id, true) alters data types {'attachment', 'attachment_meta'}. Passed arguments: 0: $post_id (int), 1: $force_delete (bool). Returns (WP_Post|false|null).,None,None
DELETION call to delete_user_meta($user_id, $meta_key) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
Data from table $wpdb deleted: "$wpdb->delete($wpdb->comments, $del_where)",None,None
DELETION call to delete_user_meta($user_id, "_tutor_completed_lesson_id_" . $id) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
Data from table $wpdb deleted: "$wpdb->delete($wpdb->posts, ["post_type" => "tutor_enrolled", "post_author" => $user_id, "post_parent" => $course_id])",None,None
DELETION call to delete_post_meta($enrolled->ID, "_tutor_enrolled_by_product_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($enrolled->ID, "_tutor_enrolled_by_order_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($order_id, "_is_tutor_order_for_course") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($order_id, "_tutor_order_for_course_id_" . $course_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_user_meta($instructor_id, "_is_tutor_instructor") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
Data from table $wpdbtutor_withdraws deleted: "$wpdb->delete($wpdb->prefix . "tutor_withdraws", ["withdraw_id" => $withdraw_id])",None,None
DELETION call to delete_post_meta($post_ID, "_tutor_course_product_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($post_ID, "_tutor_product") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_user_meta($user_id, "tutor_frontend_course_message_expires") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_user_meta($user_id, "tutor_frontend_course_action_message") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
MD5 called with parameters [wp_generate_password, user_id, course_id, date]. Ignore if [wp_generate_password, user_id, course_id, date] does not contain personal information.,md5,None
MD5 called with parameters [initial_avatar]. Ignore if [initial_avatar] does not contain personal information.,md5,None
RETRIEVAL call to file_get_contents($flash_msg_file_name).,None,None
STORAGE call to file_put_contents($file, $maintenance_string).,None,None
object property '$user_data->user_email' of personal types {'email'} is found.,,None
object property '$item->user_email' of personal types {'email'} is found.,,None
object property '$user->user_pass' of personal types {'password'} is found.,,None
object property '$this->email' of personal types {'email'} is found.,,None
object property '$wpdb->tutor_email_queue' of personal types {'email'} is found.,,None
object property '$wpdb->tutor_email_queue' of personal types {'email'} is found.,,None
object property '$wpdb->tutor_email_queue' of personal types {'email'} is found.,,None
object property '$user->user_nicename' of personal types {'user_meta', 'user'} is found.,,None
object property '$item->user_name' of personal types {'user_meta', 'user'} is found.,,None
object property '$item->user_email' of personal types {'email'} is found.,,None
object property '$comment_author->user_email' of personal types {'email'} is found.,,None
object property '$comment_author->user_email' of personal types {'email'} is found.,,None
object property '$user->first_name' of personal types {'user_meta', 'user', 'first_name'} is found.,,None
object property '$user->last_name' of personal types {'user_meta', 'last_name', 'user'} is found.,,None
object property '$user->user_email' of personal types {'email'} is found.,,None
object property '$attempt->user_email' of personal types {'email'} is found.,,None
object property '$user->last_name' of personal types {'user_meta', 'last_name', 'user'} is found.,,None
object property '$user->first_name' of personal types {'user_meta', 'user', 'first_name'} is found.,,None
object property '$user->first_name' of personal types {'user_meta', 'user', 'first_name'} is found.,,None
object property '$user->last_name' of personal types {'user_meta', 'last_name', 'user'} is found.,,None
object property '$user->last_name' of personal types {'user_meta', 'last_name', 'user'} is found.,,None
object property '$user->first_name' of personal types {'user_meta', 'user', 'first_name'} is found.,,None
object property '$user->last_name' of personal types {'user_meta', 'last_name', 'user'} is found.,,None
object property '$user->first_name' of personal types {'user_meta', 'user', 'first_name'} is found.,,None
object property '$user->last_name' of personal types {'user_meta', 'last_name', 'user'} is found.,,None
object property '$user->first_name' of personal types {'user_meta', 'user', 'first_name'} is found.,,None
object property '$user->last_name' of personal types {'user_meta', 'last_name', 'user'} is found.,,None
object property '$user->first_name' of personal types {'user_meta', 'user', 'first_name'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$is_pass' of personal types {'password'} is found.,,None
variable '$required_quiz_pass' of personal types {'password'} is found.,,None
variable '$required_quiz_pass' of personal types {'password'} is found.,,None
variable '$is_pass' of personal types {'password'} is found.,,None
variable '$required_quiz_pass' of personal types {'password'} is found.,,None
variable '$is_pass' of personal types {'password'} is found.,,None
variable '$is_pass' of personal types {'password'} is found.,,None
variable '$required_quiz_pass' of personal types {'password'} is found.,,None
variable '$confirm_password' of personal types {'password'} is found.,,None
variable '$confirm_password' of personal types {'password'} is found.,,None
variable '$first_name' of personal types {'first_name'} is found.,,None
variable '$last_name' of personal types {'last_name'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$first_name' of personal types {'first_name'} is found.,,None
variable '$last_name' of personal types {'last_name'} is found.,,None
variable '$first_name' of personal types {'first_name'} is found.,,None
variable '$last_name' of personal types {'last_name'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$first_name' of personal types {'first_name'} is found.,,None
variable '$last_name' of personal types {'last_name'} is found.,,None
variable '$first_name' of personal types {'first_name'} is found.,,None
variable '$last_name' of personal types {'last_name'} is found.,,None
variable '$first_name' of personal types {'first_name'} is found.,,None
variable '$last_name' of personal types {'last_name'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$previous_password' of personal types {'password'} is found.,,None
variable '$new_password' of personal types {'password'} is found.,,None
variable '$confirm_new_password' of personal types {'password'} is found.,,None
variable '$previous_password_checked' of personal types {'password'} is found.,,None
variable '$previous_password' of personal types {'password'} is found.,,None
variable '$previous_password_checked' of personal types {'password'} is found.,,None
variable '$new_password' of personal types {'password'} is found.,,None
variable '$confirm_new_password' of personal types {'password'} is found.,,None
variable '$new_password' of personal types {'password'} is found.,,None
variable '$confirm_new_password' of personal types {'password'} is found.,,None
variable '$previous_password_checked' of personal types {'password'} is found.,,None
variable '$confirm_new_password' of personal types {'password'} is found.,,None
variable '$new_password' of personal types {'password'} is found.,,None
variable '$new_password' of personal types {'password'} is found.,,None
variable '$new_password' of personal types {'password'} is found.,,None
variable '$first_name' of personal types {'first_name'} is found.,,None
variable '$last_name' of personal types {'last_name'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$first_name' of personal types {'first_name'} is found.,,None
variable '$last_name' of personal types {'last_name'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$exists_email_queue_table' of personal types {'email'} is found.,,None
variable '$exists_email_queue_table' of personal types {'email'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_nicename' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_nicename' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_nicename' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_display_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_display_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_display_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$ipaddress' of personal types {'address', 'ip'} is found.,,None
variable '$ipaddress' of personal types {'address', 'ip'} is found.,,None
variable '$ipaddress' of personal types {'address', 'ip'} is found.,,None
variable '$ipaddress' of personal types {'address', 'ip'} is found.,,None
variable '$ipaddress' of personal types {'address', 'ip'} is found.,,None
variable '$ipaddress' of personal types {'address', 'ip'} is found.,,None
variable '$ipaddress' of personal types {'address', 'ip'} is found.,,None
variable '$ipaddress' of personal types {'address', 'ip'} is found.,,None
variable '$ipaddress' of personal types {'address', 'ip'} is found.,,None
variable '$new_pass' of personal types {'password'} is found.,,None
variable '$new_pass' of personal types {'password'} is found.,,None
variable '$billing_address' of personal types {'address'} is found.,,None
variable '$billing_address' of personal types {'address'} is found.,,None
variable '$billing_address' of personal types {'address'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$reset_password' of personal types {'password'} is found.,,None
variable '$reset_password' of personal types {'password'} is found.,,None
variable '$email_base' of personal types {'email'} is found.,,None
variable '$email_base' of personal types {'email'} is found.,,None
variable '$email_base' of personal types {'email'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_name' of personal types {'user_meta', 'user'} is found.,,None
WP_User object is created.,,None
WP_User object is created.,,None
WP_User object is created.,,None
WP_User object is created.,,None
WP_User object is created.,,None
WP_User object is created.,,None
WP_User object is created.,,None
API call to wp_remote_get("https://api.wordpress.org/core/version-check/1.7/"). Passed arguments: 0: $url (string). Returns (array|WP_Error).,https,['https://api.wordpress.org/core/version-check/1.7/']
RETRIEVAL call to get_post($get_post_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("home") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("siteurl") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("delete_on_uninstall") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("delete_on_uninstall") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("enable_course_marketplace") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("tutor_addons_config") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by(is_email($creds["user_login"])"email""login", $creds["user_login"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_post($post_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("quiz_when_time_expires") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_primary_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_primary_hover_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_text_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_light_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_button_primary") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_button_danger") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_button_success") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_button_warning") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_option("rich_editing") alters data types {'user_meta'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_tutor_disable_qa", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("course_completion_process") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_posts($args). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
RETRIEVAL call to get_post_meta($post->ID, $disable_qa, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, $is_public, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_field("post_parent", $enroll_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post_field("post_author", $enroll_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_course_marketplace") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option($key) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($post_ID) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post_meta($attached_product_id, "_product_version", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_ID, "_thumbnail_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($attached_product_id, "edd_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_ID, "_thumbnail_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_started", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("courses_per_page", 12) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta(get_the_ID(), "_tutor_course_settings", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($post_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to tutils()->get_option("enable_profile_completion") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("blogname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("ID", $user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to check_password_reset_key($reset_key, $user->user_login). Passed arguments: 0: $key (string), 1: $login (string). Returns (WP_User|WP_Error).,None,None
RETRIEVAL call to get_user_by("login", $user_login) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("blogname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("login", $login) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_user_by("email", $login) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_user_by("id", $user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to wp_set_current_user($user_id, $user->user_login) alters data types {'user_meta'}. Passed arguments: 0: $id (int), 1: $name (string). Returns (WP_User).,None,None
RETRIEVAL call to get_option("users_can_register", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("instructor_can_publish_course") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($lesson_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post($lesson_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post($is_course) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("required_rewrite_flush") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_is_public_course", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($lesson_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_post() alters data types {'post', 'wp_post', 'post_meta'}. Returns (WP_Post|array|null).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_gutenberg_course_edit") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_post($quiz_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_post($quiz_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post_meta($quiz_id, "tutor_quiz_option", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($quiz_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_public_profile") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_field("post_name", $dashboard_page_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post($id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to tutor_utils()->get_option("instructor_list_layout", $this->instructor_layout[0]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("instructor_list_show_filter", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to wp_set_current_user($user_id, $user->user_login) alters data types {'user_meta'}. Passed arguments: 0: $id (int), 1: $name (string). Returns (WP_User).,None,None
RETRIEVAL call to get_user_meta($user_id, "_tutor_profile_photo", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("users_can_register", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("id", $user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to tutor_utils()->get_option("student_must_login_to_view_course") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_is_public_course", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("instructor_register_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("student_register_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("courses_per_page", 12) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("course_archive_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_wizard") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("is_course_post_type_updated") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_first_activation_time") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to dbDelta($quiz_attempts_sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to dbDelta($quiz_attempt_answers). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to dbDelta($tutor_quiz_questions). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to dbDelta($tutor_quiz_question_answers). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to dbDelta($earning_table). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to dbDelta($withdraw_table). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to tutor_utils()->get_option("instructor_can_publish_course") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("blogname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to dbDelta($earning_table). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to dbDelta($withdraw_table). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to tutor_utils()->get_option("student_dashboard") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_product_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("lesson_permalink_base") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_option($option) alters data types {'user_meta'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_withdraw_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_course_marketplace") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_tutor_earning") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_withdraw_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_course_marketplace") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to dbDelta($gradebook_results). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to dbDelta($table). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to get_option("tutor_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("is_course_post_type_updated") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to dbDelta($gradebook_table). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to get_option("users_can_register") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, $meta_key, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to $this->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($product_id, "_regular_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($product_id, "_sale_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($product_id, "edd_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($product_id, "edd_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_price_type", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($course_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_user_meta($user_id, "_tutor_completed_lesson_id_"$lesson->ID, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_video", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_tutor_attachments", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($sourceVideoID, "_wp_attachment_metadata", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($lesson_id, "_video", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to $this->get_option("course_archive_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, "_tutor_completed_lesson_id_" . $lesson_id, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($post_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_user_meta($user_id, "_lesson_reading_info", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, "_lesson_reading_info", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($enrolled->ID, "_tutor_enrolled_by_order_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_product_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($order_id, "_is_tutor_order_for_course", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, "_is_tutor_instructor", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, "_tutor_instructor_status", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_post_meta($post_id, "tutor_quiz_option", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($quiz_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_posts(["post_type" => $course_post_type, "author" => $instructor_id, "post_status" => ["publish", "pending"], "posts_per_page" => -1]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
RETRIEVAL call to tutor_utils()->get_option("show_courses_completed_by_student") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("students_own_review_show_at_profile") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to $this->get_option("student_register_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to $this->get_option("instructor_register_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_addons_config") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_duplicated_earning_deleted", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_tutor_edd") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to $this->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, "_tutor_withdraw_method_data", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($assignment_id, "assignment_option", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_settings", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($lesson_id, "_content_drip_settings", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($post) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post($post) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_posts($args). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
RETRIEVAL call to get_post($page_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_user_meta($user_id, "_tutor_instructor_status", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, $key, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to $this->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, "_tutor_cover_photo", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_field("post_date", $assignment_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_course_duration", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to $this->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_withdraw_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("min_withdraw_amount") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_product_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_field("post_author", $enrolled_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post_field("post_parent", $enrolled_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to tutils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_tutor_earning") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_earning_fees") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("earning_instructor_commission") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("earning_admin_commission") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("wc_automatic_order_complete_redirect_to_courses") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($woo_product_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int). Returns (mixed).,None,None
RETRIEVAL call to get_option("tutor_show_woocommerce_notice") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("monetize_by", "free") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_spotlight_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_spotlight_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option($key, $default) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_level", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_course_duration", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("course_archive_filter", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("courses_col_per_row", 3) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_post($post_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_the_author_meta("display_name", $post->post_author) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_benefits", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_requirements", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_target_audience", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_material_includes", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("display_course_instructors") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("disable_course_review") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($this->user_id, "_tutor_instructor_course_id", false) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_tutor_course_settings", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_tutor_course_price_type", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_course_duration", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_tutor_course_level", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_tutor_course_benefits", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_tutor_course_requirements", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_tutor_course_target_audience", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_tutor_course_material_includes", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_video", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_tutor_disable_qa", "_video", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_regular_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($lesson->ID, "_tutor_attachments", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($lesson->ID, "_video", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($quiz->ID, "tutor_quiz_option", false) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("course_archive_filter", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("supported_course_filters", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("courses_col_per_row", 4) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("supported_course_filters", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "_is_tutor_instructor", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta(get_current_user_id(), "tutor_instructor_show_rejection_message", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("ID", $user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to tutils()->get_option("enable_profile_completion") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "_is_tutor_instructor_rejected", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("enable_become_instructor_btn") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($post->post_parent) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_comment_meta($assignment_submitted_id, "assignment_mark", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_comment_meta($assignment_submitted_id, "instructor_note", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("login", $submitted_assignment->comment_author) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_comment_meta($submitted_assignment->comment_ID, "uploaded_attachments", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("login", $assignment->comment_author) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_comment_meta($assignment->comment_ID, "evaluate_time", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_comment_meta($assignment->comment_ID, "assignment_mark", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("instructor_can_publish_course") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, "tutor_frontend_course_message_expires", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, "tutor_frontend_course_action_message", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_dashboard_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("tutor_primary_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("ID", $user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_become_instructor_btn") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, "_tutor_instructor_status", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("users_can_register", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($uid, "phone_number", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($uid, "_tutor_profile_bio", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_userdata($uid) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($attempt_id, "instructor_feedback", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($attempt_id, "instructor_feedback", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_post_meta($attempt_id, "instructor_feedback", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("users_can_register", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("pagination_per_page", 20) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "_tutor_profile_photo", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "phone_number", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "_tutor_profile_bio", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "_tutor_cover_photo", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, $key, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to tutor_utils()->get_option("min_withdraw_amount") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("min_withdraw_amount") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("blogname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("users_can_register", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("instructor_list_layout") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("disable_tutor_native_login") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_guest_course_cart") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_the_author() alters data types {'user_meta'}. Returns (string|null).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_is_public_course", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("courses_col_per_row", 4) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("disable_course_total_enrolled") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_the_author() alters data types {'user_meta'}. Returns (string|null).,None,None
RETRIEVAL call to get_user_meta($user_id, "_tutor_profile_bio", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("show_courses_completed_by_student") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("students_own_review_show_at_profile") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option($layout_option_name . "_public_profile_layout") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("supported_course_filters", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("course_archive_filter", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_spotlight_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_spotlight_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_spotlight_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_spotlight_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta(get_the_ID(), "_tutor_assignment_attachments", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($attachment_id, "_wp_attached_file", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_comment_meta($submitted_assignment->comment_ID, "evaluate_time", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_comment_meta($submitted_assignment->comment_ID, "assignment_mark", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_comment_meta($submitted_assignment->comment_ID, "uploaded_attachments", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_comment_meta($submitted_assignment->comment_ID, "instructor_note", true) alters data types {'comment_meta'}. Passed arguments: 0: $comment_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("monetize_by") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_guest_course_cart") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta(get_the_ID(), "_tutor_is_public_course", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("disable_tutor_native_login") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("course_retake_feature", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_is_public_course", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_the_author() alters data types {'user_meta'}. Returns (string|null).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_tutor_disable_qa", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_q_and_a_on_course") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_the_author() alters data types {'user_meta'}. Returns (string|null).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_tutor_zm_for_course", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_disable_qa", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_q_and_a_on_course") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_disable_qa", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("enable_q_and_a_on_course") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("quiz_previous_button_disabled", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("disable_default_player_vimeo") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("disable_default_player_youtube") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option($is_instructor"instructor""student" . "_public_profile_layout", "pp-circle") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, $key, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("blogname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_material_includes", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_benefits", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_requirements", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_target_audience", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_posts($topic_args). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
RETRIEVAL call to get_posts(["post_type" => $post_type, "post_parent" => $topic->ID, "posts_per_page" => -1, "orderby" => "menu_order", "order" => "ASC"]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
RETRIEVAL call to get_post_meta($course_id, "_tutor_course_level", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "_tutor_profile_job_title", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "_tutor_profile_bio", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "_tutor_profile_photo", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_video", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutils()->get_option("lesson_video_duration_youtube_api_key", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("supported_video_sources", $video_sources) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("default_video_source", null) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_thumbnail_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to tutor_utils()->get_option("quiz_attempts_allowed") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($quiz_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post($quiz_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post($post->post_parent) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("users_can_register", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_transient("tutor_system_status_wp_version_check") alters data types {'site'}. Passed arguments: 0: $transient (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($page_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($attempt_id, "instructor_feedback", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
STORAGE call to delete_option("tutor_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_user_meta($user_id, "_tutor_course_wishlist", $course_id) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|false).,None,None
STORAGE call to update_option("tutor_addons_config", $addonsConfig) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("tutor_addons_config", $addonsConfig) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_insert_post($form_data). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to wp_delete_post($announcement_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to wp_delete_post($content_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to wp_delete_post($topic_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to wp_delete_post($child_post_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to update_post_meta($post_ID, "_tutor_course_price_type", $price_type) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_ID, "_course_duration", $video) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_ID, "_tutor_course_level", $course_level) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_ID, "_tutor_course_benefits", $course_benefits) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($post_ID, "_tutor_course_benefits") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to update_post_meta($post_ID, "_tutor_course_requirements", $requirements) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($post_ID, "_tutor_course_requirements") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to update_post_meta($post_ID, "_tutor_course_target_audience", $target_audience) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($post_ID, "_tutor_course_target_audience") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to update_post_meta($post_ID, "_tutor_course_material_includes", $material_includes) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($post_ID, "_tutor_course_material_includes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to update_post_meta($post_ID, "_video", $video) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($post_ID, "_video") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to add_user_meta($author_id, "_tutor_instructor_course_id", $post_ID) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|false).,None,None
STORAGE call to update_post_meta($post_ID, $key, isset($_POST[$key])"yes""no") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_post($post_arr). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to wp_update_post($topic_attr). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).,None,None
STORAGE call to wp_delete_post($topic_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to wp_delete_post($announcement_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to update_option("tutor_course_complete_popup_" . $user_id, ["course_id" => $course_id, "course_url" => $permalink, "expires" => time() + 10]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option($key) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_user_meta($instructor_id, "_tutor_instructor_course_id", $course_id) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|false).,None,None
STORAGE call to update_post_meta($attached_product_id, "_subscription_price", $course_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_ID, "_tutor_course_product_id", $product_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_virtual", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_tutor_product", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($attached_product_id, "edd_price", $course_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_post($post_arr). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($download_id, "edd_price", $course_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_ID, "_tutor_course_product_id", $download_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($download_id, "_tutor_product", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($course_id, "_tutor_course_started", tutor_time()) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_ID, "_tutor_course_settings", $_tutor_course_settings) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_post(["post_title" => __("Auto Draft", "tutor"), "post_type" => $post_type, "post_status" => "draft"]). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to wp_insert_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,None,None
STORAGE call to update_user_meta($user_id, "_is_tutor_instructor", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "_tutor_instructor_status", apply_filters("tutor_initial_instructor_status", "pending")) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "_is_tutor_instructor", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "_tutor_instructor_status", apply_filters("tutor_initial_instructor_status", "pending")) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,None,None
STORAGE call to update_user_meta($user_id, "phone_number", $phone_number) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "description", $tutor_profile_bio) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "_tutor_profile_bio", $tutor_profile_bio) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "_is_tutor_instructor", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "_tutor_instructor_status", apply_filters("tutor_initial_instructor_status", "approved")) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_status", "approved") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_approved", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_status", "blocked") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($instructor_id, "_is_tutor_instructor_rejected", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($instructor_id, "tutor_instructor_show_rejection_message", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_user_meta(get_current_user_id(), "tutor_instructor_show_rejection_message") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_status", "approved") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_approved", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_status", "blocked") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_delete_user($instructor) alters data types {'user_meta', 'user'}. Passed arguments: 0: $id (int). Returns (bool).,None,None
STORAGE call to update_post_meta($post_ID, "_tutor_attachments", $attachments) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($post_ID, "_tutor_attachments") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to wp_insert_post($lesson_data). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($lesson_id, "_tutor_course_id_for_lesson", $course_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_update_post($lesson_data). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($lesson_id, "_thumbnail_id", $_lesson_thumbnail_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($lesson_id, "_thumbnail_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to wp_delete_post($lesson_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to delete_post_meta($lesson_id, "_tutor_course_id_for_lesson") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_option("required_rewrite_flush") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_post_meta($post_ID, "_tutor_course_id_for_lesson", $course_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($post_ID, "_video") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to update_post_meta($post_ID, "_video", $video) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("tutor_option", $option) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_post_meta($attempt_id, "instructor_feedback", $feedback) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_ID, "tutor_quiz_option", $quiz_option) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($quiz_id, "tutor_quiz_option", $quiz_option) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_post($post_arr). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to wp_delete_post($quiz_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to delete_post_meta($quiz_id, "_tutor_course_id_for_lesson") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to wp_update_post($post_arr). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).,None,None
STORAGE call to wp_update_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,None,None
STORAGE call to update_user_meta($user_id, "phone_number", $phone_number) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "_tutor_profile_bio", $tutor_profile_bio) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, $key, $user_social_value) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_user_meta($user_id, $key) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to wp_set_password($new_password, $user->ID) alters data types {'user_meta'}. Passed arguments: 0: $password (string), 1: $user_id (int).,None,None
STORAGE call to wp_insert_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,None,None
STORAGE call to wp_insert_post($page_arg). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_option("tutor_wizard", "active") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("tutor_option", $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("required_rewrite_flush", tutor_time()) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("tutor_version", TUTOR_VERSION) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("tutor_version", "1.2.0") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("required_rewrite_flush", tutor_time()) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("is_course_post_type_updated", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("tutor_version", "1.3.1") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("tutor_first_activation_time", tutor_time()) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_insert_post($student_dashboard_args). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to tutor_utils()->update_option("tutor_dashboard_page_id", $student_dashboard_page_id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_insert_post($student_registration_args). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to tutor_utils()->update_option("student_register_page", $student_register_page_id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_insert_post($instructor_registration_args). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to tutor_utils()->update_option("instructor_register_page", $instructor_registration_id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to tutor_utils()->update_option("tutor_dashboard_page_id", $previous_dashboard_page_id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_post_meta($post_ID, "_tutor_course_product_id", $product_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_tutor_product", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($post_ID, "_tutor_course_product_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to update_option("tutor_option", $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("tutor_withdraw_options", $payments) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("tutor_wizard", "active") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("is_course_post_type_updated", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("tutor_version", "1.3.1") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_user_meta($user_id, $meta_key, $media_id) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "_tutor_profile_job_title", $_tutor_profile_job_title) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "_tutor_profile_bio", $_tutor_profile_bio) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "_tutor_profile_photo", $_tutor_profile_image) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("users_can_register", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_user_meta($user_id, $meta_key) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_user_meta($user_id, "_tutor_completed_lesson_id_" . $id) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to update_post_meta($post_id, "_video", $video_data) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "_lesson_reading_info", $lesson_info) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "_tutor_completed_lesson_id_" . $post_id, tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_post($enroll_data). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_user_meta($user_id, "_is_tutor_student", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($isEnrolled, "_tutor_enrolled_by_order_id", $order_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($isEnrolled, "_tutor_enrolled_by_product_id", $product_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($order_id, "_is_tutor_order_for_course", tutor_time()) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($order_id, "_tutor_order_for_course_id_" . $course_id, $isEnrolled) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($enrolled->ID, "_tutor_enrolled_by_product_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_post_meta($enrolled->ID, "_tutor_enrolled_by_order_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_post_meta($order_id, "_is_tutor_order_for_course") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_post_meta($order_id, "_tutor_order_for_course_id_" . $course_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to update_option("tutor_duplicated_earning_deleted", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_user_meta($instructor_id, "_is_tutor_instructor", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_status", "approved") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_approved", tutor_time()) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_user_meta($instructor_id, "_is_tutor_instructor") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to update_user_meta($instructor_id, "_tutor_instructor_status", "blocked") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("tutor_option", $option) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_set_password($new_pass, $user->ID) alters data types {'user_meta'}. Passed arguments: 0: $password (string), 1: $user_id (int).,None,None
STORAGE call to update_option("tutor_withdraw_options", $option) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_user_meta($user_id, "_tutor_withdraw_method_data", $saved_data) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($post_ID, "_tutor_course_product_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to update_post_meta($post_ID, "_tutor_course_product_id", $product_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_virtual", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_tutor_product", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_ID, "_tutor_product", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($post_ID, "_tutor_product") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to tutils()->update_option("monetize_by", "free") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("tutor_show_woocommerce_notice", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to tutils()->update_option($key, $value) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_user_meta($user_id, "tutor_frontend_course_message_expires") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_user_meta($user_id, "tutor_frontend_course_action_message") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to set_transient("tutor_system_status_wp_version_check", $latest_version, DAY_IN_SECONDS) alters data types {'site'}. Passed arguments: 0: $transient (string), 1: $value (mixed), 2: $expiration (int). Returns (bool).,None,None
CRYPTOGRAPHY call to wp_update_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,hash,None
CRYPTOGRAPHY call to wp_set_password($new_password, $user->ID) alters data types {'user_meta'}. Passed arguments: 0: $password (string), 1: $user_id (int).,hash,None
CRYPTOGRAPHY call to wp_set_password($new_pass, $user->ID) alters data types {'user_meta'}. Passed arguments: 0: $password (string), 1: $user_id (int).,hash,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "phone_number", $phone_number)", found in file classes/Instructor.php at line 232. 

[has_storage] WP User info of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "wp_insert_user($userdata)", found in file classes/Instructor.php at line 115. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "wp_insert_post($enroll_data)", found in file classes/Utils.php at line 2253. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($instructor_id, "_tutor_instructor_status", "approved")", found in file classes/Instructors_List.php at line 155. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, $key, $user_social_value)", found in file classes/Student.php at line 164. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($post_ID, "_tutor_course_settings", $_tutor_course_settings)", found in file classes/Course_Settings_Tabs.php at line 110. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($order_id, "_tutor_order_for_course_id_" . $course_id, $isEnrolled)", found in file classes/Utils.php at line 2273. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "_lesson_reading_info", $lesson_info)", found in file classes/Utils.php at line 2137. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "_tutor_completed_lesson_id_" . $post_id, tutor_time())", found in file classes/Utils.php at line 2195. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($isEnrolled, "_tutor_enrolled_by_order_id", $order_id)", found in file classes/Utils.php at line 2270. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($isEnrolled, "_tutor_enrolled_by_product_id", $product_id)", found in file classes/Utils.php at line 2271. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "_is_tutor_instructor", tutor_time())", found in file classes/Instructor.php at line 117. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_option("tutor_first_activation_time", tutor_time())", found in file classes/Tutor.php at line 291. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "add_user_meta($author_id, "_tutor_instructor_course_id", $post_ID)", found in file classes/Course.php at line 405. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($lesson_id, "_tutor_course_id_for_lesson", $course_id)", found in file classes/Lesson.php at line 187. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($user_id, "_tutor_instructor_status", apply_filters("tutor_initial_instructor_status", "pending"))", found in file classes/Instructor.php at line 160. 

[has_storage] WP User info of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "wp_set_password($new_password, $user->ID)", found in file classes/Student.php at line 250. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "wp_insert_post($post_arr)", found in file classes/Course.php at line 450. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($product_id, "_virtual", "yes")", found in file classes/WooCommerce.php at line 195. 

[has_storage] WP User info of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "wp_set_password($new_pass, $user->ID)", found in file classes/Utils.php at line 7166. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($order_id, "_is_tutor_order_for_course", tutor_time())", found in file classes/Utils.php at line 2272. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($instructor_id, "_is_tutor_instructor", tutor_time())", found in file classes/Utils.php at line 6179. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "_tutor_profile_bio", $_tutor_profile_bio)", found in file classes/User.php at line 140. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, $meta_key, $media_id)", found in file classes/User.php at line 122. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "_tutor_profile_photo", $_tutor_profile_image)", found in file classes/User.php at line 141. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($post_ID, "_tutor_course_price_type", $price_type)", found in file classes/Course.php at line 284. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_option("tutor_withdraw_options", $option)", found in file classes/Withdraw.php at line 148. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "_tutor_profile_job_title", $_tutor_profile_job_title)", found in file classes/User.php at line 139. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($instructor_id, "_tutor_instructor_status", "approved")", found in file classes/Utils.php at line 6180. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($instructor_id, "_tutor_instructor_approved", tutor_time())", found in file classes/Utils.php at line 6181. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($user_id, "_tutor_withdraw_method_data", $saved_data)", found in file classes/Withdraw.php at line 184. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($instructor_id, "_tutor_instructor_status", "blocked")", found in file classes/Utils.php at line 6201. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($download_id, "_tutor_product", "yes")", found in file classes/Course.php at line 942. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($post_ID, "_video", $video)", found in file classes/Course.php at line 384. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($download_id, "edd_price", $course_price)", found in file classes/Course.php at line 938. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($course_id, "_tutor_course_started", tutor_time())", found in file classes/Course.php at line 975. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($post_ID, "_tutor_course_product_id", $download_id)", found in file classes/Course.php at line 940. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_option("tutor_withdraw_options", $payments)", found in file classes/Tutor_Setup.php at line 71. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "_is_tutor_student", tutor_time())", found in file classes/Utils.php at line 2265. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "phone_number", $phone_number)", found in file classes/Student.php at line 157. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($lesson_id, "_thumbnail_id", $_lesson_thumbnail_id)", found in file classes/Lesson.php at line 197. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($post_ID, "_video", $video)", found in file classes/Lesson.php at line 93. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($post_ID, "_tutor_course_product_id", $product_id)", found in file classes/WooCommerce.php at line 193. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "_tutor_profile_bio", $tutor_profile_bio)", found in file classes/Student.php at line 158. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_option("tutor_option", $options)", found in file classes/Tutor_Setup.php at line 54. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($instructor_id, "_tutor_instructor_approved", tutor_time())", found in file classes/Instructors_List.php at line 156. 

[has_storage] WP User info of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "wp_update_user($userdata)", found in file classes/Student.php at line 154. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($instructor_id, "tutor_instructor_show_rejection_message", true)", found in file classes/Instructor.php at line 289. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($attached_product_id, "edd_price", $course_price)", found in file classes/Course.php at line 925. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "set_transient("tutor_system_status_wp_version_check", $latest_version, DAY_IN_SECONDS)", found in file views/pages/tools/status.php at line 43. 

[has_storage] WP User info of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "wp_insert_user($userdata)", found in file classes/Instructor.php at line 230. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_option("required_rewrite_flush", tutor_time())", found in file classes/Tutor.php at line 269. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "_is_tutor_instructor", tutor_time())", found in file classes/Instructor.php at line 159. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "_tutor_instructor_status", apply_filters("tutor_initial_instructor_status", "pending"))", found in file classes/Instructor.php at line 118. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "description", $tutor_profile_bio)", found in file classes/Instructor.php at line 233. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "add_user_meta($user_id, "_tutor_course_wishlist", $course_id)", found in file classes/Ajax.php at line 330. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($product_id, "_tutor_product", "yes")", found in file classes/TutorEDD.php at line 124. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_option("required_rewrite_flush", tutor_time())", found in file classes/Tutor.php at line 246. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "wp_insert_post($page_arg)", found in file classes/Tools.php at line 65. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($post_ID, "_tutor_course_product_id", $product_id)", found in file classes/TutorEDD.php at line 123. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($post_id, "_video", $video_data)", found in file classes/Utils.php at line 1367. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_option("tutor_option", $options)", found in file classes/Tutor.php at line 243. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($instructor_id, "_tutor_instructor_status", "blocked")", found in file classes/Instructors_List.php at line 169. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "_is_tutor_instructor", tutor_time())", found in file classes/Instructor.php at line 235. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "wp_insert_post($post_arr)", found in file classes/Course.php at line 935. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($instructor_id, "_tutor_instructor_status", "blocked")", found in file classes/Instructor.php at line 271. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($product_id, "_tutor_product", "yes")", found in file classes/WooCommerce.php at line 196. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "wp_insert_post($post_arr)", found in file classes/Quiz.php at line 667. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($attached_product_id, "_subscription_price", $course_price)", found in file classes/Course.php at line 889. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "_tutor_instructor_status", apply_filters("tutor_initial_instructor_status", "approved"))", found in file classes/Instructor.php at line 236. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($instructor_id, "_tutor_instructor_approved", tutor_time())", found in file classes/Instructor.php at line 260. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "add_user_meta($instructor_id, "_tutor_instructor_course_id", $course_id)", found in file classes/Course.php at line 770. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($instructor_id, "_is_tutor_instructor_rejected", tutor_time())", found in file classes/Instructor.php at line 288. 

[has_storage] WP User info of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "wp_insert_user($userdata)", found in file classes/Student.php at line 97. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($instructor_id, "_tutor_instructor_status", "approved")", found in file classes/Instructor.php at line 259. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_user_meta($user_id, "_tutor_profile_bio", $tutor_profile_bio)", found in file classes/Instructor.php at line 234. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_post_meta($attempt_id, "instructor_feedback", $feedback)", found in file classes/Quiz.php at line 114. 

[has_storage] PII of types (['ip', 'first_name', 'address', 'user_meta', 'password', 'email', 'user', 'last_name']) stored through WordPress function "update_option("tutor_option", $option)", found in file classes/Options.php at line 81. 

[has_storage] Storage check is WP 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "phone_number", $phone_number) does not have corresponding deletion method. Storage method found in file classes/Instructor.php at line 232. 

[Art.17, Right to erasure] Wordpress storage of PII through wp_insert_post($enroll_data) does not have corresponding deletion method. Storage method found in file classes/Utils.php at line 2253. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($instructor_id, "_tutor_instructor_status", "approved") does not have corresponding deletion method. Storage method found in file classes/Instructors_List.php at line 155. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, $key, $user_social_value) has deletion method delete_user_meta($user_id, $key). Storage method found in file classes/Student.php at line 164. Deletion method found in file classes/Student.php at line 166. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($post_ID, "_tutor_course_settings", $_tutor_course_settings) does not have corresponding deletion method. Storage method found in file classes/Course_Settings_Tabs.php at line 110. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($order_id, "_tutor_order_for_course_id_" . $course_id, $isEnrolled) does not have corresponding deletion method. Storage method found in file classes/Utils.php at line 2273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "_lesson_reading_info", $lesson_info) does not have corresponding deletion method. Storage method found in file classes/Utils.php at line 2137. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "_tutor_completed_lesson_id_" . $post_id, tutor_time()) does not have corresponding deletion method. Storage method found in file classes/Utils.php at line 2195. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($isEnrolled, "_tutor_enrolled_by_order_id", $order_id) has deletion method delete_post_meta($enrolled->ID, "_tutor_enrolled_by_order_id"). Storage method found in file classes/Utils.php at line 2270. Deletion method found in file classes/Utils.php at line 2328. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($isEnrolled, "_tutor_enrolled_by_product_id", $product_id) has deletion method delete_post_meta($enrolled->ID, "_tutor_enrolled_by_product_id"). Storage method found in file classes/Utils.php at line 2271. Deletion method found in file classes/Utils.php at line 2325. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "_is_tutor_instructor", tutor_time()) has deletion method delete_user_meta($instructor_id, "_is_tutor_instructor"). Storage method found in file classes/Instructor.php at line 117. Deletion method found in file classes/Utils.php at line 6200. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_first_activation_time", tutor_time()) has deletion method delete_option("tutor_option"). Storage method found in file classes/Tutor.php at line 291. Deletion method found in file classes/Admin.php at line 416. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_first_activation_time", tutor_time()) has deletion method delete_option($key). Storage method found in file classes/Tutor.php at line 291. Deletion method found in file classes/Course.php at line 699. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_first_activation_time", tutor_time()) has deletion method delete_option("required_rewrite_flush"). Storage method found in file classes/Tutor.php at line 291. Deletion method found in file classes/Lesson.php at line 265. 

[Art.17, Right to erasure] Wordpress storage of PII through add_user_meta($author_id, "_tutor_instructor_course_id", $post_ID) does not have corresponding deletion method. Storage method found in file classes/Course.php at line 405. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($lesson_id, "_tutor_course_id_for_lesson", $course_id) has deletion method delete_post_meta($lesson_id, "_tutor_course_id_for_lesson"). Storage method found in file classes/Lesson.php at line 187. Deletion method found in file classes/Lesson.php at line 224. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($lesson_id, "_tutor_course_id_for_lesson", $course_id) has deletion method delete_post_meta($quiz_id, "_tutor_course_id_for_lesson"). Storage method found in file classes/Lesson.php at line 187. Deletion method found in file classes/Quiz.php at line 728. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "_tutor_instructor_status", apply_filters("tutor_initial_instructor_status", "pending")) does not have corresponding deletion method. Storage method found in file classes/Instructor.php at line 160. 

[Art.17, Right to erasure] Wordpress storage of PII through wp_insert_post($post_arr) does not have corresponding deletion method. Storage method found in file classes/Course.php at line 450. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_virtual", "yes") does not have corresponding deletion method. Storage method found in file classes/WooCommerce.php at line 195. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($order_id, "_is_tutor_order_for_course", tutor_time()) has deletion method delete_post_meta($order_id, "_is_tutor_order_for_course"). Storage method found in file classes/Utils.php at line 2272. Deletion method found in file classes/Utils.php at line 2329. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($instructor_id, "_is_tutor_instructor", tutor_time()) has deletion method delete_user_meta($instructor_id, "_is_tutor_instructor"). Storage method found in file classes/Utils.php at line 6179. Deletion method found in file classes/Utils.php at line 6200. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "_tutor_profile_bio", $_tutor_profile_bio) does not have corresponding deletion method. Storage method found in file classes/User.php at line 140. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, $meta_key, $media_id) has deletion method delete_user_meta($user_id, $meta_key). Storage method found in file classes/User.php at line 122. Deletion method found in file classes/User.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "_tutor_profile_photo", $_tutor_profile_image) does not have corresponding deletion method. Storage method found in file classes/User.php at line 141. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($post_ID, "_tutor_course_price_type", $price_type) does not have corresponding deletion method. Storage method found in file classes/Course.php at line 284. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_withdraw_options", $option) has deletion method delete_option("tutor_option"). Storage method found in file classes/Withdraw.php at line 148. Deletion method found in file classes/Admin.php at line 416. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_withdraw_options", $option) has deletion method delete_option($key). Storage method found in file classes/Withdraw.php at line 148. Deletion method found in file classes/Course.php at line 699. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_withdraw_options", $option) has deletion method delete_option("required_rewrite_flush"). Storage method found in file classes/Withdraw.php at line 148. Deletion method found in file classes/Lesson.php at line 265. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "_tutor_profile_job_title", $_tutor_profile_job_title) does not have corresponding deletion method. Storage method found in file classes/User.php at line 139. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($instructor_id, "_tutor_instructor_status", "approved") does not have corresponding deletion method. Storage method found in file classes/Utils.php at line 6180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($instructor_id, "_tutor_instructor_approved", tutor_time()) does not have corresponding deletion method. Storage method found in file classes/Utils.php at line 6181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "_tutor_withdraw_method_data", $saved_data) does not have corresponding deletion method. Storage method found in file classes/Withdraw.php at line 184. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($instructor_id, "_tutor_instructor_status", "blocked") does not have corresponding deletion method. Storage method found in file classes/Utils.php at line 6201. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($download_id, "_tutor_product", "yes") has deletion method delete_post_meta($post_ID, "_tutor_product"). Storage method found in file classes/Course.php at line 942. Deletion method found in file classes/WooCommerce.php at line 205. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($post_ID, "_video", $video) has deletion method delete_post_meta($post_ID, "_video"). Storage method found in file classes/Course.php at line 384. Deletion method found in file classes/Course.php at line 386. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($post_ID, "_video", $video) has deletion method delete_post_meta($post_ID, "_video"). Storage method found in file classes/Course.php at line 384. Deletion method found in file classes/Lesson.php at line 90. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($download_id, "edd_price", $course_price) does not have corresponding deletion method. Storage method found in file classes/Course.php at line 938. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($course_id, "_tutor_course_started", tutor_time()) does not have corresponding deletion method. Storage method found in file classes/Course.php at line 975. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($post_ID, "_tutor_course_product_id", $download_id) has deletion method delete_post_meta($post_ID, "_tutor_course_product_id"). Storage method found in file classes/Course.php at line 940. Deletion method found in file classes/TutorEDD.php at line 127. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($post_ID, "_tutor_course_product_id", $download_id) has deletion method delete_post_meta($post_ID, "_tutor_course_product_id"). Storage method found in file classes/Course.php at line 940. Deletion method found in file classes/WooCommerce.php at line 191. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_withdraw_options", $payments) has deletion method delete_option("tutor_option"). Storage method found in file classes/Tutor_Setup.php at line 71. Deletion method found in file classes/Admin.php at line 416. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_withdraw_options", $payments) has deletion method delete_option($key). Storage method found in file classes/Tutor_Setup.php at line 71. Deletion method found in file classes/Course.php at line 699. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_withdraw_options", $payments) has deletion method delete_option("required_rewrite_flush"). Storage method found in file classes/Tutor_Setup.php at line 71. Deletion method found in file classes/Lesson.php at line 265. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "_is_tutor_student", tutor_time()) does not have corresponding deletion method. Storage method found in file classes/Utils.php at line 2265. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "phone_number", $phone_number) does not have corresponding deletion method. Storage method found in file classes/Student.php at line 157. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($lesson_id, "_thumbnail_id", $_lesson_thumbnail_id) has deletion method delete_post_meta($lesson_id, "_thumbnail_id"). Storage method found in file classes/Lesson.php at line 197. Deletion method found in file classes/Lesson.php at line 199. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($post_ID, "_video", $video) has deletion method delete_post_meta($post_ID, "_video"). Storage method found in file classes/Lesson.php at line 93. Deletion method found in file classes/Course.php at line 386. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($post_ID, "_video", $video) has deletion method delete_post_meta($post_ID, "_video"). Storage method found in file classes/Lesson.php at line 93. Deletion method found in file classes/Lesson.php at line 90. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($post_ID, "_tutor_course_product_id", $product_id) has deletion method delete_post_meta($post_ID, "_tutor_course_product_id"). Storage method found in file classes/WooCommerce.php at line 193. Deletion method found in file classes/TutorEDD.php at line 127. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($post_ID, "_tutor_course_product_id", $product_id) has deletion method delete_post_meta($post_ID, "_tutor_course_product_id"). Storage method found in file classes/WooCommerce.php at line 193. Deletion method found in file classes/WooCommerce.php at line 191. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "_tutor_profile_bio", $tutor_profile_bio) does not have corresponding deletion method. Storage method found in file classes/Student.php at line 158. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_option", $options) has deletion method delete_option("tutor_option"). Storage method found in file classes/Tutor_Setup.php at line 54. Deletion method found in file classes/Admin.php at line 416. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_option", $options) has deletion method delete_option($key). Storage method found in file classes/Tutor_Setup.php at line 54. Deletion method found in file classes/Course.php at line 699. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_option", $options) has deletion method delete_option("required_rewrite_flush"). Storage method found in file classes/Tutor_Setup.php at line 54. Deletion method found in file classes/Lesson.php at line 265. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($instructor_id, "_tutor_instructor_approved", tutor_time()) does not have corresponding deletion method. Storage method found in file classes/Instructors_List.php at line 156. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($instructor_id, "tutor_instructor_show_rejection_message", true) has deletion method delete_user_meta(get_current_user_id(), "tutor_instructor_show_rejection_message"). Storage method found in file classes/Instructor.php at line 289. Deletion method found in file classes/Instructor.php at line 300. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($attached_product_id, "edd_price", $course_price) does not have corresponding deletion method. Storage method found in file classes/Course.php at line 925. 

[Art.17, Right to erasure] Wordpress storage of PII through set_transient("tutor_system_status_wp_version_check", $latest_version, DAY_IN_SECONDS) does not have corresponding deletion method. Storage method found in file views/pages/tools/status.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("required_rewrite_flush", tutor_time()) has deletion method delete_option("tutor_option"). Storage method found in file classes/Tutor.php at line 269. Deletion method found in file classes/Admin.php at line 416. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("required_rewrite_flush", tutor_time()) has deletion method delete_option($key). Storage method found in file classes/Tutor.php at line 269. Deletion method found in file classes/Course.php at line 699. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("required_rewrite_flush", tutor_time()) has deletion method delete_option("required_rewrite_flush"). Storage method found in file classes/Tutor.php at line 269. Deletion method found in file classes/Lesson.php at line 265. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "_is_tutor_instructor", tutor_time()) has deletion method delete_user_meta($instructor_id, "_is_tutor_instructor"). Storage method found in file classes/Instructor.php at line 159. Deletion method found in file classes/Utils.php at line 6200. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "_tutor_instructor_status", apply_filters("tutor_initial_instructor_status", "pending")) does not have corresponding deletion method. Storage method found in file classes/Instructor.php at line 118. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "description", $tutor_profile_bio) does not have corresponding deletion method. Storage method found in file classes/Instructor.php at line 233. 

[Art.17, Right to erasure] Wordpress storage of PII through add_user_meta($user_id, "_tutor_course_wishlist", $course_id) does not have corresponding deletion method. Storage method found in file classes/Ajax.php at line 330. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_tutor_product", "yes") has deletion method delete_post_meta($post_ID, "_tutor_product"). Storage method found in file classes/TutorEDD.php at line 124. Deletion method found in file classes/WooCommerce.php at line 205. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("required_rewrite_flush", tutor_time()) has deletion method delete_option("tutor_option"). Storage method found in file classes/Tutor.php at line 246. Deletion method found in file classes/Admin.php at line 416. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("required_rewrite_flush", tutor_time()) has deletion method delete_option($key). Storage method found in file classes/Tutor.php at line 246. Deletion method found in file classes/Course.php at line 699. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("required_rewrite_flush", tutor_time()) has deletion method delete_option("required_rewrite_flush"). Storage method found in file classes/Tutor.php at line 246. Deletion method found in file classes/Lesson.php at line 265. 

[Art.17, Right to erasure] Wordpress storage of PII through wp_insert_post($page_arg) does not have corresponding deletion method. Storage method found in file classes/Tools.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($post_ID, "_tutor_course_product_id", $product_id) has deletion method delete_post_meta($post_ID, "_tutor_course_product_id"). Storage method found in file classes/TutorEDD.php at line 123. Deletion method found in file classes/TutorEDD.php at line 127. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($post_ID, "_tutor_course_product_id", $product_id) has deletion method delete_post_meta($post_ID, "_tutor_course_product_id"). Storage method found in file classes/TutorEDD.php at line 123. Deletion method found in file classes/WooCommerce.php at line 191. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($post_id, "_video", $video_data) has deletion method delete_post_meta($post_ID, "_video"). Storage method found in file classes/Utils.php at line 1367. Deletion method found in file classes/Course.php at line 386. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($post_id, "_video", $video_data) has deletion method delete_post_meta($post_ID, "_video"). Storage method found in file classes/Utils.php at line 1367. Deletion method found in file classes/Lesson.php at line 90. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_option", $options) has deletion method delete_option("tutor_option"). Storage method found in file classes/Tutor.php at line 243. Deletion method found in file classes/Admin.php at line 416. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_option", $options) has deletion method delete_option($key). Storage method found in file classes/Tutor.php at line 243. Deletion method found in file classes/Course.php at line 699. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_option", $options) has deletion method delete_option("required_rewrite_flush"). Storage method found in file classes/Tutor.php at line 243. Deletion method found in file classes/Lesson.php at line 265. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($instructor_id, "_tutor_instructor_status", "blocked") does not have corresponding deletion method. Storage method found in file classes/Instructors_List.php at line 169. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "_is_tutor_instructor", tutor_time()) has deletion method delete_user_meta($instructor_id, "_is_tutor_instructor"). Storage method found in file classes/Instructor.php at line 235. Deletion method found in file classes/Utils.php at line 6200. 

[Art.17, Right to erasure] Wordpress storage of PII through wp_insert_post($post_arr) does not have corresponding deletion method. Storage method found in file classes/Course.php at line 935. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($instructor_id, "_tutor_instructor_status", "blocked") does not have corresponding deletion method. Storage method found in file classes/Instructor.php at line 271. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_tutor_product", "yes") has deletion method delete_post_meta($post_ID, "_tutor_product"). Storage method found in file classes/WooCommerce.php at line 196. Deletion method found in file classes/WooCommerce.php at line 205. 

[Art.17, Right to erasure] Wordpress storage of PII through wp_insert_post($post_arr) does not have corresponding deletion method. Storage method found in file classes/Quiz.php at line 667. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($attached_product_id, "_subscription_price", $course_price) does not have corresponding deletion method. Storage method found in file classes/Course.php at line 889. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "_tutor_instructor_status", apply_filters("tutor_initial_instructor_status", "approved")) does not have corresponding deletion method. Storage method found in file classes/Instructor.php at line 236. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($instructor_id, "_tutor_instructor_approved", tutor_time()) does not have corresponding deletion method. Storage method found in file classes/Instructor.php at line 260. 

[Art.17, Right to erasure] Wordpress storage of PII through add_user_meta($instructor_id, "_tutor_instructor_course_id", $course_id) does not have corresponding deletion method. Storage method found in file classes/Course.php at line 770. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($instructor_id, "_is_tutor_instructor_rejected", tutor_time()) does not have corresponding deletion method. Storage method found in file classes/Instructor.php at line 288. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($instructor_id, "_tutor_instructor_status", "approved") does not have corresponding deletion method. Storage method found in file classes/Instructor.php at line 259. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "_tutor_profile_bio", $tutor_profile_bio) does not have corresponding deletion method. Storage method found in file classes/Instructor.php at line 234. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($attempt_id, "instructor_feedback", $feedback) does not have corresponding deletion method. Storage method found in file classes/Quiz.php at line 114. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_option", $option) has deletion method delete_option("tutor_option"). Storage method found in file classes/Options.php at line 81. Deletion method found in file classes/Admin.php at line 416. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_option", $option) has deletion method delete_option($key). Storage method found in file classes/Options.php at line 81. Deletion method found in file classes/Course.php at line 699. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("tutor_option", $option) has deletion method delete_option("required_rewrite_flush"). Storage method found in file classes/Options.php at line 81. Deletion method found in file classes/Lesson.php at line 265. 

[Art.17, Right to erasure] Deletion access is NONE 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 19028. Found in file classes/Instructor.php at line 232 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 64758. Found in file classes/Utils.php at line 2253 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 20202. Found in file classes/Instructors_List.php at line 155 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 40453. Found in file classes/Student.php at line 164 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 14850. Found in file classes/Course_Settings_Tabs.php at line 110 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 64853. Found in file classes/Utils.php at line 2273 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 64440. Found in file classes/Utils.php at line 2137 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 64585. Found in file classes/Utils.php at line 2195 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 64824. Found in file classes/Utils.php at line 2270 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 64833. Found in file classes/Utils.php at line 2271 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 18417. Found in file classes/Instructor.php at line 117 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 45642. Found in file classes/Tutor.php at line 291 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9206. Found in file classes/Course.php at line 405 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 21401. Found in file classes/Lesson.php at line 187 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 18608. Found in file classes/Instructor.php at line 160 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9395. Found in file classes/Course.php at line 450 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 85499. Found in file classes/WooCommerce.php at line 195 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 64842. Found in file classes/Utils.php at line 2272 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 75626. Found in file classes/Utils.php at line 6179 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 57679. Found in file classes/User.php at line 140 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 57572. Found in file classes/User.php at line 122 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 57688. Found in file classes/User.php at line 141 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8701. Found in file classes/Course.php at line 284 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 83019. Found in file classes/Withdraw.php at line 148 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 57670. Found in file classes/User.php at line 139 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 75637. Found in file classes/Utils.php at line 6180 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 75645. Found in file classes/Utils.php at line 6181 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 83199. Found in file classes/Withdraw.php at line 184 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 75716. Found in file classes/Utils.php at line 6201 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 11477. Found in file classes/Course.php at line 942 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9149. Found in file classes/Course.php at line 384 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 11459. Found in file classes/Course.php at line 938 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 11590. Found in file classes/Course.php at line 975 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 11468. Found in file classes/Course.php at line 940 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 52595. Found in file classes/Tutor_Setup.php at line 71 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 64798. Found in file classes/Utils.php at line 2265 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 40396. Found in file classes/Student.php at line 157 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 21454. Found in file classes/Lesson.php at line 197 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 20980. Found in file classes/Lesson.php at line 93 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 85490. Found in file classes/WooCommerce.php at line 193 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 40405. Found in file classes/Student.php at line 158 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 52510. Found in file classes/Tutor_Setup.php at line 54 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 20210. Found in file classes/Instructors_List.php at line 156 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 19338. Found in file classes/Instructor.php at line 289 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 11411. Found in file classes/Course.php at line 925 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 160025. Found in file views/pages/tools/status.php at line 43 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 45558. Found in file classes/Tutor.php at line 269 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 18597. Found in file classes/Instructor.php at line 159 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 18428. Found in file classes/Instructor.php at line 118 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 19037. Found in file classes/Instructor.php at line 233 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 4494. Found in file classes/Ajax.php at line 330 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 46868. Found in file classes/TutorEDD.php at line 124 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 45487. Found in file classes/Tutor.php at line 246 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 44213. Found in file classes/Tools.php at line 65 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 46859. Found in file classes/TutorEDD.php at line 123 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 61902. Found in file classes/Utils.php at line 1367 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 45480. Found in file classes/Tutor.php at line 243 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 20273. Found in file classes/Instructors_List.php at line 169 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 19055. Found in file classes/Instructor.php at line 235 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 11448. Found in file classes/Course.php at line 935 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 19249. Found in file classes/Instructor.php at line 271 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 85507. Found in file classes/WooCommerce.php at line 196 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 32286. Found in file classes/Quiz.php at line 667 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 11245. Found in file classes/Course.php at line 889 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 19066. Found in file classes/Instructor.php at line 236 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 19197. Found in file classes/Instructor.php at line 260 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 10713. Found in file classes/Course.php at line 770 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 19327. Found in file classes/Instructor.php at line 288 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 19189. Found in file classes/Instructor.php at line 259 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 19046. Found in file classes/Instructor.php at line 234 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 29794. Found in file classes/Quiz.php at line 114 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 22660. Found in file classes/Options.php at line 81 

[Art.15, Right to access] Data access is NONE_BUT_NOT_REQUIRED 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? True 

[main] Is access in violation? False 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? False 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        
