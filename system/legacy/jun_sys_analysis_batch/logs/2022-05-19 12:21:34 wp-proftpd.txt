Timeout in resolving values
Timeout in running neo4j query
Running Main.py on wp-proftpd

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:00.621149.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:01.047134.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 136 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.568700.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 1 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.572589.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 360 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:00.791739.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 14 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.674877.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.094356.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 261 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:03.455180.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 3717
Added 2945 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 4341
Added 624 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:01.156726.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/index.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/uninstall.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/wp-proftpd.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/admin/class-wp-proftpd-admin-dashboard.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/admin/class-wp-proftpd-admin-logs.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/admin/class-wp-proftpd-admin.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/admin/class-wp-proftpd-admin-settings.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/admin/class-wp-proftpd-user-settings.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/admin/index.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/admin/partials/wp-proftpd-admin-dashboard.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/admin/partials/wp-proftpd-admin-display.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/admin/partials/wp-proftpd-admin-logs.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/admin/partials/wp-proftpd-admin-settings-ftp.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/admin/partials/wp-proftpd-admin-settings-ftps.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/admin/partials/wp-proftpd-admin-settings-general.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/admin/partials/wp-proftpd-admin-settings.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/admin/partials/wp-proftpd-admin-settings-sftp.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/admin/partials/wp-proftpd-admin-sidebar.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/includes/class-wp-proftpd-activator.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/includes/class-wp-proftpd-deactivator.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/includes/class-wp-proftpd-i18n.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/includes/class-wp-proftpd-loader.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/includes/class-wp-proftpd.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/includes/index.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/public/class-wp-proftpd-public.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/public/index.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-proftpd/public/partials/wp-proftpd-public-display.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:02.498783.

136 PHP_REACHES edges created
1 REACHES edges created
360 PHP_REACHES edges created
14 CALLS edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
3206 PHP_REACHES edges created
624 PHP_REACHES edges created
4341 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 1369 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.280441.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 2 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:02.325939.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 99 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:02.630415.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 24 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.150645.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.144173.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.865333.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.009894.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.038933.

2 CALLS edges created
123 PHP_REACHES edges created
125 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 150 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.138160.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
15 SQL operations to process.
SELECT DATE(logdatetime) as dt, COUNT(*) AS operations FROM $wpdbproftpd_logs WHERE logdatetime IS NOT NULL AND logdatetime > date("Y-m-d H:i:s", strtotime("-"$timeframe)) GROUP BY dt ORDER BY dt ASC
SELECT DATE(logdatetime) as dt, COUNT(*) AS operations FROM $wpdbproftpd_logs WHERE logdatetime IS NOT NULL AND logdatetime > date("Y-m-d H:i:s", strtotime("-"$timeframe)) GROUP BY dt ORDER BY dt ASC
SQL command (SELECT DATE(logdatetime) as dt, COUNT(*) AS operations FROM $wpdbproftpd_logs WHERE logdatetime IS NOT NULL AND logdatetime > date("Y-m-d H:i:s", strtotime("-"$timeframe)) GROUP BY dt ORDER BY dt ASC) cannot be parsed correct.

			SELECT SQL_CALC_FOUND_ROWS str_replace(" , ", " ", implode(", ", $aColumns))
			FROM   wp_proftpd_logs
			
			substr_replace($sOrder, "", -2)
			LIMIT sanitize_text_field($request["start"]), sanitize_text_field($request["length"])
		
SQL command ( SELECT SQL_CALC_FOUND_ROWS str_replace(" , ", " ", implode(", ", $aColumns)) FROM wp_proftpd_logs substr_replace($sOrder, "", -2) LIMIT sanitize_text_field($request["start"]), sanitize_text_field($request["length"]) ) cannot be parsed correct.
TRUNCATE TABLE $wpdbproftpd_logs
SQL command (TRUNCATE TABLE $wpdbproftpd_logs) cannot be parsed correct.
CREATE TABLE IF NOT EXISTS  $wpdbproftpd_logs (
			logdatetime datetime DEFAULT CURRENT_TIMESTAMP,
			ip varchar(255) default NULL,
			username varchar(255) default NULL,
			operation text default NULL,
			PRIMARY KEY  (logdatetime)
		)
SQL command (CREATE TABLE IF NOT EXISTS $wpdbproftpd_logs ( logdatetime datetime DEFAULT CURRENT_TIMESTAMP, ip varchar(255) default NULL, username varchar(255) default NULL, operation text default NULL, PRIMARY KEY (logdatetime) )) cannot be parsed correct.
CREATE TABLE IF NOT EXISTS $wpdbproftpd_groups (
			groupname varchar(255) COLLATE utf8_general_ci NOT NULL,
			gid smallint(6) NOT NULL DEFAULT '5500',
			members varchar(16) COLLATE utf8_general_ci NOT NULL,
			PRIMARY KEY  (groupname)
		)
SQL command (CREATE TABLE IF NOT EXISTS $wpdbproftpd_groups ( groupname varchar(255) COLLATE utf8_general_ci NOT NULL, gid smallint(6) NOT NULL DEFAULT '5500', members varchar(16) COLLATE utf8_general_ci NOT NULL, PRIMARY KEY (groupname) )) cannot be parsed correct.

			DROP PROCEDURE IF EXISTS $wpdbproftpd_get_ftp_user_by_username;
		
SQL command ( DROP PROCEDURE IF EXISTS $wpdbproftpd_get_ftp_user_by_username; ) cannot be parsed correct.

			CREATE PROCEDURE $wpdbproftpd_get_ftp_user_by_username
			(
				IN username VARCHAR(60),
				IN type VARCHAR(5)
			)
			BEGIN
				CREATE TEMPORARY TABLE tmp(
					ID int(11) NOT NULL,
					user_login varchar(60) default NULL,
					user_pass varchar(60) default NULL,
					uid int(11) default NULL,
					gid int(11) default NULL,
					homedir varchar(255) default NULL,
					shell varchar(255) default NULL,
					ftp int(1) default NULL,
					ftps int(1) default NULL,
					sftp int(1) default NULL,
					enabled int(1) default NULL
				) engine=memory
					SELECT
						u.ID,
						u.user_login as userid,
						u.user_pass as passwd,
						Min( CASE WHEN m.meta_key = 'wp-proftpd-uid' THEN m.meta_value ELSE NULL End ) AS uid,
						Min( CASE WHEN m.meta_key = 'wp-proftpd-gid' THEN m.meta_value ELSE NULL End ) AS gid,
						Min( CASE WHEN m.meta_key = 'wp-proftpd-home-directory' THEN m.meta_value ELSE NULL End ) AS homedir,
						Min( CASE WHEN m.meta_key = 'wp-proftpd-shell' THEN m.meta_value ELSE NULL End ) AS shell,
						Min( CASE WHEN m.meta_key = 'wp-proftpd-ftp' THEN m.meta_value ELSE NULL End ) AS ftp,
						Min( CASE WHEN m.meta_key = 'wp-proftpd-ftps' THEN m.meta_value ELSE NULL End ) AS ftps,
						Min( CASE WHEN m.meta_key = 'wp-proftpd-sftp' THEN m.meta_value ELSE NULL End ) AS sftp,
						Min( CASE WHEN m.meta_key = 'wp-proftpd-enabled' THEN m.meta_value ELSE NULL End ) AS enabled
					FROM wp_users u 
					JOIN wp_usermeta AS m ON m.user_id = u.ID;
					
				SELECT userid, passwd, uid, gid, homedir, shell
				FROM tmp
				WHERE userid = username COLLATE utf8mb4_unicode_520_ci 
					AND enabled = 1 
					AND CASE 
						WHEN type = 'ftp' THEN ftp = 1
						WHEN type = 'ftps' THEN ftps = 1
						WHEN type = 'sftp' THEN sftp = 1
						END;

				DROP TEMPORARY TABLE IF EXISTS tmp;
				
			END
		
SQL command ( CREATE PROCEDURE $wpdbproftpd_get_ftp_user_by_username ( IN username VARCHAR(60), IN type VARCHAR(5) ) BEGIN CREATE TEMPORARY TABLE tmp( ID int(11) NOT NULL, user_login varchar(60) default NULL, user_pass varchar(60) default NULL, uid int(11) default NULL, gid int(11) default NULL, homedir varchar(255) default NULL, shell varchar(255) default NULL, ftp int(1) default NULL, ftps int(1) default NULL, sftp int(1) default NULL, enabled int(1) default NULL ) engine=memory SELECT u.ID, u.user_login as userid, u.user_pass as passwd, Min( CASE WHEN m.meta_key = 'wp-proftpd-uid' THEN m.meta_value ELSE NULL End ) AS uid, Min( CASE WHEN m.meta_key = 'wp-proftpd-gid' THEN m.meta_value ELSE NULL End ) AS gid, Min( CASE WHEN m.meta_key = 'wp-proftpd-home-directory' THEN m.meta_value ELSE NULL End ) AS homedir, Min( CASE WHEN m.meta_key = 'wp-proftpd-shell' THEN m.meta_value ELSE NULL End ) AS shell, Min( CASE WHEN m.meta_key = 'wp-proftpd-ftp' THEN m.meta_value ELSE NULL End ) AS ftp, Min( CASE WHEN m.meta_key = 'wp-proftpd-ftps' THEN m.meta_value ELSE NULL End ) AS ftps, Min( CASE WHEN m.meta_key = 'wp-proftpd-sftp' THEN m.meta_value ELSE NULL End ) AS sftp, Min( CASE WHEN m.meta_key = 'wp-proftpd-enabled' THEN m.meta_value ELSE NULL End ) AS enabled FROM wp_users u JOIN wp_usermeta AS m ON m.user_id = u.ID; SELECT userid, passwd, uid, gid, homedir, shell FROM tmp WHERE userid = username COLLATE utf8mb4_unicode_520_ci AND enabled = 1 AND CASE WHEN type = 'ftp' THEN ftp = 1 WHEN type = 'ftps' THEN ftps = 1 WHEN type = 'sftp' THEN sftp = 1 END; DROP TEMPORARY TABLE IF EXISTS tmp; END ) cannot be parsed correct.

			DROP PROCEDURE IF EXISTS $wpdbproftpd_update_count;
		
SQL command ( DROP PROCEDURE IF EXISTS $wpdbproftpd_update_count; ) cannot be parsed correct.

			CREATE PROCEDURE $wpdbproftpd_update_count
			(
				IN username VARCHAR(60)
			)
			BEGIN
				DECLARE userid INT(11);
				DECLARE usercount INT(11);
				DECLARE useraccessed VARCHAR(255);
				
				SELECT id INTO userid
				FROM $wpdbusers 
				WHERE user_login = username COLLATE utf8mb4_unicode_520_ci;
				
				SELECT CAST(meta_value as UNSIGNED) INTO usercount
				FROM $wpdbusermeta
				WHERE meta_key = 'wp-proftpd-count'
				AND user_id = userid;
				
				IF usercount IS NULL OR usercount='' THEN
					INSERT INTO $wpdbusermeta (umeta_id, user_id, meta_key, meta_value)
					VALUES ('', userid, 'wp-proftpd-count', '1');
				ELSE
					UPDATE $wpdbusermeta
					SET meta_value = usercount + 1 
					WHERE meta_key = 'wp-proftpd-count' COLLATE utf8mb4_unicode_520_ci 
					AND user_id = userid;
				END IF;
				
				SELECT meta_value INTO useraccessed
				FROM $wpdbusermeta
				WHERE meta_key = 'wp-proftpd-last-accessed'
				AND user_id = userid;
				
				IF useraccessed IS NULL OR useraccessed='' THEN
					INSERT INTO $wpdbusermeta (umeta_id, user_id, meta_key, meta_value)
					VALUES ('', userid, 'wp-proftpd-last-accessed', NOW());
				ELSE
					UPDATE $wpdbusermeta
					SET meta_value = NOW() 
					WHERE meta_key = 'wp-proftpd-last-accessed' COLLATE utf8mb4_unicode_520_ci 
					AND user_id = userid;
				END IF;
			END
		
SQL command ( CREATE PROCEDURE $wpdbproftpd_update_count ( IN username VARCHAR(60) ) BEGIN DECLARE userid INT(11); DECLARE usercount INT(11); DECLARE useraccessed VARCHAR(255); SELECT id INTO userid FROM $wpdbusers WHERE user_login = username COLLATE utf8mb4_unicode_520_ci; SELECT CAST(meta_value as UNSIGNED) INTO usercount FROM $wpdbusermeta WHERE meta_key = 'wp-proftpd-count' AND user_id = userid; IF usercount IS NULL OR usercount='' THEN INSERT INTO $wpdbusermeta (umeta_id, user_id, meta_key, meta_value) VALUES ('', userid, 'wp-proftpd-count', '1'); ELSE UPDATE $wpdbusermeta SET meta_value = usercount + 1 WHERE meta_key = 'wp-proftpd-count' COLLATE utf8mb4_unicode_520_ci AND user_id = userid; END IF; SELECT meta_value INTO useraccessed FROM $wpdbusermeta WHERE meta_key = 'wp-proftpd-last-accessed' AND user_id = userid; IF useraccessed IS NULL OR useraccessed='' THEN INSERT INTO $wpdbusermeta (umeta_id, user_id, meta_key, meta_value) VALUES ('', userid, 'wp-proftpd-last-accessed', NOW()); ELSE UPDATE $wpdbusermeta SET meta_value = NOW() WHERE meta_key = 'wp-proftpd-last-accessed' COLLATE utf8mb4_unicode_520_ci AND user_id = userid; END IF; END ) cannot be parsed correct.

			DROP procedure IF EXISTS $wpdbproftpd_insert_log;
		
SQL command ( DROP procedure IF EXISTS $wpdbproftpd_insert_log; ) cannot be parsed correct.

			CREATE PROCEDURE $wpdbproftpd_insert_log
			(
				IN varip VARCHAR(60),
				IN varusername VARCHAR(60),
				IN varoperation TEXT
			)
			BEGIN
				INSERT INTO $wpdbproftpd_logs (logdatetime, ip, username, operation) VALUES (NOW(), varip, varusername, varoperation);
			END
		
SQL command ( CREATE PROCEDURE $wpdbproftpd_insert_log ( IN varip VARCHAR(60), IN varusername VARCHAR(60), IN varoperation TEXT ) BEGIN INSERT INTO $wpdbproftpd_logs (logdatetime, ip, username, operation) VALUES (NOW(), varip, varusername, varoperation); END ) cannot be parsed correct.

			DROP procedure IF EXISTS $wpdbproftpd_get_variable;
		
SQL command ( DROP procedure IF EXISTS $wpdbproftpd_get_variable; ) cannot be parsed correct.

			CREATE PROCEDURE $wpdbproftpd_get_variable
			(
				IN variable VARCHAR(60)
			)
			BEGIN
				DECLARE options text DEFAULT '';
				
				SELECT option_value
				INTO options
				FROM $wpdboptions 
				WHERE option_name = 'wp-proftpd-settings';
				
				CALL $wpdbproftpd_get_serialized_value_by_key(options, variable);
				
			END
		
SQL command ( CREATE PROCEDURE $wpdbproftpd_get_variable ( IN variable VARCHAR(60) ) BEGIN DECLARE options text DEFAULT ''; SELECT option_value INTO options FROM $wpdboptions WHERE option_name = 'wp-proftpd-settings'; CALL $wpdbproftpd_get_serialized_value_by_key(options, variable); END ) cannot be parsed correct.

			DROP PROCEDURE IF EXISTS $wpdbproftpd_get_serialized_value_by_key;
		
SQL command ( DROP PROCEDURE IF EXISTS $wpdbproftpd_get_serialized_value_by_key; ) cannot be parsed correct.

			CREATE PROCEDURE $wpdbproftpd_get_serialized_value_by_key
			(
				IN _input_string TEXT, 
				IN _key TEXT
			
			) 
			BEGIN
				/*
					Function returns last value from serialized array by specific string key.
					
					@author Adam WnÄk (http://kredyty-chwilowki.pl/)
					@licence MIT
					@version 1.2
				*/
				-- required variables
				DECLARE __output_part,__output,__extra_byte_counter,__extra_byte_number,__value_type,__array_part_temp TEXT;
				DECLARE __value_length,__char_ord,__start,__char_counter,__non_multibyte_length,__array_close_bracket_counter,__array_open_bracket_counter INT SIGNED;
				SET __output := NULL;
				
				-- check if key exists in input
				IF LOCATE(CONCAT('s:',LENGTH(_key),':"',_key,'";'), _input_string) != 0 THEN
				
					-- cut from right to key		
					SET __output_part := SUBSTRING_INDEX(_input_string,CONCAT('s:',LENGTH(_key),':"',_key,'";'),-1);
					
					-- get type of value [s,a,b,O,i,d]
					SET __value_type := SUBSTRING(SUBSTRING(__output_part, 1, CHAR_LENGTH(SUBSTRING_INDEX(__output_part,';',1))), 1, 1);
					
					-- custom cut depends of value type
					CASE 	
					WHEN __value_type = 'a' THEN
						-- we get proper array by counting open and close brackets
						SET __array_open_bracket_counter := 1;
						SET __array_close_bracket_counter := 0;
						-- without first open { so counter is 1
						SET __array_part_temp := SUBSTRING(__output_part FROM LOCATE('{',__output_part)+1);
						
						-- we start from first { and counting open and closet brackets until we find last closing one
						WHILE (__array_open_bracket_counter > 0 OR LENGTH(__array_part_temp) = 0) DO
							-- next { exists and its before closest }
							IF LOCATE('{',__array_part_temp) > 0 AND (LOCATE('{',__array_part_temp) < LOCATE('}',__array_part_temp)) THEN
								-- cut from found { + 1, to the end
								SET __array_open_bracket_counter := __array_open_bracket_counter + 1;
								SET __array_part_temp := SUBSTRING(__array_part_temp FROM LOCATE('{',__array_part_temp) + 1);					
							ELSE
								-- cut from found } + 1, to the end
								SET __array_open_bracket_counter := __array_open_bracket_counter - 1;
								SET __array_close_bracket_counter := __array_close_bracket_counter + 1;
								SET __array_part_temp := SUBSTRING(__array_part_temp FROM LOCATE('}',__array_part_temp) + 1);					
							END IF;
						END WHILE;
						-- final array is from beginning to [__array_close_bracket_counter] count of closing }
						SET __output := CONCAT(SUBSTRING_INDEX(__output_part,'}',__array_close_bracket_counter),'}');
						
					WHEN __value_type = 'd' OR __value_type = 'i' OR __value_type = 'b' THEN
						
						-- from left to first appearance of }, from right to first :
						SET __output := SUBSTRING_INDEX(SUBSTRING_INDEX(__output_part,';',1),':',-1);
						
					WHEN __value_type = 'O' THEN			
						
						-- from left to first appearance of ;} but without it so we add it back
						SET __output := CONCAT(SUBSTRING_INDEX(__output_part,';}',1),';}');
						
					WHEN __value_type = 'N' THEN 
						-- when we have null return empty string
						SET __output := NULL;		
					ELSE
						
						-- get serialized length
						SET __value_length := SUBSTRING_INDEX(SUBSTRING_INDEX(SUBSTRING_INDEX(__output_part, ':', 2),':',-1),';',1);
									
						SET __output_part := SUBSTRING(__output_part, 5+LENGTH(__value_length));
						
						SET __char_counter := 1;
						
						-- real length to cut
						SET __non_multibyte_length := 0;
						
						SET __start := 0;
						-- check every char until [__value_length]
						WHILE __start < __value_length DO
						
							SET __char_ord := ORD(SUBSTR(__output_part,__char_counter,1));
							
							SET __extra_byte_number := 0;
							SET __extra_byte_counter := FLOOR(__char_ord / 256);
							
							-- we detect multibytechars and count them as one to substring correctly
							-- when we now how many chars make multibytechar we can use it to count what is non multibyte length of our value
							WHILE __extra_byte_counter > 0 DO
								SET __extra_byte_counter := FLOOR(__extra_byte_counter / 256);
								SET __extra_byte_number := __extra_byte_number+1;
							END WHILE;
							
							-- to every char i add extra multibyte number (for non multibyte char its 0)
							SET __start := __start + 1 + __extra_byte_number;			
							SET __char_counter := __char_counter + 1;
							SET __non_multibyte_length := __non_multibyte_length +1;
											
						END WHILE;
						
						SET __output :=  SUBSTRING(__output_part,1,__non_multibyte_length);
								
					END CASE;		
				END IF;
				SELECT __output;
				END
		
SQL command ( CREATE PROCEDURE $wpdbproftpd_get_serialized_value_by_key ( IN _input_string TEXT, IN _key TEXT ) BEGIN /* Function returns last value from serialized array by specific string key. @author Adam WnÄk (http://kredyty-chwilowki.pl/) @licence MIT @version 1.2 */ -- required variables DECLARE __output_part,__output,__extra_byte_counter,__extra_byte_number,__value_type,__array_part_temp TEXT; DECLARE __value_length,__char_ord,__start,__char_counter,__non_multibyte_length,__array_close_bracket_counter,__array_open_bracket_counter INT SIGNED; SET __output := NULL; -- check if key exists in input IF LOCATE(CONCAT('s:',LENGTH(_key),':"',_key,'";'), _input_string) != 0 THEN -- cut from right to key SET __output_part := SUBSTRING_INDEX(_input_string,CONCAT('s:',LENGTH(_key),':"',_key,'";'),-1); -- get type of value [s,a,b,O,i,d] SET __value_type := SUBSTRING(SUBSTRING(__output_part, 1, CHAR_LENGTH(SUBSTRING_INDEX(__output_part,';',1))), 1, 1); -- custom cut depends of value type CASE WHEN __value_type = 'a' THEN -- we get proper array by counting open and close brackets SET __array_open_bracket_counter := 1; SET __array_close_bracket_counter := 0; -- without first open { so counter is 1 SET __array_part_temp := SUBSTRING(__output_part FROM LOCATE('{',__output_part)+1); -- we start from first { and counting open and closet brackets until we find last closing one WHILE (__array_open_bracket_counter > 0 OR LENGTH(__array_part_temp) = 0) DO -- next { exists and its before closest } IF LOCATE('{',__array_part_temp) > 0 AND (LOCATE('{',__array_part_temp) < LOCATE('}',__array_part_temp)) THEN -- cut from found { + 1, to the end SET __array_open_bracket_counter := __array_open_bracket_counter + 1; SET __array_part_temp := SUBSTRING(__array_part_temp FROM LOCATE('{',__array_part_temp) + 1); ELSE -- cut from found } + 1, to the end SET __array_open_bracket_counter := __array_open_bracket_counter - 1; SET __array_close_bracket_counter := __array_close_bracket_counter + 1; SET __array_part_temp := SUBSTRING(__array_part_temp FROM LOCATE('}',__array_part_temp) + 1); END IF; END WHILE; -- final array is from beginning to [__array_close_bracket_counter] count of closing } SET __output := CONCAT(SUBSTRING_INDEX(__output_part,'}',__array_close_bracket_counter),'}'); WHEN __value_type = 'd' OR __value_type = 'i' OR __value_type = 'b' THEN -- from left to first appearance of }, from right to first : SET __output := SUBSTRING_INDEX(SUBSTRING_INDEX(__output_part,';',1),':',-1); WHEN __value_type = 'O' THEN -- from left to first appearance of ;} but without it so we add it back SET __output := CONCAT(SUBSTRING_INDEX(__output_part,';}',1),';}'); WHEN __value_type = 'N' THEN -- when we have null return empty string SET __output := NULL; ELSE -- get serialized length SET __value_length := SUBSTRING_INDEX(SUBSTRING_INDEX(SUBSTRING_INDEX(__output_part, ':', 2),':',-1),';',1); SET __output_part := SUBSTRING(__output_part, 5+LENGTH(__value_length)); SET __char_counter := 1; -- real length to cut SET __non_multibyte_length := 0; SET __start := 0; -- check every char until [__value_length] WHILE __start < __value_length DO SET __char_ord := ORD(SUBSTR(__output_part,__char_counter,1)); SET __extra_byte_number := 0; SET __extra_byte_counter := FLOOR(__char_ord / 256); -- we detect multibytechars and count them as one to substring correctly -- when we now how many chars make multibytechar we can use it to count what is non multibyte length of our value WHILE __extra_byte_counter > 0 DO SET __extra_byte_counter := FLOOR(__extra_byte_counter / 256); SET __extra_byte_number := __extra_byte_number+1; END WHILE; -- to every char i add extra multibyte number (for non multibyte char its 0) SET __start := __start + 1 + __extra_byte_number; SET __char_counter := __char_counter + 1; SET __non_multibyte_length := __non_multibyte_length +1; END WHILE; SET __output := SUBSTRING(__output_part,1,__non_multibyte_length); END CASE; END IF; SELECT __output; END ) cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [380, 829, 1024, 4434, 4460, 4485, 4510, 4535, 4595, 4620, 4650, 4675, 4710, 4735, 4760]
Added 0 SQL nodes. 0 out of 15 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:05.168534.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'json_encode($output)'' cannot be parsed correct.
HTML code '$'<div class="notice notice-error">
				 <p>ProFTPd is not installed.  Visit <a href="admin_url("admin.php?page=" . $this->plugin_name . "-installation")">here</a> to configure!</p>
			 </div'' cannot be parsed correct.
HTML code '$'$options_sftp_display_login'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, "wp-proftpd-uid", true)'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, "wp-proftpd-gid", true)'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, "wp-proftpd-home-directory", true)'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, "wp-proftpd-shell", true)'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, "wp-proftpd-count", true)0'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format") . " " . get_option("time_format") . " (P)", strtotime($last_accessed))Never'' cannot be parsed correct.
HTML code '$'$this_plugin_name'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, "wp-proftpd-last-accessed", true)Never'' cannot be parsed correct.
HTML code '$'$options_ftp_display_login'' cannot be parsed correct.
HTML code '$'$options_ftps_display_login'' cannot be parsed correct.
HTML code '$'$options_max_instances'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'$this'' cannot be parsed correct.
HTML code '$'<div class="error"><p>Sorry, but WP Proftpd requires WP Password bcrypt to be installed and active.</p></div>'' cannot be parsed correct.
HTML code '$'<div class="notice notice-error">
				 <p>ProFTPd is not installed.  Configure ProFTPd server settings and follow the installation instructions below!</p>
			 </div>'' cannot be parsed correct.
HTML code '$'" /></td>
			</tr>
			<tr>
				<th><label for="'' cannot be parsed correct.
HTML code '$'" /></td>
			</tr>
			<tr>
				<th><label for="'' cannot be parsed correct.
HTML code '$'" /></td>
			</tr>
			<tr>
				<th><label for="'' cannot be parsed correct.
HTML code '$'" /></td>
			</tr>
			<tr>
				<th><label for="'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:05.751132.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.055566.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 0 do_action/apply_filters calls and 5 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:00.374547.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running DbaseDetector
### Start running FrontBaseDetector
### Finish running DbplusDetector
### Start running HashDetector
### Finish running FileProDetector
### Start running IBMDb2Detector
### Finish running FirebirdInterBaseDetector
### Start running InformixDetector
### Finish running CubridDetector
### Start running IngresDetector
### Finish running FrontBaseDetector
### Start running maxdbDetector
### Finish running InformixDetector
### Start running MongoDbDetector
### Finish running IngresDetector
### Start running MongoDetector
### Finish running MongoDetector
### Start running MsqlDetector
### Finish running IBMDb2Detector
### Start running MySQLDetector
### Finish running MongoDbDetector
### Start running MySQLiDetector
### Finish running MsqlDetector
### Start running Oci8Detector
### Finish running MySQLDetector
### Start running OpenSSLDetector
### Finish running Oci8Detector
### Start running ParadoxDetector
### Finish running ArrayElementDetector
### Start running PasswordHashingDetector
### Finish running ParadoxDetector
### Start running PhpCurlDetector
### Finish running HashDetector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running PhpCurlDetector
### Start running PHPRetrievalDetector
### Finish running PasswordHashingDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PHPIncludedDetector
### Start running PhpVarDetector
### Finish running OpenSSLDetector
### Start running PostgreSQLDetector
### Finish running PhpVarDetector
### Start running PropertyDetector
### Finish running PostgreSQLDetector
### Start running Sqlite3Detector
### Finish running PHPStorageDetector
### Start running SqliteDetector
### Finish running PHPRetrievalDetector
### Start running SqlServerDetector
### Finish running SqliteDetector
### Start running SybaseDetector
### Finish running SybaseDetector
### Start running TokyoTyrantDetector
### Finish running Sqlite3Detector
### Start running UserInputDetector
### Finish running TokyoTyrantDetector
### Start running VariableDetector
### Finish running PropertyDetector
### Start running WordpressHashingFnDetector
### Finish running MySQLiDetector
### Start running WordPressRemoteDetector
### Finish running maxdbDetector
### Start running WordPressRetrievalDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressStorageDetector
### Finish running SqlServerDetector
### Start running WP_UserDetector
### Finish running WordPressRemoteDetector
### Start running GenericDatabaseUsageDetector
### Finish running WP_UserDetector
### Start running GenericEncryptionDetector
### Finish running GenericEncryptionDetector
### Start running DeletionDetector
### Finish running GenericDatabaseUsageDetector
### Start running UninstallDetector
### Finish running VariableDetector
### Finish running UserInputDetector
### Finish running UninstallDetector
### Finish running DeletionDetector
### Finish running WordPressStorageDetector
### Finish running WordPressRetrievalDetector
### Finished running detectors
admin/class-wp-proftpd-admin-logs.php:198
  - object property '$aRow->username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta 

admin/class-wp-proftpd-admin-dashboard.php:65
  - RETRIEVAL call to get_users(["meta_key" => "wp-proftpd-enabled", "meta_value" => "1"]) alters data types {'user', 'user_meta'}. Passed arguments: 0: $args (array). Returns (array).
  - Data types: user, user_meta
admin/class-wp-proftpd-admin-dashboard.php:68
  - RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-count", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin/class-wp-proftpd-admin-dashboard.php:87
  - RETRIEVAL call to get_users(["meta_key" => "wp-proftpd-enabled", "meta_value" => "1"]) alters data types {'user', 'user_meta'}. Passed arguments: 0: $args (array). Returns (array).
  - Data types: user, user_meta
admin/class-wp-proftpd-admin-dashboard.php:90
  - RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-count", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin/class-wp-proftpd-admin-settings.php:131
  - RETRIEVAL call to get_option($this->plugin_name . "-settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/class-wp-proftpd-user-settings.php:84
  - RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-enabled", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:85
  - RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-uid", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:86
  - RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-gid", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:87
  - RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-home-directory", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:88
  - RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-shell", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:89
  - RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-ftp", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:90
  - RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-ftps", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:91
  - RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-sftp", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:92
  - RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-count", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:93
  - RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-last-accessed", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:94
  - RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-last-modified", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:132
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/class-wp-proftpd-user-settings.php:132
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/wp-proftpd-admin-settings.php:23
  - RETRIEVAL call to get_option($this->plugin_name . "-settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option 

admin/class-wp-proftpd-user-settings.php:73
  - STORAGE call to update_user_meta($user_id, "wp-proftpd-enabled", $enabled) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:74
  - STORAGE call to update_user_meta($user_id, "wp-proftpd-uid", $uid) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:75
  - STORAGE call to update_user_meta($user_id, "wp-proftpd-gid", $gid) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:76
  - STORAGE call to update_user_meta($user_id, "wp-proftpd-home-directory", $home_directory) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:77
  - STORAGE call to update_user_meta($user_id, "wp-proftpd-shell", $shell) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:78
  - STORAGE call to update_user_meta($user_id, "wp-proftpd-ftp", $ftp) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:79
  - STORAGE call to update_user_meta($user_id, "wp-proftpd-ftps", $ftps) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
admin/class-wp-proftpd-user-settings.php:80
  - STORAGE call to update_user_meta($user_id, "wp-proftpd-sftp", $sftp) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta 

By data type:
option
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option($this->plugin_name . "-settings") - {'option'}
	WordPressRetrievalDetector.get_option($this->plugin_name . "-settings") - {'option'}
user
	WordPressRetrievalDetector.get_users(["meta_key" => "wp-proftpd-enabled", "meta_value" => "1"]) - {'user', 'user_meta'}
	WordPressRetrievalDetector.get_users(["meta_key" => "wp-proftpd-enabled", "meta_value" => "1"]) - {'user', 'user_meta'}
	PropertyDetector.(unknown) - {'user', 'user_meta'}
user_meta
	WordPressRetrievalDetector.get_user_meta($user->ID, "wp-proftpd-enabled", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "wp-proftpd-home-directory", true) - {'user_meta'}
	WordPressRetrievalDetector.get_users(["meta_key" => "wp-proftpd-enabled", "meta_value" => "1"]) - {'user', 'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "wp-proftpd-shell", $shell) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "wp-proftpd-count", true) - {'user_meta'}
	WordPressRetrievalDetector.get_users(["meta_key" => "wp-proftpd-enabled", "meta_value" => "1"]) - {'user', 'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "wp-proftpd-gid", $gid) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "wp-proftpd-uid", true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "wp-proftpd-ftps", $ftps) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "wp-proftpd-count", true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "wp-proftpd-home-directory", $home_directory) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "wp-proftpd-gid", true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "wp-proftpd-sftp", $sftp) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "wp-proftpd-shell", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "wp-proftpd-last-accessed", true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "wp-proftpd-enabled", $enabled) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "wp-proftpd-count", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "wp-proftpd-ftps", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "wp-proftpd-sftp", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "wp-proftpd-ftp", true) - {'user_meta'}
	PropertyDetector.(unknown) - {'user', 'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "wp-proftpd-ftp", $ftp) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "wp-proftpd-uid", $uid) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "wp-proftpd-last-modified", true) - {'user_meta'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:08.873158.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 120 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.238002.

120 STORE_REACHES edges created
120 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 91 nodes as PERSONAL
In total, tainted 91 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
In total, tainted 0 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:02.318024.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:00:51.857737!
object property '$aRow->username' of personal types {'user', 'user_meta'} is found.,,None
RETRIEVAL call to get_users(["meta_key" => "wp-proftpd-enabled", "meta_value" => "1"]) alters data types {'user', 'user_meta'}. Passed arguments: 0: $args (array). Returns (array).,None,None
RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-count", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_users(["meta_key" => "wp-proftpd-enabled", "meta_value" => "1"]) alters data types {'user', 'user_meta'}. Passed arguments: 0: $args (array). Returns (array).,None,None
RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-count", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option($this->plugin_name . "-settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-enabled", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-uid", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-gid", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-home-directory", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-shell", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-ftp", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-ftps", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-sftp", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-count", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-last-accessed", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "wp-proftpd-last-modified", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option($this->plugin_name . "-settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
STORAGE call to update_user_meta($user_id, "wp-proftpd-enabled", $enabled) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "wp-proftpd-uid", $uid) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "wp-proftpd-gid", $gid) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "wp-proftpd-home-directory", $home_directory) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "wp-proftpd-shell", $shell) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "wp-proftpd-ftp", $ftp) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "wp-proftpd-ftps", $ftps) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "wp-proftpd-sftp", $sftp) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_user_meta($user_id, "wp-proftpd-shell", $shell)", found in file admin/class-wp-proftpd-user-settings.php at line 77. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($user_id, "wp-proftpd-gid", $gid)", found in file admin/class-wp-proftpd-user-settings.php at line 75. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($user_id, "wp-proftpd-ftps", $ftps)", found in file admin/class-wp-proftpd-user-settings.php at line 79. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($user_id, "wp-proftpd-home-directory", $home_directory)", found in file admin/class-wp-proftpd-user-settings.php at line 76. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($user_id, "wp-proftpd-sftp", $sftp)", found in file admin/class-wp-proftpd-user-settings.php at line 80. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($user_id, "wp-proftpd-enabled", $enabled)", found in file admin/class-wp-proftpd-user-settings.php at line 73. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($user_id, "wp-proftpd-ftp", $ftp)", found in file admin/class-wp-proftpd-user-settings.php at line 78. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($user_id, "wp-proftpd-uid", $uid)", found in file admin/class-wp-proftpd-user-settings.php at line 74. 

[has_storage] Storage check is WP 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "wp-proftpd-shell", $shell) does not have corresponding deletion method. Storage method found in file admin/class-wp-proftpd-user-settings.php at line 77. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "wp-proftpd-gid", $gid) does not have corresponding deletion method. Storage method found in file admin/class-wp-proftpd-user-settings.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "wp-proftpd-ftps", $ftps) does not have corresponding deletion method. Storage method found in file admin/class-wp-proftpd-user-settings.php at line 79. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "wp-proftpd-home-directory", $home_directory) does not have corresponding deletion method. Storage method found in file admin/class-wp-proftpd-user-settings.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "wp-proftpd-sftp", $sftp) does not have corresponding deletion method. Storage method found in file admin/class-wp-proftpd-user-settings.php at line 80. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "wp-proftpd-enabled", $enabled) does not have corresponding deletion method. Storage method found in file admin/class-wp-proftpd-user-settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "wp-proftpd-ftp", $ftp) does not have corresponding deletion method. Storage method found in file admin/class-wp-proftpd-user-settings.php at line 78. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "wp-proftpd-uid", $uid) does not have corresponding deletion method. Storage method found in file admin/class-wp-proftpd-user-settings.php at line 74. 

[Art.17, Right to erasure] Deletion access is NONE 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 3116. Found in file admin/class-wp-proftpd-user-settings.php at line 77 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 3098. Found in file admin/class-wp-proftpd-user-settings.php at line 75 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 3134. Found in file admin/class-wp-proftpd-user-settings.php at line 79 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 3107. Found in file admin/class-wp-proftpd-user-settings.php at line 76 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 3143. Found in file admin/class-wp-proftpd-user-settings.php at line 80 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 3080. Found in file admin/class-wp-proftpd-user-settings.php at line 73 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 3125. Found in file admin/class-wp-proftpd-user-settings.php at line 78 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 3089. Found in file admin/class-wp-proftpd-user-settings.php at line 74 

[Art.15, Right to access] Data access is NONE_BUT_NOT_REQUIRED 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? True 

[main] Is access in violation? False 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? False 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        

##################
### Fix Report ###
##################

############################
# Data Deletion Fix Report #
############################

This report suggests fixes to comply with the GDPR Art. 17, Right to erasure (https://gdpr-info.eu/art-17-gdpr/). The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/adding-the-personal-data-eraser-to-your-plugin/ for more details.

1) Implement a function that deletes all the user data collected in the plugin. Sample code:


/**
* Removes all collected data of a user.
*
* @param string $email_address   email address to manipulate
* @param int    $page            pagination
*
* @return array
*/
function wp-proftpd_remove_data( $email_address, $page = 1 ) {
    
    $page = (int) $page;


    //TODO: Delete the user data that was stored using Wordpress functions

    //Below is the sample code for deleting user meta and may need to be modified to suit the plugin.
    $user_id = get_user_by('email', $email_address)
    $key = 'email' //Sample user meta key
    if ( $customer->user_id > 0 ) {
        //Delete user meta data by $key
        delete_user_meta( $user_id, $key );
    }
        



    // Tell core if we have more data to delete still
    $done = true;
    return array(
        'items_removed'  => $items_removed, // true if collected data of a user is being deleted
        'items_retained' => $items_retained, // true if certain data needs to be retained
        'messages'       => sprintf( __( 'Data of user with email %s successfully deleted.', 'wp-proftpd' ), $email_address ), // Put messages for data removal
        'done'           => $done, // true if all the removal processes are done (all data of the user is removed)
    );
}
        

2) Hook the deletion function to the Wordpress's Personal Data Removal tool


/**
* Registers all data erasers.
*
* @param array $exporters
*
* @return mixed
*/
function wp-proftpd_register_privacy_erasers( $erasers ) {
    $erasers['my-plugin-slug'] = array(
        'eraser_friendly_name' => __( '<eraser name>', 'wp-proftpd' ),
        'callback'             => 'wp-proftpd_remove_data',
    );
    return $erasers;
}
        

add_filter( 'wp_privacy_personal_data_erasers', 'wp-proftpd_register_privacy_erasers' );
        

        

#############################
# Privacy Policy Fix Report #
#############################

This report suggests fixes to comply with the GDPR Art. 13 (https://gdpr-info.eu/art-13-gdpr/) through including a privacy notice. The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/suggesting-text-for-the-site-privacy-policy/ for more details.

1) Implement a function that includes the privacy policy for the plugin and provide it to wordpress through wp_add_privacy_policy_content(). Sample code:


/**
* Adds a privacy policy statement.
*/
function wp-proftpd_add_privacy_policy_content() {
    if ( ! function_exists( 'wp_add_privacy_policy_content' ) ) {
        return;
    }
    //TODO: modify the content below to include the privacy policy for the plugin.
    $content = '<p class="privacy-policy-tutorial">' . __( 'Some introductory content for the suggested text.', 'wp-proftpd' ) . '</p>'
            . '<strong class="privacy-policy-tutorial">' . __( 'Suggested Text:', 'wp-proftpd' ) . '</strong> '
            . sprintf(
                __( 'When you leave a comment on this site, we send your name, email address, IP address and comment text to example.com. Example.com does not retain your personal data. The example.com privacy policy is <a href="%1$s" target="_blank">here</a>.', 'wp-proftpd' ),
                'https://example.com/privacy-policy'
            );
    wp_add_privacy_policy_content( 'wp-proftpd', wp_kses_post( wpautop( $content, false ) ) );
}
        

2) Hook the privacy policy function to the Wordpress's admin initialization action.


add_action( 'admin_init', 'wp-proftpd_add_privacy_policy_content' );
        

        


Disclaimer: The sample code provided above is only for reference and does not guarantee GDPR compliance. The recommended list of data to delete/export may not be comprehensive. 
        
Done.
