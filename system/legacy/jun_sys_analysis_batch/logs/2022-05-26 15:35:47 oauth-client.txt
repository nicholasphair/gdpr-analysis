Timeout in resolving values
Timeout in running neo4j query
Running Main.py on oauth-client

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:02.698275.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:01.851589.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 15 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.376262.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 1 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.731497.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 1272 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:01.121442.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 8 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.797870.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.151094.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 658 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:24.909533.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 8878
Added 6924 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 54254
Added 45376 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:05.440221.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/oauth-client/class-customer.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/oauth-client/class-mo-oauth-widget.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/oauth-client/manage-avatar.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/oauth-client/mo_oauth_settings_page.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/oauth-client/mo_oauth_settings.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/oauth-client/uninstall.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/oauth-client/addons/class-mo-oauth-client-addons.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/oauth-client/handler/oauth_handler.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/oauth-client/licensing/class-mo-oauth-client-license.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/oauth-client/views/feedback_form.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/oauth-client/views/instructions_page.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:01.107086.

15 PHP_REACHES edges created
1 REACHES edges created
1000 PHP_REACHES edges created
1272 PHP_REACHES edges created
8 CALLS edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
7582 PHP_REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
12000 PHP_REACHES edges created
13000 PHP_REACHES edges created
14000 PHP_REACHES edges created
15000 PHP_REACHES edges created
16000 PHP_REACHES edges created
17000 PHP_REACHES edges created
18000 PHP_REACHES edges created
19000 PHP_REACHES edges created
20000 PHP_REACHES edges created
21000 PHP_REACHES edges created
22000 PHP_REACHES edges created
23000 PHP_REACHES edges created
24000 PHP_REACHES edges created
25000 PHP_REACHES edges created
26000 PHP_REACHES edges created
27000 PHP_REACHES edges created
28000 PHP_REACHES edges created
29000 PHP_REACHES edges created
30000 PHP_REACHES edges created
31000 PHP_REACHES edges created
32000 PHP_REACHES edges created
33000 PHP_REACHES edges created
34000 PHP_REACHES edges created
35000 PHP_REACHES edges created
36000 PHP_REACHES edges created
37000 PHP_REACHES edges created
38000 PHP_REACHES edges created
39000 PHP_REACHES edges created
40000 PHP_REACHES edges created
41000 PHP_REACHES edges created
42000 PHP_REACHES edges created
43000 PHP_REACHES edges created
44000 PHP_REACHES edges created
45000 PHP_REACHES edges created
45376 PHP_REACHES edges created
54254 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 3426 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.091232.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 1 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:02.324936.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 116 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:04.513069.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 122 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.166431.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.322678.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.786266.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.019193.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.038168.

1 CALLS edges created
238 PHP_REACHES edges created
239 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 213 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.177952.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
No SQL nodes to process.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:00.158586.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'plugins_url("images/page-restriction.png", )'' cannot be parsed correct.
HTML code '$'plugins_url("images/buddypress-logo.png", )'' cannot be parsed correct.
HTML code '$'plugins_url("images/login-form.png", )'' cannot be parsed correct.
HTML code '$'plugins_url("images/member-login.png", )'' cannot be parsed correct.
HTML code '$'plugins_url("images/learndash-icon.png", )'' cannot be parsed correct.
HTML code '$'plugins_url("images/report-icon.png", )'' cannot be parsed correct.
HTML code '$'plugins_url("images/attribute-icon.png", )'' cannot be parsed correct.
HTML code '$'plugins_url("images/scim-icon.png", )'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'<a style="text-decoration:none" href="javascript:void(0)" onClick="moOAuthLoginNew(\'$key\');"><div class="mo_oauth_login_button mo_oauth_login_button_text"><i class="fa fa-gitlab  mo_oauth_login_button_icon"></i>Login withucwords($key)</div></a>'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'<div class=$_SESSION_msg_class"$_SESSION_msg</div>'' cannot be parsed correct.
HTML code '$'$args_before_widget'' cannot be parsed correct.
HTML code '$'$args_before_title$wid_title$args_after_title'' cannot be parsed correct.
HTML code '$'$this->mo_oauth_login_form()'' cannot be parsed correct.
HTML code '$'$args_after_widget'' cannot be parsed correct.
HTML code '$'$nestedprefix.'' cannot be parsed correct.
HTML code '$'$key</td><td>$resource</td></tr>'' cannot be parsed correct.
HTML code '$'mo_oauth_is_customer_registered()'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/login'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/initializepayment'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/login'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/viewlicensekeys'' cannot be parsed correct.
HTML code '$'add_query_arg(["tab" => "account"], htmlentities($_SERVER["REQUEST_URI"]))'' cannot be parsed correct.
HTML code '$'<div class=\'error\'> <p>get_option("message")</p></div>'' cannot be parsed correct.
HTML code '$'<div class=\'updated\'><p>get_option("message")</p></div>'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, "user_eveonline_character_name", true)'' cannot be parsed correct.
HTML code '$'mo_oauth_avatar_manager_get_custom_avatar($user->ID, "128")'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, "user_eveonline_corporation_name", true)'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, "user_eveonline_alliance_name", true)'' cannot be parsed correct.
HTML code '$'miniorange_support()'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_customer_key")'' cannot be parsed correct.
HTML code '$'add_query_arg(["tab" => "licensing"], htmlentities($_SERVER["REQUEST_URI"]))'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'$_SERVER_SERVER_NAME'' cannot be parsed correct.
HTML code '$'wp_get_current_user()'' cannot be parsed correct.
HTML code '$'wp_get_current_user()'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_phone")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'strtotime("Nov 30, 2020 23:59:59")'' cannot be parsed correct.
HTML code '$'time()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'add_query_arg(["tab" => "config"], htmlentities($_SERVER["REQUEST_URI"]))'' cannot be parsed correct.
HTML code '$'mo_oauth_is_customer_registered()'' cannot be parsed correct.
HTML code '$'none;'' cannot be parsed correct.
HTML code '$'none;'' cannot be parsed correct.
HTML code '$'none;'' cannot be parsed correct.
HTML code '$'add_query_arg(["tab" => "login"], htmlentities($_SERVER["REQUEST_URI"]))'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/login'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/initializepayment'' cannot be parsed correct.
HTML code '$'explode(";", $textarea)_0;
'' cannot be parsed correct.
HTML code '$'explode(";", $textarea)_0
'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_icon_width")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_icon_height")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_icon_margin")'' cannot be parsed correct.
HTML code '$'rtrim(trim(format_custom_css_value($custom_css)), ";")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_custom_logout_text")'' cannot be parsed correct.
HTML code '$'<script>jQuery( document ).ready(function() { jQuery(".mo_oauth_premium_option :input").prop("disabled", true);}); </script>'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_phone")'' cannot be parsed correct.
HTML code '$'<h2>Login Transactions Report</h2>
			<div class="mo_oauth_client_small_layout hidden">	
				<div style="float:right;margin-top:10px">
					<input type="submit" $disabled name="printcsv" style="width:100px;" value="Print PDF" class="button button-success button-large">
					<input type="submit" $disabled name="printpdf" style="width:100px;" value="Print CSV" class="button button-success button-large">
				</div>
				<h3>Advanced Report</h3>
				
				<form id="mo_oauth_client_advanced_reports" method="post" action="">
					<input type="hidden" name="option" value="mo_oauth_client_advanced_reports">
					<table style="width:100%">
					<tr>
					<td width="33%">WordPress Username : <input class="mo_oauth_client_table_textbox" type="text" $disabled name="username" required="" placeholder="Search by username" value=""></td>
					<td width="33%">IP Address :<input class="mo_oauth_client_table_textbox" type="text" $disabled name="ip" required="" placeholder="Search by IP" value=""></td>
					<td width="33%">Status : <select $disabled name="status" style="width:100%;">
						  <option value="success" selected="">Success</option>
						  <option value="failed">Failed</option>
						</select>
					</td>
					</tr>
					<tr><td><br></td></tr>
					<tr>
					<td width="33%">User Action : <select true name="action" style="width:100%;">
						  <option value="login" selected="">User Login</option>
						  <option value="register">User Registeration</option>
						</select>
					</td>
					<td width="33%">From Date : <input true class="mo_oauth_client_table_textbox" type="date"  name="fromdate"></td>
					<td width="33%">To Date :<input true class="mo_oauth_client_table_textbox" type="date"  name="todate"></td>
					</tr>
					</table>
					<br><input type="submit" true name="Search" style="width:100px;" value="Search" class="button button-primary button-large">
				</form>
				<br>
			</div>
			
			<table id="login_reports" class="display" cellspacing="0" width="100%">
		        <thead>
		            <tr>
		                <th>IP Address</th>
						<th>Username</th>
						<th>Status</th>
		                <th>TimeStamp</th>
		            </tr>
		        </thead>
		        <tbody>'' cannot be parsed correct.
HTML code '$'<tr><td>$key</td><td><a href=\'admin.php?page=mo_oauth_settings&action=update&app=$key\'>Edit Application</a> | <a href=\'admin.php?page=mo_oauth_settings&action=update&app=$key#attribute-mapping\'>Attribute Mapping</a> | <a href=\'admin.php?page=mo_oauth_settings&action=update&app=$key#role-mapping\'>Role Mapping</a> | <a href=\'wp_nonce_url("admin.php?page=mo_oauth_settings&action=delete&app=" . $key, "mo_oauth_delete_" . $key)\' onclick ="return confirm(\'Are you sure you want to delete this item?\');">Delete</a> | <a href=\'admin.php?page=mo_oauth_settings&action=update&app=$key#howtoconfigure\'>How to Configure?</a></td></tr>'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$app_redirecturi'' cannot be parsed correct.
HTML code '$'$app_displayappname'' cannot be parsed correct.
HTML code '$'$app_clientid'' cannot be parsed correct.
HTML code '$'$app_clientsecret'' cannot be parsed correct.
HTML code '$'$app_scope'' cannot be parsed correct.
HTML code '$'$app_authorizeurl'' cannot be parsed correct.
HTML code '$'display:none'' cannot be parsed correct.
HTML code '$'$app_accesstokenurl'' cannot be parsed correct.
HTML code '$'display:none'' cannot be parsed correct.
HTML code '$'$app_resourceownerdetailsurl'' cannot be parsed correct.
HTML code '$'$deactivate_reason'' cannot be parsed correct.
HTML code '$'$deactivate_reason'' cannot be parsed correct.
HTML code '$'$deactivate_reason'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$app_email_attr'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_google_client_id")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_google_client_secret")'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_eveonline_client_id")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_eveonline_client_secret")'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_facebook_client_id")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_facebook_client_secret")'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'get_option("mo_eve_allowed_corps")'' cannot be parsed correct.
HTML code '$'get_option("mo_eve_allowed_alliances")'' cannot be parsed correct.
HTML code '$'get_option("mo_eve_allowed_char_name")'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">Page Restriction</h5>
          <p>Allows to restrict access to WordPress pages/posts based on user roles and their login status, thereby preventing them from unauthorized access.</p>
        </div>
      </div>
    </div>      
    <div class="grid_view column_container">
      <div class="column_inner">
        <div class="row benefits-outer-block">
          <img src="'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">BuddyPress Integrator</h5>
          <p>Allows to integrate user information received from OAuth/OpenID Provider with the BuddyPress profile.</p>
        </div>
      </div>
    </div>  
  </div>
  <div class="row-view">
    <div class="grid_view column_container">
      <div class="column_inner">
        <div class="row benefits-outer-block">
          <img src="'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">Login Form Add-on</h5>
          <p>Provides Login form for OAuth/OpenID login instead of a only a button. It relies on OAuth/OpenID plugin to have Password Grant configured. It can be customized using custom CSS and JS.</p>
        </div>
      </div>
    </div>
    <div class="grid_view column_container">
      <div class="column_inner">
        <div class="row benefits-outer-block">
          <img src="'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">Membership Level based Login Redirection</h5>
          <p>Allows to redirect users to custom pages based on users\' membership levels. Checks for the user\'s membership level during every login, so any update on the membership level doesn\'t affect redirection.</p>
        </div>
      </div>    
    </div>  
  </div>
  <div class="row-view">
    <div class="grid_view column_container">
      <div class="column_inner">
        <div class="row benefits-outer-block">
          <img src="'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">LearnDash Integration</h5>
          <p>LearnDash is popular WordPress LMS plugin. If you want to integrate LearnDash with your IDP then you can opt-in for this add-on. This add-on will map the users to LearnDash groups based on the attributes sent by your IDP.</p>
        </div>
      </div>
    </div>
    <div class="grid_view column_container">
      <div class="column_inner">
        <div class="row benefits-outer-block">
          <img src="'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">SSO Login Audit</h5>
          <p>SSO Login Audit captures all the SSO users and will generate the reports.</p>
        </div>
      </div>    
    </div>  
  </div>
  <div class="row-view">
    <div class="grid_view column_container">
      <div class="column_inner">
        <div class="row benefits-outer-block">
          <img src="'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">Attribute Based Redirection</h5>
          <p>ABR add-on helps you to redirect your users to different pages after they log into your site, based on the attributes sent by your Identity Provider.</p>
        </div>
      </div>
    </div>
    <div class="grid_view column_container">
      <div class="column_inner">
        <div class="row benefits-outer-block">
          <img src="'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">SCIM</h5>
          <p>This plugin allows user provisioning with SCIM standard. System for Cross-domain Identity Management is a standard for automating the exchange of user identity information between identity domains, or IT systems.</p>
        </div>
      </div>    
    </div>  
  </div>
</div>

'' cannot be parsed correct.
HTML code '$'<br>'' cannot be parsed correct.
HTML code '$'<h4>Connect with :</h4><br>'' cannot be parsed correct.
HTML code '$'<div class="row">'' cannot be parsed correct.
HTML code '$'\' + \'/?option=oauthredirect&app_name=\' + app_name;
		}
	</script>
	'' cannot be parsed correct.
HTML code '$'<style>table{border-collapse: collapse;}table, td, th {border: 1px solid black;padding:4px}</style>'' cannot be parsed correct.
HTML code '$'<h2>Test Configuration</h2><table><tr><th>Attribute Name</th><th>Attribute Value</th></tr>'' cannot be parsed correct.
HTML code '$'</table>'' cannot be parsed correct.
HTML code '$'</div><br><br>'' cannot be parsed correct.
HTML code '$'<b>Response : </b><br>'' cannot be parsed correct.
HTML code '$'<br><br>'' cannot be parsed correct.
HTML code '$'<b>Response : </b><br>'' cannot be parsed correct.
HTML code '$'<br><br>'' cannot be parsed correct.
HTML code '$'<b>Response : </b><br>'' cannot be parsed correct.
HTML code '$'<tr><td>'' cannot be parsed correct.
HTML code '$'<br><br>'' cannot be parsed correct.
HTML code '$'</td>
		</tr>
		</table>
		<br /><br />

	<table>
	<tr>
	<td>
	<form name="f1" method="post" action="" id="mo_oauth_goto_login_form">
		<input type="hidden" value="change_miniorange" name="option"/>
		<input type="submit" value="Change Email Address" class="button button-primary button-large"/>
	</form>
	</td><td>
	<a href="'' cannot be parsed correct.
HTML code '$' * 1000;
	var now = '' cannot be parsed correct.
HTML code '$' * 1000;
	var x = setInterval(function() {
		now = now + 1000;
		var distance = countDownDate - now;
		var days = Math.floor(distance / (1000 * 60 * 60 * 24));
		var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
		var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
		var seconds = Math.floor((distance % (1000 * 60)) / 1000);
		document.getElementById("demo").innerHTML = days + "d " + hours + "h " +
			minutes + "m " + seconds + "s ";
		if (distance < 0) {
			clearInterval(x);
			document.getElementById("demo").innerHTML = "EXPIRED";
		}
	}, 1000);
	</script>
	'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'<style>.update-nag, .updated, .error, .is-dismissible, .notice, .notice-error { display: none; }</style>'' cannot be parsed correct.
HTML code '$'<div class="mo_oauth_premium_option_text"><span style="color:red;">*</span>This is a standard feature. 
	<a href="admin.php?page=mo_oauth_settings&tab=licensing">Click Here</a> to see our full list of Standard Features.</div>'' cannot be parsed correct.
HTML code '$'<div class="mo_oauth_premium_option_text"><span style="color:red;">*</span>This is a enterprise feature. 
		<a href="admin.php?page=mo_oauth_settings&tab=licensing">Click Here</a> to see our full list of Enterprise Features.</div>
		<div class="mo_table_layout mo_oauth_premium_option">
		<div class="mo_oauth_client_small_layout">'' cannot be parsed correct.
HTML code '$'	        </tbody>
		    </table>
		</div>
		
	</div>'' cannot be parsed correct.
HTML code '$'<br><a href=\'#\'><button disabled style=\'float:right\'>Add Application</button></a>'' cannot be parsed correct.
HTML code '$'<br><a href=\'admin.php?page=mo_oauth_settings&action=add\'><button style=\'float:right\'>Add Application</button></a>'' cannot be parsed correct.
HTML code '$'<h3>Applications List</h3>'' cannot be parsed correct.
HTML code '$'<p style=\'color:#a94442;background-color:#f2dede;border-color:#ebccd1;border-radius:5px;padding:12px\'>You can only add 1 application with free version. Upgrade to <a href=\'admin.php?page=mo_oauth_settings&tab=licensing\'><b>enterprise</b></a> to add more.</p>'' cannot be parsed correct.
HTML code '$'<table class=\'tableborder\'>'' cannot be parsed correct.
HTML code '$'<tr><th><b>Name</b></th><th>Action</th></tr>'' cannot be parsed correct.
HTML code '$'</table>'' cannot be parsed correct.
HTML code '$'<br><br>'' cannot be parsed correct.
HTML code '$'<p style=\'color:#a94442;background-color:#f2dede;border-color:#ebccd1;border-radius:5px;padding:12px\'>You can only add 1 application with free version. Upgrade to <a href=\'admin.php?page=mo_oauth_settings&tab=licensing\'><b>premium</b></a> to add more.</p>'' cannot be parsed correct.
HTML code '$'</strong></td>
				<td><div style="padding:5px;"></div><input type="checkbox" name="mo_oauth_show_on_login_page" value ="1" checked/>'' cannot be parsed correct.
HTML code '$'</td>
			</tr>
			<!--<tr style="display:none" id="mo_oauth_email_attr_div">
				<td><strong><font color="#FF0000">*</font>Email Attribute:</strong></td>
				<td><input class="mo_table_textbox" type="text" id="mo_oauth_email_attr" name="mo_oauth_email_attr" value=""></td>
			</tr>
			<tr style="display:none" id="mo_oauth_name_attr_div">
				<td><strong><font color="#FF0000">*</font>Name Attribute:</strong></td>
				<td><input class="mo_table_textbox" type="text" id="mo_oauth_name_attr" name="mo_oauth_name_attr" value=""></td>
			</tr>-->
			<tr>
				<td>&nbsp;</td>
				<td><input type="submit" name="submit" value="Save settings"
					class="button button-primary button-large" /></td>
			</tr>
			</table>
		</form>

		<div id="instructions">

		</div>

		'' cannot be parsed correct.
HTML code '$'</div><div class="mo_table_layout" id="howtoconfigure"> <br><b>Here are the Step by Step Guides for different OAuth Servers:</b><br><ul><table class="mo_table-bordered" height="125" width="300">

	 <tr>
	 <th>OAuth Servers</th><th>Links</th></tr>
	 
	 <tr><td style="text-align:center;">miniOrange OAuth Server</td><td style="text-align:center;"><a target="_blank" href="https://miniorange.com/step-by-step-guide-to-setup-miniorange-oauth-server.php">Click Here</td></tr>
	 <tr><td style="text-align:center;">Custom OAuth Server</td><td style="text-align:center;"><a target="_blank" href="https://miniorange.com/step-by-step-guide-to-setup-custom-oauth-server.php">Click Here</td></tr>
	 </table> </ul>'' cannot be parsed correct.
HTML code '$'<br><strong>Instructions to configure Google :</strong><ol><li>Visit the Google website for developers <a href="https://console.developers.google.com/project"target="_blank">console.developers.google.com</a>.</li><li>Open the Google API Console Credentials page and go to API Manager -> Credentials</li><li>From the project drop-down, choose Create a new project, enter a name for the project, and optionally, edit the provided Project ID. Click Create.</li><li>On the Credentials page, select Create credentials, then select OAuth client ID.</li><li>You may be prompted to set a product name on the Consent screen. If so, click Configure consent screen, supply the requested information, and click Save to return to the Credentials screen.</li><li>Select Web Application for the Application Type. Follow the instructions to enter JavaScript origins, redirect URIs, or both. For Redirect URI provide the <b>Configure OAuth->Redirect/Callback URI</b>h.</li><li>Click Create.</li><li>On the page that appears, copy the client ID and client secret to your clipboard, as you will need them to configure above.</li><li>Enable the Google+ API.</li><li>Go to Appearance->Widgets. Among the available widgets youwill find miniOrange OAuth, drag it to the widget area where you want it to appear.</li><li>Now logout and go to your site. You will see a login link where you placed that widget.</li></ol>'' cannot be parsed correct.
HTML code '$'<br><strong>Instructions to configure Facebook : </strong><ol><li>Go to Facebook developers console <a href="https://developers.facebook.com/apps/" target="_blank">https://developers.facebook.com/apps/</a>.</li><li>Click on Create a New App/Add new App button. You will need to register as a Facebook developer to create an App.</li><li>Enter <b>Display Name</b>. And choose category.</li><li>Click on <b>Create App ID</b>.</li><li>From the left pane, select <b>Settings</b>.</li><li>From the tabs above, select <b>Advanced</b>.</li><li>Under <b>Client OAuth Settings</b>, enter <b>Configure OAuth->Redirect/Callback URI</b> in Valid OAuth redirect URIs and click <b>Save Changes</b>.</li><li>Paste your App ID/Secret provided by Facebook into the fields above.</li><li>Click on the Save settings button.Go to Appearance->Widgets. Among the available widgets youwill find miniOrange OAuth, drag it to the widget area where you want it to appear.</li><li>Now logout and go to your site. You will see a login link where you placed that widget.</li></ol>'' cannot be parsed correct.
HTML code '$'<strong>Instructions:</strong><ol><li>Log in to your EVE Online account</li><li>At EVE Online, go to Support. Request for enabling OAuthfor a third-party application.</li><li>At EVE Online, add a new project/application. GenerateClient ID and Client Secret.</li><li>At EVE Online, set Redirect URL as <b>https://login.xecurify.com/moas/oauth/client/callback</b></li><li>Enter your Client ID and Client Secret above.</li><li>Click on the Save settings button.</li><li>Go to Appearance->Widgets. Among the available widgets you will find miniOrange OAuth, drag it to the widget area where you want it to appear.</li><li>Now logout and go to your site. You will see a login link where you placed that widget.</li></ol>'' cannot be parsed correct.
HTML code '$'<strong>Instructions:</strong><ol><li>Log in to your EVE Online account</li><li>At EVE Online, go to Support. Request for enabling OAuth for a third-party application.</li><li>At EVE Online, add a new project/application. Generate Client ID and Client Secret.</li><li>At EVE Online, set Redirect URL as <b>Configure OAuth->Redirect/Callback URI</b></li><li>Enter your Client ID and Client Secret above.</li><li>Click on the Save settings button.</li><li>Go to Appearance->Widgets. Among the available widgets you will find miniOrange OAuth, drag it to the widget area where you want it to appear.</li><li>Now logout and go to your site. You will see a login link where you placed that widget.</li></ol>'' cannot be parsed correct.
HTML code '$'<br><strong>Instructions to configure custom OAuth Server:</strong><ol><li>Enter your Client ID and Client Secret above.</li><li>Click on the Save settings button.</li><li>Provide <b>Configure OAuth->Redirect/Callback URI</b> for your OAuth server Redirect URI.</li><li>Go to Appearance->Widgets. Among the available widgets you will find miniOrange OAuth, drag it to the widget area where you want it to appear.</li><li>Now logout and go to your site. You will see a login link where you placed that widget.</li></ol>'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'<tr id="mo_oauth_name_attr_div">
				<td><strong>First Name Attribute:</strong></td>
				<td><input placeholder="FirstName Attribute Name" type="text" style="width: 350px;" value="" readonly></td>
			 </tr>		
	 	  <tr>
			<td><strong>Last Name Attribute:</strong></td>
			<td>
				<input type="text" name="oauth_client_am_last_name" placeholder="LastName Attribute Name" style="width: 350px;" value="" readonly /></td>
		  </tr>
		  <tr>
			<td><strong>Email Attribute:</strong></td>
			<td><input type="text" name="oauth_client_am_group_name" placeholder="Email Attribute Name" style="width: 350px;" value="" readonly /></td>
		  </tr>
		  <tr>
			<td><strong>Group Attribute Name:</strong></td>
			<td><input type="text" name="oauth_client_am_group_name" placeholder="Group Attribute Name" style="width: 350px;" value="" readonly /></td>
		  </tr>
		  <tr>
			<td><strong>Display Name:</strong></td>
			<td>
				<select disabled style="background-color: #eee;">
					<option>Username</option>
				</select>
			</td></tr>'' cannot be parsed correct.
HTML code '$'Group Attribute Value'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:16.848168.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.048845.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 5 do_action/apply_filters calls and 18 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:01.302740.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running FileProDetector
### Start running FrontBaseDetector
### Finish running DbplusDetector
### Start running HashDetector
### Finish running DbaseDetector
### Start running IBMDb2Detector
### Finish running CubridDetector
### Start running InformixDetector
### Finish running FirebirdInterBaseDetector
### Start running IngresDetector
### Finish running IBMDb2Detector
### Start running maxdbDetector
### Finish running FrontBaseDetector
### Start running MongoDbDetector
### Finish running HashDetector
### Start running MongoDetector
### Finish running MongoDetector
### Start running MsqlDetector
### Finish running InformixDetector
### Start running MySQLDetector
### Finish running IngresDetector
### Start running MySQLiDetector
### Finish running MongoDbDetector
### Start running Oci8Detector
### Finish running MsqlDetector
### Start running OpenSSLDetector
### Finish running MySQLDetector
### Start running ParadoxDetector
### Finish running OpenSSLDetector
### Start running PasswordHashingDetector
### Finish running Oci8Detector
### Start running PhpCurlDetector
### Finish running ArrayElementDetector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running ParadoxDetector
### Start running PHPRetrievalDetector
### Finish running PhpCurlDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PasswordHashingDetector
### Start running PhpVarDetector
### Finish running PHPRetrievalDetector
### Start running PostgreSQLDetector
### Finish running PHPStorageDetector
### Start running PropertyDetector
### Finish running PostgreSQLDetector
### Start running Sqlite3Detector
### Finish running Sqlite3Detector
### Start running SqliteDetector
### Finish running PHPIncludedDetector
### Start running SqlServerDetector
### Finish running SqliteDetector
### Start running SybaseDetector
### Finish running SqlServerDetector
### Start running TokyoTyrantDetector
### Finish running TokyoTyrantDetector
### Start running UserInputDetector
### Finish running PropertyDetector
### Start running VariableDetector
### Finish running PhpVarDetector
### Start running WordpressHashingFnDetector
### Finish running SybaseDetector
### Start running WordPressRemoteDetector
### Finish running UserInputDetector
### Start running WordPressRetrievalDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressStorageDetector
### Finish running VariableDetector
### Start running WP_UserDetector
### Finish running WP_UserDetector
### Start running GenericDatabaseUsageDetector
### Finish running maxdbDetector
### Start running GenericEncryptionDetector
### Finish running MySQLiDetector
### Start running DeletionDetector
### Finish running GenericDatabaseUsageDetector
### Start running UninstallDetector
### Finish running GenericEncryptionDetector
### Finish running UninstallDetector
### Finish running DeletionDetector
### Finish running WordPressRetrievalDetector
### Finish running WordPressRemoteDetector
### Finish running WordPressStorageDetector
### Finished running detectors
class-mo-oauth-widget.php:487
  - Request variable '$_POST["email"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:175
  - Request variable '$_POST["email"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:184
  - Request variable '$_POST["email"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:252
  - Request variable '$_POST["email"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:257
  - Request variable '$_POST["email"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:474
  - Request variable '$_POST["mo_oauth_email_attr"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:474
  - Request variable '$_POST["mo_oauth_email_attr"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:475
  - Request variable '$_POST["mo_oauth_email_attr"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:630
  - Request variable '$_POST["mo_oauth_contact_us_email"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:630
  - Request variable '$_POST["mo_oauth_contact_us_email"]' of personal types {'email'} is found.
  - Data types: email 

class-customer.php:203
  - hash called with approved hash algorithm sha512.
class-customer.php:285
  - hash called with approved hash algorithm sha512.
class-customer.php:368
  - hash called with approved hash algorithm sha512.
class-customer.php:435
  - hash called with approved hash algorithm sha512. 

class-mo-oauth-widget.php:473
  - openssl_encrypt called with unknown encryption algorithm. 

manage-avatar.php:186
  - MD5 called with parameters [trim, strtolower, email]. Ignore if [trim, strtolower, email] does not contain personal information. 

manage-avatar.php:17
  - RETRIEVAL call to file_get_contents($characterurl).
  - Data types: file 

manage-avatar.php:17
  - STORAGE call to file_put_contents($img, file_get_contents($characterurl)).
  - Data types: file 

class-customer.php:31
  - object property '$this->email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:43
  - object property '$this->email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:156
  - object property '$current_user->user_firstname' of personal types {'first_name', 'user', 'user_meta'} is found.
  - Data types: first_name, user, user_meta
class-customer.php:156
  - object property '$current_user->user_firstname' of personal types {'first_name', 'user', 'user_meta'} is found.
  - Data types: first_name, user, user_meta
class-customer.php:157
  - object property '$current_user->user_lastname' of personal types {'last_name', 'user', 'user_meta'} is found.
  - Data types: last_name, user, user_meta
class-customer.php:157
  - object property '$current_user->user_lastname' of personal types {'last_name', 'user', 'user_meta'} is found.
  - Data types: last_name, user, user_meta
class-customer.php:380
  - object property '$user->user_firstname' of personal types {'first_name', 'user', 'user_meta'} is found.
  - Data types: first_name, user, user_meta
class-customer.php:380
  - object property '$user->user_lastname' of personal types {'last_name', 'user', 'user_meta'} is found.
  - Data types: last_name, user, user_meta
class-customer.php:380
  - object property '$user->user_firstname' of personal types {'first_name', 'user', 'user_meta'} is found.
  - Data types: first_name, user, user_meta
class-customer.php:380
  - object property '$user->user_lastname' of personal types {'last_name', 'user', 'user_meta'} is found.
  - Data types: last_name, user, user_meta
manage-avatar.php:174
  - object property '$user->user_email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:307
  - object property '$user->user_email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:316
  - object property '$user->user_email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:317
  - object property '$id_or_email->comment_author_email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:318
  - object property '$id_or_email->comment_author_email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:746
  - object property '$user->user_email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings_page.php:167
  - object property '$current_user->user_firstname' of personal types {'first_name', 'user', 'user_meta'} is found.
  - Data types: first_name, user, user_meta
mo_oauth_settings_page.php:167
  - object property '$current_user->user_firstname' of personal types {'first_name', 'user', 'user_meta'} is found.
  - Data types: first_name, user, user_meta
mo_oauth_settings_page.php:172
  - object property '$current_user->user_lastname' of personal types {'last_name', 'user', 'user_meta'} is found.
  - Data types: last_name, user, user_meta
mo_oauth_settings_page.php:172
  - object property '$current_user->user_lastname' of personal types {'last_name', 'user', 'user_meta'} is found.
  - Data types: last_name, user, user_meta 

class-customer.php:73
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:78
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:159
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:196
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-customer.php:212
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-customer.php:278
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-customer.php:328
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:331
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:372
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:445
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:222
  - variable '$link_with_username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:224
  - variable '$link_with_username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:335
  - variable '$email_attr' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:341
  - variable '$email_attr' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:369
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:414
  - variable '$email_attr' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:415
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:415
  - variable '$email_attr' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:417
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:420
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:422
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:430
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:432
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:433
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:485
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:487
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:490
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:491
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:492
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:496
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:497
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:497
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:497
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:548
  - variable '$eveonline_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:559
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:562
  - variable '$eveonline_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:563
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:593
  - variable '$eveonline_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:601
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:604
  - variable '$eveonline_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:605
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:625
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:626
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:627
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:627
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:627
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:629
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:629
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:630
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:174
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:186
  - variable '$email_hash' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:186
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:191
  - variable '$email_hash' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:245
  - variable '$email_hash' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:298
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:300
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:301
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:307
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:308
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:309
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:310
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:316
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:317
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:318
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:318
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:321
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:321
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:323
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
manage-avatar.php:338
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:168
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:184
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:193
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:206
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:250
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:257
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:261
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:366
  - variable '$email_attr' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:475
  - variable '$email_attr' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:486
  - variable '$email_attr' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:630
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:635
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:639
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:655
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:656
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:692
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:695
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:698
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:744
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:745
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:746
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:751
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:852
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:855
  - variable '$email' of personal types {'email'} is found.
  - Data types: email 

class-mo-oauth-widget.php:497
  - CRYPTOGRAPHY call to wp_create_user($user_email, $random_password, $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:627
  - CRYPTOGRAPHY call to wp_create_user($email, $random_password, $email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:629
  - CRYPTOGRAPHY call to wp_create_user($email, $random_password) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:631
  - CRYPTOGRAPHY call to wp_update_user(["ID" => $user_id]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user 

class-customer.php:60
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:94
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:141
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:180
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:237
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:261
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:315
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:346
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:412
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:464
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
handler/oauth_handler.php:7
  - API call to wp_remote_post($tokenendpoint, ["method" => "POST", "timeout" => 45, "redirection" => 5, "httpversion" => "1.0", "blocking" => true, "headers" => [], "body" => ["grant_type" => "authorization_code", "code" => $code, "client_id" => $clientid, "client_secret" => $clientsecret, "redirect_uri" => $redirect_url], "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
handler/oauth_handler.php:48
  - API call to wp_remote_post($resourceownerdetailsurl, ["method" => "GET", "timeout" => 45, "redirection" => 5, "httpversion" => "1.0", "blocking" => true, "headers" => ["Authorization" => "Bearer " . $access_token], "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
handler/oauth_handler.php:82
  - API call to wp_remote_get($url, ["method" => "GET", "timeout" => 45, "redirection" => 5, "httpversion" => , "blocking" => true, "headers" => [], "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote 

class-customer.php:29
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:31
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:32
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:33
  - RETRIEVAL call to get_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:34
  - RETRIEVAL call to get_option("mo_oauth_admin_fname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:35
  - RETRIEVAL call to get_option("mo_oauth_admin_lname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:36
  - RETRIEVAL call to get_option("mo_oauth_admin_company") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:71
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:73
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:75
  - RETRIEVAL call to get_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:105
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:108
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:109
  - RETRIEVAL call to get_option("mo_oauth_" . $name . "_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:110
  - RETRIEVAL call to get_option("mo_oauth_" . $name . "_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:111
  - RETRIEVAL call to get_option("mo_oauth_" . $name . "_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:153
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
class-customer.php:166
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:191
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:196
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:197
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:248
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:272
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:278
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:326
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:328
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:360
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:377
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
class-customer.php:421
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:425
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:428
  - RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:25
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:31
  - RETRIEVAL call to get_option("mo_oauth_app_name_" . $key) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:133
  - RETRIEVAL call to get_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:133
  - RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:133
  - RETRIEVAL call to get_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:135
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:142
  - RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:142
  - RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:143
  - RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:143
  - RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:144
  - RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:144
  - RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:145
  - RETRIEVAL call to get_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:155
  - RETRIEVAL call to get_option("mo_oauth_app_name_" . $key) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:221
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
class-mo-oauth-widget.php:267
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:334
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:390
  - RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:391
  - RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:392
  - RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:420
  - RETRIEVAL call to get_user_by("login", $email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:422
  - RETRIEVAL call to get_user_by("email", $email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:433
  - RETRIEVAL call to get_user_by("login", $email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:439
  - RETRIEVAL call to wp_set_current_user($user_id) alters data types {'user_meta'}. Passed arguments: 0: $id (int). Returns (WP_User).
  - Data types: user_meta
class-mo-oauth-widget.php:441
  - RETRIEVAL call to get_user_by("ID", $user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:464
  - RETRIEVAL call to get_option("mo_oauth_" . $_REQUEST["app_name"] . "_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:466
  - RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:469
  - RETRIEVAL call to get_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:478
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:478
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:492
  - RETRIEVAL call to get_user_by("email", $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:505
  - RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:506
  - RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:523
  - RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:523
  - RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:524
  - RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:524
  - RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:525
  - RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:525
  - RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:532
  - RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:536
  - RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:540
  - RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:550
  - RETRIEVAL call to get_user_by("login", $characterID) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:595
  - RETRIEVAL call to get_user_by("login", $characterID) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:630
  - RETRIEVAL call to get_user_by("login", $email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
licensing/class-mo-oauth-client-license.php:169
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
licensing/class-mo-oauth-client-license.php:171
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
licensing/class-mo-oauth-client-license.php:173
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
licensing/class-mo-oauth-client-license.php:177
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
licensing/class-mo-oauth-client-license.php:179
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
licensing/class-mo-oauth-client-license.php:181
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
manage-avatar.php:23
  - RETRIEVAL call to get_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
manage-avatar.php:149
  - RETRIEVAL call to get_option("show_avatars") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
manage-avatar.php:168
  - RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
manage-avatar.php:178
  - RETRIEVAL call to get_option("avatar_default") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
manage-avatar.php:208
  - RETRIEVAL call to get_option("avatar_rating") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
manage-avatar.php:211
  - RETRIEVAL call to get_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
manage-avatar.php:218
  - RETRIEVAL call to get_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar_rating", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
manage-avatar.php:227
  - RETRIEVAL call to get_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
manage-avatar.php:280
  - RETRIEVAL call to get_option("show_avatars") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
manage-avatar.php:304
  - RETRIEVAL call to get_userdata($id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
manage-avatar.php:313
  - RETRIEVAL call to get_userdata($id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
manage-avatar.php:325
  - RETRIEVAL call to get_userdata($id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
manage-avatar.php:381
  - RETRIEVAL call to get_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
manage-avatar.php:390
  - RETRIEVAL call to get_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
manage-avatar.php:415
  - RETRIEVAL call to get_users($args) alters data types {'user_meta', 'user'}. Passed arguments: 0: $args (array). Returns (array).
  - Data types: user_meta, user
mo_oauth_settings.php:47
  - RETRIEVAL call to get_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:53
  - RETRIEVAL call to get_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:206
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:302
  - RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:302
  - RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:361
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:362
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:411
  - RETRIEVAL call to get_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:411
  - RETRIEVAL call to get_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:483
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:520
  - RETRIEVAL call to get_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:520
  - RETRIEVAL call to get_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:561
  - RETRIEVAL call to get_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:561
  - RETRIEVAL call to get_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:605
  - RETRIEVAL call to get_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:605
  - RETRIEVAL call to get_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:655
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:658
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:672
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:692
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:735
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
mo_oauth_settings.php:744
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:748
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:831
  - RETRIEVAL call to get_user_meta($user->ID, "user_eveonline_character_name", true) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta, user
mo_oauth_settings.php:838
  - RETRIEVAL call to get_user_meta($user->ID, "user_eveonline_corporation_name", true) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta, user
mo_oauth_settings.php:844
  - RETRIEVAL call to get_user_meta($user->ID, "user_eveonline_alliance_name", true) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta, user
mo_oauth_settings.php:852
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:853
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:854
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:23
  - RETRIEVAL call to get_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:59
  - RETRIEVAL call to get_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:61
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:61
  - RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:61
  - RETRIEVAL call to get_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:104
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:108
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:134
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
mo_oauth_settings_page.php:156
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:177
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:239
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:395
  - RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1796
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1798
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1800
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2032
  - RETRIEVAL call to get_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2058
  - RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2062
  - RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2066
  - RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2095
  - RETRIEVAL call to get_option("mo_oauth_custom_logout_text") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2129
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2131
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2160
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2421
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2505
  - RETRIEVAL call to get_option("mo_oauth_client_disable_authorization_header") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2528
  - RETRIEVAL call to get_option("mo_oauth_app_name_" . $currentappname) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2648
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2676
  - RETRIEVAL call to get_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2685
  - RETRIEVAL call to get_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2693
  - RETRIEVAL call to get_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2752
  - RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2761
  - RETRIEVAL call to get_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2769
  - RETRIEVAL call to get_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2820
  - RETRIEVAL call to get_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2829
  - RETRIEVAL call to get_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2837
  - RETRIEVAL call to get_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2902
  - RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2921
  - RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2929
  - RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2937
  - RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2987
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:2990
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:3043
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
uninstall.php:4
  - RETRIEVAL call to get_users([]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $args (array). Returns (array).
  - Data types: user_meta, user
uninstall.php:6
  - RETRIEVAL call to get_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta 

class-mo-oauth-widget.php:10
  - STORAGE call to update_option("host_name", "https://login.xecurify.com") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
class-mo-oauth-widget.php:497
  - STORAGE call to wp_create_user($user_email, $random_password, $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:553
  - STORAGE call to update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:554
  - STORAGE call to update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:555
  - STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:568
  - STORAGE call to wp_insert_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:569
  - STORAGE call to update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:570
  - STORAGE call to update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:571
  - STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:597
  - STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:609
  - STORAGE call to wp_insert_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:610
  - STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:627
  - STORAGE call to wp_create_user($email, $random_password, $email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:629
  - STORAGE call to wp_create_user($email, $random_password) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:631
  - STORAGE call to wp_update_user(["ID" => $user_id]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
manage-avatar.php:50
  - STORAGE call to update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", $custom_avatar) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
manage-avatar.php:51
  - STORAGE call to update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating", "G") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
manage-avatar.php:52
  - STORAGE call to update_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
manage-avatar.php:55
  - STORAGE call to update_user_meta($user_id, "mo_oauth_avatar_manager_avatar_type", "custom") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
manage-avatar.php:56
  - STORAGE call to update_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", $attachment_id) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
manage-avatar.php:238
  - STORAGE call to update_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", $avatar) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
manage-avatar.php:402
  - STORAGE call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
manage-avatar.php:403
  - STORAGE call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
manage-avatar.php:404
  - STORAGE call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
manage-avatar.php:405
  - STORAGE call to delete_post_meta($attachment_id, "_wp_attached_file") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
manage-avatar.php:406
  - STORAGE call to delete_post_meta($attachment_id, "_wp_attachment_metadata") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
manage-avatar.php:419
  - STORAGE call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_avatar_type") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
manage-avatar.php:420
  - STORAGE call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
manage-avatar.php:422
  - STORAGE call to wp_delete_post($attachment_id, true) alters data types {'wp_post', 'post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: wp_post, post, post_meta
mo_oauth_settings.php:36
  - STORAGE call to add_option("mo_oauth_login_icon_space", "4") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:37
  - STORAGE call to add_option("mo_oauth_login_icon_custom_width", "325.43") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:38
  - STORAGE call to add_option("mo_oauth_login_icon_custom_height", "38.63") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:39
  - STORAGE call to add_option("mo_oauth_login_icon_custom_size", "35") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:40
  - STORAGE call to add_option("mo_oauth_login_icon_custom_color", "2B41FF") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:41
  - STORAGE call to add_option("mo_oauth_login_icon_custom_boundary", "4") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:64
  - STORAGE call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:65
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:66
  - STORAGE call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:67
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:68
  - STORAGE call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:69
  - STORAGE call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:70
  - STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:71
  - STORAGE call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:72
  - STORAGE call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:73
  - STORAGE call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:74
  - STORAGE call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:100
  - STORAGE call to update_option("host_name", "https://login.xecurify.com") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:158
  - STORAGE call to update_option("mo_oauth_client_show_mo_server_message", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:176
  - STORAGE call to update_option("message", "All the fields are required. Please enter valid entries.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:180
  - STORAGE call to update_option("message", "Choose a password with minimum length 8.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:193
  - STORAGE call to update_option("mo_oauth_admin_email", $email) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:194
  - STORAGE call to update_option("mo_oauth_admin_phone", $phone) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:195
  - STORAGE call to update_option("mo_oauth_admin_fname", $fname) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:196
  - STORAGE call to update_option("mo_oauth_admin_lname", $lname) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:197
  - STORAGE call to update_option("mo_oauth_admin_company", $company) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:204
  - STORAGE call to update_option("password", $password) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:215
  - STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:216
  - STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:217
  - STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:218
  - STORAGE call to update_option("mo_oauth_admin_phone", $customerKey["phone"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:219
  - STORAGE call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:220
  - STORAGE call to update_option("message", "Customer created & retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:221
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:227
  - STORAGE call to update_option("message", "Failed to create customer. Try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:231
  - STORAGE call to update_option("message", "Account already exist. Please Login.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:233
  - STORAGE call to update_option("message", $content["status"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:236
  - STORAGE call to update_option("message", "Passwords do not match.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:237
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:243
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:244
  - STORAGE call to update_option("verify_customer", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:253
  - STORAGE call to update_option("message", "All the fields are required. Please enter valid entries.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:261
  - STORAGE call to update_option("mo_oauth_admin_email", $email) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:262
  - STORAGE call to update_option("password", $password) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:268
  - STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:269
  - STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:270
  - STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:272
  - STORAGE call to update_option("mo_oauth_admin_phone", $customerKey["phone"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:273
  - STORAGE call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:274
  - STORAGE call to update_option("message", "Customer retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:275
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:276
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:279
  - STORAGE call to update_option("message", "Invalid username or password. Please try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:292
  - STORAGE call to update_option("message", "All the fields are required. Please enter Key ID and Verfication code to save API Key details.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:300
  - STORAGE call to update_option("mo_eve_api_key", $apiKey) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:301
  - STORAGE call to update_option("mo_eve_verification_code", $verificationCode) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:303
  - STORAGE call to update_option("message", "Your API Key details have been saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:306
  - STORAGE call to update_option("message", "Please enter Key ID and Verfication code to save API Key details") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:320
  - STORAGE call to update_option("mo_eve_allowed_corps", $corps) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:321
  - STORAGE call to update_option("mo_eve_allowed_alliances", $alliances) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:322
  - STORAGE call to update_option("mo_eve_allowed_char_name", $charName) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:340
  - STORAGE call to update_option("message", "Your configuration is updated.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:348
  - STORAGE call to update_option("message", "Please enter valid Client ID and Client Secret.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:357
  - STORAGE call to add_option("mo_oauth_app_name_" . $custom_appname, $appname) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:358
  - STORAGE call to update_option("mo_oauth_client_disable_authorization_header", isset($_POST["disable_authorization_header"])$_POST["disable_authorization_header"]0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:380
  - STORAGE call to update_option("message", "You can only add 1 application with free version. Upgrade to premium version if you want to add more applications.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:408
  - STORAGE call to update_option("mo_oauth_eveonline_enable", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:409
  - STORAGE call to update_option("mo_oauth_eveonline_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:410
  - STORAGE call to update_option("mo_oauth_eveonline_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:415
  - STORAGE call to update_option("message", "Your settings were saved. Go to Advanced EVE Online Settings for configuring restrictions on user sign in.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:418
  - STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:427
  - STORAGE call to update_option("mo_oauth_eveonline_enable", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:458
  - STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:463
  - STORAGE call to update_option("mo_oauth_icon_width", stripslashes(sanitize_text_field($_POST["mo_oauth_icon_width"]))) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:464
  - STORAGE call to update_option("mo_oauth_icon_height", stripslashes(sanitize_text_field($_POST["mo_oauth_icon_height"]))) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:465
  - STORAGE call to update_option("mo_oauth_icon_margin", stripslashes(sanitize_text_field($_POST["mo_oauth_icon_margin"]))) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:466
  - STORAGE call to update_option("mo_oauth_icon_configure_css", stripcslashes(sanitize_text_field($_POST["mo_oauth_icon_configure_css"]))) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:467
  - STORAGE call to update_option("mo_oauth_custom_logout_text", stripslashes(sanitize_text_field($_POST["mo_oauth_custom_logout_text"]))) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:468
  - STORAGE call to update_option("message", "Your settings were saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:477
  - STORAGE call to update_option("message", "Email Attribute Field is Required.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:491
  - STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:492
  - STORAGE call to update_option("message", "Your settings are saved successfully.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:506
  - STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:516
  - STORAGE call to update_option("mo_oauth_google_enable", isset($_POST["mo_oauth_google_enable"])$_POST["mo_oauth_google_enable"]0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:517
  - STORAGE call to update_option("mo_oauth_google_scope", $scope) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:518
  - STORAGE call to update_option("mo_oauth_google_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:519
  - STORAGE call to update_option("mo_oauth_google_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:524
  - STORAGE call to update_option("message", "Your settings were saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:527
  - STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:531
  - STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:532
  - STORAGE call to update_option("mo_oauth_google_enable", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:536
  - STORAGE call to update_option("message", "Please register customer before trying to save other configurations") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:549
  - STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:558
  - STORAGE call to update_option("mo_oauth_eveonline_enable", isset($_POST["mo_oauth_eveonline_enable"])$_POST["mo_oauth_eveonline_enable"]0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:559
  - STORAGE call to update_option("mo_oauth_eveonline_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:560
  - STORAGE call to update_option("mo_oauth_eveonline_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:565
  - STORAGE call to update_option("message", "Your settings were saved. Go to Advanced EVE Online Settings for configuring restrictions on user sign in.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:568
  - STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:572
  - STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:573
  - STORAGE call to update_option("mo_oauth_eveonline_enable", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:577
  - STORAGE call to update_option("message", "Please register customer before trying to save other configurations") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:591
  - STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:601
  - STORAGE call to update_option("mo_oauth_facebook_enable", isset($_POST["mo_oauth_facebook_enable"])$_POST["mo_oauth_facebook_enable"]0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:602
  - STORAGE call to update_option("mo_oauth_facebook_scope", $scope) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:603
  - STORAGE call to update_option("mo_oauth_facebook_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:604
  - STORAGE call to update_option("mo_oauth_facebook_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:609
  - STORAGE call to update_option("message", "Your settings were saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:612
  - STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:616
  - STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:617
  - STORAGE call to update_option("mo_oauth_google_enable", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:621
  - STORAGE call to update_option("message", "Please register customer before trying to save other configurations") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:636
  - STORAGE call to update_option("message", "Please fill up Email and Query fields to submit your query.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:641
  - STORAGE call to update_option("message", "Your query could not be submitted. Please try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:644
  - STORAGE call to update_option("message", "Thanks for getting in touch! We shall get back to you shortly.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:658
  - STORAGE call to update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:660
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:663
  - STORAGE call to update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:664
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:676
  - STORAGE call to update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:677
  - STORAGE call to update_option("mo_oauth_transactionId", $content["txId"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:678
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:681
  - STORAGE call to update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:682
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:698
  - STORAGE call to update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:703
  - STORAGE call to update_option("verify_customer", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:704
  - STORAGE call to update_option("mo_oauth_registration_status", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:705
  - STORAGE call to update_option("new_registration", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:713
  - STORAGE call to update_option("mo_oauth_admin_phone", $phone) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:717
  - STORAGE call to update_option("message", " A one time passcode is sent to " . get_site_option("mo_oauth_admin_phone") . ". Please enter the otp here to verify your email.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:719
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:722
  - STORAGE call to update_option("message", "There was an error in sending SMS. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:723
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:732
  - STORAGE call to update_option("message", "Plugin deactivated successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:753
  - STORAGE call to update_option("message", "Thank you for the feedback.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:756
  - STORAGE call to update_option("message", "Please Select one of the reasons ,if your reason is not mentioned please select Other Reasons") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:768
  - STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:769
  - STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:770
  - STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:771
  - STORAGE call to update_option("password", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:772
  - STORAGE call to update_option("message", "Customer retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:773
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:774
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:777
  - STORAGE call to update_option("message", "You already have an account with miniOrange. Please enter a valid password.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:778
  - STORAGE call to update_option("verify_customer", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:789
  - STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:791
  - STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:792
  - STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:793
  - STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:794
  - STORAGE call to update_option("password", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:795
  - STORAGE call to update_option("message", "Registered successfully.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:796
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OAUTH_REGISTRATION_COMPLETE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:797
  - STORAGE call to update_option("mo_oauth_new_customer", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:798
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:799
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings_page.php:65
  - STORAGE call to delete_option("password_mismatch") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings_page.php:133
  - STORAGE call to update_option("new_registration", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings_page.php:2653
  - STORAGE call to update_option("mo_oauth_eveonline_enable", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings_page.php:2655
  - STORAGE call to delete_option("mo_oauth_app_name_" . $appname) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings_page.php:2658
  - STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
uninstall.php:10
  - STORAGE call to delete_user_meta($user->ID, "user_eveonline_character_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta, user
uninstall.php:11
  - STORAGE call to delete_user_meta($user->ID, "user_eveonline_corporation_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta, user
uninstall.php:12
  - STORAGE call to delete_user_meta($user->ID, "user_eveonline_alliance_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta, user
uninstall.php:15
  - STORAGE call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:16
  - STORAGE call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:17
  - STORAGE call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:18
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:19
  - STORAGE call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:20
  - STORAGE call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:21
  - STORAGE call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:22
  - STORAGE call to delete_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:23
  - STORAGE call to delete_option("mo_oauth_google_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:24
  - STORAGE call to delete_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:25
  - STORAGE call to delete_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:26
  - STORAGE call to delete_option("mo_oauth_google_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:27
  - STORAGE call to delete_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:28
  - STORAGE call to delete_option("mo_oauth_facebook_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:29
  - STORAGE call to delete_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:30
  - STORAGE call to delete_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:31
  - STORAGE call to delete_option("mo_oauth_facebook_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:32
  - STORAGE call to delete_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:33
  - STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:34
  - STORAGE call to delete_option("mo_oauth_eveonline_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:35
  - STORAGE call to delete_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:36
  - STORAGE call to delete_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:37
  - STORAGE call to delete_option("mo_oauth_eveonline_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:38
  - STORAGE call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:39
  - STORAGE call to delete_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:40
  - STORAGE call to delete_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:41
  - STORAGE call to delete_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:42
  - STORAGE call to delete_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:43
  - STORAGE call to delete_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:44
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:45
  - STORAGE call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:46
  - STORAGE call to delete_option("mo_oauth_login_icon_space") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:47
  - STORAGE call to delete_option("mo_oauth_login_icon_space") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:48
  - STORAGE call to delete_option("mo_oauth_login_icon_custom_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:49
  - STORAGE call to delete_option("mo_oauth_login_icon_custom_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:50
  - STORAGE call to delete_option("mo_oauth_login_icon_custom_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:51
  - STORAGE call to delete_option("mo_oauth_login_icon_custom_boundary") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:52
  - STORAGE call to delete_option("mo_oauth_client_disable_authorization_header") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:53
  - STORAGE call to delete_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:54
  - STORAGE call to delete_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:55
  - STORAGE call to delete_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:56
  - STORAGE call to delete_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:57
  - STORAGE call to delete_option("mo_oauth_custom_logout_text") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:58
  - STORAGE call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

class-customer.php:203
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-customer.php:285
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-customer.php:368
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-customer.php:435
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-mo-oauth-widget.php:473
  - CRYPTOGRAPHY call to openssl_encrypt($token, $method, $customer_token, OPENSSL_RAW_DATAOPENSSL_ZERO_PADDING, $iv). 

manage-avatar.php:402
  - DELETION call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
manage-avatar.php:403
  - DELETION call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
manage-avatar.php:404
  - DELETION call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
manage-avatar.php:405
  - DELETION call to delete_post_meta($attachment_id, "_wp_attached_file") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
manage-avatar.php:406
  - DELETION call to delete_post_meta($attachment_id, "_wp_attachment_metadata") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
manage-avatar.php:419
  - DELETION call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_avatar_type") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
manage-avatar.php:420
  - DELETION call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
manage-avatar.php:422
  - DELETION call to wp_delete_post($attachment_id, true) alters data types {'wp_post', 'post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: wp_post, post, post_meta
mo_oauth_settings.php:64
  - DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:65
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:66
  - DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:67
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:68
  - DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:69
  - DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:70
  - DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:71
  - DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:72
  - DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:73
  - DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:74
  - DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:219
  - DELETION call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:221
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:237
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:243
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:273
  - DELETION call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:275
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:276
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:773
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:774
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:789
  - DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:798
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:799
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings_page.php:65
  - DELETION call to delete_option("password_mismatch") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings_page.php:2655
  - DELETION call to delete_option("mo_oauth_app_name_" . $appname) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:10
  - DELETION call to delete_user_meta($user->ID, "user_eveonline_character_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta, user
uninstall.php:11
  - DELETION call to delete_user_meta($user->ID, "user_eveonline_corporation_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta, user
uninstall.php:12
  - DELETION call to delete_user_meta($user->ID, "user_eveonline_alliance_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta, user
uninstall.php:15
  - DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:16
  - DELETION call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:17
  - DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:18
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:19
  - DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:20
  - DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:21
  - DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:22
  - DELETION call to delete_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:23
  - DELETION call to delete_option("mo_oauth_google_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:24
  - DELETION call to delete_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:25
  - DELETION call to delete_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:26
  - DELETION call to delete_option("mo_oauth_google_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:27
  - DELETION call to delete_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:28
  - DELETION call to delete_option("mo_oauth_facebook_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:29
  - DELETION call to delete_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:30
  - DELETION call to delete_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:31
  - DELETION call to delete_option("mo_oauth_facebook_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:32
  - DELETION call to delete_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:33
  - DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:34
  - DELETION call to delete_option("mo_oauth_eveonline_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:35
  - DELETION call to delete_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:36
  - DELETION call to delete_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:37
  - DELETION call to delete_option("mo_oauth_eveonline_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:38
  - DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:39
  - DELETION call to delete_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:40
  - DELETION call to delete_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:41
  - DELETION call to delete_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:42
  - DELETION call to delete_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:43
  - DELETION call to delete_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:44
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:45
  - DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:46
  - DELETION call to delete_option("mo_oauth_login_icon_space") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:47
  - DELETION call to delete_option("mo_oauth_login_icon_space") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:48
  - DELETION call to delete_option("mo_oauth_login_icon_custom_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:49
  - DELETION call to delete_option("mo_oauth_login_icon_custom_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:50
  - DELETION call to delete_option("mo_oauth_login_icon_custom_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:51
  - DELETION call to delete_option("mo_oauth_login_icon_custom_boundary") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:52
  - DELETION call to delete_option("mo_oauth_client_disable_authorization_header") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:53
  - DELETION call to delete_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:54
  - DELETION call to delete_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:55
  - DELETION call to delete_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:56
  - DELETION call to delete_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:57
  - DELETION call to delete_option("mo_oauth_custom_logout_text") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:58
  - DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

uninstall.php:10
  - Uninstall deletion call: DELETION call to delete_user_meta($user->ID, "user_eveonline_character_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta, user
uninstall.php:11
  - Uninstall deletion call: DELETION call to delete_user_meta($user->ID, "user_eveonline_corporation_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta, user
uninstall.php:12
  - Uninstall deletion call: DELETION call to delete_user_meta($user->ID, "user_eveonline_alliance_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta, user
uninstall.php:15
  - Uninstall deletion call: DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:16
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:17
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:18
  - Uninstall deletion call: DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:19
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:20
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:21
  - Uninstall deletion call: DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:22
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:23
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:24
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:25
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:26
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:27
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:28
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:29
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:30
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:31
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:32
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:33
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:34
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:35
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:36
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:37
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:38
  - Uninstall deletion call: DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:39
  - Uninstall deletion call: DELETION call to delete_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:40
  - Uninstall deletion call: DELETION call to delete_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:41
  - Uninstall deletion call: DELETION call to delete_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:42
  - Uninstall deletion call: DELETION call to delete_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:43
  - Uninstall deletion call: DELETION call to delete_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:44
  - Uninstall deletion call: DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:45
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:46
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_login_icon_space") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:47
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_login_icon_space") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:48
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_login_icon_custom_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:49
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_login_icon_custom_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:50
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_login_icon_custom_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:51
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_login_icon_custom_boundary") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:52
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_client_disable_authorization_header") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:53
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:54
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:55
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:56
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:57
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_custom_logout_text") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:58
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

By data type:
email
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
file
	PHPRetrievalDetector.file_get_contents($characterurl) - {'file'}
	PHPStorageDetector.file_put_contents($img, file_get_contents($characterurl)) - {'file'}
first_name
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
last_name
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
none
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	HashDetector.(unknown) - set()
	GenericEncryptionDetector.openssl_encrypt($token, $method, $customer_token, OPENSSL_RAW_DATAOPENSSL_ZERO_PADDING, $iv) - set()
	HashDetector.(unknown) - set()
	HashDetector.(unknown) - set()
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	OpenSSLDetector.(unknown) - set()
	HashDetector.(unknown) - set()
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	PHPIncludedDetector.(unknown) - set()
option
	WordPressRetrievalDetector.get_option("mo_oauth_app_name_" . $currentappname) - {'option'}
	WordPressStorageDetector.update_option("message", $content["status"]) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_client_disable_authorization_header") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_facebook_enable") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_client_secret") - {'option'}
	WordPressStorageDetector.update_option("message", "Passwords do not match.") - {'option'}
	UninstallDetector.delete_option("mo_oauth_google_enable") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	DeletionDetector.delete_option("mo_eve_allowed_alliances") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_enable") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_client_id") - {'option'}
	WordPressStorageDetector.update_option("verify_customer", "true") - {'option'}
	WordPressStorageDetector.update_option("message", $message) - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_phone") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_email", $email) - {'option'}
	DeletionDetector.delete_option("mo_oauth_google_scope") - {'option'}
	DeletionDetector.delete_option("mo_oauth_facebook_client_secret") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_google_message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_client_id") - {'option'}
	UninstallDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_client_secret") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_enable") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_char_name") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_icon_margin") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) - {'option'}
	WordPressStorageDetector.update_option("customer_token", $customerKey["token"]) - {'option'}
	WordPressRetrievalDetector.get_option("show_avatars") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_phone", $customerKey["phone"]) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_client_secret") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_phone") - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_corps") - {'option'}
	WordPressStorageDetector.delete_option("password") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_icon_configure_css") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_google_enable", false) - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_char_name") - {'option'}
	WordPressStorageDetector.update_option("message", "Customer retrieved successfully") - {'option'}
	WordPressStorageDetector.update_option("message", "Thank you for the feedback.") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_api_key") - {'option'}
	WordPressStorageDetector.update_option("password", $password) - {'option'}
	WordPressStorageDetector.update_option("message", "Plugin deactivated successfully") - {'option'}
	WordPressRetrievalDetector.get_option("password") - {'option'}
	WordPressStorageDetector.add_option("mo_oauth_login_icon_custom_size", "35") - {'option'}
	WordPressStorageDetector.add_option("mo_oauth_login_icon_custom_width", "325.43") - {'option'}
	WordPressStorageDetector.add_option("mo_oauth_login_icon_custom_height", "38.63") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_facebook_client_secret") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_fname") - {'option'}
	WordPressStorageDetector.add_option("mo_oauth_login_icon_custom_color", "2B41FF") - {'option'}
	WordPressStorageDetector.update_option("verify_customer", "true") - {'option'}
	UninstallDetector.delete_option("mo_eve_allowed_corps") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	DeletionDetector.delete_option("customer_token") - {'option'}
	WordPressStorageDetector.update_option("message", "You already have an account with miniOrange. Please enter a valid password.") - {'option'}
	UninstallDetector.delete_option("mo_oauth_facebook_client_id") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_enable", 1) - {'option'}
	UninstallDetector.delete_option("mo_oauth_login_icon_custom_boundary") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_new_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_client_id") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_customer_key", $customerKey["id"]) - {'option'}
	WordPressStorageDetector.delete_option("host_name") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_customer_key") - {'option'}
	UninstallDetector.delete_option("mo_oauth_eveonline_client_secret") - {'option'}
	DeletionDetector.delete_option("mo_eve_allowed_corps") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) - {'option'}
	WordPressStorageDetector.update_option("customer_token", $customerKey["token"]) - {'option'}
	DeletionDetector.delete_option("mo_oauth_eveonline_message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_configure_css") - {'option'}
	WordPressStorageDetector.update_option("message", "Registered successfully.") - {'option'}
	DeletionDetector.delete_option("mo_oauth_new_customer") - {'option'}
	UninstallDetector.delete_option("mo_oauth_new_customer") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_width") - {'option'}
	WordPressStorageDetector.update_option("password", "") - {'option'}
	DeletionDetector.delete_option("mo_oauth_eveonline_scope") - {'option'}
	DeletionDetector.delete_option("mo_oauth_facebook_message") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_custom_logout_text", stripslashes(sanitize_text_field($_POST["mo_oauth_custom_logout_text"]))) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_new_customer", 1) - {'option'}
	DeletionDetector.delete_option("password") - {'option'}
	DeletionDetector.delete_option("message") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OAUTH_REGISTRATION_COMPLETE") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_height") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_margin") - {'option'}
	DeletionDetector.delete_option("mo_oauth_eveonline_client_secret") - {'option'}
	WordPressStorageDetector.update_option("message", "Your settings were saved") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_alliances") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_custom_logout_text") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Client ID and Client Secret to save settings.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	DeletionDetector.delete_option("mo_oauth_facebook_client_id") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_phone", $phone) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_facebook_enable", isset($_POST["mo_oauth_facebook_enable"])$_POST["mo_oauth_facebook_enable"]0) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_enable", 1) - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_facebook_scope", $scope) - {'option'}
	UninstallDetector.delete_option("mo_oauth_icon_width") - {'option'}
	WordPressStorageDetector.update_option("message", "Email Attribute Field is Required.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	UninstallDetector.delete_option("mo_eve_allowed_char_name") - {'option'}
	UninstallDetector.delete_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_app_name_" . $key) - {'option'}
	WordPressRetrievalDetector.get_option("message") - {'option'}
	WordPressStorageDetector.update_option("message", " A one time passcode is sent to " . get_site_option("mo_oauth_admin_phone") . ". Please enter the otp here to verify your email.") - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("mo_eve_allowed_char_name", $charName) - {'option'}
	DeletionDetector.delete_option("mo_eve_allowed_char_name") - {'option'}
	WordPressStorageDetector.add_option("mo_oauth_login_icon_space", "4") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	UninstallDetector.delete_option("message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.add_option("mo_oauth_login_icon_custom_boundary", "4") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_facebook_client_secret", $clientsecret) - {'option'}
	WordPressStorageDetector.update_option("message", "Your configuration is updated.") - {'option'}
	WordPressStorageDetector.update_option("message", $message) - {'option'}
	WordPressStorageDetector.update_option("message", "All the fields are required. Please enter Key ID and Verfication code to save API Key details.") - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	WordPressStorageDetector.update_option("mo_eve_api_key", $apiKey) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_google_enable", false) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_enable") - {'option'}
	WordPressStorageDetector.update_option("mo_eve_verification_code", $verificationCode) - {'option'}
	WordPressStorageDetector.update_option("message", "Please fill up Email and Query fields to submit your query.") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter valid Client ID and Client Secret.") - {'option'}
	WordPressStorageDetector.update_option("message", "Your API Key details have been saved") - {'option'}
	WordPressStorageDetector.update_option("message", "Please register customer before trying to save other configurations") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Client ID and Client Secret to save settings.") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_google_enable", isset($_POST["mo_oauth_google_enable"])$_POST["mo_oauth_google_enable"]0) - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_app_name_" . $key) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	DeletionDetector.delete_option("mo_oauth_new_customer") - {'option'}
	UninstallDetector.delete_option("mo_oauth_facebook_scope") - {'option'}
	DeletionDetector.delete_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_google_scope", $scope) - {'option'}
	WordPressStorageDetector.update_option("message", "Thanks for getting in touch! We shall get back to you shortly.") - {'option'}
	UninstallDetector.delete_option("mo_oauth_icon_height") - {'option'}
	WordPressStorageDetector.update_option("mo_eve_allowed_corps", $corps) - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Key ID and Verfication code to save API Key details") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_enable") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_apps_list", $appslist) - {'option'}
	WordPressStorageDetector.update_option("message", "Your settings were saved") - {'option'}
	WordPressStorageDetector.update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") - {'option'}
	WordPressStorageDetector.update_option("message", $message) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Client ID and Client Secret to save settings") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "") - {'option'}
	UninstallDetector.delete_option("mo_oauth_google_message") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_transactionId", $content["txId"]) - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Client ID and Client Secret to save settings.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("message", "Please register customer before trying to save other configurations") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_icon_margin", stripslashes(sanitize_text_field($_POST["mo_oauth_icon_margin"]))) - {'option'}
	WordPressStorageDetector.delete_option("password_mismatch") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_icon_configure_css", stripcslashes(sanitize_text_field($_POST["mo_oauth_icon_configure_css"]))) - {'option'}
	WordPressStorageDetector.update_option("new_registration", "true") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_enable", isset($_POST["mo_oauth_eveonline_enable"])$_POST["mo_oauth_eveonline_enable"]0) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_client_id", $clientid) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_fname", $fname) - {'option'}
	DeletionDetector.delete_option("mo_oauth_google_client_id") - {'option'}
	WordPressStorageDetector.update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") - {'option'}
	DeletionDetector.delete_option("mo_oauth_facebook_scope") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_width") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_google_scope") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_google_enable") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_api_key") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_client_secret", $clientsecret) - {'option'}
	WordPressStorageDetector.update_option("customer_token", $customerKey["token"]) - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.delete_option("customer_token") - {'option'}
	WordPressStorageDetector.update_option("mo_eve_allowed_alliances", $alliances) - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_corps") - {'option'}
	WordPressStorageDetector.update_option("message", "Your settings were saved. Go to Advanced EVE Online Settings for configuring restrictions on user sign in.") - {'option'}
	UninstallDetector.delete_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_alliances") - {'option'}
	WordPressStorageDetector.update_option("customer_token", $customerKey["token"]) - {'option'}
	WordPressStorageDetector.update_option("message", "Customer created & retrieved successfully") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_alliances") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_" . $name . "_scope") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_char_name") - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_char_name") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_icon_height") - {'option'}
	WordPressStorageDetector.update_option("message", "Your settings were saved") - {'option'}
	UninstallDetector.delete_option("mo_oauth_login_icon_space") - {'option'}
	WordPressRetrievalDetector.get_option("verify_customer") - {'option'}
	WordPressStorageDetector.update_option("message", "Choose a password with minimum length 8.") - {'option'}
	UninstallDetector.delete_option("mo_oauth_admin_api_key") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_email", $email) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_facebook_client_id", $clientid) - {'option'}
	DeletionDetector.delete_option("mo_oauth_google_client_secret") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_facebook_message") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_google_client_secret") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_company", $company) - {'option'}
	UninstallDetector.delete_option("mo_eve_allowed_alliances") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_lname", $lname) - {'option'}
	UninstallDetector.delete_option("mo_oauth_google_client_secret") - {'option'}
	WordPressStorageDetector.update_option("message", "Your query could not be submitted. Please try again.") - {'option'}
	DeletionDetector.delete_option("mo_eve_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.delete_option("mo_eve_allowed_alliances") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_customer_key", $customerKey["id"]) - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	UninstallDetector.delete_option("mo_oauth_facebook_enable") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressStorageDetector.delete_option("mo_eve_allowed_char_name") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("message", "Failed to create customer. Try again.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_" . $name . "_client_secret") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_login_icon_space") - {'option'}
	UninstallDetector.delete_option("mo_oauth_eveonline_scope") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	UninstallDetector.delete_option("mo_oauth_login_icon_custom_color") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_char_name") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_" . $name . "_client_id") - {'option'}
	UninstallDetector.delete_option("mo_eve_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("avatar_rating") - {'option'}
	WordPressStorageDetector.delete_option("mo_eve_allowed_corps") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_login_icon_space") - {'option'}
	WordPressStorageDetector.add_option("mo_oauth_app_name_" . $custom_appname, $appname) - {'option'}
	WordPressStorageDetector.update_option("message", $message) - {'option'}
	DeletionDetector.delete_option("mo_oauth_eveonline_client_id") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_registration_status") - {'option'}
	UninstallDetector.delete_option("mo_oauth_client_show_mo_server_message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_lname") - {'option'}
	WordPressRetrievalDetector.get_option("show_avatars") - {'option'}
	UninstallDetector.delete_option("mo_eve_verification_code") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Client ID and Client Secret to save settings") - {'option'}
	UninstallDetector.delete_option("new_registration") - {'option'}
	DeletionDetector.delete_option("mo_eve_verification_code") - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Client ID and Client Secret to save settings") - {'option'}
	UninstallDetector.delete_option("mo_oauth_eveonline_message") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_enable", false) - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_alliances") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_company") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_login_icon_custom_color") - {'option'}
	DeletionDetector.delete_option("mo_oauth_login_icon_custom_size") - {'option'}
	WordPressStorageDetector.update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_eveonline_scope") - {'option'}
	UninstallDetector.delete_option("mo_oauth_login_icon_space") - {'option'}
	UninstallDetector.delete_option("mo_oauth_client_disable_authorization_header") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_eveonline_client_id") - {'option'}
	UninstallDetector.delete_option("mo_oauth_icon_configure_css") - {'option'}
	UninstallDetector.delete_option("mo_oauth_login_icon_custom_size") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_alliances") - {'option'}
	DeletionDetector.delete_option("mo_oauth_login_icon_custom_color") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("message", "Your settings were saved. Go to Advanced EVE Online Settings for configuring restrictions on user sign in.") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_login_icon_custom_boundary") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_eveonline_message") - {'option'}
	UninstallDetector.delete_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	UninstallDetector.delete_option("mo_oauth_login_icon_custom_height") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_eveonline_client_secret") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_login_icon_custom_size") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_client_id") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_icon_height", stripslashes(sanitize_text_field($_POST["mo_oauth_icon_height"]))) - {'option'}
	WordPressStorageDetector.update_option("message", "Please Select one of the reasons ,if your reason is not mentioned please select Other Reasons") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	DeletionDetector.delete_option("password") - {'option'}
	UninstallDetector.delete_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_phone", $customerKey["phone"]) - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_phone") - {'option'}
	DeletionDetector.delete_option("mo_oauth_client_show_mo_server_message") - {'option'}
	DeletionDetector.delete_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_corps") - {'option'}
	WordPressStorageDetector.update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	UninstallDetector.delete_option("mo_oauth_facebook_message") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_login_icon_custom_height") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.update_option("message", "All the fields are required. Please enter valid entries.") - {'option'}
	WordPressStorageDetector.delete_option("host_name") - {'option'}
	DeletionDetector.delete_option("mo_oauth_google_enable") - {'option'}
	DeletionDetector.delete_option("password_mismatch") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_google_client_id", $clientid) - {'option'}
	WordPressStorageDetector.delete_option("message") - {'option'}
	UninstallDetector.delete_option("customer_token") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_api_key") - {'option'}
	UninstallDetector.delete_option("mo_oauth_eveonline_client_id") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_client_secret") - {'option'}
	WordPressStorageDetector.update_option("message", "Your settings are saved successfully.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_client_id") - {'option'}
	UninstallDetector.delete_option("mo_oauth_facebook_client_secret") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_email") - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_api_key") - {'option'}
	DeletionDetector.delete_option("mo_oauth_new_customer") - {'option'}
	DeletionDetector.delete_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_client_secret") - {'option'}
	DeletionDetector.delete_option("host_name") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.delete_option("customer_token") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("message") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_apps_list", $appslist) - {'option'}
	UninstallDetector.delete_option("mo_oauth_google_scope") - {'option'}
	WordPressRetrievalDetector.get_option("avatar_default") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_new_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_client_secret") - {'option'}
	DeletionDetector.delete_option("host_name") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_registration_status") - {'option'}
	UninstallDetector.delete_option("mo_oauth_icon_margin") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.delete_option("message") - {'option'}
	WordPressStorageDetector.delete_option("mo_eve_api_key") - {'option'}
	WordPressStorageDetector.update_option("host_name", "https://login.xecurify.com") - {'option'}
	WordPressStorageDetector.delete_option("mo_eve_verification_code") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_client_show_mo_server_message") - {'option'}
	UninstallDetector.delete_option("mo_oauth_google_client_id") - {'option'}
	DeletionDetector.delete_option("mo_oauth_app_name_" . $appname) - {'option'}
	WordPressStorageDetector.update_option("host_name", "https://login.xecurify.com") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_app_name_" . $appname) - {'option'}
	WordPressStorageDetector.update_option("message", "All the fields are required. Please enter valid entries.") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_client_show_mo_server_message", 1) - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_icon_width", stripslashes(sanitize_text_field($_POST["mo_oauth_icon_width"]))) - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressStorageDetector.update_option("message", "You can only add 1 application with free version. Upgrade to premium version if you want to add more applications.") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_icon_width") - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_client_show_mo_server_message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressStorageDetector.delete_option("password") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_facebook_client_id") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_client_id", $clientid) - {'option'}
	DeletionDetector.delete_option("customer_token") - {'option'}
	WordPressRetrievalDetector.get_option("password") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_custom_logout_text") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_client_secret", $clientsecret) - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_google_client_id") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_client_show_mo_server_message") - {'option'}
	WordPressStorageDetector.update_option("message", "Invalid username or password. Please try again.") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_apps_list", $appslist) - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_verification_code") - {'option'}
	WordPressRetrievalDetector.get_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_client_secret") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_enable", 0) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_google_client_secret", $clientsecret) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_customer_key", $customerKey["id"]) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_client_id") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_facebook_scope") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_new_customer") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("message", "Account already exist. Please Login.") - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_client_disable_authorization_header", isset($_POST["disable_authorization_header"])$_POST["disable_authorization_header"]0) - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_client_disable_authorization_header") - {'option'}
	UninstallDetector.delete_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_" . $_REQUEST["app_name"] . "_client_id") - {'option'}
	WordPressStorageDetector.update_option("message", "Please register customer before trying to save other configurations") - {'option'}
	DeletionDetector.delete_option("mo_oauth_login_icon_space") - {'option'}
	DeletionDetector.delete_option("mo_oauth_login_icon_space") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") - {'option'}
	DeletionDetector.delete_option("mo_oauth_login_icon_custom_height") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_height") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_width") - {'option'}
	WordPressStorageDetector.update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") - {'option'}
	WordPressStorageDetector.update_option("verify_customer", "") - {'option'}
	DeletionDetector.delete_option("mo_oauth_icon_width") - {'option'}
	WordPressStorageDetector.update_option("new_registration", "true") - {'option'}
	UninstallDetector.delete_option("mo_oauth_custom_logout_text") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_corps") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_phone", $phone) - {'option'}
	DeletionDetector.delete_option("mo_oauth_login_icon_custom_boundary") - {'option'}
	DeletionDetector.delete_option("mo_oauth_client_disable_authorization_header") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_margin") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_configure_css") - {'option'}
	DeletionDetector.delete_option("mo_oauth_icon_height") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") - {'option'}
	WordPressStorageDetector.update_option("message", "There was an error in sending SMS. Please click on Resend OTP to try again.") - {'option'}
	DeletionDetector.delete_option("mo_oauth_icon_margin") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_margin") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_height") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") - {'option'}
	DeletionDetector.delete_option("mo_oauth_icon_configure_css") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_verification_code") - {'option'}
	DeletionDetector.delete_option("mo_oauth_custom_logout_text") - {'option'}
	WordPressRetrievalDetector.get_option("customer_token") - {'option'}
	DeletionDetector.delete_option("mo_oauth_client_show_mo_server_message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("password", $password) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_client_id") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_customer_key", $customerKey["id"]) - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_api_key") - {'option'}
	DeletionDetector.delete_option("mo_oauth_google_message") - {'option'}
	WordPressStorageDetector.update_option("password", "") - {'option'}
	UninstallDetector.delete_option("mo_oauth_admin_phone") - {'option'}
	WordPressStorageDetector.update_option("message", "Customer retrieved successfully") - {'option'}
	DeletionDetector.delete_option("message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_corps") - {'option'}
	DeletionDetector.delete_option("mo_oauth_facebook_enable") - {'option'}
password
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
post
	DeletionDetector.wp_delete_post($attachment_id, true) - {'wp_post', 'post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($attachment_id, true) - {'wp_post', 'post', 'post_meta'}
post_meta
	WordPressStorageDetector.delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar") - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($attachment_id, "_wp_attached_file") - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($attachment_id, "_wp_attachment_metadata") - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating") - {'post_meta'}
	DeletionDetector.delete_post_meta($attachment_id, "_wp_attachment_metadata") - {'post_meta'}
	DeletionDetector.delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar_rating", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", true) - {'post_meta'}
	DeletionDetector.delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating") - {'post_meta'}
	DeletionDetector.delete_post_meta($attachment_id, "_wp_attached_file") - {'post_meta'}
	DeletionDetector.delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar") - {'post_meta'}
	DeletionDetector.wp_delete_post($attachment_id, true) - {'wp_post', 'post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", $custom_avatar) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", $avatar) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating", "G") - {'post_meta'}
	WordPressStorageDetector.wp_delete_post($attachment_id, true) - {'wp_post', 'post', 'post_meta'}
remote
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
user
	WordPressRetrievalDetector.get_user_by("login", $email) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	WordPressRetrievalDetector.get_user_by("login", $email) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	WordPressStorageDetector.wp_create_user($email, $random_password) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("email", $email) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($id) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_update_user(["ID" => $user_id]) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_create_user($email, $random_password, $email) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_create_user($user_email, $random_password, $user_email) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $characterID) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	UninstallDetector.delete_user_meta($user->ID, "user_eveonline_corporation_name") - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_insert_user($userdata) - {'user_meta', 'user'}
	UninstallDetector.delete_user_meta($user->ID, "user_eveonline_character_name") - {'user_meta', 'user'}
	WordPressStorageDetector.delete_user_meta($user->ID, "user_eveonline_character_name") - {'user_meta', 'user'}
	WordPressStorageDetector.delete_user_meta($user->ID, "user_eveonline_alliance_name") - {'user_meta', 'user'}
	WordPressStorageDetector.delete_user_meta($user->ID, "user_eveonline_corporation_name") - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_create_user($email, $random_password) - {'user_meta', 'user'}
	UninstallDetector.delete_user_meta($user->ID, "user_eveonline_alliance_name") - {'user_meta', 'user'}
	DeletionDetector.delete_user_meta($user->ID, "user_eveonline_character_name") - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_users($args) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_users([]) - {'user_meta', 'user'}
	DeletionDetector.delete_user_meta($user->ID, "user_eveonline_corporation_name") - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "user_eveonline_character_name", true) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "user_eveonline_corporation_name", true) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "user_eveonline_alliance_name", true) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	DeletionDetector.delete_user_meta($user->ID, "user_eveonline_alliance_name") - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_insert_user($userdata) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $email) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $characterID) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_update_user(["ID" => $user_id]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("ID", $user_id) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_create_user($user_email, $random_password, $user_email) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_create_user($email, $random_password, $email) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	WordPressRetrievalDetector.get_user_by("email", $user_email) - {'user_meta', 'user'}
user_meta
	WordPressRetrievalDetector.get_user_by("login", $email) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	WordPressRetrievalDetector.get_user_by("login", $email) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	WordPressStorageDetector.wp_create_user($email, $random_password) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("email", $email) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($id) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_update_user(["ID" => $user_id]) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_create_user($email, $random_password, $email) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_create_user($user_email, $random_password, $user_email) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $characterID) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar", true) - {'user_meta'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	UninstallDetector.delete_user_meta($user->ID, "user_eveonline_corporation_name") - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_insert_user($userdata) - {'user_meta', 'user'}
	UninstallDetector.delete_user_meta($user->ID, "user_eveonline_character_name") - {'user_meta', 'user'}
	WordPressStorageDetector.delete_user_meta($user->ID, "user_eveonline_character_name") - {'user_meta', 'user'}
	WordPressStorageDetector.delete_user_meta($user->ID, "user_eveonline_alliance_name") - {'user_meta', 'user'}
	WordPressStorageDetector.delete_user_meta($user->ID, "user_eveonline_corporation_name") - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "mo_oauth_avatar_manager_avatar_type", "custom") - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", $attachment_id) - {'user_meta'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	DeletionDetector.delete_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar") - {'user_meta'}
	WordpressHashingFnDetector.wp_create_user($email, $random_password) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", true) - {'user_meta'}
	DeletionDetector.delete_user_meta($user->ID, "mo_oauth_avatar_manager_avatar_type") - {'user_meta'}
	UninstallDetector.delete_user_meta($user->ID, "user_eveonline_alliance_name") - {'user_meta', 'user'}
	DeletionDetector.delete_user_meta($user->ID, "user_eveonline_character_name") - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", true) - {'user_meta'}
	WordPressStorageDetector.delete_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar") - {'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_users($args) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_users([]) - {'user_meta', 'user'}
	DeletionDetector.delete_user_meta($user->ID, "user_eveonline_corporation_name") - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "user_eveonline_character_name", true) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "user_eveonline_corporation_name", true) - {'user_meta', 'user'}
	WordPressStorageDetector.delete_user_meta($user->ID, "mo_oauth_avatar_manager_avatar_type") - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "user_eveonline_alliance_name", true) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	DeletionDetector.delete_user_meta($user->ID, "user_eveonline_alliance_name") - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_insert_user($userdata) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $email) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'last_name', 'user', 'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $characterID) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_update_user(["ID" => $user_id]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("ID", $user_id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_set_current_user($user_id) - {'user_meta'}
	WordpressHashingFnDetector.wp_create_user($user_email, $random_password, $user_email) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_create_user($email, $random_password, $email) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'first_name', 'user', 'user_meta'}
	WordPressRetrievalDetector.get_user_by("email", $user_email) - {'user_meta', 'user'}
wp_post
	DeletionDetector.wp_delete_post($attachment_id, true) - {'wp_post', 'post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($attachment_id, true) - {'wp_post', 'post', 'post_meta'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:01:06.262237.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 29147 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:02.558446.

!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 1714
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 3361
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 12320
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 13262
1000 STORE_REACHES edges created
2000 STORE_REACHES edges created
3000 STORE_REACHES edges created
4000 STORE_REACHES edges created
5000 STORE_REACHES edges created
6000 STORE_REACHES edges created
7000 STORE_REACHES edges created
8000 STORE_REACHES edges created
9000 STORE_REACHES edges created
10000 STORE_REACHES edges created
11000 STORE_REACHES edges created
12000 STORE_REACHES edges created
13000 STORE_REACHES edges created
14000 STORE_REACHES edges created
15000 STORE_REACHES edges created
16000 STORE_REACHES edges created
17000 STORE_REACHES edges created
18000 STORE_REACHES edges created
19000 STORE_REACHES edges created
20000 STORE_REACHES edges created
21000 STORE_REACHES edges created
22000 STORE_REACHES edges created
23000 STORE_REACHES edges created
24000 STORE_REACHES edges created
25000 STORE_REACHES edges created
26000 STORE_REACHES edges created
27000 STORE_REACHES edges created
28000 STORE_REACHES edges created
29000 STORE_REACHES edges created
29147 STORE_REACHES edges created
29147 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 1000 nodes as PERSONAL
Tainted 1526 nodes as PERSONAL
In total, tainted 1526 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
Tainted 456 nodes as ENCRYPTED
In total, tainted 456 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:01:25.553780.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:04:13.561128!
Request variable '$_POST["email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["mo_oauth_email_attr"]' of personal types {'email'} is found.,,None
Request variable '$_POST["mo_oauth_email_attr"]' of personal types {'email'} is found.,,None
Request variable '$_POST["mo_oauth_email_attr"]' of personal types {'email'} is found.,,None
Request variable '$_POST["mo_oauth_contact_us_email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["mo_oauth_contact_us_email"]' of personal types {'email'} is found.,,None
DELETION call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($attachment_id, "_wp_attached_file") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($attachment_id, "_wp_attachment_metadata") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_avatar_type") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to wp_delete_post($attachment_id, true) alters data types {'wp_post', 'post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
DELETION call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_app_name_" . $appname) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("password_mismatch") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_user_meta($user->ID, "user_eveonline_character_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_user_meta($user->ID, "user_eveonline_corporation_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_user_meta($user->ID, "user_eveonline_alliance_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_google_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_google_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_facebook_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_facebook_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_eveonline_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_eveonline_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_login_icon_space") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_login_icon_space") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_login_icon_custom_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_login_icon_custom_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_login_icon_custom_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_login_icon_custom_boundary") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_client_disable_authorization_header") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_custom_logout_text") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to openssl_encrypt($token, $method, $customer_token, OPENSSL_RAW_DATAOPENSSL_ZERO_PADDING, $iv).,None,None
hash called with approved hash algorithm sha512.,sha512,None
hash called with approved hash algorithm sha512.,sha512,None
hash called with approved hash algorithm sha512.,sha512,None
hash called with approved hash algorithm sha512.,sha512,None
openssl_encrypt called with unknown encryption algorithm.,None,None
MD5 called with parameters [trim, strtolower, email]. Ignore if [trim, strtolower, email] does not contain personal information.,md5,None
RETRIEVAL call to file_get_contents($characterurl).,None,None
STORAGE call to file_put_contents($img, file_get_contents($characterurl)).,None,None
object property '$current_user->user_firstname' of personal types {'first_name', 'user', 'user_meta'} is found.,,None
object property '$current_user->user_firstname' of personal types {'first_name', 'user', 'user_meta'} is found.,,None
object property '$current_user->user_lastname' of personal types {'last_name', 'user', 'user_meta'} is found.,,None
object property '$current_user->user_lastname' of personal types {'last_name', 'user', 'user_meta'} is found.,,None
object property '$this->email' of personal types {'email'} is found.,,None
object property '$user->user_lastname' of personal types {'last_name', 'user', 'user_meta'} is found.,,None
object property '$user->user_firstname' of personal types {'first_name', 'user', 'user_meta'} is found.,,None
object property '$user->user_lastname' of personal types {'last_name', 'user', 'user_meta'} is found.,,None
object property '$user->user_firstname' of personal types {'first_name', 'user', 'user_meta'} is found.,,None
object property '$this->email' of personal types {'email'} is found.,,None
object property '$user->user_email' of personal types {'email'} is found.,,None
object property '$user->user_email' of personal types {'email'} is found.,,None
object property '$user->user_email' of personal types {'email'} is found.,,None
object property '$id_or_email->comment_author_email' of personal types {'email'} is found.,,None
object property '$id_or_email->comment_author_email' of personal types {'email'} is found.,,None
object property '$user->user_email' of personal types {'email'} is found.,,None
object property '$current_user->user_firstname' of personal types {'first_name', 'user', 'user_meta'} is found.,,None
object property '$current_user->user_firstname' of personal types {'first_name', 'user', 'user_meta'} is found.,,None
object property '$current_user->user_lastname' of personal types {'last_name', 'user', 'user_meta'} is found.,,None
object property '$current_user->user_lastname' of personal types {'last_name', 'user', 'user_meta'} is found.,,None
Uninstall deletion call: DELETION call to delete_user_meta($user->ID, "user_eveonline_character_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_user_meta($user->ID, "user_eveonline_corporation_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_user_meta($user->ID, "user_eveonline_alliance_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_login_icon_space") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_login_icon_space") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_login_icon_custom_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_login_icon_custom_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_login_icon_custom_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_login_icon_custom_boundary") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_client_disable_authorization_header") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_custom_logout_text") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
variable '$email' of personal types {'email'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$link_with_username' of personal types {'user_meta', 'user'} is found.,,None
variable '$link_with_username' of personal types {'user_meta', 'user'} is found.,,None
variable '$email_attr' of personal types {'email'} is found.,,None
variable '$email_attr' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email_attr' of personal types {'email'} is found.,,None
variable '$email_attr' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$eveonline_email' of personal types {'email'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$eveonline_email' of personal types {'email'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$eveonline_email' of personal types {'email'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$eveonline_email' of personal types {'email'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email_hash' of personal types {'email'} is found.,,None
variable '$email_hash' of personal types {'email'} is found.,,None
variable '$email_hash' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email_attr' of personal types {'email'} is found.,,None
variable '$email_attr' of personal types {'email'} is found.,,None
variable '$email_attr' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($resourceownerdetailsurl, ["method" => "GET", "timeout" => 45, "redirection" => 5, "httpversion" => "1.0", "blocking" => true, "headers" => ["Authorization" => "Bearer " . $access_token], "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,['https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token']
API call to wp_remote_post($tokenendpoint, ["method" => "POST", "timeout" => 45, "redirection" => 5, "httpversion" => "1.0", "blocking" => true, "headers" => [], "body" => ["grant_type" => "authorization_code", "code" => $code, "client_id" => $clientid, "client_secret" => $clientsecret, "redirect_uri" => $redirect_url], "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,['https://www.googleapis.com/oauth2/v4/token']
API call to wp_remote_get($url, ["method" => "GET", "timeout" => 45, "redirection" => 5, "httpversion" => , "blocking" => true, "headers" => [], "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,['https://esi.evetech.net/latest/characters/', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token']
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_" . $name . "_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_" . $name . "_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_" . $name . "_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_fname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_lname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_company") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_app_name_" . $key) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_app_name_" . $key) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("login", $email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_user_by("email", $email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_user_by("login", $email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to wp_set_current_user($user_id) alters data types {'user_meta'}. Passed arguments: 0: $id (int). Returns (WP_User).,None,None
RETRIEVAL call to get_user_by("ID", $user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("mo_oauth_" . $_REQUEST["app_name"] . "_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("email", $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("login", $characterID) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_user_by("login", $characterID) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_user_by("login", $email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("show_avatars") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("avatar_default") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("avatar_rating") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar_rating", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("show_avatars") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_userdata($id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_userdata($id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_userdata($id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_users($args) alters data types {'user_meta', 'user'}. Passed arguments: 0: $args (array). Returns (array).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "user_eveonline_character_name", true) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "user_eveonline_corporation_name", true) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "user_eveonline_alliance_name", true) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_custom_logout_text") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_client_disable_authorization_header") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_app_name_" . $currentappname) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_users([]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $args (array). Returns (array).,None,None
RETRIEVAL call to get_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
STORAGE call to update_option("host_name", "https://login.xecurify.com") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_create_user($user_email, $random_password, $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_create_user($email, $random_password, $email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).,None,None
STORAGE call to wp_create_user($email, $random_password) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string). Returns (int|WP_Error).,None,None
STORAGE call to wp_update_user(["ID" => $user_id]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", $avatar) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_post_meta($attachment_id, "_wp_attached_file") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_post_meta($attachment_id, "_wp_attachment_metadata") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_avatar_type") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to wp_delete_post($attachment_id, true) alters data types {'wp_post', 'post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", $custom_avatar) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating", "G") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "mo_oauth_avatar_manager_avatar_type", "custom") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", $attachment_id) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("host_name", "https://login.xecurify.com") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_client_show_mo_server_message", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "All the fields are required. Please enter valid entries.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Choose a password with minimum length 8.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_email", $email) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_phone", $phone) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_fname", $fname) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_lname", $lname) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_company", $company) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("password", $password) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_phone", $customerKey["phone"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Customer created & retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Failed to create customer. Try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Account already exist. Please Login.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", $content["status"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Passwords do not match.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("verify_customer", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "All the fields are required. Please enter valid entries.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_email", $email) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("password", $password) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_phone", $customerKey["phone"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Customer retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Invalid username or password. Please try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "All the fields are required. Please enter Key ID and Verfication code to save API Key details.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_eve_api_key", $apiKey) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_eve_verification_code", $verificationCode) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your API Key details have been saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Key ID and Verfication code to save API Key details") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_eve_allowed_corps", $corps) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_eve_allowed_alliances", $alliances) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_eve_allowed_char_name", $charName) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your configuration is updated.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter valid Client ID and Client Secret.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mo_oauth_app_name_" . $custom_appname, $appname) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_client_disable_authorization_header", isset($_POST["disable_authorization_header"])$_POST["disable_authorization_header"]0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mo_oauth_login_icon_space", "4") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mo_oauth_login_icon_custom_width", "325.43") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mo_oauth_login_icon_custom_height", "38.63") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "You can only add 1 application with free version. Upgrade to premium version if you want to add more applications.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mo_oauth_login_icon_custom_size", "35") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mo_oauth_login_icon_custom_color", "2B41FF") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_enable", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mo_oauth_login_icon_custom_boundary", "4") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your settings were saved. Go to Advanced EVE Online Settings for configuring restrictions on user sign in.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_enable", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_icon_width", stripslashes(sanitize_text_field($_POST["mo_oauth_icon_width"]))) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_icon_height", stripslashes(sanitize_text_field($_POST["mo_oauth_icon_height"]))) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_icon_margin", stripslashes(sanitize_text_field($_POST["mo_oauth_icon_margin"]))) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_icon_configure_css", stripcslashes(sanitize_text_field($_POST["mo_oauth_icon_configure_css"]))) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_custom_logout_text", stripslashes(sanitize_text_field($_POST["mo_oauth_custom_logout_text"]))) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your settings were saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Email Attribute Field is Required.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your settings are saved successfully.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_google_enable", isset($_POST["mo_oauth_google_enable"])$_POST["mo_oauth_google_enable"]0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_google_scope", $scope) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_google_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_google_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your settings were saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_google_enable", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please register customer before trying to save other configurations") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_enable", isset($_POST["mo_oauth_eveonline_enable"])$_POST["mo_oauth_eveonline_enable"]0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your settings were saved. Go to Advanced EVE Online Settings for configuring restrictions on user sign in.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_enable", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please register customer before trying to save other configurations") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_facebook_enable", isset($_POST["mo_oauth_facebook_enable"])$_POST["mo_oauth_facebook_enable"]0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_facebook_scope", $scope) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_facebook_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_facebook_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your settings were saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_google_enable", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please register customer before trying to save other configurations") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please fill up Email and Query fields to submit your query.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Your query could not be submitted. Please try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Thanks for getting in touch! We shall get back to you shortly.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_transactionId", $content["txId"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("verify_customer", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("new_registration", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_phone", $phone) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", " A one time passcode is sent to " . get_site_option("mo_oauth_admin_phone") . ". Please enter the otp here to verify your email.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "There was an error in sending SMS. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Plugin deactivated successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Thank you for the feedback.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please Select one of the reasons ,if your reason is not mentioned please select Other Reasons") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("password", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Customer retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "You already have an account with miniOrange. Please enter a valid password.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("verify_customer", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("password", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Registered successfully.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OAUTH_REGISTRATION_COMPLETE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_new_customer", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("new_registration", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_enable", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_app_name_" . $appname) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("password_mismatch") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_user_meta($user->ID, "user_eveonline_character_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_user_meta($user->ID, "user_eveonline_corporation_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_user_meta($user->ID, "user_eveonline_alliance_name") alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_google_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_google_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_facebook_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_facebook_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_eveonline_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_eveonline_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_login_icon_space") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_login_icon_space") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_login_icon_custom_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_login_icon_custom_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_login_icon_custom_color") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_login_icon_custom_boundary") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_client_disable_authorization_header") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_custom_logout_text") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
CRYPTOGRAPHY call to wp_create_user($user_email, $random_password, $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).,hash,None
CRYPTOGRAPHY call to wp_create_user($email, $random_password, $email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).,hash,None
CRYPTOGRAPHY call to wp_create_user($email, $random_password) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string). Returns (int|WP_Error).,hash,None
CRYPTOGRAPHY call to wp_update_user(["ID" => $user_id]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,hash,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
Data Deletion violation! The plugin has storage node that has no identifier and cannot be accessed!
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("message", $content["status"])", found in file mo_oauth_settings.php at line 233. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("message", $message)", found in file mo_oauth_settings.php at line 568. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("mo_oauth_admin_email", $email)", found in file mo_oauth_settings.php at line 261. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("mo_oauth_admin_api_key", $customerKey["apiKey"])", found in file mo_oauth_settings.php at line 269. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("customer_token", $customerKey["token"])", found in file mo_oauth_settings.php at line 270. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("mo_oauth_admin_phone", $customerKey["phone"])", found in file mo_oauth_settings.php at line 272. 

[has_storage] WP User info of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "wp_create_user($email, $random_password)", found in file class-mo-oauth-widget.php at line 629. 

[has_storage] WP User info of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "wp_update_user(["ID" => $user_id])", found in file class-mo-oauth-widget.php at line 631. 

[has_storage] WP User info of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "wp_create_user($email, $random_password, $email)", found in file class-mo-oauth-widget.php at line 627. 

[has_storage] WP User info of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "wp_create_user($user_email, $random_password, $user_email)", found in file class-mo-oauth-widget.php at line 497. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("message", $message)", found in file mo_oauth_settings.php at line 612. 

[has_storage] PII of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"])", found in file class-mo-oauth-widget.php at line 569. 

[has_storage] WP User info of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "wp_insert_user($userdata)", found in file class-mo-oauth-widget.php at line 568. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("message", $message)", found in file mo_oauth_settings.php at line 527. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("mo_oauth_transactionId", $content["txId"])", found in file mo_oauth_settings.php at line 677. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("mo_oauth_admin_api_key", $customerKey["apiKey"])", found in file mo_oauth_settings.php at line 216. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.")", found in file mo_oauth_settings.php at line 658. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("customer_token", $customerKey["token"])", found in file mo_oauth_settings.php at line 770. 

[has_storage] PII of types (['user_meta', 'password', 'email', 'last_name', 'first_name', 'user']) stored through WordPress function "update_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true)", found in file manage-avatar.php at line 52. 

[has_storage] PII of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "update_user_meta($user_id, "mo_oauth_avatar_manager_avatar_type", "custom")", found in file manage-avatar.php at line 55. 

[has_storage] PII of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "update_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", $attachment_id)", found in file manage-avatar.php at line 56. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("customer_token", $customerKey["token"])", found in file mo_oauth_settings.php at line 217. 

[has_storage] PII of types (['email']) stored through WordPress function "update_option("mo_oauth_admin_email", $email)", found in file mo_oauth_settings.php at line 193. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("mo_oauth_admin_customer_key", $customerKey["id"])", found in file mo_oauth_settings.php at line 215. 

[has_storage] Unstructured data storage of PII types (['user_meta', 'password', 'email', 'last_name', 'first_name', 'user']) to files through function "file_put_contents", found in file manage-avatar.php at line 17. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("message", $message)", found in file mo_oauth_settings.php at line 418. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("mo_oauth_admin_phone", $customerKey["phone"])", found in file mo_oauth_settings.php at line 218. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.")", found in file mo_oauth_settings.php at line 676. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("mo_oauth_apps_list", $appslist)", found in file mo_oauth_settings.php at line 491. 

[has_storage] PII of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"])", found in file class-mo-oauth-widget.php at line 553. 

[has_storage] PII of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"])", found in file class-mo-oauth-widget.php at line 555. 

[has_storage] PII of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"])", found in file class-mo-oauth-widget.php at line 554. 

[has_storage] PII of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"])", found in file class-mo-oauth-widget.php at line 597. 

[has_storage] PII of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"])", found in file class-mo-oauth-widget.php at line 570. 

[has_storage] PII of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"])", found in file class-mo-oauth-widget.php at line 571. 

[has_storage] PII of types (['user_meta', 'password', 'email', 'last_name', 'first_name', 'user']) stored through WordPress function "update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", $custom_avatar)", found in file manage-avatar.php at line 50. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("mo_oauth_apps_list", $appslist)", found in file mo_oauth_settings_page.php at line 2658. 

[has_storage] WP User info of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "wp_insert_user($userdata)", found in file class-mo-oauth-widget.php at line 609. 

[has_storage] PII of types (['user_meta', 'password', 'email', 'last_name', 'first_name', 'user']) stored through WordPress function "update_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", $avatar)", found in file manage-avatar.php at line 238. 

[has_storage] PII of types (['password', 'user_meta', 'user', 'email']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"])", found in file class-mo-oauth-widget.php at line 610. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("mo_oauth_admin_customer_key", $customerKey["id"])", found in file mo_oauth_settings.php at line 268. 

[has_storage] PII of types (['user_meta', 'password', 'email', 'last_name', 'first_name', 'user']) stored through WordPress function "update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating", "G")", found in file manage-avatar.php at line 51. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".")", found in file mo_oauth_settings.php at line 698. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("mo_oauth_admin_api_key", $customerKey["apiKey"])", found in file mo_oauth_settings.php at line 769. 

[has_storage] PII of types (['user_meta', 'user', 'email']) stored through WordPress function "update_option("mo_oauth_admin_customer_key", $customerKey["id"])", found in file mo_oauth_settings.php at line 768. 

[has_storage] Storage check is CUSTOM_UNSTRUCTURED 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 233. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 568. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 261. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 269. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 270. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 272. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 612. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) has deletion method delete_user_meta($user->ID, "user_eveonline_corporation_name"). Storage method found in file class-mo-oauth-widget.php at line 569. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 527. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 677. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 216. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 658. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 770. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true) has deletion method delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar"). Storage method found in file manage-avatar.php at line 52. Deletion method found in file manage-avatar.php at line 404. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "mo_oauth_avatar_manager_avatar_type", "custom") has deletion method delete_user_meta($user->ID, "mo_oauth_avatar_manager_avatar_type"). Storage method found in file manage-avatar.php at line 55. Deletion method found in file manage-avatar.php at line 419. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", $attachment_id) has deletion method delete_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar"). Storage method found in file manage-avatar.php at line 56. Deletion method found in file manage-avatar.php at line 420. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 217. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 193. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 215. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Complete data deletion is required for storage at node ID 6671 , but is impossible due to custom storage of PII without identifiers. Found in file manage-avatar.php at line 17 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 418. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 218. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 676. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 491. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) has deletion method delete_user_meta($user->ID, "user_eveonline_corporation_name"). Storage method found in file class-mo-oauth-widget.php at line 553. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) has deletion method delete_user_meta($user->ID, "user_eveonline_character_name"). Storage method found in file class-mo-oauth-widget.php at line 555. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) has deletion method delete_user_meta($user->ID, "user_eveonline_alliance_name"). Storage method found in file class-mo-oauth-widget.php at line 554. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) has deletion method delete_user_meta($user->ID, "user_eveonline_character_name"). Storage method found in file class-mo-oauth-widget.php at line 597. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) has deletion method delete_user_meta($user->ID, "user_eveonline_alliance_name"). Storage method found in file class-mo-oauth-widget.php at line 570. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) has deletion method delete_user_meta($user->ID, "user_eveonline_character_name"). Storage method found in file class-mo-oauth-widget.php at line 571. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", $custom_avatar) has deletion method delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar"). Storage method found in file manage-avatar.php at line 50. Deletion method found in file manage-avatar.php at line 402. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings_page.php at line 2658. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", $avatar) has deletion method delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar"). Storage method found in file manage-avatar.php at line 238. Deletion method found in file manage-avatar.php at line 402. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) has deletion method delete_user_meta($user->ID, "user_eveonline_character_name"). Storage method found in file class-mo-oauth-widget.php at line 610. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 268. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating", "G") has deletion method delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating"). Storage method found in file manage-avatar.php at line 51. Deletion method found in file manage-avatar.php at line 403. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 698. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 769. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 67. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 68. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 69. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 70. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 73. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 219. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 221. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 237. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 273. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 275. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 276. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 773. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 774. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 789. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 798. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings.php at line 799. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password_mismatch"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings_page.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_app_name_" . $appname). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file mo_oauth_settings_page.php at line 2655. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 41. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 42. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 43. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 44. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 45. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 46. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_space"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 47. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_custom_height"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 48. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_custom_size"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 49. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_custom_color"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 50. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_login_icon_custom_boundary"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 52. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_icon_width"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 53. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_icon_height"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_icon_margin"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 55. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_icon_configure_css"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_custom_logout_text"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 768. Deletion method found in file uninstall.php at line 58. 

[Art.17, Right to erasure] Deletion access is NONE 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9456. Found in file mo_oauth_settings.php at line 233 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 11361. Found in file mo_oauth_settings.php at line 568 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9589. Found in file mo_oauth_settings.php at line 261 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9650. Found in file mo_oauth_settings.php at line 269 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9659. Found in file mo_oauth_settings.php at line 270 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9675. Found in file mo_oauth_settings.php at line 272 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 11609. Found in file mo_oauth_settings.php at line 612 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5270. Found in file class-mo-oauth-widget.php at line 569 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 11145. Found in file mo_oauth_settings.php at line 527 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 11981. Found in file mo_oauth_settings.php at line 677 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9360. Found in file mo_oauth_settings.php at line 216 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 11852. Found in file mo_oauth_settings.php at line 658 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 12541. Found in file mo_oauth_settings.php at line 770 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 6825. Found in file manage-avatar.php at line 52 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 6835. Found in file manage-avatar.php at line 55 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 6843. Found in file manage-avatar.php at line 56 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9369. Found in file mo_oauth_settings.php at line 217 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9192. Found in file mo_oauth_settings.php at line 193 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9351. Found in file mo_oauth_settings.php at line 215 

[Art.15, Right to access] Complete data access is required for storage at node ID 6671 , but is impossible due to custom storage of PII without identifiers. Found in file manage-avatar.php at line 17 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 10411. Found in file mo_oauth_settings.php at line 418 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9378. Found in file mo_oauth_settings.php at line 218 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 11970. Found in file mo_oauth_settings.php at line 676 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 10915. Found in file mo_oauth_settings.php at line 491 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5169. Found in file class-mo-oauth-widget.php at line 553 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5191. Found in file class-mo-oauth-widget.php at line 555 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5180. Found in file class-mo-oauth-widget.php at line 554 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5376. Found in file class-mo-oauth-widget.php at line 597 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5281. Found in file class-mo-oauth-widget.php at line 570 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5292. Found in file class-mo-oauth-widget.php at line 571 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 6808. Found in file manage-avatar.php at line 50 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 14799. Found in file mo_oauth_settings_page.php at line 2658 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 7464. Found in file manage-avatar.php at line 238 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5455. Found in file class-mo-oauth-widget.php at line 610 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9641. Found in file mo_oauth_settings.php at line 268 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 6817. Found in file manage-avatar.php at line 51 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 12078. Found in file mo_oauth_settings.php at line 698 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 12532. Found in file mo_oauth_settings.php at line 769 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 12523. Found in file mo_oauth_settings.php at line 768 

[Art.15, Right to access] Data access is NONE 

[third_party] Third party at "https://esi.evetech.net/latest/characters/" used with data types ['email'], found in file handler/oauth_handler.php at line 82 . Personal data flows from sources with nodeID [3937, 4322, 3898]  

[third_party] Third party at "https://www.googleapis.com/oauth2/v1/userinfo" used with data types ['email'], found in file handler/oauth_handler.php at line 82 . Personal data flows from sources with nodeID [3937, 4322, 3898]  

[third_party] Third party at "https://www.googleapis.com/oauth2/v4/token" used with data types ['email'], found in file handler/oauth_handler.php at line 82 . Personal data flows from sources with nodeID [3937, 4322, 3898]  

[third_party] Third party usage is CONFIRMED for data types ['email'] 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 141 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 180 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 60 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 346 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 94 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is securely encrypted with ['hash']. Found in file class-customer.php at line 412 

[encryption] API call that sends PII to "https://esi.evetech.net/latest/characters/" uses https. PII is insecurely encrypted with []. Found in file handler/oauth_handler.php at line 82 

[encryption] API call that sends PII to "https://www.googleapis.com/oauth2/v1/userinfo" uses https. PII is insecurely encrypted with []. Found in file handler/oauth_handler.php at line 82 

[encryption] API call that sends PII to "https://www.googleapis.com/oauth2/v4/token" uses https. PII is insecurely encrypted with []. Found in file handler/oauth_handler.php at line 82 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 464 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 315 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 261 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 237 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? True 

[main] Is access in violation? True 

[main] Is third_party in violation? True 

[main] Is encryption in violation? True 

[main] Complaint? False 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        

##################
### Fix Report ###
##################

############################
# Data Deletion Fix Report #
############################

This report suggests fixes to comply with the GDPR Art. 17, Right to erasure (https://gdpr-info.eu/art-17-gdpr/). The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/adding-the-personal-data-eraser-to-your-plugin/ for more details.

1) Implement a function that deletes all the user data collected in the plugin. Sample code:


/**
* Removes all collected data of a user.
*
* @param string $email_address   email address to manipulate
* @param int    $page            pagination
*
* @return array
*/
function oauth-client_remove_data( $email_address, $page = 1 ) {
    
    $page = (int) $page;


    //TODO: Delete the user data that was stored using Wordpress functions

    //Below is the sample code for deleting user meta and may need to be modified to suit the plugin.
    $user_id = get_user_by('email', $email_address)
    $key = 'email' //Sample user meta key
    if ( $customer->user_id > 0 ) {
        //Delete user meta data by $key
        delete_user_meta( $user_id, $key );
    }
        



    // Tell core if we have more data to delete still
    $done = true;
    return array(
        'items_removed'  => $items_removed, // true if collected data of a user is being deleted
        'items_retained' => $items_retained, // true if certain data needs to be retained
        'messages'       => sprintf( __( 'Data of user with email %s successfully deleted.', 'oauth-client' ), $email_address ), // Put messages for data removal
        'done'           => $done, // true if all the removal processes are done (all data of the user is removed)
    );
}
        

2) Hook the deletion function to the Wordpress's Personal Data Removal tool


/**
* Registers all data erasers.
*
* @param array $exporters
*
* @return mixed
*/
function oauth-client_register_privacy_erasers( $erasers ) {
    $erasers['my-plugin-slug'] = array(
        'eraser_friendly_name' => __( '<eraser name>', 'oauth-client' ),
        'callback'             => 'oauth-client_remove_data',
    );
    return $erasers;
}
        

add_filter( 'wp_privacy_personal_data_erasers', 'oauth-client_register_privacy_erasers' );
        

        

#############################
# Privacy Policy Fix Report #
#############################

This report suggests fixes to comply with the GDPR Art. 13 (https://gdpr-info.eu/art-13-gdpr/) through including a privacy notice. The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/suggesting-text-for-the-site-privacy-policy/ for more details.

1) Implement a function that includes the privacy policy for the plugin and provide it to wordpress through wp_add_privacy_policy_content(). Sample code:


/**
* Adds a privacy policy statement.
*/
function oauth-client_add_privacy_policy_content() {
    if ( ! function_exists( 'wp_add_privacy_policy_content' ) ) {
        return;
    }
    //TODO: modify the content below to include the privacy policy for the plugin.
    $content = '<p class="privacy-policy-tutorial">' . __( 'Some introductory content for the suggested text.', 'oauth-client' ) . '</p>'
            . '<strong class="privacy-policy-tutorial">' . __( 'Suggested Text:', 'oauth-client' ) . '</strong> '
            . sprintf(
                __( 'When you leave a comment on this site, we send your name, email address, IP address and comment text to example.com. Example.com does not retain your personal data. The example.com privacy policy is <a href="%1$s" target="_blank">here</a>.', 'oauth-client' ),
                'https://example.com/privacy-policy'
            );
    wp_add_privacy_policy_content( 'oauth-client', wp_kses_post( wpautop( $content, false ) ) );
}
        

2) Hook the privacy policy function to the Wordpress's admin initialization action.


add_action( 'admin_init', 'oauth-client_add_privacy_policy_content' );
        

        


Disclaimer: The sample code provided above is only for reference and does not guarantee GDPR compliance. The recommended list of data to delete/export may not be comprehensive. 
        
Done.
