Timeout in resolving values
Timeout in running neo4j query
Running Main.py on post-snapshots

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:00.400139.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:00.965117.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 0 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.193382.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 0 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.464855.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 153 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:00.783404.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 0 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.608176.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.124050.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 56 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:01.272364.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 1439
Added 1230 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 1439
Added 0 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:01.012309.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/post-snapshots/api.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/post-snapshots/duplicate.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/post-snapshots/post-snapshots.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/post-snapshots/uninstall.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/post-snapshots/admin/admin.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/post-snapshots/admin/post-meta-box.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/post-snapshots/admin/settings.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/post-snapshots/legacy/duplicate-in-overview.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:00.915931.

1000 PHP_REACHES edges created
1439 PHP_REACHES edges created
1439 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 518 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.138153.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:01.811685.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 3 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.580852.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 15 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.167353.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.287362.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.055454.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.008711.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.036429.

18 PHP_REACHES edges created
18 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 3 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.125550.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
5 SQL operations to process.
SELECT meta_key, meta_value FROM $wpdb WHERE post_id=$post_id
SQL command (SELECT meta_key, meta_value FROM $wpdb WHERE post_id=$post_id) cannot be parsed correct.
INSERT INTO $wpdb (post_id, meta_key, meta_value) 
SQL command (INSERT INTO $wpdb (post_id, meta_key, meta_value) ) cannot be parsed correct.
SELECT meta_key, meta_value FROM $wpdb WHERE post_id=$post_id
SQL command (SELECT meta_key, meta_value FROM $wpdb WHERE post_id=$post_id) cannot be parsed correct.
INSERT INTO $wpdb (post_id, meta_key, meta_value) 
SQL command (INSERT INTO $wpdb (post_id, meta_key, meta_value) ) cannot be parsed correct.
DELETE * FROM $wpdb WHERE post_status='snapshot'
SQL command (DELETE * FROM $wpdb WHERE post_status='snapshot') cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [1235, 1329, 1706, 1800, 2693]
Added 0 SQL nodes. 0 out of 5 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:02.503411.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'get_the_date("Y-m-d", get_the_ID()) at get_the_date("H:i:s", get_the_ID())'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'get_post_meta(get_the_ID(), "snapshot_name", true)'' cannot be parsed correct.
HTML code '$'pos_get_plainview_url(get_the_ID())'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'get_html_selector_for_array($ptoprep, "pos_post_types", false, true, false, "", get_option("pos_post_types"), true)'' cannot be parsed correct.
HTML code '$'<div class="notice notice-error is-dismissible">
                    <p>One or more callback functions have not been saved due to invalid characters.</p>
                </div>'' cannot be parsed correct.
HTML code '$'<div class="notice notice-success is-dismissible">
                    <p>The plugin settings have been updated successfully.</p>
                </div>'' cannot be parsed correct.
HTML code '$'Post Snapshot Plaintext View: get_the_title($pid)'' cannot be parsed correct.
HTML code '$'get_the_permalink(intval(get_post_meta($pid, "snapshot_origin", true)))'' cannot be parsed correct.
HTML code '$'get_post_meta($pid, "snapshot_html", true)'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:01.622316.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.056454.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 4 do_action/apply_filters calls and 18 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:01.295454.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running FileProDetector
### Start running FrontBaseDetector
### Finish running DbaseDetector
### Start running HashDetector
### Finish running DbplusDetector
### Start running IBMDb2Detector
### Finish running FirebirdInterBaseDetector
### Start running InformixDetector
### Finish running CubridDetector
### Start running IngresDetector
### Finish running FrontBaseDetector
### Start running maxdbDetector
### Finish running IngresDetector
### Start running MongoDbDetector
### Finish running InformixDetector
### Start running MongoDetector
### Finish running MongoDetector
### Start running MsqlDetector
### Finish running IBMDb2Detector
### Start running MySQLDetector
### Finish running MsqlDetector
### Start running MySQLiDetector
### Finish running MySQLDetector
### Start running Oci8Detector
### Finish running Oci8Detector
### Start running OpenSSLDetector
### Finish running MongoDbDetector
### Start running ParadoxDetector
### Finish running ParadoxDetector
### Start running PasswordHashingDetector
### Finish running HashDetector
### Start running PhpCurlDetector
### Finish running ArrayElementDetector
### Start running PHPDataObjectDetector
### Finish running PasswordHashingDetector
### Start running PHPIncludedDetector
### Finish running PHPDataObjectDetector
### Start running PHPRetrievalDetector
### Finish running OpenSSLDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PhpCurlDetector
### Start running PhpVarDetector
### Finish running PHPIncludedDetector
### Start running PostgreSQLDetector
### Finish running PostgreSQLDetector
### Start running PropertyDetector
### Finish running PhpVarDetector
### Start running Sqlite3Detector
### Finish running PHPStorageDetector
### Start running SqliteDetector
### Finish running PHPRetrievalDetector
### Start running SqlServerDetector
### Finish running SqliteDetector
### Start running SybaseDetector
### Finish running SybaseDetector
### Start running TokyoTyrantDetector
### Finish running Sqlite3Detector
### Start running UserInputDetector
### Finish running TokyoTyrantDetector
### Start running VariableDetector
### Finish running SqlServerDetector
### Start running WordpressHashingFnDetector
### Finish running maxdbDetector
### Start running WordPressRemoteDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressRetrievalDetector
### Finish running WordPressRemoteDetector
### Start running WordPressStorageDetector
### Finish running PropertyDetector
### Start running WP_UserDetector
### Finish running VariableDetector
### Start running GenericDatabaseUsageDetector
### Finish running MySQLiDetector
### Start running GenericEncryptionDetector
### Finish running WP_UserDetector
### Start running DeletionDetector
### Finish running GenericEncryptionDetector
### Start running UninstallDetector
### Finish running GenericDatabaseUsageDetector
### Finish running UserInputDetector
### Finish running DeletionDetector
### Finish running WordPressRetrievalDetector
### Finish running UninstallDetector
### Finish running WordPressStorageDetector
### Finished running detectors
duplicate.php:40
  - object property '$post->post_password' of personal types {'password'} is found.
  - Data types: password
duplicate.php:100
  - object property '$current_user->user_email' of personal types {'email'} is found.
  - Data types: email
legacy/duplicate-in-overview.php:43
  - object property '$post->post_password' of personal types {'password'} is found.
  - Data types: password
legacy/duplicate-in-overview.php:103
  - object property '$current_user->user_email' of personal types {'email'} is found.
  - Data types: email 

admin/post-meta-box.php:6
  - RETRIEVAL call to get_option("pos_post_types", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
admin/post-meta-box.php:58
  - RETRIEVAL call to get_post_meta(get_the_ID(), "snapshot_name", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
admin/settings.php:43
  - RETRIEVAL call to get_option("pos_post_types") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
duplicate.php:19
  - RETRIEVAL call to get_post($post_id, OBJECT) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $output (string), 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
duplicate.php:25
  - RETRIEVAL call to get_option("pos_post_types", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
duplicate.php:81
  - RETRIEVAL call to wp_get_current_user() alters data types {'user', 'user_meta'}. Returns (WP_User).
  - Data types: user, user_meta
legacy/duplicate-in-overview.php:25
  - RETRIEVAL call to get_post($post_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
legacy/duplicate-in-overview.php:84
  - RETRIEVAL call to wp_get_current_user() alters data types {'user', 'user_meta'}. Returns (WP_User).
  - Data types: user, user_meta
legacy/duplicate-in-overview.php:136
  - RETRIEVAL call to get_option("pos_post_types", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
post-snapshots.php:87
  - RETRIEVAL call to get_post($p) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post, wp_post, post_meta
post-snapshots.php:100
  - RETRIEVAL call to get_option("pos_post_types", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
post-snapshots.php:195
  - RETRIEVAL call to get_post_meta($pid, "snapshot_origin", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
post-snapshots.php:203
  - RETRIEVAL call to get_post_meta($pid, "snapshot_html", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta 

admin/post-meta-box.php:113
  - STORAGE call to update_post_meta(intval(substr($key, 18)), "snapshot_name", $value) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
admin/post-meta-box.php:127
  - STORAGE call to wp_delete_post(intval(substr($key, 18)), true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
admin/settings.php:70
  - STORAGE call to update_option("pos_post_types", $_POST["pos_post_types"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
api.php:42
  - STORAGE call to wp_delete_post($snap_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
duplicate.php:51
  - STORAGE call to wp_insert_post($args). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
duplicate.php:85
  - STORAGE call to update_post_meta($new_post_id, "snapshot_origin", $post_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
duplicate.php:86
  - STORAGE call to update_post_meta($new_post_id, "snapshot_time", time()) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
duplicate.php:87
  - STORAGE call to update_post_meta($new_post_id, "snapshot_author", $snapshot_author) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
duplicate.php:106
  - STORAGE call to update_post_meta($new_post_id, "snapshot_html", $html) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
legacy/duplicate-in-overview.php:54
  - STORAGE call to wp_insert_post($args). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
legacy/duplicate-in-overview.php:88
  - STORAGE call to update_post_meta($new_post_id, "snapshot_origin", $post_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
legacy/duplicate-in-overview.php:89
  - STORAGE call to update_post_meta($new_post_id, "snapshot_time", time()) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
legacy/duplicate-in-overview.php:90
  - STORAGE call to update_post_meta($new_post_id, "snapshot_author", $snapshot_author) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
legacy/duplicate-in-overview.php:109
  - STORAGE call to update_post_meta($new_post_id, "snapshot_html", $html) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
post-snapshots.php:125
  - STORAGE call to wp_delete_post(get_the_ID(), true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta 

admin/post-meta-box.php:127
  - DELETION call to wp_delete_post(intval(substr($key, 18)), true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
api.php:42
  - DELETION call to wp_delete_post($snap_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta
post-snapshots.php:125
  - DELETION call to wp_delete_post(get_the_ID(), true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, wp_post, post_meta 

By data type:
email
	PropertyDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
none
	WordPressStorageDetector.wp_insert_post($args) - set()
	WordPressStorageDetector.wp_insert_post($args) - set()
option
	WordPressRetrievalDetector.get_option("pos_post_types", []) - {'option'}
	WordPressRetrievalDetector.get_option("pos_post_types", []) - {'option'}
	WordPressStorageDetector.update_option("pos_post_types", $_POST["pos_post_types"]) - {'option'}
	WordPressRetrievalDetector.get_option("pos_post_types", []) - {'option'}
	WordPressRetrievalDetector.get_option("pos_post_types") - {'option'}
	WordPressRetrievalDetector.get_option("pos_post_types", []) - {'option'}
password
	PropertyDetector.(unknown) - {'password'}
	PropertyDetector.(unknown) - {'password'}
post
	WordPressStorageDetector.wp_delete_post(get_the_ID(), true) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($snap_id, true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($snap_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($p) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post_id, OBJECT) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post(intval(substr($key, 18)), true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post(get_the_ID(), true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post(intval(substr($key, 18)), true) - {'post', 'wp_post', 'post_meta'}
post_meta
	WordPressStorageDetector.update_post_meta(intval(substr($key, 18)), "snapshot_name", $value) - {'post_meta'}
	WordPressStorageDetector.wp_delete_post(get_the_ID(), true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($pid, "snapshot_origin", true) - {'post_meta'}
	WordPressStorageDetector.wp_delete_post($snap_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($new_post_id, "snapshot_origin", $post_id) - {'post_meta'}
	DeletionDetector.wp_delete_post($snap_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($pid, "snapshot_html", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($new_post_id, "snapshot_html", $html) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($new_post_id, "snapshot_author", $snapshot_author) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($new_post_id, "snapshot_html", $html) - {'post_meta'}
	WordPressRetrievalDetector.get_post($p) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($new_post_id, "snapshot_time", time()) - {'post_meta'}
	WordPressRetrievalDetector.get_post($post_id, OBJECT) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($new_post_id, "snapshot_origin", $post_id) - {'post_meta'}
	WordPressStorageDetector.wp_delete_post(intval(substr($key, 18)), true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post(get_the_ID(), true) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.update_post_meta($new_post_id, "snapshot_author", $snapshot_author) - {'post_meta'}
	DeletionDetector.wp_delete_post(intval(substr($key, 18)), true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta(get_the_ID(), "snapshot_name", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($new_post_id, "snapshot_time", time()) - {'post_meta'}
user
	WordPressRetrievalDetector.wp_get_current_user() - {'user', 'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user', 'user_meta'}
user_meta
	WordPressRetrievalDetector.wp_get_current_user() - {'user', 'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user', 'user_meta'}
wp_post
	WordPressStorageDetector.wp_delete_post(get_the_ID(), true) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post($snap_id, true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post($snap_id, true) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($p) - {'post', 'wp_post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post_id, OBJECT) - {'post', 'wp_post', 'post_meta'}
	WordPressStorageDetector.wp_delete_post(intval(substr($key, 18)), true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post(get_the_ID(), true) - {'post', 'wp_post', 'post_meta'}
	DeletionDetector.wp_delete_post(intval(substr($key, 18)), true) - {'post', 'wp_post', 'post_meta'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:10.830878.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 77 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.233678.

!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 1336
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 1807
77 STORE_REACHES edges created
77 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 161 nodes as PERSONAL
In total, tainted 161 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
In total, tainted 0 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:02.810086.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:00:35.438683!
DELETION call to wp_delete_post(intval(substr($key, 18)), true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
DELETION call to wp_delete_post($snap_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
DELETION call to wp_delete_post(get_the_ID(), true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
object property '$current_user->user_email' of personal types {'email'} is found.,,None
object property '$post->post_password' of personal types {'password'} is found.,,None
object property '$current_user->user_email' of personal types {'email'} is found.,,None
object property '$post->post_password' of personal types {'password'} is found.,,None
RETRIEVAL call to get_post_meta(get_the_ID(), "snapshot_name", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("pos_post_types", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_option("pos_post_types") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($post_id, OBJECT) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $output (string), 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("pos_post_types", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user', 'user_meta'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("pos_post_types", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_post($post_id) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user', 'user_meta'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("pos_post_types", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($pid, "snapshot_origin", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($pid, "snapshot_html", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($p) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
STORAGE call to update_post_meta(intval(substr($key, 18)), "snapshot_name", $value) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_delete_post(intval(substr($key, 18)), true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to update_option("pos_post_types", $_POST["pos_post_types"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_delete_post($snap_id, true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to update_post_meta($new_post_id, "snapshot_html", $html) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_post($args). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($new_post_id, "snapshot_origin", $post_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($new_post_id, "snapshot_time", time()) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($new_post_id, "snapshot_author", $snapshot_author) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($new_post_id, "snapshot_html", $html) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_post($args). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($new_post_id, "snapshot_origin", $post_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($new_post_id, "snapshot_time", time()) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($new_post_id, "snapshot_author", $snapshot_author) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_delete_post(get_the_ID(), true) alters data types {'post', 'wp_post', 'post_meta'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['user', 'email', 'user_meta', 'password']) stored through WordPress function "wp_insert_post($args)", found in file legacy/duplicate-in-overview.php at line 54. 

[has_storage] PII of types (['user', 'email', 'user_meta', 'password']) stored through WordPress function "update_post_meta($new_post_id, "snapshot_origin", $post_id)", found in file duplicate.php at line 85. 

[has_storage] PII of types (['user', 'email', 'user_meta', 'password']) stored through WordPress function "update_post_meta($new_post_id, "snapshot_html", $html)", found in file legacy/duplicate-in-overview.php at line 109. 

[has_storage] PII of types (['user', 'email', 'user_meta', 'password']) stored through WordPress function "wp_insert_post($args)", found in file duplicate.php at line 51. 

[has_storage] PII of types (['user', 'email', 'user_meta', 'password']) stored through WordPress function "update_post_meta($new_post_id, "snapshot_author", $snapshot_author)", found in file duplicate.php at line 87. 

[has_storage] PII of types (['user', 'email', 'user_meta', 'password']) stored through WordPress function "update_post_meta($new_post_id, "snapshot_html", $html)", found in file duplicate.php at line 106. 

[has_storage] PII of types (['user', 'email', 'user_meta', 'password']) stored through WordPress function "update_post_meta($new_post_id, "snapshot_time", time())", found in file duplicate.php at line 86. 

[has_storage] PII of types (['user', 'email', 'user_meta', 'password']) stored through WordPress function "update_post_meta($new_post_id, "snapshot_origin", $post_id)", found in file legacy/duplicate-in-overview.php at line 88. 

[has_storage] PII of types (['user', 'email', 'user_meta', 'password']) stored through WordPress function "update_post_meta($new_post_id, "snapshot_author", $snapshot_author)", found in file legacy/duplicate-in-overview.php at line 90. 

[has_storage] PII of types (['user', 'email', 'user_meta', 'password']) stored through WordPress function "update_post_meta($new_post_id, "snapshot_time", time())", found in file legacy/duplicate-in-overview.php at line 89. 

[has_storage] Storage check is WP 

[Art.17, Right to erasure] Wordpress storage of PII through wp_insert_post($args) does not have corresponding deletion method. Storage method found in file legacy/duplicate-in-overview.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($new_post_id, "snapshot_origin", $post_id) does not have corresponding deletion method. Storage method found in file duplicate.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($new_post_id, "snapshot_html", $html) does not have corresponding deletion method. Storage method found in file legacy/duplicate-in-overview.php at line 109. 

[Art.17, Right to erasure] Wordpress storage of PII through wp_insert_post($args) does not have corresponding deletion method. Storage method found in file duplicate.php at line 51. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($new_post_id, "snapshot_author", $snapshot_author) does not have corresponding deletion method. Storage method found in file duplicate.php at line 87. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($new_post_id, "snapshot_html", $html) does not have corresponding deletion method. Storage method found in file duplicate.php at line 106. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($new_post_id, "snapshot_time", time()) does not have corresponding deletion method. Storage method found in file duplicate.php at line 86. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($new_post_id, "snapshot_origin", $post_id) does not have corresponding deletion method. Storage method found in file legacy/duplicate-in-overview.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($new_post_id, "snapshot_author", $snapshot_author) does not have corresponding deletion method. Storage method found in file legacy/duplicate-in-overview.php at line 90. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($new_post_id, "snapshot_time", time()) does not have corresponding deletion method. Storage method found in file legacy/duplicate-in-overview.php at line 89. 

[Art.17, Right to erasure] Deletion access is NONE 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1651. Found in file legacy/duplicate-in-overview.php at line 54 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1350. Found in file duplicate.php at line 85 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1911. Found in file legacy/duplicate-in-overview.php at line 109 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1180. Found in file duplicate.php at line 51 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1370. Found in file duplicate.php at line 87 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1440. Found in file duplicate.php at line 106 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1359. Found in file duplicate.php at line 86 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1821. Found in file legacy/duplicate-in-overview.php at line 88 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1841. Found in file legacy/duplicate-in-overview.php at line 90 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1830. Found in file legacy/duplicate-in-overview.php at line 89 

[Art.15, Right to access] Data access is NONE_BUT_NOT_REQUIRED 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? True 

[main] Is access in violation? False 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? False 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        
