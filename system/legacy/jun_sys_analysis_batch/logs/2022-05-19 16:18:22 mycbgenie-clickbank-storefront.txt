Timeout in resolving values
Timeout in running neo4j query
Running Main.py on mycbgenie-clickbank-storefront

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:01.223479.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:01.144358.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 3 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.324795.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 8 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.836076.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 2364 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:01.527942.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 0 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.592609.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.087386.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 1091 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:23.467121.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 15141
Added 11675 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 18422
Added 3281 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:02.286987.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/mycbgenie-clickbank-storefront/functions_category_exclude.inc.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/mycbgenie-clickbank-storefront/functions_cron.inc.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/mycbgenie-clickbank-storefront/functions_fresh_install_import.inc.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/mycbgenie-clickbank-storefront/functions_gen_settings.inc.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/mycbgenie-clickbank-storefront/functions.inc.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/mycbgenie-clickbank-storefront/functions_manual_sync.inc.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/mycbgenie-clickbank-storefront/functions_products.inc.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/mycbgenie-clickbank-storefront/functions_reviews.inc.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/mycbgenie-clickbank-storefront/mycbgenie-clickbank-storefront.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/mycbgenie-clickbank-storefront/redirect.inc.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:00.914499.

3 PHP_REACHES edges created
8 REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
12000 PHP_REACHES edges created
13000 PHP_REACHES edges created
14000 PHP_REACHES edges created
15000 PHP_REACHES edges created
15130 PHP_REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
3281 PHP_REACHES edges created
18422 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 5671 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.332530.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:15.467757.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 16460
Added 213 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:06.702249.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 116 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.197141.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:03.747122.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 16460
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:02.432922.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.037412.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.036880.

329 PHP_REACHES edges created
329 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 234 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.128263.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
107 SQL operations to process.
CREATE TABLE mycbgenie_custom_edited_products (
		`mycbgenie_id` varchar(50) NOT NULL,
		`title` varchar(200) NOT NULL,
		`excerpt` varchar(300) NOT NULL,
		`descr` text,
		`price` decimal(7,3) NOT NULL,
		`thumbnail_id` varchar(300),
		`tags`	TEXT,
		PRIMARY KEY mycbgenie_id (mycbgenie_id)
		) ENGINE=InnoDB 
SQL command (CREATE TABLE mycbgenie_custom_edited_products ( `mycbgenie_id` varchar(50) NOT NULL, `title` varchar(200) NOT NULL, `excerpt` varchar(300) NOT NULL, `descr` text, `price` decimal(7,3) NOT NULL, `thumbnail_id` varchar(300), `tags` TEXT, PRIMARY KEY mycbgenie_id (mycbgenie_id) ) ENGINE=InnoDB ) cannot be parsed correct.
CREATE TABLE mycbgenie_fresh_import_products_master (
		`mycbgenie_import_id` varchar(20) NOT NULL,
		`json_import_file_id` varchar(20) NOT NULL,
		`start_time` datetime,
		`products_completed` mediumint(10)	DEFAULT 0,
		`end_time`	datetime,
		`modified_time`	datetime,
		`status_import`	varchar(20),
		`status_modified`	varchar(20),
		`batch_interval` mediumint(5)	DEFAULT 0,
		`last_used_throttle`	mediumint(3),
		`screenshot_allowed`	varchar(3),		
		PRIMARY KEY mycbgenie_import_id (mycbgenie_import_id)
		) ENGINE=InnoDB 
SQL command (CREATE TABLE mycbgenie_fresh_import_products_master ( `mycbgenie_import_id` varchar(20) NOT NULL, `json_import_file_id` varchar(20) NOT NULL, `start_time` datetime, `products_completed` mediumint(10) DEFAULT 0, `end_time` datetime, `modified_time` datetime, `status_import` varchar(20), `status_modified` varchar(20), `batch_interval` mediumint(5) DEFAULT 0, `last_used_throttle` mediumint(3), `screenshot_allowed` varchar(3), PRIMARY KEY mycbgenie_import_id (mycbgenie_import_id) ) ENGINE=InnoDB ) cannot be parsed correct.
CREATE TABLE mycbgenie_fresh_import_product_details (
		`mycbgenie_import_id` varchar(20) NOT NULL,
		`mycbgenie_id` varchar(50) NOT NULL,
		`insert_time` datetime,
		PRIMARY KEY mycbgenie_import_id (`mycbgenie_import_id`,`mycbgenie_id`)
		) ENGINE=InnoDB 
SQL command (CREATE TABLE mycbgenie_fresh_import_product_details ( `mycbgenie_import_id` varchar(20) NOT NULL, `mycbgenie_id` varchar(50) NOT NULL, `insert_time` datetime, PRIMARY KEY mycbgenie_import_id (`mycbgenie_import_id`,`mycbgenie_id`) ) ENGINE=InnoDB ) cannot be parsed correct.
CREATE TABLE mycbgenie_manual_sync_products_master (
		`mycbgenie_sync_id` varchar(20) NOT NULL,
		`json_import_file_id` varchar(20) NOT NULL,
		`start_time` datetime,
		`products_completed` mediumint(10)	DEFAULT 0,
		`products_added` mediumint(10)	DEFAULT 0,
		`products_removed` mediumint(10)	DEFAULT 0,
		`end_time`	datetime,
		`status_sync`	varchar(20),
		`last_used_throttle`	mediumint(3),
		`screenshot_allowed`	varchar(3),
		PRIMARY KEY mycbgenie_sync_id (mycbgenie_sync_id)
		) ENGINE=InnoDB 
SQL command (CREATE TABLE mycbgenie_manual_sync_products_master ( `mycbgenie_sync_id` varchar(20) NOT NULL, `json_import_file_id` varchar(20) NOT NULL, `start_time` datetime, `products_completed` mediumint(10) DEFAULT 0, `products_added` mediumint(10) DEFAULT 0, `products_removed` mediumint(10) DEFAULT 0, `end_time` datetime, `status_sync` varchar(20), `last_used_throttle` mediumint(3), `screenshot_allowed` varchar(3), PRIMARY KEY mycbgenie_sync_id (mycbgenie_sync_id) ) ENGINE=InnoDB ) cannot be parsed correct.
CREATE TABLE mycbgenie_cron_sync_master (
		`mycbgenie_cron_id` varchar(20) NOT NULL,
		`json_path`	varchar(200) NOT NULL,
		`start_time` datetime,
		`products_completed` mediumint(10)	DEFAULT 0,
		`total_products` mediumint(10)	DEFAULT 0,
		`steps_completed` mediumint(5)	DEFAULT 0,
		`total_steps` mediumint(5)	DEFAULT 0,
		`throttle_speed` mediumint(5)	DEFAULT 0,
		`end_time`	datetime,
		`last_batch_process_time`	datetime,
		`status_cron`	varchar(20),
		`products_added` mediumint(10)	DEFAULT 0,
		`products_removed` mediumint(10)	DEFAULT 0,
		`last_used_throttle` mediumint(3),
		PRIMARY KEY mycbgenie_cron_id (mycbgenie_cron_id)
		) ENGINE=InnoDB 
SQL command (CREATE TABLE mycbgenie_cron_sync_master ( `mycbgenie_cron_id` varchar(20) NOT NULL, `json_path` varchar(200) NOT NULL, `start_time` datetime, `products_completed` mediumint(10) DEFAULT 0, `total_products` mediumint(10) DEFAULT 0, `steps_completed` mediumint(5) DEFAULT 0, `total_steps` mediumint(5) DEFAULT 0, `throttle_speed` mediumint(5) DEFAULT 0, `end_time` datetime, `last_batch_process_time` datetime, `status_cron` varchar(20), `products_added` mediumint(10) DEFAULT 0, `products_removed` mediumint(10) DEFAULT 0, `last_used_throttle` mediumint(3), PRIMARY KEY mycbgenie_cron_id (mycbgenie_cron_id) ) ENGINE=InnoDB ) cannot be parsed correct.
DROP TABLE mycbgenie_custom_edited_products;
SQL command (DROP TABLE mycbgenie_custom_edited_products;) cannot be parsed correct.
DROP TABLE mycbgenie_fresh_import_products_master;
SQL command (DROP TABLE mycbgenie_fresh_import_products_master;) cannot be parsed correct.
DROP TABLE mycbgenie_fresh_import_product_details;
SQL command (DROP TABLE mycbgenie_fresh_import_product_details;) cannot be parsed correct.
DROP TABLE mycbgenie_manual_sync_products_master;
SQL command (DROP TABLE mycbgenie_manual_sync_products_master;) cannot be parsed correct.
DROP TABLE mycbgenie_cron_sync_master;
SQL command (DROP TABLE mycbgenie_cron_sync_master;) cannot be parsed correct.
DROP TABLE IF EXISTS poststodelete
SQL command (DROP TABLE IF EXISTS poststodelete) cannot be parsed correct.
CREATE TABLE poststodelete (ID bigint(20) unsigned NOT NULL,PRIMARY KEY(ID))
SQL command (CREATE TABLE poststodelete (ID bigint(20) unsigned NOT NULL,PRIMARY KEY(ID))) cannot be parsed correct.
INSERT INTO poststodelete
							   (	SELECT ID FROM $wpdbposts a 
 									INNER JOIN	$wpdbpostmeta AS mt1 ON a.id=mt1.post_id
									WHERE a.post_type IN  ('product','mcg_thumbnail') 
									AND mt1.meta_key = '_mycbgenie_managed_by' )
SQL command (INSERT INTO poststodelete ( SELECT ID FROM $wpdbposts a INNER JOIN $wpdbpostmeta AS mt1 ON a.id=mt1.post_id WHERE a.post_type IN ('product','mcg_thumbnail') AND mt1.meta_key = '_mycbgenie_managed_by' )) cannot be parsed correct.
INSERT INTO poststodelete values ($tmp_arr)
SQL command (INSERT INTO poststodelete values ($tmp_arr)) cannot be parsed correct.
INSERT INTO poststodelete values ($delete_all)
SQL command (INSERT INTO poststodelete values ($delete_all)) cannot be parsed correct.
INSERT INTO poststodelete
							   (	SELECT a.ID FROM $wpdbposts a 
							   		INNER JOIN poststodelete b on a.post_parent=b.id)
 									
SQL command (INSERT INTO poststodelete ( SELECT a.ID FROM $wpdbposts a INNER JOIN poststodelete b on a.post_parent=b.id) ) cannot be parsed correct.

								DELETE a, b
								FROM $wpdbcommentmeta a
								inner join $wpdbcomments b on a.comment_id=b.comment_id
								inner join poststodelete c on b.comment_post_ID=c.id
SQL command ( DELETE a, b FROM $wpdbcommentmeta a inner join $wpdbcomments b on a.comment_id=b.comment_id inner join poststodelete c on b.comment_post_ID=c.id) cannot be parsed correct.
	DELETE mt FROM $wpdbtermmeta mt 
								INNER JOIN $wpdbterms tr ON tr.term_id=mt.term_id
								INNER JOIN $wpdbterm_taxonomy tm  ON tm.term_id=tr.term_id 								
								INNER JOIN $wpdbterm_relationships a ON a.term_taxonomy_id=tm.term_taxonomy_id
								INNER JOIN poststodelete c ON	c.id=a.object_id
SQL command ( DELETE mt FROM $wpdbtermmeta mt INNER JOIN $wpdbterms tr ON tr.term_id=mt.term_id INNER JOIN $wpdbterm_taxonomy tm ON tm.term_id=tr.term_id INNER JOIN $wpdbterm_relationships a ON a.term_taxonomy_id=tm.term_taxonomy_id INNER JOIN poststodelete c ON c.id=a.object_id) cannot be parsed correct.
DELETE tt, tr 
									FROM $wpdbterm_taxonomy tt 
									INNER JOIN $wpdbterm_relationships a ON a.term_taxonomy_id=tt.term_taxonomy_id
									INNER JOIN poststodelete c ON	c.id=a.object_id
									INNER JOIN $wpdbterms tr ON tr.term_id=tt.term_id 
									WHERE tt.taxonomy in ('pa_mycbgenie-star-rating','product_tag') 
SQL command (DELETE tt, tr FROM $wpdbterm_taxonomy tt INNER JOIN $wpdbterm_relationships a ON a.term_taxonomy_id=tt.term_taxonomy_id INNER JOIN poststodelete c ON c.id=a.object_id INNER JOIN $wpdbterms tr ON tr.term_id=tt.term_id WHERE tt.taxonomy in ('pa_mycbgenie-star-rating','product_tag') ) cannot be parsed correct.
	DELETE a
								FROM $wpdbterm_relationships a
								inner join poststodelete b on a.object_id=b.id
SQL command ( DELETE a FROM $wpdbterm_relationships a inner join poststodelete b on a.object_id=b.id) cannot be parsed correct.
	DELETE a
								FROM $wpdbpostmeta a
								inner join poststodelete b on a.post_id=b.id
SQL command ( DELETE a FROM $wpdbpostmeta a inner join poststodelete b on a.post_id=b.id) cannot be parsed correct.
	DELETE a
								FROM $wpdbposts a
								inner join poststodelete b on a.id=b.id
SQL command ( DELETE a FROM $wpdbposts a inner join poststodelete b on a.id=b.id) cannot be parsed correct.
UPDATE $wpdbterm_taxonomy t 
								set count=(select count(*) from $wpdbterm_relationships 
								where term_taxonomy_id=t.term_taxonomy_id)
SQL command (UPDATE $wpdbterm_taxonomy t set count=(select count(*) from $wpdbterm_relationships where term_taxonomy_id=t.term_taxonomy_id)) cannot be parsed correct.
 DROP TABLE IF EXISTS poststodelete
SQL command ( DROP TABLE IF EXISTS poststodelete) cannot be parsed correct.
call_user_func_array([$wpdb, "prepare"], array_merge([$sql], $tmp_push))
SQL command (call_user_func_array([$wpdb, "prepare"], array_merge([$sql], $tmp_push))) cannot be parsed correct.

								DELETE 
								FROM $wpdbwoocommerce_attribute_taxonomies 
								WHERE attribute_name='mycbgenie-star-rating'
SQL command ( DELETE FROM $wpdbwoocommerce_attribute_taxonomies WHERE attribute_name='mycbgenie-star-rating') cannot be parsed correct.
SELECT * FROM $wpdbposts 
				 	WHERE ( post_type='attachment' and post_name='sanitize_title_with_dashes(str_replace("_", "-", $new_filename))' and  post_parent=wp_insert_post($post, $wp_error)  ) 
SQL command (SELECT * FROM $wpdbposts WHERE ( post_type='attachment' and post_name='sanitize_title_with_dashes(str_replace("_", "-", $new_filename))' and post_parent=wp_insert_post($post, $wp_error) ) ) cannot be parsed correct.
SELECT status_import,mycbgenie_import_id,start_time,products_completed FROM mycbgenie_fresh_import_products_master 
				 	order by start_time desc
SQL command (SELECT status_import,mycbgenie_import_id,start_time,products_completed FROM mycbgenie_fresh_import_products_master order by start_time desc) cannot be parsed correct.
SELECT * FROM mycbgenie_fresh_import_products_master 
				 	WHERE ( status_import = 'success' OR status_modified = 'success') order by start_time desc
SQL command (SELECT * FROM mycbgenie_fresh_import_products_master WHERE ( status_import = 'success' OR status_modified = 'success') order by start_time desc) cannot be parsed correct.
	SELECT * FROM mycbgenie_manual_sync_products_master 
	 			WHERE ( status_sync <> 'success' or status_sync is NULL) order by start_time desc  
SQL command ( SELECT * FROM mycbgenie_manual_sync_products_master WHERE ( status_sync <> 'success' or status_sync is NULL) order by start_time desc ) cannot be parsed correct.
	SELECT screenshot_allowed,end_time FROM mycbgenie_fresh_import_products_master 
	 			 order by end_time desc  limit 1 
SQL command ( SELECT screenshot_allowed,end_time FROM mycbgenie_fresh_import_products_master order by end_time desc limit 1 ) cannot be parsed correct.
	SELECT screenshot_allowed,end_time FROM mycbgenie_manual_sync_products_master 
	 			order by end_time desc  limit 1
SQL command ( SELECT screenshot_allowed,end_time FROM mycbgenie_manual_sync_products_master order by end_time desc limit 1) cannot be parsed correct.
	SELECT * FROM mycbgenie_cron_sync_master 
	 			WHERE ( status_cron <> 'success' or status_cron is NULL) order by start_time desc  
SQL command ( SELECT * FROM mycbgenie_cron_sync_master WHERE ( status_cron <> 'success' or status_cron is NULL) order by start_time desc ) cannot be parsed correct.
START TRANSACTION;
SQL command (START TRANSACTION;) cannot be parsed correct.
SET autocommit = 0;
SQL command (SET autocommit = 0;) cannot be parsed correct.
	
				INSERT INTO mycbgenie_cron_sync_master (mycbgenie_cron_id,start_time,total_products,total_steps,json_path,throttle_speed,steps_completed) 
				VALUES ('time()','date("Y-m-d H:i:s")',%d,%d,'%s',%d,-1)
	
				INSERT INTO mycbgenie_cron_sync_master (mycbgenie_cron_id,start_time,total_products,total_steps,json_path,throttle_speed,steps_completed) 
				VALUES ('time()','date("Y-m-d H:i:s")',json_decode(mycbgenie_sideload_remote_JSON($throttle_speed, $skip_file_import, $json_change_detected, $process_type), true)_total,%d,'%s',%d,-1)
	
				INSERT INTO mycbgenie_cron_sync_master (mycbgenie_cron_id,sjson_decode(mycbgenie_sideload_remote_JSON($throttle_speed, $skip_file_import, $json_change_detected, $process_type), true)_total_stepsrt_time,total_products,total_steps,json_path,throttle_speed,steps_completed) 
				VALUES ('time()','date("Y-m-d H:i:s")',json_decode(mycbgenie_sideload_remote_JSON($throttle_speed, $skip_file_import, $json_change_detected, $process_type), true)_total,%d,'%s',%d,-1)
	
				INSERT INTO mycbgenie_crojson_decode(mycbgenie_sideload_remote_JSON($throttle_speed, $skip_file_import, $json_change_detected, $process_type), true)_destination_pathsync_master (mycbgenie_cron_id,sjson_decode(mycbgenie_sideload_remote_JSON($throttle_speed, $skip_file_import, $json_change_detected, $process_type), true)_total_stepsrt_time,total_products,total_steps,json_path,throttle_speed,steps_completed) 
				VALUES ('time()','date("Y-m-d H:i:s")',json_decode(mycbgenie_sideload_remote_JSON($throttle_speed, $skip_file_import, $json_change_detected, $process_type), true)_total,%d,'%s',%d,-1)
	
				INSERT INTO mycbgenie_crojson_decode(mycbgenie_sideload_remo10_JSON($throttle_speed, $skip_file_import, $json_change_detected, $process_type), true)_destination_pathsync_master (mycbgenie_cron_id,sjson_decode(mycbgenie_sideload_remote_JSON($throttle_speed, $skip_file_import, $json_change_detected, $process_type), true)_total_stepsrt_time,total_products,total_steps,json_path,throttle_speed,steps_completed) 
				VALUES ('time()','date("Y-m-d H:i:s")',json_decode(mycbgenie_sideload_remote_JSON($throttle_speed, $skip_file_import, $json_change_detected, $process_type), true)_total,%d,'%s',%d,-1)
	
				INSERT INTO mycbgenie_crojson_decode(mycbgenie_sideload_remo10_JSON($throttle_speed, $skip_file_import, $json_change_detected, $process_type), true)_destination_pathsync_master (mycbgenie_cron_id,sjson_decode(mycbgenie_sideload_remote_JSON($throttle_speed, $skip_file_import, $json_change_detected, $process_type), true)_total_stepsrt_time,total_products,total_steps,json_path,throttle_speed,steps_completed) 
				VALUES ('time()','date("Y-m-d H:i:s")',json_decode(mycbgenie_sideload_remote_JSON($throttle_speed, $skip_file_import, $json_change_detected, $process_type), true)_total,%d,'%s',%d,-1)
SQL command ( INSERT INTO mycbgenie_crojson_decode(mycbgenie_sideload_remo10_JSON($throttle_speed, $skip_file_import, $json_change_detected, $process_type), true)_destination_pathsync_master (mycbgenie_cron_id,sjson_decode(mycbgenie_sideload_remote_JSON($throttle_speed, $skip_file_import, $json_change_detected, $process_type), true)_total_stepsrt_time,total_products,total_steps,json_path,throttle_speed,steps_completed) VALUES ('time()','date("Y-m-d H:i:s")',json_decode(mycbgenie_sideload_remote_JSON($throttle_speed, $skip_file_import, $json_change_detected, $process_type), true)_total,%d,'%s',%d,-1)) cannot be parsed correct.
COMMIT;
SQL command (COMMIT;) cannot be parsed correct.
SET autocommit = 1;
SQL command (SET autocommit = 1;) cannot be parsed correct.
DELETE FROM mycbgenie_cron_sync_master WHERE ( status_cron <> 'success' or status_cron is NULL)
SQL command (DELETE FROM mycbgenie_cron_sync_master WHERE ( status_cron <> 'success' or status_cron is NULL)) cannot be parsed correct.
	SELECT * FROM mycbgenie_manual_sync_products_master 
	 			WHERE ( status_sync <> 'success' or status_sync is NULL) order by start_time desc  
SQL command ( SELECT * FROM mycbgenie_manual_sync_products_master WHERE ( status_sync <> 'success' or status_sync is NULL) order by start_time desc ) cannot be parsed correct.
SELECT * FROM mycbgenie_fresh_import_products_master 
				 	WHERE ( status_import = 'success' OR status_modified = 'success') order by start_time desc
SQL command (SELECT * FROM mycbgenie_fresh_import_products_master WHERE ( status_import = 'success' OR status_modified = 'success') order by start_time desc) cannot be parsed correct.
SELECT *  FROM mycbgenie_manual_sync_products_master where status_sync is NULL or status_sync <> 'success' 	
SQL command (SELECT * FROM mycbgenie_manual_sync_products_master where status_sync is NULL or status_sync <> 'success' ) cannot be parsed correct.
SELECT *  FROM mycbgenie_fresh_import_products_master	
SQL command (SELECT * FROM mycbgenie_fresh_import_products_master ) cannot be parsed correct.
SELECT *  FROM mycbgenie_cron_sync_master 
				 	order by start_time desc limit 0,1
SQL command (SELECT * FROM mycbgenie_cron_sync_master order by start_time desc limit 0,1) cannot be parsed correct.
SELECT *  FROM mycbgenie_cron_sync_master 
				 	order by start_time desc limit 1,7
SQL command (SELECT * FROM mycbgenie_cron_sync_master order by start_time desc limit 1,7) cannot be parsed correct.
SELECT *  FROM mycbgenie_manual_sync_products_master 
						order by start_time desc limit 0,10
SQL command (SELECT * FROM mycbgenie_manual_sync_products_master order by start_time desc limit 0,10) cannot be parsed correct.
SELECT * FROM $wpdbposts 
				 	WHERE ( post_type='mcg_thumbnail' and post_content='sanitize_title($main_cat)') 
SQL command (SELECT * FROM $wpdbposts WHERE ( post_type='mcg_thumbnail' and post_content='sanitize_title($main_cat)') ) cannot be parsed correct.
SELECT * FROM $wpdbposts 
				 	WHERE ( post_type='mcg_thumbnail' and post_content='sanitize_title($main_cat . "-" . $sub_cat)') 
SQL command (SELECT * FROM $wpdbposts WHERE ( post_type='mcg_thumbnail' and post_content='sanitize_title($main_cat . "-" . $sub_cat)') ) cannot be parsed correct.
START TRANSACTION;
SQL command (START TRANSACTION;) cannot be parsed correct.
SET autocommit = 0;
SQL command (SET autocommit = 0;) cannot be parsed correct.
	
								INSERT INTO mycbgenie_fresh_import_product_details (mycbgenie_import_id,mycbgenie_id,insert_time) 
								VALUES ('$_POST_import_id','%s','date("Y-m-d H:i:s")')
							
	
								INSERT INTO mycbgenie_fresh_import_product_details (mycbgenie_import_id,mycbgenie_id,insert_time) 
								VALUES ('$_POST_import_id','$val','date("Y-m-d H:i:s")')
							
	
								INSERT INTO mycbgenie_fresh_import_product_details (mycbgenie_import_id,mycbgenie_id,insert_time) 
								VALUES ('$_POST_import_id','$val','date("Y-m-d H:i:s")')
							
SQL command ( INSERT INTO mycbgenie_fresh_import_product_details (mycbgenie_import_id,mycbgenie_id,insert_time) VALUES ('$_POST_import_id','$val','date("Y-m-d H:i:s")') ) cannot be parsed correct.
	
					UPDATE mycbgenie_fresh_import_products_master
					SET products_completed=products_completed-0+$throttle ,   
					batch_interval	= absint($_POST["batch_interval"]), last_used_throttle=%d, 
					screenshot_allowed = '%s' 
					WHERE mycbgenie_import_id='%s'	
					
	
					UPDATE mycbgenie_fresh_import_products_master
					SET products_completed=products_completed-0+$throttle ,   
					batch_interval	= absint($_POST["batch_interval"]), last_used_throttle=$_POST_throttle_speed, 
					screenshot_allowed = '%s' 
					WHERE mycbgenie_import_id='%s'	
					
	
					UPDATE mycbgenie_fresh_import_products_master
					SET products_completed=products_completed-0+$throttle ,   
					batch_interval	= absint($_POST["batch_interval"]), last_used_throttle=$_POST_throttle_speed, 
					screenshot_allo$_POST_screenshot_allowedd = '%s' 
					WHERE mycbgenie_import_id='%s'	
					
	
					UPDATE mycbgenie_fresh_import_products_master
					SET products_completed=products_completed-0+$throttle ,   
					batch_interval	= absint($_POST["batch_interval"]), last_used_throttle=$_POST_throttle_speed, 
					screenshot_allo$_POST_screenshot_allowedd = '%s' 
					W$_POST_import_idRE mycbgenie_import_id='%s'	
					
	
					UPDATE mycbgenie_fresh_import_products_master
					SET products_completed=products_completed-0+$throttle ,   
					batch_interval	= absint($_POST["batch_interval"]), last_used_throttle=$_POST_throttle_speed, 
					screenshot_allo$_POST_screenshot_allowedd = '%s' 
					W$_POST_import_idRE mycbgenie_import_id='%s'	
					
SQL command ( UPDATE mycbgenie_fresh_import_products_master SET products_completed=products_completed-0+$throttle , batch_interval = absint($_POST["batch_interval"]), last_used_throttle=$_POST_throttle_speed, screenshot_allo$_POST_screenshot_allowedd = '%s' W$_POST_import_idRE mycbgenie_import_id='%s' ) cannot be parsed correct.
	
								UPDATE mycbgenie_fresh_import_products_master
								SET status_modified='success' , modified_time='date("Y-m-d H:i:s")',
								screenshot_allowed = '$_POST_screenshot_allowed' 
								WHERE mycbgenie_import_id='%s'	
								
	
								UPDATE mycbgenie_fresh_import_products_master
								SET status_modified='success' , modified_time='date("Y-m-d H:i:s")',
								screenshot_allowed = '$_POST_screenshot_allowed' 
								WHERE mycbgenie_import_id='$_POST_import_id'	
								
	
								UPDATE mycbgenie_fresh_import_products_master
								SET status_modified='success' , modified_time='date("Y-m-d H:i:s")',
								screenshot_allowed = '$_POST_screenshot_allowed' 
								WHERE mycbgenie_import_id='$_POST_import_id'	
								
SQL command ( UPDATE mycbgenie_fresh_import_products_master SET status_modified='success' , modified_time='date("Y-m-d H:i:s")', screenshot_allowed = '$_POST_screenshot_allowed' WHERE mycbgenie_import_id='$_POST_import_id' ) cannot be parsed correct.
	
								UPDATE mycbgenie_fresh_import_products_master
								SET status_import='success' , end_time='date("Y-m-d H:i:s")', 
								screenshot_allowed = '$_POST_screenshot_allowed' 
								WHERE mycbgenie_import_id='%s'	
								
	
								UPDATE mycbgenie_fresh_import_products_master
								SET status_import='success' , end_time='date("Y-m-d H:i:s")', 
								screenshot_allowed = '$_POST_screenshot_allowed' 
								WHERE mycbgenie_import_id='$_POST_import_id'	
								
	
								UPDATE mycbgenie_fresh_import_products_master
								SET status_import='success' , end_time='date("Y-m-d H:i:s")', 
								screenshot_allowed = '$_POST_screenshot_allowed' 
								WHERE mycbgenie_import_id='$_POST_import_id'	
								
SQL command ( UPDATE mycbgenie_fresh_import_products_master SET status_import='success' , end_time='date("Y-m-d H:i:s")', screenshot_allowed = '$_POST_screenshot_allowed' WHERE mycbgenie_import_id='$_POST_import_id' ) cannot be parsed correct.
ROLLBACK;
SQL command (ROLLBACK;) cannot be parsed correct.
COMMIT;
SQL command (COMMIT;) cannot be parsed correct.
SET autocommit = 1;
SQL command (SET autocommit = 1;) cannot be parsed correct.
INSERT INTO $wpdbpostmeta ( post_id, meta_key, meta_value) VALUES  
SQL command (INSERT INTO $wpdbpostmeta ( post_id, meta_key, meta_value) VALUES ) cannot be parsed correct.
SELECT comment_ID FROM $wpdbcomments 
				 	WHERE ( comment_post_ID=wp_update_post($mycbgenie_custom_edit_post) and comment_author_url='http://mycbgenie.com' and comment_author='admin')
SQL command (SELECT comment_ID FROM $wpdbcomments WHERE ( comment_post_ID=wp_update_post($mycbgenie_custom_edit_post) and comment_author_url='http://mycbgenie.com' and comment_author='admin')) cannot be parsed correct.
TRUNCATE TABLE `mycbgenie_fresh_import_product_details`
SQL command (TRUNCATE TABLE `mycbgenie_fresh_import_product_details`) cannot be parsed correct.
TRUNCATE TABLE `mycbgenie_manual_sync_products_master`
SQL command (TRUNCATE TABLE `mycbgenie_manual_sync_products_master`) cannot be parsed correct.
TRUNCATE TABLE `mycbgenie_cron_sync_master`
SQL command (TRUNCATE TABLE `mycbgenie_cron_sync_master`) cannot be parsed correct.
SELECT * FROM mycbgenie_fresh_import_products_master
			WHERE ( status_import ='success' or  status_modified ='success' )  order by start_time desc
SQL command (SELECT * FROM mycbgenie_fresh_import_products_master WHERE ( status_import ='success' or status_modified ='success' ) order by start_time desc) cannot be parsed correct.
DELETE FROM mycbgenie_fresh_import_products_master WHERE ( status_import is NULL and  status_modified  is NULL ) 
SQL command (DELETE FROM mycbgenie_fresh_import_products_master WHERE ( status_import is NULL and status_modified is NULL ) ) cannot be parsed correct.
	
								INSERT INTO mycbgenie_fresh_import_products_master (mycbgenie_import_id,start_time,json_import_file_id) 
								VALUES ('time()','date("Y-m-d H:i:s")','%s')
	
								INSERT INTO mycbgenie_fresh_import_products_master (mycbgenie_import_id,start_time,json_import_file_id) 
								VALUES ('time()','date("Y-m-d H:i:s")','$_POST_remote_file_id')
	
								INSERT INTO mycbgenie_fresh_import_products_master (mycbgenie_import_id,start_time,json_import_file_id) 
								VALUES ('time()','date("Y-m-d H:i:s")','$_POST_remote_file_id')
SQL command ( INSERT INTO mycbgenie_fresh_import_products_master (mycbgenie_import_id,start_time,json_import_file_id) VALUES ('time()','date("Y-m-d H:i:s")','$_POST_remote_file_id')) cannot be parsed correct.
SELECT status_import,mycbgenie_import_id,start_time,products_completed,last_used_throttle,json_import_file_id FROM mycbgenie_fresh_import_products_master 
				 	WHERE ( status_import  IS NULL  AND status_modified  IS NULL ) order by start_time desc
SQL command (SELECT status_import,mycbgenie_import_id,start_time,products_completed,last_used_throttle,json_import_file_id FROM mycbgenie_fresh_import_products_master WHERE ( status_import IS NULL AND status_modified IS NULL ) order by start_time desc) cannot be parsed correct.
	
					UPDATE mycbgenie_fresh_import_products_master
					SET last_used_throttle=$throttle_local  
					WHERE mycbgenie_import_id='%s'	
					
	
					UPDATE mycbgenie_fresh_import_products_master
					SET last_used_throttle=$throttle_local  
					WHERE mycbgenie_import_id='$throttle'	
					
	
					UPDATE mycbgenie_fresh_import_products_master
					SET last_used_throttle=$throttle_local  
					WHERE mycbgenie_import_id='$throttle'	
					
SQL command ( UPDATE mycbgenie_fresh_import_products_master SET last_used_throttle=$throttle_local WHERE mycbgenie_import_id='$throttle' ) cannot be parsed correct.
SELECT status_import,status_modified,mycbgenie_import_id,start_time,products_completed,batch_interval,last_used_throttle,json_import_file_id,screenshot_allowed FROM mycbgenie_fresh_import_products_master order by start_time desc
SQL command (SELECT status_import,status_modified,mycbgenie_import_id,start_time,products_completed,batch_interval,last_used_throttle,json_import_file_id,screenshot_allowed FROM mycbgenie_fresh_import_products_master order by start_time desc) cannot be parsed correct.
START TRANSACTION;
SQL command (START TRANSACTION;) cannot be parsed correct.
SET autocommit = 0;
SQL command (SET autocommit = 0;) cannot be parsed correct.
COMMIT;
SQL command (COMMIT;) cannot be parsed correct.
SET autocommit = 1;
SQL command (SET autocommit = 1;) cannot be parsed correct.
	
							DELETE FROM mycbgenie_manual_sync_products_master
							WHERE status_sync	<> 'success'
SQL command ( DELETE FROM mycbgenie_manual_sync_products_master WHERE status_sync <> 'success') cannot be parsed correct.
SELECT `table_schema`  FROM information_schema.tables WHERE `table_name` = 'mycbgenie_fresh_import_products_master'
SQL command (SELECT `table_schema` FROM information_schema.tables WHERE `table_name` = 'mycbgenie_fresh_import_products_master') cannot be parsed correct.
SELECT table_name, ENGINE FROM information_schema.tables WHERE (table_name LIKE '$wpdbpost%' OR
		table_name LIKE '$wpdbterm%'  OR table_name LIKE '$wpdbcomment%') and ENGINE<>'InnoDB' and `table_schema`='$wpdb->get_results($sql)_0_table_schema'
SQL command (SELECT table_name, ENGINE FROM information_schema.tables WHERE (table_name LIKE '$wpdbpost%' OR table_name LIKE '$wpdbterm%' OR table_name LIKE '$wpdbcomment%') and ENGINE<>'InnoDB' and `table_schema`='$wpdb->get_results($sql)_0_table_schema') cannot be parsed correct.
ALTER TABLE  $res ENGINE = InnoDB;
SQL command (ALTER TABLE $res ENGINE = InnoDB;) cannot be parsed correct.
SELECT table_name, ENGINE FROM information_schema.tables WHERE (table_name LIKE '$wpdbpost%' OR
		table_name LIKE '$wpdbterm%' OR table_name LIKE '$wpdbcomment%') and ENGINE<>'InnoDB' and `table_schema`='$wpdb->get_results($sql)_0_table_schema'
SQL command (SELECT table_name, ENGINE FROM information_schema.tables WHERE (table_name LIKE '$wpdbpost%' OR table_name LIKE '$wpdbterm%' OR table_name LIKE '$wpdbcomment%') and ENGINE<>'InnoDB' and `table_schema`='$wpdb->get_results($sql)_0_table_schema') cannot be parsed correct.
SELECT * FROM mycbgenie_fresh_import_products_master
			WHERE ( status_import is null and status_modified is null) or ( status_import !='success' and  status_modified !='success' )  order by start_time desc
SQL command (SELECT * FROM mycbgenie_fresh_import_products_master WHERE ( status_import is null and status_modified is null) or ( status_import !='success' and status_modified !='success' ) order by start_time desc) cannot be parsed correct.
SELECT * FROM mycbgenie_manual_sync_products_master
			WHERE ( status_sync !='success' or status_sync is null )  order by start_time desc
SQL command (SELECT * FROM mycbgenie_manual_sync_products_master WHERE ( status_sync !='success' or status_sync is null ) order by start_time desc) cannot be parsed correct.
SELECT * FROM mycbgenie_fresh_import_products_master 
				 	WHERE ( status_import ='success' or status_modified ='success') order by start_time desc
SQL command (SELECT * FROM mycbgenie_fresh_import_products_master WHERE ( status_import ='success' or status_modified ='success') order by start_time desc) cannot be parsed correct.
	SELECT * FROM mycbgenie_manual_sync_products_master 
	 			WHERE ( status_sync <> 'success' or status_sync is NULL) order by start_time desc  
SQL command ( SELECT * FROM mycbgenie_manual_sync_products_master WHERE ( status_sync <> 'success' or status_sync is NULL) order by start_time desc ) cannot be parsed correct.
SELECT * FROM mycbgenie_manual_sync_products_master
				 	WHERE ( status_sync ='success' )  order by start_time desc
SQL command (SELECT * FROM mycbgenie_manual_sync_products_master WHERE ( status_sync ='success' ) order by start_time desc) cannot be parsed correct.
	
								INSERT INTO mycbgenie_manual_sync_products_master (mycbgenie_sync_id,json_import_file_id,last_used_throttle,start_time) 
								VALUES ('time()','%s',%d,'date("Y-m-d H:i:s")')
	
								INSERT INTO mycbgenie_manual_sync_products_master (mycbgenie_sync_id,json_import_file_id,last_used_throttle,start_time) 
								VALUES ('time()','json_decode(mycbgenie_sideload_remote_JSON_file_id(), true)_file_id',%d,'date("Y-m-d H:i:s")')
	
								INSERT INTO mycbgenie_manual_sync_products_master (mycbgenie_sync_$_POST_throttle,json_import_file_id,last_used_throttle,start_time) 
								VALUES ('time()','json_decode(mycbgenie_sideload_remote_JSON_file_id(), true)_file_id',%d,'date("Y-m-d H:i:s")')
	
								INSERT INTO mycbgenie_manual_sync_products_master (mycbgenie_sync_$_POST_throttle,json_import_file_id,last_used_throttle,start_time) 
								VALUES ('time()','json_decode(mycbgenie_sideload_remote_JSON_file_id(), true)_file_id',%d,'date("Y-m-d H:i:s")')
SQL command ( INSERT INTO mycbgenie_manual_sync_products_master (mycbgenie_sync_$_POST_throttle,json_import_file_id,last_used_throttle,start_time) VALUES ('time()','json_decode(mycbgenie_sideload_remote_JSON_file_id(), true)_file_id',%d,'date("Y-m-d H:i:s")')) cannot be parsed correct.
SELECT (ID) FROM $wpdbposts a INNER JOIN $wpdbpostmeta b
				ON ( a.ID = b.post_id ) WHERE 1=1 AND 
				b.meta_key = '_mycbgenie_sync_id' AND CAST(b.meta_value AS CHAR)  = '$wpdb->get_results($sql)_0_mycbgenie_sync_id' order by post_date DESC
SQL command (SELECT (ID) FROM $wpdbposts a INNER JOIN $wpdbpostmeta b ON ( a.ID = b.post_id ) WHERE 1=1 AND b.meta_key = '_mycbgenie_sync_id' AND CAST(b.meta_value AS CHAR) = '$wpdb->get_results($sql)_0_mycbgenie_sync_id' order by post_date DESC) cannot be parsed correct.
	
					UPDATE mycbgenie_manual_sync_products_master
					SET products_completed=count($results) 
					WHERE mycbgenie_sync_id='%s'	
					
	
					UPDATE mycbgenie_manual_sync_products_master
					SET products_completed=count($results) 
					WHERE mycbgenie_sync_id='$wpdb->get_results($sql)_0_mycbgenie_sync_id'	
					
	
					UPDATE mycbgenie_manual_sync_products_master
					SET products_completed=count($results) 
					WHERE mycbgenie_sync_id='$wpdb->get_results($sql)_0_mycbgenie_sync_id'	
					
SQL command ( UPDATE mycbgenie_manual_sync_products_master SET products_completed=count($results) WHERE mycbgenie_sync_id='$wpdb->get_results($sql)_0_mycbgenie_sync_id' ) cannot be parsed correct.
	
							DELETE FROM mycbgenie_manual_sync_products_master
							WHERE mycbgenie_sync_id='$_POST_sync_id'	
							
	
							DELETE FROM mycbgenie_manual_sync_products_master
							WHERE mycbgenie_sync_id='$_POST_sync_id'	
							
SQL command ( DELETE FROM mycbgenie_manual_sync_products_master WHERE mycbgenie_sync_id='$_POST_sync_id' ) cannot be parsed correct.
START TRANSACTION;
SQL command (START TRANSACTION;) cannot be parsed correct.
SELECT (ID) FROM $wpdbposts a INNER JOIN $wpdbpostmeta b
				ON ( a.ID = b.post_id ) WHERE 1=1 AND 
				b.meta_key = '_mycbgenie_id' AND CAST(b.meta_value AS CHAR)  = '$val' order by post_date DESC
SQL command (SELECT (ID) FROM $wpdbposts a INNER JOIN $wpdbpostmeta b ON ( a.ID = b.post_id ) WHERE 1=1 AND b.meta_key = '_mycbgenie_id' AND CAST(b.meta_value AS CHAR) = '$val' order by post_date DESC) cannot be parsed correct.
	
							UPDATE mycbgenie_manual_sync_products_master
							SET products_added=products_added+1 
							WHERE mycbgenie_sync_id='$_POST_sync_id'	
							
	
							UPDATE mycbgenie_manual_sync_products_master
							SET products_added=products_added+1 
							WHERE mycbgenie_sync_id='$_POST_sync_id'	
							
SQL command ( UPDATE mycbgenie_manual_sync_products_master SET products_added=products_added+1 WHERE mycbgenie_sync_id='$_POST_sync_id' ) cannot be parsed correct.
	
							UPDATE mycbgenie_cron_sync_master
							SET products_added=products_added+1 
							WHERE mycbgenie_cron_id='$_POST_sync_id'	
							
	
							UPDATE mycbgenie_cron_sync_master
							SET products_added=products_added+1 
							WHERE mycbgenie_cron_id='$_POST_sync_id'	
							
SQL command ( UPDATE mycbgenie_cron_sync_master SET products_added=products_added+1 WHERE mycbgenie_cron_id='$_POST_sync_id' ) cannot be parsed correct.
SELECT mycbgenie_id,thumbnail_id FROM mycbgenie_custom_edited_products WHERE mycbgenie_id=$val LIMIT 1
SELECT mycbgenie_id,thumbnail_id FROM mycbgenie_custom_edited_products WHERE mycbgenie_id=$val LIMIT 1
SQL command (SELECT mycbgenie_id,thumbnail_id FROM mycbgenie_custom_edited_products WHERE mycbgenie_id=$val LIMIT 1) cannot be parsed correct.
	
					UPDATE mycbgenie_manual_sync_products_master
					SET products_completed=products_completed-0+$throttle_speed,
					last_used_throttle=%d , screenshot_allowed = '%s' 
						WHERE mycbgenie_sync_id='%s'	
					
	
					UPDATE mycbgenie_manual_sync_products_master
					SET products_completed=products_completed-0+$throttle_speed,
					last_used_throttle=$wpdb->get_results($sql)_0_throttle_speed , screenshot_allowed = '%s' 
						WHERE mycbgenie_sync_id='%s'	
					
	
					UPDATE mycbgenie_manual_sync_products_master
					SET products_completed=products_completed-0+$throttle_speed,
					las$_POST_screenshot_allowedused_throttle=$wpdb->get_results($sql)_0_throttle_speed , screenshot_allowed = '%s' 
						WHERE mycbgenie_sync_id='%s'	
					
	
					UPDATE mycbgenie_manual_sync_products_master
					SET products_completed=products_completed-0+$throttle_speed,
					las$_POST_screens$_POST_sync_idt_allowedused_throttle=$wpdb->get_results($sql)_0_throttle_speed , screenshot_allowed = '%s' 
						WHERE mycbgenie_sync_id='%s'	
					
	
					UPDATE mycbgenie_manual_sync_products_master
					SET products_completed=products_completed-0+$throttle_speed,
					las$_POST_screens$_POST_sync_idt_allowedused_throttle=$wpdb->get_results($sql)_0_throttle_speed , screenshot_allowed = '%s' 
						WHERE mycbgenie_sync_id='%s'	
					
SQL command ( UPDATE mycbgenie_manual_sync_products_master SET products_completed=products_completed-0+$throttle_speed, las$_POST_screens$_POST_sync_idt_allowedused_throttle=$wpdb->get_results($sql)_0_throttle_speed , screenshot_allowed = '%s' WHERE mycbgenie_sync_id='%s' ) cannot be parsed correct.
	
					UPDATE mycbgenie_cron_sync_master
					SET products_completed=products_completed-0+$modulus, 
					last_used_throttle=%d, 
					    steps_completed=absint($_POST["step"]),last_batch_process_time='date("Y-m-d H:i:s")'  
					WHERE mycbgenie_cron_id='%s'	
					
	
					UPDATE mycbgenie_cron_sync_master
					SET products_completed=products_completed-0+$modulus, 
					last_used_throttle=$wpdb->get_results($sql)_0_throttle_speed, 
					    steps_completed=absint($_POST["step"]),last_batch_process_time='date("Y-m-d H:i:s")'  
					WHERE mycbgenie_cron_id='%s'	
					
	
					UPDATE mycbgenie_cro$_POST_sync_idsync_master
					SET products_completed=products_completed-0+$modulus, 
					last_used_throttle=$wpdb->get_results($sql)_0_throttle_speed, 
					    steps_completed=absint($_POST["step"]),last_batch_process_time='date("Y-m-d H:i:s")'  
					WHERE mycbgenie_cron_id='%s'	
					
	
					UPDATE mycbgenie_cro$_POST_sync_idsync_master
					SET products_completed=products_completed-0+$modulus, 
					last_used_throttle=$wpdb->get_results($sql)_0_throttle_speed, 
					    steps_completed=absint($_POST["step"]),last_batch_process_time='date("Y-m-d H:i:s")'  
					WHERE mycbgenie_cron_id='%s'	
					
SQL command ( UPDATE mycbgenie_cro$_POST_sync_idsync_master SET products_completed=products_completed-0+$modulus, last_used_throttle=$wpdb->get_results($sql)_0_throttle_speed, steps_completed=absint($_POST["step"]),last_batch_process_time='date("Y-m-d H:i:s")' WHERE mycbgenie_cron_id='%s' ) cannot be parsed correct.
SELECT $wpdbposts.ID FROM $wpdbposts INNER JOIN $wpdbpostmeta ON 
			( $wpdbposts.ID = $wpdbpostmeta.post_id ) INNER JOIN $wpdbpostmeta
			 AS mt1 ON ( $wpdbposts.ID = mt1.post_id ) WHERE 1=1 AND ( 
			 ( $wpdbpostmeta.meta_key = '_mycbgenie_managed_by' 
			AND CAST($wpdbpostmeta.meta_value AS CHAR) = 'mycbgenie' ) AND 
			( mt1.meta_key = '_mycbgenie_sync_id' AND CAST(mt1.meta_value AS CHAR)
			 != '$sync_id' ) ) AND $wpdbposts.post_type = 'product' AND 
			 ($wpdbposts.post_status = 'publish' OR $wpdbposts.post_status = 
			 'future' OR $wpdbposts.post_status = 'draft' OR $wpdbposts.post_status 
			 = 'pending' OR $wpdbposts.post_status = 'private') GROUP BY $wpdbposts.ID
			  ORDER BY $wpdbposts.post_date DESC
SQL command (SELECT $wpdbposts.ID FROM $wpdbposts INNER JOIN $wpdbpostmeta ON ( $wpdbposts.ID = $wpdbpostmeta.post_id ) INNER JOIN $wpdbpostmeta AS mt1 ON ( $wpdbposts.ID = mt1.post_id ) WHERE 1=1 AND ( ( $wpdbpostmeta.meta_key = '_mycbgenie_managed_by' AND CAST($wpdbpostmeta.meta_value AS CHAR) = 'mycbgenie' ) AND ( mt1.meta_key = '_mycbgenie_sync_id' AND CAST(mt1.meta_value AS CHAR) != '$sync_id' ) ) AND $wpdbposts.post_type = 'product' AND ($wpdbposts.post_status = 'publish' OR $wpdbposts.post_status = 'future' OR $wpdbposts.post_status = 'draft' OR $wpdbposts.post_status = 'pending' OR $wpdbposts.post_status = 'private') GROUP BY $wpdbposts.ID ORDER BY $wpdbposts.post_date DESC) cannot be parsed correct.
	
							UPDATE mycbgenie_manual_sync_products_master
							SET status_sync='success' , end_time='date("Y-m-d H:i:s")',
							products_removed=count($tmp_push), screenshot_allowed = '$_POST_screenshot_allowed' 
							WHERE mycbgenie_sync_id='%s'	
							
	
							UPDATE mycbgenie_manual_sync_products_master
							SET status_sync='success' , end_time='date("Y-m-d H:i:s")',
							products_removed=count($tmp_push), screenshot_allowed = '$_POST_screenshot_allowed' 
							WHERE mycbgenie_sync_id='$_POST_sync_id'	
							
	
							UPDATE mycbgenie_manual_sync_products_master
							SET status_sync='success' , end_time='date("Y-m-d H:i:s")',
							products_removed=count($tmp_push), screenshot_allowed = '$_POST_screenshot_allowed' 
							WHERE mycbgenie_sync_id='$_POST_sync_id'	
							
SQL command ( UPDATE mycbgenie_manual_sync_products_master SET status_sync='success' , end_time='date("Y-m-d H:i:s")', products_removed=count($tmp_push), screenshot_allowed = '$_POST_screenshot_allowed' WHERE mycbgenie_sync_id='$_POST_sync_id' ) cannot be parsed correct.
	
							UPDATE mycbgenie_cron_sync_master
							SET status_cron='success' ,last_batch_process_time='date("Y-m-d H:i:s")',
							 end_time='date("Y-m-d H:i:s")',products_removed=count($tmp_push) 
							WHERE mycbgenie_cron_id='$_POST_sync_id'	
							
	
							UPDATE mycbgenie_cron_sync_master
							SET status_cron='success' ,last_batch_process_time='date("Y-m-d H:i:s")',
							 end_time='date("Y-m-d H:i:s")',products_removed=count($tmp_push) 
							WHERE mycbgenie_cron_id='$_POST_sync_id'	
							
SQL command ( UPDATE mycbgenie_cron_sync_master SET status_cron='success' ,last_batch_process_time='date("Y-m-d H:i:s")', end_time='date("Y-m-d H:i:s")',products_removed=count($tmp_push) WHERE mycbgenie_cron_id='$_POST_sync_id' ) cannot be parsed correct.
ROLLBACK;
SQL command (ROLLBACK;) cannot be parsed correct.
COMMIT;
SQL command (COMMIT;) cannot be parsed correct.
START TRANSACTION;
SQL command (START TRANSACTION;) cannot be parsed correct.
SET autocommit = 0;
SQL command (SET autocommit = 0;) cannot be parsed correct.
ROLLBACK;
SQL command (ROLLBACK;) cannot be parsed correct.
ROLLBACK;
SQL command (ROLLBACK;) cannot be parsed correct.
ROLLBACK;
SQL command (ROLLBACK;) cannot be parsed correct.
	
								DELETE FROM mycbgenie_custom_edited_products
								WHERE mycbgenie_id='$_POST_mycbgenie_id'	
								
	
								DELETE FROM mycbgenie_custom_edited_products
								WHERE mycbgenie_id='$_POST_mycbgenie_id'	
								
SQL command ( DELETE FROM mycbgenie_custom_edited_products WHERE mycbgenie_id='$_POST_mycbgenie_id' ) cannot be parsed correct.
ROLLBACK;
SQL command (ROLLBACK;) cannot be parsed correct.
COMMIT;
SQL command (COMMIT;) cannot be parsed correct.
SET autocommit = 1;
SQL command (SET autocommit = 1;) cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [971, 985, 999, 1013, 1027, 1200, 1220, 1240, 1260, 1280, 1497, 1507, 1521, 1587, 1606, 1617, 1644, 1678, 1786, 1807, 1834, 1861, 1888, 1922, 2081, 2112, 2656, 4517, 4555, 4593, 4631, 4663, 4735, 4847, 4853, 4859, 4900, 4906, 5112, 5605, 5632, 5919, 5933, 5967, 6251, 6477, 6940, 7508, 7777, 7783, 8286, 8435, 8509, 8577, 8666, 8699, 8705, 9288, 9658, 10100, 10106, 10112, 10155, 10216, 10228, 10301, 10520, 10673, 11212, 11218, 11343, 11349, 11932, 12312, 12361, 12397, 12437, 12621, 12657, 13583, 13610, 13655, 13709, 13767, 13792, 14066, 14675, 15135, 15171, 15221, 15360, 15891, 15951, 16155, 16218, 16282, 16365, 16398, 20652, 20658, 21153, 21263, 21289, 21341, 21361, 21386, 21392]
Added 0 SQL nodes. 0 out of 107 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:19.822256.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'
					<!--<div style="clear:both;"></div>-->
					<div id="mcg_div_thumb" style="width:100%; margin-left:1px; margin-right:1px; margin-top:3px; 
								margin-bottom:15px; border:0px solid #fafafa; overflow:auto; padding:0px;
								padding-bottom:0px; text-align:center; border-radius:5px; "   >
					<p class="mcg_image" style="max-width:100%; border-radius:3px; float:right; 
					border:1px solid #get_option("mycbgenie_sf_bg_thumbnails", "EBEBEB"); padding:5px; padding-left:8px; margin-top:0px; padding-bottom:5px; ">
					<a href="" onClick="return false;" style="font-size:11px; color:#get_option("mycbgenie_sf_text_color_thumbnails", "000000");">View:storefront categories </a>
					<img  style="border:0px solid red; vertical-align:middle; float:right; margin:3px; padding-left:5px;" src="plugins_url("images/expand.png", )">
					</p>
					
			'' cannot be parsed correct.
HTML code '$'
						
								<li>
								<a href=get_term_link($child)">
								<img style="width:140px; height:auto; padding:5px;" src="wp_get_attachment_image_src($mcg_thumbnail_id, $size, false)_0">
								<p style="font-size:12px; color:#get_option("mycbgenie_sf_text_color_thumbnails", "000000");"$child</p>
								</a>
								</li>
								
					'' cannot be parsed correct.
HTML code '$'
					</ul>
					<div align=right id="mcg_thumb_collapse" ><span style="font-size:11px; color:#808080;">Hide<img  style="border:0px solid red; vertical-align:middle; float:right; margin:3px; padding-left:5px; margin-right:20px; margin-bottom:10px;" src="plugins_url("images/collapse.png", )"></span></div
					</div>
				'' cannot be parsed correct.
HTML code '$'<div style=\'text-align:justify; color:silver;\'>the_excerpt()</div>'' cannot be parsed correct.
HTML code '$'$cat'' cannot be parsed correct.
HTML code '$'$cat'' cannot be parsed correct.
HTML code '$'$cat'' cannot be parsed correct.
HTML code '$'$sub_category'' cannot be parsed correct.
HTML code '$'$sub_category'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'get_option("mycbgenie_version")'' cannot be parsed correct.
HTML code '$'1 has executed'' cannot be parsed correct.
HTML code '$'$sub_category'' cannot be parsed correct.
HTML code '$'<tr><th valign=top>Started</th><td>date("Y-m-d, h:i:s A", strtotime($res->start_time))<br><font color=maroon>   [ mycbgenie_convert_seconds_to_time($tot_seconds) ago ]</font></td></tr>'' cannot be parsed correct.
HTML code '$'<tr><th>Total Products </th><td>$res</td></tr>'' cannot be parsed correct.
HTML code '$'<tr><th>Batch Size</th><td>$res products</td></tr>'' cannot be parsed correct.
HTML code '$'<tr><th>Total Batches</th><td>$res</td></tr>'' cannot be parsed correct.
HTML code '$'<tr><th>Batches Synced</th><td>Yet to start</td></tr>'' cannot be parsed correct.
HTML code '$'<tr><th>Batches Synced</th><td>$res</td></tr>'' cannot be parsed correct.
HTML code '$'<tr><th valign=top>Last Batch Synced  </th><td><font color=blue>mycbgenie_convert_seconds_to_time($tot_seconds) ago</font></td></tr>'' cannot be parsed correct.
HTML code '$'<tr><th>Batch Frequency</th><td> in every get_option("mycbgenie_cron_batch_frequency", 30) minutes</td></tr>'' cannot be parsed correct.
HTML code '$'<tr><th valign=top>Next Batch Due On</th><td>date("Y-m-d, h:i:s a", $timestamp)<br><font color=maroon>   <span>[ mycbgenie_convert_seconds_to_time($tot_seconds) left ]</span></font></td></tr>'' cannot be parsed correct.
HTML code '$'<tr><td valign=top>$res</td>'' cannot be parsed correct.
HTML code '$'<td valign=top>date("Y-m-d", strtotime($res->start_time))<h5 style="margin:0px; font-weight:normal;">date("h:i:s A", strtotime($res->start_time))</h5></td>'' cannot be parsed correct.
HTML code '$'<td>date("Y-m-d", strtotime($res->end_time))<h5 style="margin:0px; font-weight:normal;">date("h:i:s A", strtotime($res->end_time))</h5></td>'' cannot be parsed correct.
HTML code '$'<td valign=top align=center>$res</td>'' cannot be parsed correct.
HTML code '$'<td valign=top align=center>$res</td>'' cannot be parsed correct.
HTML code '$'<td valign=top align=center>$res</td>'' cannot be parsed correct.
HTML code '$'<td valign=top align=center>$res</td>'' cannot be parsed correct.
HTML code '$'<td valign=top align=center>$res</td>'' cannot be parsed correct.
HTML code '$'<td valign=top align=center>mycbgenie_convert_seconds_to_time($tot_seconds)</td>'' cannot be parsed correct.
HTML code '$'<tr><td>$res</td>'' cannot be parsed correct.
HTML code '$'<td>$res</td>'' cannot be parsed correct.
HTML code '$'<td>$res</td>'' cannot be parsed correct.
HTML code '$'<td align=center>$res</td>'' cannot be parsed correct.
HTML code '$'<td align=center>$res</td>'' cannot be parsed correct.
HTML code '$'<td align=center>$res</td>'' cannot be parsed correct.
HTML code '$'<td align=center>mycbgenie_convert_seconds_to_time($tot_seconds)</td>'' cannot be parsed correct.
HTML code '$'<div align=right><strong>Current Time : </strong>date("Y-m-d, h:i:s A", time())</div>'' cannot be parsed correct.
HTML code '$'<tr><th>Cron ID</th><td>$res</td></tr>'' cannot be parsed correct.
HTML code '$'json_encode(["step" => "done", "batches" => $total_steps, "total" => $total, "step_final" => $step, "diagonostics" => $error_message, "resume_first_step" => "Over", "percentage" => "Over"])'' cannot be parsed correct.
HTML code '$'json_encode(["step" => $step, "batches" => $total_steps, "total" => $total, "Diagonostics" => $error_message, "resume_first_step" => "Over", "percentage" => intval($step - 1 / $total_steps * 100)])'' cannot be parsed correct.
HTML code '$'json_encode(["pre_status" => "error", "error_message" => $err_msg])'' cannot be parsed correct.
HTML code '$'json_encode(["pre_status" => "OK", "time_tk" => $execution_time])'' cannot be parsed correct.
HTML code '$'json_encode(["import_id" => $import_id, "destination_path" => $destination_path, "products_processed" => $products_processed, "error_message" => $error_message, "total" => $total, "skip_file_import" => $skip_file_import, "json_file_change_detected" => $json_file_change_detected, "last_used_throttle" => $last_used_throttle, "json_import_file_id" => $import_file_id, "last_success_import_file" => $last_success_import_file, "total_steps" => $total_steps])'' cannot be parsed correct.
HTML code '$'json_encode(["status" => $err_status, "error_message" => $error_message, "already_imported" => count($result), "modified_status" => $result[0]->status_modified, "import_status" => $result[0]->status_import, "products_processed" => $result[0]->products_completed, "batch_interval" => $result[0]->batch_interval, "existing_import_file_id" => $result[0]->json_import_file_id, "remote_import_file_id" => $import_file_id, "screenshot_allowed" => $result[0]->screenshot_allowed, "last_used_throttle" => $result[0]->last_used_throttle])'' cannot be parsed correct.
HTML code '$' Error in deleting  manual_sync_product_master TABLE (functions_fresh_install_import.inc.php)\'$wpdb'' cannot be parsed correct.
HTML code '$'json_encode(["status" => "OK", "time_taken" => $time])'' cannot be parsed correct.
HTML code '$'<tr><td>$res</td><td>$res</td></tr>'' cannot be parsed correct.
HTML code '$'Ooops! Error while deleting this information! for user id :get_current_user_id()'' cannot be parsed correct.
HTML code '$'33333'' cannot be parsed correct.
HTML code '$'get_option("mycbgenie_sf_bg_thumbnails")'' cannot be parsed correct.
HTML code '$'get_option("mycbgenie_sf_text_color_thumbnails")'' cannot be parsed correct.
HTML code '$'12'' cannot be parsed correct.
HTML code '$'mycbgenie_header_files()'' cannot be parsed correct.
HTML code '$'Resume / Start Again'' cannot be parsed correct.
HTML code '$'admin_url("/images/wpspin_light.gif")'' cannot be parsed correct.
HTML code '$'<a href=get_permalink(wc_get_page_id("shop"))" target="_blank">get_permalink(wc_get_page_id("shop"))</a><br>&nbsp;'' cannot be parsed correct.
HTML code '$'Start SYNC'' cannot be parsed correct.
HTML code '$'admin_url("/images/wpspin_light.gif")'' cannot be parsed correct.
HTML code '$'json_encode(["status" => $err_status, "import_master_count" => $import_master_count, "error_message" => $error_message, "products_processed" => $products_processed, "sync_master_count" => $sync_master_count, "throttle_changed" => $throttle_changed, "throttle_old_value" => $throttle_old_value, "json_import_file_id" => $import_file_id, "json_file_change_detected" => $json_file_change_detected, "last_used_throttle" => $last_used_throttle, "last_success_import_file" => $last_success_import_file, "jsonimport_existing_file_id" => $import_existing_file_id, "skip_file_import" => $skip_file_import, "screenshot_allowed" => $screenshot_allowed, "sync_id" => $sync_id])'' cannot be parsed correct.
HTML code '$'json_encode(["status" => "Error"])'' cannot be parsed correct.
HTML code '$'json_encode(["status" => "OK"])'' cannot be parsed correct.
HTML code '$'json_encode(["destination_path" => $destination_path, "error_message" => $error_message, "total" => $total, "total_steps" => $total_steps])'' cannot be parsed correct.
HTML code '$'json_encode(["step" => "done", "batches" => $total_steps, "total" => $total, "step_final" => $step, "diagonostics" => $error_message, "resume_first_step" => "Over", "percentage" => "Over"])'' cannot be parsed correct.
HTML code '$'json_encode(["step" => $step, "batches" => $total_steps, "total" => $total, "Diagonostics" => $error_message, "resume_first_step" => "Over", "percentage" => intval($step - 1 / $total_steps * 100)])'' cannot be parsed correct.
HTML code '$'<input type=\'hidden\' name=\'$key\' value=\'$value\' />'' cannot be parsed correct.
HTML code '$'<label class="screen-reader-text" for="mycbgenie_filter_cat_id">Filter by category</label>'' cannot be parsed correct.
HTML code '$'<input type=\'hidden\' name=\'$key\' value=\'$value\' />'' cannot be parsed correct.
HTML code '$'<label class="screen-reader-text" for="mycbgenie_filter_custom_edit_id">Filter by custom edit</label>'' cannot be parsed correct.
HTML code '$'<input type=\'hidden\' name=\'$key\' value=\'$value\' />'' cannot be parsed correct.
HTML code '$'$which'' cannot be parsed correct.
HTML code '$'json_encode(["status" => "error", "error_message" => "Error in updating while in SYNC :"])'' cannot be parsed correct.
HTML code '$'json_encode(["status" => "error", "error_message" => "Error in updating product tags while in SYNC :"])'' cannot be parsed correct.
HTML code '$'json_encode(["status" => "error", "error_message" => "Error in updating product terms while in SYNC :"])'' cannot be parsed correct.
HTML code '$'json_encode(["status" => "error", "error_message" => " Error in deleting TABLE mycbgenie_custom_edited_products" . $wpdb->last_error])'' cannot be parsed correct.
HTML code '$'Ooops! Error while deleting this information! for user id :get_current_user_id()'' cannot be parsed correct.
HTML code '$'json_encode(["status" => "error", "error_message" => "Error in accessing details of this product from our REMOTE server. There is a chance of this product might be got deleted from Clickbank Marketplace! REMOTE Sever URL : " . $url])'' cannot be parsed correct.
HTML code '$'json_encode(["title" => $title, "descr" => $descr, "mdescr" => $mdescr, "price" => $price, "keywords" => $keywords, "rank" => $rank, "gravity" => $gravity])'' cannot be parsed correct.
HTML code '$'get_the_title($post_id)'' cannot be parsed correct.
HTML code '$'trim(get_post_excerpt_by_id($post_id))'' cannot be parsed correct.
HTML code '$'trim(get_post_content_by_id($post_id))'' cannot be parsed correct.
HTML code '$'get_post_meta($post_id, "_price", true)'' cannot be parsed correct.
HTML code '$'get_post_meta($post_id, "_mycbgenie_id", true)'' cannot be parsed correct.
HTML code '$'$_REQUEST_id'' cannot be parsed correct.
HTML code '$'$_SERVER_HTTP_REFERER'' cannot be parsed correct.
HTML code '$'$_SERVER_HTTP_REFERER'' cannot be parsed correct.
HTML code '$'mycbgenie_header_files()<h1>Edit Product</h1>'' cannot be parsed correct.
HTML code '$'$_REQUEST_id'' cannot be parsed correct.
HTML code '$'get_permalink($edit_id)'' cannot be parsed correct.
HTML code '$'plugins_url("images/search.png", )'' cannot be parsed correct.
HTML code '$'$_GET_mycbgenie_id'' cannot be parsed correct.
HTML code '$'plugins_url("images/search.png", )'' cannot be parsed correct.
HTML code '$'$_POST_ref_url$_SERVER_HTTP_REFERER'' cannot be parsed correct.
HTML code '$'wp_get_attachment_image_src(get_post_thumbnail_id($edit_id), "thumbnail")_0'' cannot be parsed correct.
HTML code '$'plugins_url("images/upload.png", )'' cannot be parsed correct.
HTML code '$'$_REQUEST_id'' cannot be parsed correct.
HTML code '$'get_post_meta($edit_id, "_price", true)'' cannot be parsed correct.
HTML code '$'get_the_title($edit_id)'' cannot be parsed correct.
HTML code '$'trim(get_post_excerpt_by_id($edit_id))'' cannot be parsed correct.
HTML code '$'trim(get_post_content_by_id($edit_id))'' cannot be parsed correct.
HTML code '$'trim($tmp_str)'' cannot be parsed correct.
HTML code '$'get_post_meta($edit_id, "_mycbgenie_id", true)'' cannot be parsed correct.
HTML code '$'$_REQUEST_id'' cannot be parsed correct.
HTML code '$'wp_create_nonce("sp_mycbgenie_custom_edit")'' cannot be parsed correct.
HTML code '$'$_POST_ref_url$_SERVER_HTTP_REFERER'' cannot be parsed correct.
HTML code '$'mycbgenie_header_files()<h2>Imported Clickbank Products</h2>'' cannot be parsed correct.
HTML code '$'<b>Total Execution Time:</b> $execution_time secs'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'\'><label class="selectit">
			<input value="'' cannot be parsed correct.
HTML code '$'" type="checkbox" 
			'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'</label>
				
	
				'' cannot be parsed correct.
HTML code '$'<ul class=\'children\'>'' cannot be parsed correct.
HTML code '$'\'><label class="selectit">
									<input value="'' cannot be parsed correct.
HTML code '$'" type="checkbox"  
									'' cannot be parsed correct.
HTML code '$'/images/MyCBGenie_logo.png\' ></a>
		<div style="float:right; margin-right:10px; vertical-align:bottom; ">&nbsp;<br /><br /><br />Storefront Plugin Version : '' cannot be parsed correct.
HTML code '$'<div class="wrap" style="margin-top: 35px;">'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'</label></li>
									'' cannot be parsed correct.
HTML code '$'</ul>'' cannot be parsed correct.
HTML code '$'</li>'' cannot be parsed correct.
HTML code '$'</ul>'' cannot be parsed correct.
HTML code '$'<b><div><br>Nothing is updated. No changes are noticied.</b></div><br>'' cannot be parsed correct.
HTML code '$'<b><div><br>Updated Successfully.</b></div><br>'' cannot be parsed correct.
HTML code '$'<b><div><br>Error!   Update Failed.</b></div><br>'' cannot be parsed correct.
HTML code '$'pre step has executed'' cannot be parsed correct.
HTML code '$'<tr><th>Status</th><td>'' cannot be parsed correct.
HTML code '$'<font color=green>On Schedule</font>'' cannot be parsed correct.
HTML code '$'</td></tr>'' cannot be parsed correct.
HTML code '$'<tr><td>Cron Job will start after <br>
				<strong>FRESH IMPORT</strong> or <strong> MANUAL SYNC</strong><br> is finished.</td></tr>'' cannot be parsed correct.
HTML code '$'</table></div>'' cannot be parsed correct.
HTML code '$'<div style="border:0px solid; margin-top:37px;">'' cannot be parsed correct.
HTML code '$'<h3>Last Few Completed CRON Jobs</h3>'' cannot be parsed correct.
HTML code '$'<table width=100% class="sample">'' cannot be parsed correct.
HTML code '$'selected=selected'' cannot be parsed correct.
HTML code '$'  value="5">5</option>
							<option '' cannot be parsed correct.
HTML code '$'selected=selected'' cannot be parsed correct.
HTML code '$'  value="10">10</option>
							<option '' cannot be parsed correct.
HTML code '$'selected=selected'' cannot be parsed correct.
HTML code '$'  value="25">25</option>
							<option '' cannot be parsed correct.
HTML code '$'selected=selected'' cannot be parsed correct.
HTML code '$'   value="50">50</option>
							<option '' cannot be parsed correct.
HTML code '$'selected=selected'' cannot be parsed correct.
HTML code '$'  value="100">100</option>
						</select> products in a batch  
						</li> 

						<div style="padding:7px; background:#FFFFCC; line-height:inherit;">
						Please select <span style="padding:3px; background:#FCCCCC;"><strong>10</strong></span> products, 
						if you are on a shared server.	A good server can handle up to 100 products in a batch!<br />
						
						There are many cheap servers that may throw errors if selected more than 10 products!</div>
							
						
						
			<br />
			<li><label for="batch_frequency"><strong>Execute each batch in every</strong>
			 <select name="mycbgenie_cron_batch_frequency" id="mycbgenie_cron_batch_frequency" />
			 				
							<option '' cannot be parsed correct.
HTML code '$'selected=selected'' cannot be parsed correct.
HTML code '$' value="60">60</option>
							<option '' cannot be parsed correct.
HTML code '$'selected=selected'' cannot be parsed correct.
HTML code '$' value="30">30</option>
							<option '' cannot be parsed correct.
HTML code '$'selected=selected'' cannot be parsed correct.
HTML code '$' value="15">15</option>
							<option '' cannot be parsed correct.
HTML code '$'selected=selected'' cannot be parsed correct.
HTML code '$' value="10">10</option>

						</select> minutes
						</li> 	
					</label>
					
					</ul>	

						<!--<span style="padding:5px; background:#FFFFCC;">
						Please select <strong>25</strong> or <strong>50</strong>, if you are on a shared server.
						</span>	-->
			</ul><!--
			<label><span style="padding:5px; background:#FFFFCC;">In order for the WordPress cron jobs to work effectively, please make sure you have at least one visitor to your website in the batch frequency interval, you have selected. In case you did not get any traffic in the selected batch interval time, the missing cron job batch is executed in the next cycle.</span>	</label><br />--><br />
			<input class="button-primary" id="submit-btn-ajax_gen_setting" type=submit  value="Save Changes" />

	</form>
												

'' cannot be parsed correct.
HTML code '$'<div align=center style="background:lightyellow; padding:5px; font-size:18px; font-famiy:arial;">Please be patient while the Import/Sync process is completed. You can change this setting only after IMPORT or SYNC process is completed.'' cannot be parsed correct.
HTML code '$'<br><br>If you are NOT running MANUAL SYNC process on another window at the moment, please click on MANUAL SYNC button on the IMPORT page, to resume from the last interrupted point. You need to complete the current scheduled MANUAL SYNC process before you configure the CRON job. <br><br>After this action, you may come back to this settings page to configure CRON job.'' cannot be parsed correct.
HTML code '$'<br><br>You may come back to this settings page to configure CRON job once the import is finished.'' cannot be parsed correct.
HTML code '$'<br></div>'' cannot be parsed correct.
HTML code '$'<tr><th>ID</th><th>Started</th><th>Ended</th><th>Result</th>
					<th>Products</th><th>Added</th><th>Removed</th><th>Batches</th><th>Batch Size</th>
					<th>Time Span</th></tr>'' cannot be parsed correct.
HTML code '$'<td valign=top>'' cannot be parsed correct.
HTML code '$'<font color=green>Success</font>'' cannot be parsed correct.
HTML code '$'<font color=green>???</font>'' cannot be parsed correct.
HTML code '$'</td>'' cannot be parsed correct.
HTML code '$'</table></div>'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div style="background:#D4D4D4; border-radius:7px; margin-top:30px;
				padding:15px; padding-bottom:27px; height:100%; border:0px solid gray;">'' cannot be parsed correct.
HTML code '$'<div style=" border:0px solid; ">'' cannot be parsed correct.
HTML code '$'<h3>Last Few MANUAL SYNC Stats</h3>'' cannot be parsed correct.
HTML code '$'<table width=100% class="sample">'' cannot be parsed correct.
HTML code '$'<tr><th>ID</th><th>Started</th><th>Ended</th><th>Result</th>
					<th>Products Synced</th><th>Products Added</th>					<th>Products Removed</th>

					<th>Time Span</th></tr>'' cannot be parsed correct.
HTML code '$'<td>'' cannot be parsed correct.
HTML code '$'<font color=green>Success</font>'' cannot be parsed correct.
HTML code '$'<font color=green>???</font>'' cannot be parsed correct.
HTML code '$'</td>'' cannot be parsed correct.
HTML code '$'</table></div>'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div class="wrap" style="margin-top: 35px;">'' cannot be parsed correct.
HTML code '$'<div style="background:#D4D4D4; border-radius:7px;  border:1px solid silver; 
			padding:20px; ">'' cannot be parsed correct.
HTML code '$'<div style=" border:0px solid black">'' cannot be parsed correct.
HTML code '$'<h3>Current Cron Job Stats</h3>'' cannot be parsed correct.
HTML code '$'<table class="sample" width=100%>'' cannot be parsed correct.
HTML code '$'<div align=center style="margin-top:50px; padding:10px; border:2px dotted red;">
		<h3>Cannot Continue...</h3>The <B>STORAGE ENGINE</B> of the following TABLES of your database is not supported by us.
		<p>You need to contact your hosting people to change the <strong>STORAGE ENGINE</strong> of the following
		 MySQL tables to <strong>InnoDB</strong>. <br>If you have the access to <strong>phpMyAdmin</strong> on your cpanel, you can have a try.</p>'' cannot be parsed correct.
HTML code '$'<div align=center style="margin-top:20px; MARGIN-BOTTOM:30PX;"><table class="sample">'' cannot be parsed correct.
HTML code '$'<tr><th>Table Name</th><th>Storage Engine</th></tr>'' cannot be parsed correct.
HTML code '$'</table></div>'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'" />
						<span> <a href="http://mycbgenie.com" target=_blank>It\'s FREE! Click here to get one</a></span></li>    
							 
						<li>
						<input type=checkbox '' cannot be parsed correct.
HTML code '$' name="mycbgenie_show_price" id="mycbgenie_show_price" />
						<label for="showprice">Show <strong>Price</strong> </label>
						</li>

						<li>
						<input type=checkbox '' cannot be parsed correct.
HTML code '$' name="mycbgenie_sf_show_thumbnails" id="mycbgenie_sf_show_thumbnails" />
						<label for="showdescr">Show <strong>Category Thumbnails</strong> in Category/Sub category </label>
						<div style="padding:7px; background:#d3d3d3; margin:9px; margin-left:21px; border-radius:5px; width:72%; max-width:100%;" >
							<span>  <input checked type="radio" value="header" name="mycbgenie_sf_thumbnail_location"/>On Header Area<br />
									<input '' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$' type="radio" value="breadcrumb"  
												name="mycbgenie_sf_thumbnail_location"/>On Breadcrumb Area<br />
												
									<input  '' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$' type="radio" value="shop_loop"  
												name="mycbgenie_sf_thumbnail_location"/>Just Before Products
							</span>	
							<!--<br />
							<span style="margin-left:21px;"> <font color="#0066FF">[ Your theme may OR not support all of the above areas.</span>
							<br><span style="margin-left:21px;">Select the best area that looks good on your theme. ]</font></span>-->
							
																						
						</div>
						<span style="margin-left:21px;">Background Color: #</span>
							<input size=6 name="mycbgenie_sf_bg_thumbnails" id="mycbgenie_sf_bg_thumbnails" value="'' cannot be parsed correct.
HTML code '$' name="mycbgenie_sf_show_descr" id="mycbgenie_sf_show_descr" />
						<label for="showdescr">Show <strong>Product Description</strong> in Category/Sub category Pages </label>
						<span></span>
						</li> 	


						'' cannot be parsed correct.
HTML code '$'" name="mycbgenie_products_perpage" id="mycbgenie_perpage" />
						<span> <font color="#0066FF">[ This setting can be overwritten by your theme\'s setting ]</font></span></li> 
						

					
						
						 
						<li><label for="tracking">Clickbank Tracking ID: </label>
						<input size=12 value="'' cannot be parsed correct.
HTML code '$'" 
										name="mycbgenie_cb_tracking_id" id="mycbgenie_cb_track_id" />
						<span> (Optional) </span></li> 
						
						
					</ul>
					<input class="button-primary" id="submit-btn-ajax_gen_setting" type=submit  value="Save Changes" />
					</form>
					
			'' cannot be parsed correct.
HTML code '$'<b><div><br>Updated Successfully.</b></div><br>'' cannot be parsed correct.
HTML code '$'<div class="wrap" style="margin-top: 35px; border:0px dotted; padding:0px">'' cannot be parsed correct.
HTML code '$'<div class="message" style="background:lightyellow; border:1px dashed; margin:10px; padding:10px; -webkit-border-radius: 5px; -moz-border-radius: 5px;">'' cannot be parsed correct.
HTML code '$'</div><br><br>'' cannot be parsed correct.
HTML code '$'<div style= \'border:1px solid #E6E6E6; background: #E6E6E6; padding:0px; padding-top:12px;  -webkit-border-radius: 5px; -moz-border-radius: 5px; border-radius: 5px;\' >'' cannot be parsed correct.
HTML code '$'">
									</td>
									
									</tr>
									
									<tr><td colspan=3 align=center></td>									</tr>
									
									
									<tr ><td style=" background:#dcdcdc">	
										Replace blank images with the <strong>\'screenshots\'</strong> of the product website
									</td><td>:</td><td>
										<div><input type="checkbox" style="	margin-left:10px;" name="screenshot_allowed_import" id="screenshot_allowed_import"  
										checked="checked" checked value="yes" /></div>
											
									</td></tr>

</table>
									
									</div>

								
									<div style="margin-left:20px; ">
										<div id="progressbar_id" class="container" style="display:none;"><div class="progressbar"></div></div>
										<img src="'' cannot be parsed correct.
HTML code '$'<br><font color=black><strong>Tip:</strong></font><br>You may monitor the status of the products that are being imported into your <strong>
													<font color=darkgreen>Woo Store\'s Shop</font></strong> URL: '' cannot be parsed correct.
HTML code '$'<br><font color=black><strong>Tip:</strong></font>To monitor the status of the products that are being imported to your
											      Woo Store, <br>you may please select your desired <strong>Shop Page</strong> URL, from the 
												  dropdwon select box listed
													on the page: <br><strong><font color=darkgreen>WooCommerce -> Settings -> Products -> '' cannot be parsed correct.
HTML code '$'<a href="?page=wc-settings&tab=products&section=display" target=_blank>Display </a></font></strong>'' cannot be parsed correct.
HTML code '$'">
								 </td>
									
									</tr>
									
									<tr><td colspan=3 align=center></td>									</tr>
									
									
									<tr ><td style=" background:#dcdcdc">	
										Replace blank images with the <strong>\'screenshots\'</strong> of the product website
									</td><td>:</td><td>
										<div><input type="checkbox" style="	margin-left:10px;" name="screenshot_allowed_sync" id="screenshot_allowed_sync"  
										checked="checked" checked /></div>
										
									</td></tr>

									</table>
							</div>
							
								
								
			
								<div  style="margin-left:20px;" >
									<div id="sync_progressbar_id" class="container" style="display:none;"><div class="progressbar"></div></div>
									<img src="'' cannot be parsed correct.
HTML code '$'<input type=\'hidden\' name=\'paged\' value=\'1\' />'' cannot be parsed correct.
HTML code '$'<input type=\'hidden\' name=\'paged\' value=\'1\' />'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'<input type=\'hidden\' name=\'paged\' value=\'1\' />'' cannot be parsed correct.
HTML code '$'</pre><div class="wrap" style="margin-top: 35px;">'' cannot be parsed correct.
HTML code '$'	</i></p>
		
	<strong>Short Desc	:</strong>	<p><i>	'' cannot be parsed correct.
HTML code '$'</i></p>	
	
	<strong>Long Desc	:	</strong>	<p><i>		'' cannot be parsed correct.
HTML code '$'</i></p>	
		
	<strong>Price	:</strong>	$'' cannot be parsed correct.
HTML code '$'"	/>

		<input type="hidden" 	name="mycbgenie_product_sync"	value="yes"	/>
		<input type="hidden" 	name="ref_url" value="'' cannot be parsed correct.
HTML code '$'" />
		</form>

		
		
		<div style="width:100%; float:left; padding-top:20px;">
		<div align="left">
		<form action="" method=post>
		<input type="hidden" 	name="ref_url" value="'' cannot be parsed correct.
HTML code '$'" />
		<input type="hidden" 	name="mycbgenie_product_edit_back"	value="yes"	/>
	
		<input type="submit" class="button" value="Back" />
		</form>
		</div>
		</div>
	
	</div>
	
	
	
		<div id="single_sync_output_div"	style="display:none; float:right; width:48%; padding:0px; border:solid 0px grey;">
		<h4>SYNC Status : <font color=green>Success</font></h4>
		
		<strong>Title	:</strong>	<p><i><span style="color:#003300" id="single_sync_title_output"></span>	</i></p>
			
		<strong>Short Desc	:</strong>	<p><i>	<span style="color:#003300" id="single_sync_descr_output"></span></i></p>	
		
		<strong>Long Desc	:	</strong>	<p><i><span style="color:#003300" id="single_sync_mdescr_output"></span></i></p>	
			
		<strong>Price	:</strong>	$<span style="color:#003300" id="single_sync_price_output"></span><br /><br />
		
		<strong>Keywords	:</strong>	<p><i><span style="color:#003300" id="single_sync_keywords_output"></span></i></p>
		
		<strong>Rank	:</strong>	<span style="color:#003300" id="single_sync_rank_output"></span><br /><br />
	
		<strong>Gravity	:</strong>	<span style="color:#003300" id="single_sync_gravity_output"></span><br /><br />




	</div>
	

	'' cannot be parsed correct.
HTML code '$' </span> [
			<a  target=_blank href='' cannot be parsed correct.
HTML code '$'" title="View the product page">
			<img  width=25 height=25 src="'' cannot be parsed correct.
HTML code '$'" alt="View the product page"></a> |
					
			<a href="?action=mycbgenie_store_view&id='' cannot be parsed correct.
HTML code '$'" target="_blank" title="View the vendor website" > 
			<img  width=25 height=25 src="'' cannot be parsed correct.
HTML code '$'" alt="View the vendor website"></a>
			]
		</div>
			
			
			
	<div style="float:right">
		<form action="" method=post>
		<input type="hidden" name="ref_url" value="'' cannot be parsed correct.
HTML code '$'" />
		<input type="hidden" 	name="mycbgenie_product_edit_back"	value="yes"	/>
	
		<input type="submit" class="button" value="Go Back" />
		</form>
	</div>
	
	<form action="" method=post>
	<table class="form-table">
	<tr>
	
		<td rowspan=6 valign="top" align="center">
		
			<div style="vertical-align:text-bottom">
			 <img id="mycbgenie_edit_image" width=100 height=100 style="margin-top:5px;" src="'' cannot be parsed correct.
HTML code '$'">
			<div align=center>
			<!--<img src="'' cannot be parsed correct.
HTML code '$'" width=30 height=30 > -->
			<a href="'' cannot be parsed correct.
HTML code '$'" id="upload_image_link" >  
			Change</a>
			</div>
			</div>
			<input type="hiddens" id="mycbgenie_attachment_id" name="mycbgenie_attachment_id" />
		</td>
	</tr>
	
	<tr><th scope="row">Price</th><td>
	$<input type="text" size="5" name="mycbgenie_price" value="'' cannot be parsed correct.
HTML code '$'" /></td>
		
	</tr>
	<tr><th scope="row">Short Desc</th><td>
		<textarea rows="3" cols="60" name="mycbgenie_excerpt">'' cannot be parsed correct.
HTML code '$'</textarea></td>
	</tr>
	
	<tr><th scope="row">Long Desc</th><td>
		<textarea rows="5" cols="81" name="mycbgenie_descr">'' cannot be parsed correct.
HTML code '$'</textarea></td>
	
	</tr>
	
	'' cannot be parsed correct.
HTML code '$'</textarea></td>
	
	</tr>
	
		<tr><th scope="row"></th><td valign=bottom>'' cannot be parsed correct.
HTML code '$'		
		<input type="hidden"	name="mycbgenie_id" value="'' cannot be parsed correct.
HTML code '$'"	/>
	
		 
		<input type="hidden"	name="mycbgenie_product_edited_nonce" value="'' cannot be parsed correct.
HTML code '$'"	/>
		<input type="hidden" 	name="mycbgenie_product_edit"	value="yes"	/>
		<input type="hidden" name="ref_url" value="'' cannot be parsed correct.
HTML code '$'" />
		</form>
	<td>
	
	</td>
	</tr>
	<tr>
	<td>	</td></tr>
	</table>


	
	
	
	

	</div>

'' cannot be parsed correct.
HTML code '$'<div class="updated">'' cannot be parsed correct.
HTML code '$'</p></div>'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div class="wrap" style="margin-top: 35px;">'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'<div align=center style="width:500px; border:1px solid grey; padding:20px; background:lightyellow;">
			It seems that you have not updated your <b>MyCbGenie Account #ID</b> in the settings page of the plugin.. <br><br>You cannot continue.
			</div>'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:18.488679.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.063816.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 5 do_action/apply_filters calls and 39 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:01.077711.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running DbplusDetector
### Start running FrontBaseDetector
### Finish running DbaseDetector
### Start running HashDetector
### Finish running FileProDetector
### Start running IBMDb2Detector
### Finish running CubridDetector
### Start running InformixDetector
### Finish running FirebirdInterBaseDetector
### Start running IngresDetector
### Finish running FrontBaseDetector
### Start running maxdbDetector
### Finish running InformixDetector
### Start running MongoDbDetector
### Finish running IngresDetector
### Start running MongoDetector
### Finish running MongoDetector
### Start running MsqlDetector
### Finish running IBMDb2Detector
### Start running MySQLDetector
### Finish running MsqlDetector
### Start running MySQLiDetector
### Finish running MySQLDetector
### Start running Oci8Detector
### Finish running ArrayElementDetector
### Start running OpenSSLDetector
### Finish running MongoDbDetector
### Start running ParadoxDetector
### Finish running Oci8Detector
### Start running PasswordHashingDetector
### Finish running ParadoxDetector
### Start running PhpCurlDetector
### Finish running HashDetector
### Start running PHPDataObjectDetector
### Finish running PasswordHashingDetector
### Start running PHPIncludedDetector
### Finish running PHPDataObjectDetector
### Start running PHPRetrievalDetector
### Finish running OpenSSLDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PHPStorageDetector
### Start running PhpVarDetector
### Finish running MySQLiDetector
### Start running PostgreSQLDetector
### Finish running maxdbDetector
### Start running PropertyDetector
### Finish running PHPRetrievalDetector
### Start running Sqlite3Detector
### Finish running PostgreSQLDetector
### Start running SqliteDetector
### Finish running PropertyDetector
### Start running SqlServerDetector
### Finish running SqliteDetector
### Start running SybaseDetector
### Finish running Sqlite3Detector
### Start running TokyoTyrantDetector
### Finish running SybaseDetector
### Start running UserInputDetector
### Finish running TokyoTyrantDetector
### Start running VariableDetector
### Finish running SqlServerDetector
### Start running WordpressHashingFnDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressRemoteDetector
### Finish running PhpVarDetector
### Start running WordPressRetrievalDetector
### Finish running PHPIncludedDetector
### Start running WordPressStorageDetector
### Finish running UserInputDetector
### Start running WP_UserDetector
### Finish running PhpCurlDetector
### Start running GenericDatabaseUsageDetector
### Finish running WP_UserDetector
### Start running GenericEncryptionDetector
### Finish running GenericEncryptionDetector
### Start running DeletionDetector
### Finish running VariableDetector
### Start running UninstallDetector
### Finish running GenericDatabaseUsageDetector
### Finish running WordPressRemoteDetector
### Finish running DeletionDetector
### Finish running UninstallDetector
### Finish running WordPressRetrievalDetector
### Finish running WordPressStorageDetector
### Finished running detectors
functions.inc.php:538
  - MD5 called with parameters [url]. Ignore if [url] does not contain personal information.
functions.inc.php:568
  - MD5 called with parameters [url]. Ignore if [url] does not contain personal information.
functions_fresh_install_import.inc.php:994
  - MD5 called with parameters [url_tmp]. Ignore if [url_tmp] does not contain personal information.
functions_fresh_install_import.inc.php:1001
  - MD5 called with parameters [url_tmp]. Ignore if [url_tmp] does not contain personal information.
functions_products.inc.php:1385
  - MD5 called with parameters [url]. Ignore if [url] does not contain personal information. 

functions_fresh_install_import.inc.php:365
  - RETRIEVAL call to file_get_contents($url, 0, null, null).
  - Data types: file
functions_fresh_install_import.inc.php:1630
  - RETRIEVAL call to file_get_contents($url, 0, null, null).
  - Data types: file
functions_manual_sync.inc.php:455
  - RETRIEVAL call to file_get_contents($url, 0, null, null).
  - Data types: file
functions_reviews.inc.php:159
  - RETRIEVAL call to file_get_contents($image_url).
  - Data types: file 

functions_reviews.inc.php:171
  - STORAGE call to file_put_contents($file, $image_data).
  - Data types: file 

functions.inc.php:531
  - API call to wp_remote_post($remote_url, ["body" => ["url" => $url, "endata" => md5($url)]]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
functions.inc.php:561
  - API call to wp_remote_post($remote_url, ["body" => ["url" => $url, "endata" => md5($url)]]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
functions_fresh_install_import.inc.php:1007
  - API call to wp_remote_post($remote_url, ["body" => $args]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
functions_products.inc.php:1377
  - API call to wp_remote_post($remote_url, ["body" => ["mycbgenie_id" => $mycbgenie_id, "endata" => md5($url), "title" => $title, "descr" => $excerpt, "m_descr" => $mdescr, "image_url" => $thumbnail, "tags" => $product_tags, "price" => $price, "url" => $url, "account_id" => get_option("mycbgenie_account_no")]]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote 

functions.inc.php:11
  - RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions.inc.php:89
  - RETRIEVAL call to get_option("mycbgenie_sf_bg_thumbnails", "EBEBEB") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
functions.inc.php:90
  - RETRIEVAL call to get_option("mycbgenie_sf_text_color_thumbnails", "000000") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
functions.inc.php:132
  - RETRIEVAL call to get_option("mycbgenie_sf_text_color_thumbnails", "000000") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
functions.inc.php:202
  - RETRIEVAL call to get_option("shop_catalog_image_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions.inc.php:203
  - RETRIEVAL call to get_option("shop_single_image_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions.inc.php:204
  - RETRIEVAL call to get_option("shop_thumbnail_image_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions.inc.php:238
  - RETRIEVAL call to get_option("mycbgenie_shop_catalog_image_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions.inc.php:239
  - RETRIEVAL call to get_option("mycbgenie_shop_single_image_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions.inc.php:240
  - RETRIEVAL call to get_option("mycbgenie_shop_thumbnail_image_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions.inc.php:254
  - RETRIEVAL call to get_option($option_name) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions.inc.php:256
  - RETRIEVAL call to get_option($option_name) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions.inc.php:271
  - RETRIEVAL call to get_option("mycbgenie_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions.inc.php:345
  - RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).
functions.inc.php:367
  - RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).
functions.inc.php:382
  - RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).
functions.inc.php:403
  - RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).
functions.inc.php:428
  - RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).
functions.inc.php:784
  - RETRIEVAL call to get_option("mycbgenie_imported_main_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions.inc.php:793
  - RETRIEVAL call to get_option("mycbgenie_imported_sub_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions.inc.php:1017
  - RETRIEVAL call to get_option("siteurl") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions.inc.php:1102
  - RETRIEVAL call to get_post_meta($post_id, "_thumbnail_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions.inc.php:1152
  - RETRIEVAL call to get_option("siteurl") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions.inc.php:1383
  - RETRIEVAL call to get_option("mycbgenie_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_category_exclude.inc.php:49
  - RETRIEVAL call to get_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_category_exclude.inc.php:69
  - RETRIEVAL call to get_option("mycbgenie_imported_main_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_category_exclude.inc.php:169
  - RETRIEVAL call to get_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_category_exclude.inc.php:210
  - RETRIEVAL call to get_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_category_exclude.inc.php:224
  - RETRIEVAL call to get_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_category_exclude.inc.php:235
  - RETRIEVAL call to get_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_cron.inc.php:103
  - RETRIEVAL call to get_option("mycbgenie_cron_per_batch_no_products", 25) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
functions_cron.inc.php:211
  - RETRIEVAL call to get_option("mycbgenie_cron_batch_frequency", 30) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
functions_cron.inc.php:298
  - RETRIEVAL call to get_option("mycbgenie_cron_per_batch_no_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_cron.inc.php:301
  - RETRIEVAL call to get_option("mycbgenie_cron_per_batch_no_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_cron.inc.php:304
  - RETRIEVAL call to get_option("mycbgenie_cron_batch_frequency") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_cron.inc.php:307
  - RETRIEVAL call to get_option("mycbgenie_cron_batch_frequency") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_cron.inc.php:535
  - RETRIEVAL call to get_option("mycbgenie_cron_batch_frequency", 30) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
functions_fresh_install_import.inc.php:915
  - RETRIEVAL call to wp_insert_comment($data). Passed arguments: 0: $commentdata (array). Returns (int|false).
functions_fresh_install_import.inc.php:1850
  - RETRIEVAL call to get_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $key (string). Returns (mixed).
  - Data types: user_meta
functions_gen_settings.inc.php:20
  - RETRIEVAL call to get_option("mycbgenie_account_no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:23
  - RETRIEVAL call to get_option("mycbgenie_account_no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:26
  - RETRIEVAL call to get_option("mycbgenie_cb_tracking_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:29
  - RETRIEVAL call to get_option("mycbgenie_cb_tracking_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:32
  - RETRIEVAL call to get_option("mycbgenie_show_price") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:34
  - RETRIEVAL call to get_option("mycbgenie_show_price") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:39
  - RETRIEVAL call to get_option("mycbgenie_sf_show_descr") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:41
  - RETRIEVAL call to get_option("mycbgenie_sf_show_descr") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:47
  - RETRIEVAL call to get_option("mycbgenie_sf_show_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:49
  - RETRIEVAL call to get_option("mycbgenie_sf_show_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:55
  - RETRIEVAL call to get_option("mycbgenie_sf_thumbnail_location") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:57
  - RETRIEVAL call to get_option("mycbgenie_sf_thumbnail_location") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:64
  - RETRIEVAL call to get_option("mycbgenie_products_per_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:67
  - RETRIEVAL call to get_option("mycbgenie_products_per_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:71
  - RETRIEVAL call to get_option("mycbgenie_sf_bg_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:74
  - RETRIEVAL call to get_option("mycbgenie_sf_bg_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:77
  - RETRIEVAL call to get_option("mycbgenie_sf_text_color_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:80
  - RETRIEVAL call to get_option("mycbgenie_sf_text_color_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:237
  - RETRIEVAL call to get_post_meta($post->ID, "_mycbgenie_managed_by", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_gen_settings.inc.php:244
  - RETRIEVAL call to get_option("mycbgenie_show_price") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:249
  - RETRIEVAL call to get_option("mycbgenie_sf_show_descr") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_gen_settings.inc.php:267
  - RETRIEVAL call to get_post_meta($post->ID, "_mycbgenie_managed_by", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_manual_sync.inc.php:445
  - RETRIEVAL call to get_option("mycbgenie_custom_edited_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_manual_sync.inc.php:678
  - RETRIEVAL call to get_post_meta($post_id, "_mycbgenie_last_image_updated") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_manual_sync.inc.php:679
  - RETRIEVAL call to get_post_meta($post_id, "_mycbgenie_screenshot_allowed") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_products.inc.php:59
  - RETRIEVAL call to get_user_meta(get_current_user_id(), "mycbgenie_screen_option_products_per_page", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
functions_products.inc.php:257
  - RETRIEVAL call to get_post_meta($get_id, "_mycbgenie_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_products.inc.php:258
  - RETRIEVAL call to get_option("mycbgenie_custom_edited_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_products.inc.php:275
  - RETRIEVAL call to get_post_meta($get_id, "_mycbgenie_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_products.inc.php:276
  - RETRIEVAL call to get_post_meta($get_id, "_featured", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_products.inc.php:277
  - RETRIEVAL call to get_post_meta($get_id, "_visibility", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_products.inc.php:282
  - RETRIEVAL call to get_post_meta($get_id, "_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_products.inc.php:284
  - RETRIEVAL call to get_post_meta($get_id, "_mycbgenie_rank", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_products.inc.php:285
  - RETRIEVAL call to get_post_meta($get_id, "_mycbgenie_gravity", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_products.inc.php:286
  - RETRIEVAL call to get_post_meta($get_id, "_mycbgenie_last_sync", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_products.inc.php:417
  - RETRIEVAL call to get_option("mycbgenie_imported_main_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_products.inc.php:429
  - RETRIEVAL call to get_option("mycbgenie_imported_sub_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_products.inc.php:914
  - RETRIEVAL call to get_option("mycbgenie_disabled_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_products.inc.php:956
  - RETRIEVAL call to get_option("mycbgenie_disabled_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_products.inc.php:996
  - RETRIEVAL call to get_option("mycbgenie_featured_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_products.inc.php:1031
  - RETRIEVAL call to get_option("mycbgenie_featured_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_products.inc.php:1179
  - RETRIEVAL call to get_option("mycbgenie_disabled_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_products.inc.php:1197
  - RETRIEVAL call to get_option("mycbgenie_disabled_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_products.inc.php:1221
  - RETRIEVAL call to get_option("mycbgenie_featured_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_products.inc.php:1249
  - RETRIEVAL call to get_option("mycbgenie_featured_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_products.inc.php:1393
  - RETRIEVAL call to get_option("mycbgenie_account_no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_products.inc.php:1578
  - RETRIEVAL call to get_option("mycbgenie_custom_edited_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_products.inc.php:1653
  - RETRIEVAL call to get_post($post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
functions_products.inc.php:1663
  - RETRIEVAL call to get_post($post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
functions_products.inc.php:1747
  - RETRIEVAL call to get_option("mycbgenie_custom_edited_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
functions_products.inc.php:1824
  - RETRIEVAL call to get_post_meta($post_id, "_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_products.inc.php:1831
  - RETRIEVAL call to get_post_meta($post_id, "_mycbgenie_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_products.inc.php:1976
  - RETRIEVAL call to get_post_meta($edit_id, "_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_products.inc.php:2017
  - RETRIEVAL call to get_post_meta($edit_id, "_mycbgenie_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
functions_products.inc.php:2051
  - RETRIEVAL call to get_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $key (string). Returns (mixed).
  - Data types: user_meta
mycbgenie-clickbank-storefront.php:121
  - RETRIEVAL call to get_option("mycbgenie_sf_bg_thumbnails", "EBEBEB") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
mycbgenie-clickbank-storefront.php:375
  - RETRIEVAL call to get_option("mycbgenie_products_per_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mycbgenie-clickbank-storefront.php:383
  - RETRIEVAL call to get_option("mycbgenie_sf_show_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mycbgenie-clickbank-storefront.php:385
  - RETRIEVAL call to get_option("mycbgenie_sf_thumbnail_location") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mycbgenie-clickbank-storefront.php:389
  - RETRIEVAL call to get_option("mycbgenie_sf_thumbnail_location") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
redirect.inc.php:9
  - RETRIEVAL call to get_option("mycbgenie_cb_tracking_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
redirect.inc.php:10
  - RETRIEVAL call to get_option("mycbgenie_account_no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option 

functions.inc.php:206
  - STORAGE call to update_option("mycbgenie_shop_catalog_image_size", $catalog) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions.inc.php:207
  - STORAGE call to update_option("mycbgenie_shop_single_image_size", $single) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions.inc.php:208
  - STORAGE call to update_option("mycbgenie_shop_thumbnail_image_size", $thumbnail) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions.inc.php:230
  - STORAGE call to update_option("shop_catalog_image_size", $catalog) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions.inc.php:231
  - STORAGE call to update_option("shop_single_image_size", $single) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions.inc.php:232
  - STORAGE call to update_option("shop_thumbnail_image_size", $thumbnail) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions.inc.php:242
  - STORAGE call to update_option("shop_catalog_image_size", $catalog) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions.inc.php:243
  - STORAGE call to update_option("shop_single_image_size", $single) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions.inc.php:244
  - STORAGE call to update_option("shop_thumbnail_image_size", $thumbnail) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions.inc.php:258
  - STORAGE call to add_option($option_name, []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions.inc.php:261
  - STORAGE call to add_option($option_name, []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions.inc.php:273
  - STORAGE call to update_option("mycbgenie_version", MYCBGENIE_ACTIVE_VERSION) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions.inc.php:292
  - STORAGE call to add_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option", "true", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: user_meta
functions.inc.php:293
  - STORAGE call to add_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option", "true", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: user_meta
functions.inc.php:467
  - STORAGE call to delete_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:468
  - STORAGE call to delete_option("mycbgenie_account_no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:469
  - STORAGE call to delete_option("mycbgenie_products_per_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:470
  - STORAGE call to delete_option("mycbgenie_show_price") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:471
  - STORAGE call to delete_option("mycbgenie_sf_show_descr") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:472
  - STORAGE call to delete_option("mycbgenie_sf_show_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:473
  - STORAGE call to delete_option("mycbgenie_sf_bg_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:474
  - STORAGE call to delete_option("mycbgenie_sf_thumbnail_location") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:475
  - STORAGE call to delete_option("mycbgenie_cb_tracking_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:476
  - STORAGE call to delete_option("mycbgenie_imported_main_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:477
  - STORAGE call to delete_option("mycbgenie_imported_sub_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:478
  - STORAGE call to delete_option("mycbgenie_disabled_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:479
  - STORAGE call to delete_option("mycbgenie_featured_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:480
  - STORAGE call to delete_option("mycbgenie_custom_edited_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:481
  - STORAGE call to delete_option("mycbgenie_cron_per_batch_no_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:482
  - STORAGE call to delete_option("mycbgenie_cron_batch_frequency") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:483
  - STORAGE call to delete_option("mycbgenie_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:513
  - STORAGE call to delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
functions.inc.php:514
  - STORAGE call to delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
functions.inc.php:515
  - STORAGE call to delete_user_meta(get_current_user_id(), "mycbgenie_screen_option_products_per_page") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
functions.inc.php:876
  - STORAGE call to delete_transient("wc_attribute_taxonomies") alters data types {'site'}. Passed arguments: 0: $transient (string). Returns (bool).
  - Data types: site
functions_category_exclude.inc.php:175
  - STORAGE call to update_option("mycbgenie_excluded_terms", $exclude_cats) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_cron.inc.php:404
  - STORAGE call to update_option("mycbgenie_cron_per_batch_no_products", $_POST["mycbgenie_cron_per_batch_no_products"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_cron.inc.php:405
  - STORAGE call to update_option("mycbgenie_cron_batch_frequency", $_POST["mycbgenie_cron_batch_frequency"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_fresh_install_import.inc.php:123
  - STORAGE call to wp_insert_post($post, $wp_error). Passed arguments: 0: $postarr (array), 1: $wp_error (bool). Returns (int|WP_Error).
functions_fresh_install_import.inc.php:130
  - STORAGE call to update_post_meta($post_id, "_mycbgenie_managed_by", "mycbgenie") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_fresh_install_import.inc.php:151
  - STORAGE call to update_option("mycbgenie_imported_main_terms", $main_cat_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_fresh_install_import.inc.php:308
  - STORAGE call to wp_insert_post($post, $wp_error). Passed arguments: 0: $postarr (array), 1: $wp_error (bool). Returns (int|WP_Error).
functions_fresh_install_import.inc.php:315
  - STORAGE call to update_post_meta($post_id, "_mycbgenie_managed_by", "mycbgenie") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_fresh_install_import.inc.php:337
  - STORAGE call to update_option("mycbgenie_imported_sub_terms", $sub_cat_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_fresh_install_import.inc.php:690
  - STORAGE call to wp_insert_post($post, $wp_error). Passed arguments: 0: $postarr (array), 1: $wp_error (bool). Returns (int|WP_Error).
functions_fresh_install_import.inc.php:963
  - STORAGE call to update_post_meta($post_id, "_product_attributes", $product_attributes) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_fresh_install_import.inc.php:976
  - STORAGE call to update_post_meta($post_id, "_wc_average_rating", $rating) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_fresh_install_import.inc.php:1060
  - STORAGE call to update_option("mycbgenie_imported_main_terms", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_fresh_install_import.inc.php:1061
  - STORAGE call to update_option("mycbgenie_imported_sub_terms", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_fresh_install_import.inc.php:1062
  - STORAGE call to update_option("mycbgenie_disabled_products", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_fresh_install_import.inc.php:1063
  - STORAGE call to update_option("mycbgenie_featured_products", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_fresh_install_import.inc.php:1064
  - STORAGE call to update_option("mycbgenie_excluded_terms", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_fresh_install_import.inc.php:1826
  - STORAGE call to add_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option", "true", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: user_meta
functions_fresh_install_import.inc.php:1835
  - STORAGE call to delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
functions_gen_settings.inc.php:216
  - STORAGE call to update_option("mycbgenie_account_no", $account_no) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_gen_settings.inc.php:217
  - STORAGE call to update_option("mycbgenie_products_per_page", $prods_p_page) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_gen_settings.inc.php:218
  - STORAGE call to update_option("mycbgenie_show_price", $show_price) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_gen_settings.inc.php:219
  - STORAGE call to update_option("mycbgenie_sf_show_descr", $mycbgenie_sf_show_descr) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_gen_settings.inc.php:220
  - STORAGE call to update_option("mycbgenie_sf_show_thumbnails", $mycbgenie_sf_show_thumbnails) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_gen_settings.inc.php:221
  - STORAGE call to update_option("mycbgenie_sf_text_color_thumbnails", $mycbgenie_sf_text_color_thumbnails) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_gen_settings.inc.php:222
  - STORAGE call to update_option("mycbgenie_sf_bg_thumbnails", $mycbgenie_sf_bg_thumbnails) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_gen_settings.inc.php:223
  - STORAGE call to update_option("mycbgenie_sf_thumbnail_location", $mycbgenie_sf_thumbnail_location) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_gen_settings.inc.php:224
  - STORAGE call to update_option("mycbgenie_cb_tracking_id", $mycbgenie_cb_tracking_id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_manual_sync.inc.php:663
  - STORAGE call to wp_update_post($post_update). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).
functions_manual_sync.inc.php:708
  - STORAGE call to update_post_meta($post_id, "_mycbgenie_image_url", $image_name) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_manual_sync.inc.php:712
  - STORAGE call to update_post_meta($post_id, "_mycbgenie_last_image_updated", $last_image_updated) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_manual_sync.inc.php:714
  - STORAGE call to update_post_meta($post_id, "_mycbgenie_screenshot_allowed", $screenshot_allowed) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_manual_sync.inc.php:733
  - STORAGE call to update_post_meta($post_id, "_price", $price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_manual_sync.inc.php:752
  - STORAGE call to update_post_meta($post_id, "_mycbgenie_rank", $rank) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_manual_sync.inc.php:753
  - STORAGE call to update_post_meta($post_id, "_mycbgenie_gravity", $gravity) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_manual_sync.inc.php:758
  - STORAGE call to update_post_meta($post_id, "_product_url", $target_url) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_manual_sync.inc.php:761
  - STORAGE call to update_post_meta($post_id, "_mycbgenie_last_sync", date("m/d/Y h:i:s a", time())) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_manual_sync.inc.php:762
  - STORAGE call to update_post_meta($post_id, "_mycbgenie_sync_id", $sync_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:911
  - STORAGE call to update_post_meta($post_id, "_visibility", "hidden") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:922
  - STORAGE call to update_option("mycbgenie_disabled_products", $disabled_products_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_products.inc.php:954
  - STORAGE call to update_post_meta($post_id, "_visibility", "visible") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:962
  - STORAGE call to update_option("mycbgenie_disabled_products", mycbgenie_remove_array_item($disabled_products_array, $mycbgenie_id)) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_products.inc.php:993
  - STORAGE call to update_post_meta($post_id, "_featured", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:1004
  - STORAGE call to update_option("mycbgenie_featured_products", $featured_products_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_products.inc.php:1029
  - STORAGE call to update_post_meta($post_id, "_featured", "no") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:1036
  - STORAGE call to update_option("mycbgenie_featured_products", mycbgenie_remove_array_item($featured_products_array, $mycbgenie_id)) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_products.inc.php:1176
  - STORAGE call to update_post_meta($post_id[0], "_visibility", "visible") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:1183
  - STORAGE call to update_option("mycbgenie_disabled_products", mycbgenie_remove_array_item($disabled_products_array, $mycbgenie_id)) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_products.inc.php:1194
  - STORAGE call to update_post_meta($post_id[0], "_visibility", "hidden") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:1204
  - STORAGE call to update_option("mycbgenie_disabled_products", $disabled_products_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_products.inc.php:1217
  - STORAGE call to update_post_meta($post_id[0], "featured", "product_visibility") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:1228
  - STORAGE call to update_option("mycbgenie_featured_products", $featured_products_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_products.inc.php:1244
  - STORAGE call to update_post_meta($post_id[0], "", "product_visibility") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:1252
  - STORAGE call to update_option("mycbgenie_featured_products", mycbgenie_remove_array_item($reverse_featured_products_array, $mycbgenie_id)) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_products.inc.php:1311
  - STORAGE call to add_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option", "true", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: user_meta
functions_products.inc.php:1325
  - STORAGE call to delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
functions_products.inc.php:1521
  - STORAGE call to wp_update_post($mycbgenie_custom_edit_post). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).
functions_products.inc.php:1544
  - STORAGE call to update_post_meta($custom_edit_id, "_mycbgenie_image_url", $image_name) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:1546
  - STORAGE call to update_post_meta($custom_edit_id, "_price", $price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:1547
  - STORAGE call to update_post_meta($custom_edit_id, "_mycbgenie_rank", $rank) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:1548
  - STORAGE call to update_post_meta($custom_edit_id, "_mycbgenie_gravity", $gravity) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:1550
  - STORAGE call to update_post_meta($custom_edit_id, "_mycbgenie_custom_edited", "No") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:1551
  - STORAGE call to update_post_meta($custom_edit_id, "_mycbgenie_last_sync", date("m/d/Y h:i:s a", time())) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:1584
  - STORAGE call to update_option("mycbgenie_custom_edited_products", $mycbgenie_custom_edit_products_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_products.inc.php:1708
  - STORAGE call to wp_update_post($mycbgenie_custom_edit_post, $wp_error). Passed arguments: 1: $wp_error (bool), 0: $postarr (array|object). Returns (int|WP_Error).
functions_products.inc.php:1729
  - STORAGE call to update_post_meta($custom_edit_id, "_price", $custom_edit_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:1731
  - STORAGE call to update_post_meta($custom_edit_id, "_mycbgenie_custom_edited", "Yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
functions_products.inc.php:1751
  - STORAGE call to update_option("mycbgenie_custom_edited_products", $mycbgenie_custom_edit_products_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
functions_reviews.inc.php:124
  - STORAGE call to wp_insert_post(["comment_status" => "closed", "ping_status" => "closed", "post_author" => $author_id, "post_name" => sanitize_title($title), "post_title" => htmlspecialchars_decode($title), "post_status" => "publish", "post_type" => "post", "post_date" => date("Y-m-d H:i:s", strtotime($pdate)), "post_excerpt" => htmlspecialchars_decode($review_descr), "post_content" => htmlspecialchars_decode("<div id="cbpro-product-detail">" . $contentr . "</div>"), "post_category" => [$cs_sub_cat_id]]). Passed arguments: 0: $postarr (array). Returns (int|WP_Error). 

functions.inc.php:467
  - DELETION call to delete_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:468
  - DELETION call to delete_option("mycbgenie_account_no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:469
  - DELETION call to delete_option("mycbgenie_products_per_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:470
  - DELETION call to delete_option("mycbgenie_show_price") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:471
  - DELETION call to delete_option("mycbgenie_sf_show_descr") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:472
  - DELETION call to delete_option("mycbgenie_sf_show_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:473
  - DELETION call to delete_option("mycbgenie_sf_bg_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:474
  - DELETION call to delete_option("mycbgenie_sf_thumbnail_location") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:475
  - DELETION call to delete_option("mycbgenie_cb_tracking_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:476
  - DELETION call to delete_option("mycbgenie_imported_main_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:477
  - DELETION call to delete_option("mycbgenie_imported_sub_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:478
  - DELETION call to delete_option("mycbgenie_disabled_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:479
  - DELETION call to delete_option("mycbgenie_featured_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:480
  - DELETION call to delete_option("mycbgenie_custom_edited_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:481
  - DELETION call to delete_option("mycbgenie_cron_per_batch_no_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:482
  - DELETION call to delete_option("mycbgenie_cron_batch_frequency") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:483
  - DELETION call to delete_option("mycbgenie_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:513
  - DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
functions.inc.php:514
  - DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
functions.inc.php:515
  - DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_screen_option_products_per_page") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
functions.inc.php:1103
  - DELETION call to wp_delete_attachment($post_delete, true) alters data types {'attachment', 'attachment_meta'}. Passed arguments: 0: $post_id (int), 1: $force_delete (bool). Returns (WP_Post|false|null).
  - Data types: attachment, attachment_meta
functions_fresh_install_import.inc.php:1835
  - DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
functions_products.inc.php:1325
  - DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta 

functions.inc.php:467
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:468
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_account_no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:469
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_products_per_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:470
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_show_price") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:471
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_sf_show_descr") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:472
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_sf_show_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:473
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_sf_bg_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:474
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_sf_thumbnail_location") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:475
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_cb_tracking_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:476
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_imported_main_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:477
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_imported_sub_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:478
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_disabled_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:479
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_featured_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:480
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_custom_edited_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:481
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_cron_per_batch_no_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:482
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_cron_batch_frequency") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:483
  - Uninstall deletion call: DELETION call to delete_option("mycbgenie_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
functions.inc.php:513
  - Uninstall deletion call: DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
functions.inc.php:514
  - Uninstall deletion call: DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
functions.inc.php:515
  - Uninstall deletion call: DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_screen_option_products_per_page") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta 

By data type:
attachment
	DeletionDetector.wp_delete_attachment($post_delete, true) - {'attachment', 'attachment_meta'}
attachment_meta
	DeletionDetector.wp_delete_attachment($post_delete, true) - {'attachment', 'attachment_meta'}
file
	PHPRetrievalDetector.file_get_contents($image_url) - {'file'}
	PHPStorageDetector.file_put_contents($file, $image_data) - {'file'}
	PHPRetrievalDetector.file_get_contents($url, 0, null, null) - {'file'}
	PHPRetrievalDetector.file_get_contents($url, 0, null, null) - {'file'}
	PHPRetrievalDetector.file_get_contents($url, 0, null, null) - {'file'}
none
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	WordPressStorageDetector.wp_insert_post($post, $wp_error) - set()
	WordPressRetrievalDetector.dbDelta($sql) - set()
	PHPIncludedDetector.(unknown) - set()
	WordPressStorageDetector.wp_insert_post(["comment_status" => "closed", "ping_status" => "closed", "post_author" => $author_id, "post_name" => sanitize_title($title), "post_title" => htmlspecialchars_decode($title), "post_status" => "publish", "post_type" => "post", "post_date" => date("Y-m-d H:i:s", strtotime($pdate)), "post_excerpt" => htmlspecialchars_decode($review_descr), "post_content" => htmlspecialchars_decode("<div id="cbpro-product-detail">" . $contentr . "</div>"), "post_category" => [$cs_sub_cat_id]]) - set()
	WordPressStorageDetector.wp_insert_post($post, $wp_error) - set()
	WordPressRetrievalDetector.dbDelta($sql) - set()
	WordPressRetrievalDetector.wp_insert_comment($data) - set()
	WordPressRetrievalDetector.dbDelta($sql) - set()
	WordPressRetrievalDetector.dbDelta($sql) - set()
	WordPressStorageDetector.wp_update_post($mycbgenie_custom_edit_post, $wp_error) - set()
	WordPressStorageDetector.wp_insert_post($post, $wp_error) - set()
	WordPressStorageDetector.wp_update_post($mycbgenie_custom_edit_post) - set()
	WordPressStorageDetector.wp_update_post($post_update) - set()
	WordPressRetrievalDetector.dbDelta($sql) - set()
option
	WordPressStorageDetector.update_option("mycbgenie_featured_products", mycbgenie_remove_array_item($reverse_featured_products_array, $mycbgenie_id)) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_disabled_products") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_custom_edited_products") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_show_price", $show_price) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_disabled_products") - {'option'}
	DeletionDetector.delete_option("mycbgenie_cron_per_batch_no_products") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_featured_products") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_imported_main_terms", []) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_excluded_terms") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_thumbnail_location") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_excluded_terms") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_sf_text_color_thumbnails", $mycbgenie_sf_text_color_thumbnails) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_imported_main_terms") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_imported_sub_terms", $sub_cat_array) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_imported_main_terms") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_text_color_thumbnails", "000000") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_sf_show_descr") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_disabled_products") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_disabled_products", $disabled_products_array) - {'option'}
	DeletionDetector.delete_option("mycbgenie_cb_tracking_id") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_cron_per_batch_no_products", 25) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_cb_tracking_id") - {'option'}
	WordPressStorageDetector.add_option($option_name, []) - {'option'}
	DeletionDetector.delete_option("mycbgenie_show_price") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_version") - {'option'}
	DeletionDetector.delete_option("mycbgenie_disabled_products") - {'option'}
	UninstallDetector.delete_option("mycbgenie_imported_sub_terms") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_shop_catalog_image_size", $catalog) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_featured_products") - {'option'}
	UninstallDetector.delete_option("mycbgenie_cron_batch_frequency") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_sf_thumbnail_location") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_imported_main_terms") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_cron_batch_frequency") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_account_no", $account_no) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_imported_main_terms") - {'option'}
	DeletionDetector.delete_option("mycbgenie_featured_products") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_excluded_terms") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_disabled_products") - {'option'}
	WordPressStorageDetector.update_option("shop_thumbnail_image_size", $thumbnail) - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_sf_show_descr", $mycbgenie_sf_show_descr) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_text_color_thumbnails") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_version") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_sf_bg_thumbnails") - {'option'}
	DeletionDetector.delete_option("mycbgenie_imported_main_terms") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_cb_tracking_id") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_account_no") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_imported_sub_terms") - {'option'}
	DeletionDetector.delete_option("mycbgenie_imported_sub_terms") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_sf_show_thumbnails", $mycbgenie_sf_show_thumbnails) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_text_color_thumbnails", "000000") - {'option'}
	DeletionDetector.delete_option("mycbgenie_custom_edited_products") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_products_per_page", $prods_p_page) - {'option'}
	UninstallDetector.delete_option("mycbgenie_custom_edited_products") - {'option'}
	WordPressStorageDetector.add_option($option_name, []) - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_cb_tracking_id") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_thumbnail_location") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_custom_edited_products") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_custom_edited_products") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_featured_products") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_cb_tracking_id", $mycbgenie_cb_tracking_id) - {'option'}
	UninstallDetector.delete_option("mycbgenie_account_no") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_cron_batch_frequency", 30) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_custom_edited_products") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_excluded_terms") - {'option'}
	UninstallDetector.delete_option("mycbgenie_cb_tracking_id") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_account_no") - {'option'}
	UninstallDetector.delete_option("mycbgenie_sf_show_thumbnails") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_imported_sub_terms") - {'option'}
	UninstallDetector.delete_option("mycbgenie_sf_thumbnail_location") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_shop_single_image_size") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_products_per_page") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_bg_thumbnails") - {'option'}
	UninstallDetector.delete_option("mycbgenie_sf_show_descr") - {'option'}
	WordPressRetrievalDetector.get_option("active_plugins") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_excluded_terms") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_show_thumbnails") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_show_price") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_custom_edited_products", $mycbgenie_custom_edit_products_array) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_featured_products") - {'option'}
	WordPressStorageDetector.update_option("shop_single_image_size", $single) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_products_per_page") - {'option'}
	UninstallDetector.delete_option("mycbgenie_excluded_terms") - {'option'}
	WordPressRetrievalDetector.get_option("siteurl") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_cb_tracking_id") - {'option'}
	DeletionDetector.delete_option("mycbgenie_version") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_account_no") - {'option'}
	UninstallDetector.delete_option("mycbgenie_show_price") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_disabled_products", $disabled_products_array) - {'option'}
	UninstallDetector.delete_option("mycbgenie_cron_per_batch_no_products") - {'option'}
	UninstallDetector.delete_option("mycbgenie_sf_bg_thumbnails") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_featured_products") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_imported_sub_terms") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_shop_thumbnail_image_size") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_show_thumbnails") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_sf_show_thumbnails") - {'option'}
	WordPressStorageDetector.update_option("shop_single_image_size", $single) - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_version", MYCBGENIE_ACTIVE_VERSION) - {'option'}
	WordPressStorageDetector.update_option("shop_catalog_image_size", $catalog) - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_featured_products", []) - {'option'}
	WordPressRetrievalDetector.get_option("shop_thumbnail_image_size") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_products_per_page") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_show_descr") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_disabled_products", mycbgenie_remove_array_item($disabled_products_array, $mycbgenie_id)) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_cron_batch_frequency") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_thumbnail_location") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_sf_thumbnail_location", $mycbgenie_sf_thumbnail_location) - {'option'}
	DeletionDetector.delete_option("mycbgenie_sf_bg_thumbnails") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_show_descr") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_version") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_excluded_terms", []) - {'option'}
	WordPressRetrievalDetector.get_option("shop_catalog_image_size") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_imported_sub_terms", []) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_account_no") - {'option'}
	UninstallDetector.delete_option("mycbgenie_featured_products") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_shop_thumbnail_image_size", $thumbnail) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_cron_batch_frequency") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_custom_edited_products", $mycbgenie_custom_edit_products_array) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_show_descr") - {'option'}
	WordPressStorageDetector.update_option("shop_thumbnail_image_size", $thumbnail) - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_disabled_products", []) - {'option'}
	UninstallDetector.delete_option("mycbgenie_disabled_products") - {'option'}
	WordPressRetrievalDetector.get_option($option_name) - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_featured_products", mycbgenie_remove_array_item($featured_products_array, $mycbgenie_id)) - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_cron_per_batch_no_products", $_POST["mycbgenie_cron_per_batch_no_products"]) - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_shop_single_image_size", $single) - {'option'}
	WordPressRetrievalDetector.get_option("siteurl") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_show_price") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_featured_products", $featured_products_array) - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_featured_products", $featured_products_array) - {'option'}
	DeletionDetector.delete_option("mycbgenie_sf_show_thumbnails") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_bg_thumbnails") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_disabled_products") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_cron_per_batch_no_products") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_cron_batch_frequency", $_POST["mycbgenie_cron_batch_frequency"]) - {'option'}
	DeletionDetector.delete_option("mycbgenie_sf_show_descr") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_thumbnail_location") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_bg_thumbnails", "EBEBEB") - {'option'}
	UninstallDetector.delete_option("mycbgenie_version") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_cron_per_batch_no_products") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_text_color_thumbnails") - {'option'}
	DeletionDetector.delete_option("mycbgenie_products_per_page") - {'option'}
	DeletionDetector.delete_option("mycbgenie_sf_thumbnail_location") - {'option'}
	WordPressStorageDetector.update_option("shop_catalog_image_size", $catalog) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_show_price") - {'option'}
	DeletionDetector.delete_option("mycbgenie_cron_batch_frequency") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_excluded_terms", $exclude_cats) - {'option'}
	WordPressRetrievalDetector.get_option($option_name) - {'option'}
	UninstallDetector.delete_option("mycbgenie_imported_main_terms") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_custom_edited_products") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_account_no") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_bg_thumbnails", "EBEBEB") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_cron_per_batch_no_products") - {'option'}
	UninstallDetector.delete_option("mycbgenie_products_per_page") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_excluded_terms") - {'option'}
	DeletionDetector.delete_option("mycbgenie_excluded_terms") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_shop_catalog_image_size") - {'option'}
	WordPressRetrievalDetector.get_option("shop_single_image_size") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_show_price") - {'option'}
	WordPressStorageDetector.delete_option("mycbgenie_products_per_page") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_disabled_products", mycbgenie_remove_array_item($disabled_products_array, $mycbgenie_id)) - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_sf_show_thumbnails") - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_sf_bg_thumbnails", $mycbgenie_sf_bg_thumbnails) - {'option'}
	DeletionDetector.delete_option("mycbgenie_account_no") - {'option'}
	WordPressRetrievalDetector.get_option("mycbgenie_cron_batch_frequency", 30) - {'option'}
	WordPressStorageDetector.update_option("mycbgenie_imported_main_terms", $main_cat_array) - {'option'}
post
	WordPressRetrievalDetector.get_post($post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($post_id) - {'post_meta', 'post', 'wp_post'}
post_meta
	WordPressRetrievalDetector.get_post_meta($get_id, "_mycbgenie_id", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($edit_id, "_price", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressStorageDetector.update_post_meta($post_id, "_product_attributes", $product_attributes) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($get_id, "_price", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($get_id, "_visibility", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($custom_edit_id, "_mycbgenie_last_sync", date("m/d/Y h:i:s a", time())) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($get_id, "_mycbgenie_rank", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_mycbgenie_managed_by", "mycbgenie") - {'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_meta($get_id, "_mycbgenie_gravity", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($get_id, "_featured", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_mycbgenie_id", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_price", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($edit_id, "_mycbgenie_id", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_thumbnail_id", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_wc_average_rating", $rating) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($get_id, "_mycbgenie_last_sync", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($custom_edit_id, "_mycbgenie_rank", $rank) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_mycbgenie_screenshot_allowed", $screenshot_allowed) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($custom_edit_id, "_price", $custom_edit_price) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_visibility", "visible") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($get_id, "_mycbgenie_id", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_mycbgenie_last_sync", date("m/d/Y h:i:s a", time())) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_mycbgenie_screenshot_allowed") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($custom_edit_id, "_mycbgenie_custom_edited", "No") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($custom_edit_id, "_mycbgenie_image_url", $image_name) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id[0], "featured", "product_visibility") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id[0], "_visibility", "hidden") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_price", $price) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($custom_edit_id, "_price", $price) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_mycbgenie_managed_by", "mycbgenie") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_visibility", "hidden") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_featured", "yes") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_mycbgenie_managed_by", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_featured", "no") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_mycbgenie_last_image_updated", $last_image_updated) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id[0], "_visibility", "visible") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_mycbgenie_last_image_updated") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_mycbgenie_sync_id", $sync_id) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_mycbgenie_image_url", $image_name) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_mycbgenie_rank", $rank) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($custom_edit_id, "_mycbgenie_gravity", $gravity) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($custom_edit_id, "_mycbgenie_custom_edited", "Yes") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_product_url", $target_url) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_mycbgenie_managed_by", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_mycbgenie_gravity", $gravity) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id[0], "", "product_visibility") - {'post_meta'}
remote
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
site
	WordPressStorageDetector.delete_transient("wc_attribute_taxonomies") - {'site'}
user_meta
	DeletionDetector.delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") - {'user_meta'}
	WordPressStorageDetector.add_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option", "true", true) - {'user_meta'}
	WordPressStorageDetector.delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta(get_current_user_id(), "mycbgenie_screen_option_products_per_page", true) - {'user_meta'}
	WordPressStorageDetector.add_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option", "true", true) - {'user_meta'}
	WordPressStorageDetector.delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") - {'user_meta'}
	WordPressStorageDetector.delete_user_meta(get_current_user_id(), "mycbgenie_screen_option_products_per_page") - {'user_meta'}
	DeletionDetector.delete_user_meta(get_current_user_id(), "mycbgenie_screen_option_products_per_page") - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") - {'user_meta'}
	UninstallDetector.delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") - {'user_meta'}
	WordPressStorageDetector.delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") - {'user_meta'}
	DeletionDetector.delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") - {'user_meta'}
	WordPressStorageDetector.add_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option", "true", true) - {'user_meta'}
	UninstallDetector.delete_user_meta(get_current_user_id(), "mycbgenie_screen_option_products_per_page") - {'user_meta'}
	DeletionDetector.delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") - {'user_meta'}
	UninstallDetector.delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") - {'user_meta'}
	WordPressStorageDetector.add_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option", "true", true) - {'user_meta'}
	DeletionDetector.delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") - {'user_meta'}
	WordPressStorageDetector.delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") - {'user_meta'}
wp_post
	WordPressRetrievalDetector.get_post($post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($post_id) - {'post_meta', 'post', 'wp_post'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:32.997491.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 4820 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:01.298801.

1000 STORE_REACHES edges created
2000 STORE_REACHES edges created
3000 STORE_REACHES edges created
4000 STORE_REACHES edges created
4820 STORE_REACHES edges created
4820 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 71 nodes as PERSONAL
In total, tainted 71 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
Tainted 5 nodes as ENCRYPTED
In total, tainted 5 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:02.714786.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:02:31.972511!
DELETION call to wp_delete_attachment($post_delete, true) alters data types {'attachment', 'attachment_meta'}. Passed arguments: 0: $post_id (int), 1: $force_delete (bool). Returns (WP_Post|false|null).,None,None
DELETION call to delete_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_account_no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_products_per_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_show_price") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_sf_show_descr") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_sf_show_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_sf_bg_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_sf_thumbnail_location") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_cb_tracking_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_imported_main_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_imported_sub_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_disabled_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_featured_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_custom_edited_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_cron_per_batch_no_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_cron_batch_frequency") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mycbgenie_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_screen_option_products_per_page") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
MD5 called with parameters [url]. Ignore if [url] does not contain personal information.,md5,None
MD5 called with parameters [url]. Ignore if [url] does not contain personal information.,md5,None
MD5 called with parameters [url_tmp]. Ignore if [url_tmp] does not contain personal information.,md5,None
MD5 called with parameters [url_tmp]. Ignore if [url_tmp] does not contain personal information.,md5,None
MD5 called with parameters [url]. Ignore if [url] does not contain personal information.,md5,None
RETRIEVAL call to file_get_contents($url, 0, null, null).,None,None
RETRIEVAL call to file_get_contents($url, 0, null, null).,None,None
RETRIEVAL call to file_get_contents($url, 0, null, null).,None,None
RETRIEVAL call to file_get_contents($image_url).,None,None
STORAGE call to file_put_contents($file, $image_data).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_account_no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_products_per_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_show_price") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_sf_show_descr") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_sf_show_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_sf_bg_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_sf_thumbnail_location") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_cb_tracking_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_imported_main_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_imported_sub_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_disabled_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_featured_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_custom_edited_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_cron_per_batch_no_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_cron_batch_frequency") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mycbgenie_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_user_meta(get_current_user_id(), "mycbgenie_screen_option_products_per_page") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
API call to wp_remote_post($remote_url, ["body" => ["url" => $url, "endata" => md5($url)]]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,,['http://mycbgenie.com/php/sync_wordpress_installs/de-activation.php']
API call to wp_remote_post($remote_url, ["body" => ["url" => $url, "endata" => md5($url)]]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,,['http://mycbgenie.com/php/sync_wordpress_installs/activation.php']
API call to wp_remote_post($remote_url, ["body" => $args]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,,['http://mycbgenie.com/php/sync_wordpress_installs/fresh_install.php']
API call to wp_remote_post($remote_url, ["body" => ["mycbgenie_id" => $mycbgenie_id, "endata" => md5($url), "title" => $title, "descr" => $excerpt, "m_descr" => $mdescr, "image_url" => $thumbnail, "tags" => $product_tags, "price" => $price, "url" => $url, "account_id" => get_option("mycbgenie_account_no")]]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,,['http://mycbgenie.com/php/sync_wordpress_installs/custom_edit.php']
RETRIEVAL call to get_option("siteurl") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_thumbnail_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("siteurl") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_text_color_thumbnails", "000000") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("shop_catalog_image_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("shop_single_image_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("shop_thumbnail_image_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_shop_catalog_image_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_shop_single_image_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_shop_thumbnail_image_size") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option($option_name) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option($option_name) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to get_option("mycbgenie_imported_main_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_imported_sub_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_bg_thumbnails", "EBEBEB") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_text_color_thumbnails", "000000") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_imported_main_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_cron_per_batch_no_products", 25) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_cron_batch_frequency", 30) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_cron_per_batch_no_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_cron_per_batch_no_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_cron_batch_frequency") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_cron_batch_frequency") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_cron_batch_frequency", 30) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to wp_insert_comment($data). Passed arguments: 0: $commentdata (array). Returns (int|false).,None,None
RETRIEVAL call to get_option("mycbgenie_account_no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_account_no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_mycbgenie_managed_by", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_show_price") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_show_descr") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_cb_tracking_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_mycbgenie_managed_by", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_cb_tracking_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_show_price") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_show_price") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_show_descr") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_show_descr") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_show_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_show_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_thumbnail_location") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_thumbnail_location") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_products_per_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_products_per_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_bg_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_bg_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_text_color_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_text_color_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_custom_edited_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_mycbgenie_last_image_updated") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_mycbgenie_screenshot_allowed") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_featured_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_disabled_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_disabled_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_featured_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_featured_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_account_no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_custom_edited_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post($post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("mycbgenie_custom_edited_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_mycbgenie_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($edit_id, "_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($edit_id, "_mycbgenie_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($get_id, "_mycbgenie_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_custom_edited_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($get_id, "_mycbgenie_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($get_id, "_featured", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($get_id, "_visibility", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($get_id, "_price", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($get_id, "_mycbgenie_rank", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($get_id, "_mycbgenie_gravity", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($get_id, "_mycbgenie_last_sync", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_imported_main_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_imported_sub_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta(get_current_user_id(), "mycbgenie_screen_option_products_per_page", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_disabled_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_disabled_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_featured_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_bg_thumbnails", "EBEBEB") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_products_per_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_show_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_thumbnail_location") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_sf_thumbnail_location") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_account_no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mycbgenie_cb_tracking_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
STORAGE call to update_option("mycbgenie_shop_catalog_image_size", $catalog) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_shop_single_image_size", $single) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_shop_thumbnail_image_size", $thumbnail) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("shop_catalog_image_size", $catalog) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("shop_single_image_size", $single) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("shop_thumbnail_image_size", $thumbnail) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("shop_catalog_image_size", $catalog) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("shop_single_image_size", $single) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("shop_thumbnail_image_size", $thumbnail) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option($option_name, []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option($option_name, []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_version", MYCBGENIE_ACTIVE_VERSION) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option", "true", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to add_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option", "true", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to delete_option("mycbgenie_excluded_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_account_no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_products_per_page") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_show_price") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_sf_show_descr") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_sf_show_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_sf_bg_thumbnails") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_sf_thumbnail_location") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_cb_tracking_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_imported_main_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_imported_sub_terms") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_disabled_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_featured_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_custom_edited_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_cron_per_batch_no_products") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_cron_batch_frequency") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mycbgenie_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_user_meta(get_current_user_id(), "mycbgenie_screen_option_products_per_page") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_transient("wc_attribute_taxonomies") alters data types {'site'}. Passed arguments: 0: $transient (string). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_excluded_terms", $exclude_cats) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_cron_per_batch_no_products", $_POST["mycbgenie_cron_per_batch_no_products"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_cron_batch_frequency", $_POST["mycbgenie_cron_batch_frequency"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_imported_main_terms", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_imported_sub_terms", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_disabled_products", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_featured_products", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_excluded_terms", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_insert_post($post, $wp_error). Passed arguments: 0: $postarr (array), 1: $wp_error (bool). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($post_id, "_mycbgenie_managed_by", "mycbgenie") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("mycbgenie_imported_main_terms", $main_cat_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option", "true", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to wp_insert_post($post, $wp_error). Passed arguments: 0: $postarr (array), 1: $wp_error (bool). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($post_id, "_mycbgenie_managed_by", "mycbgenie") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("mycbgenie_imported_sub_terms", $sub_cat_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_insert_post($post, $wp_error). Passed arguments: 0: $postarr (array), 1: $wp_error (bool). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($post_id, "_product_attributes", $product_attributes) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_wc_average_rating", $rating) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("mycbgenie_account_no", $account_no) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_products_per_page", $prods_p_page) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_show_price", $show_price) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_sf_show_descr", $mycbgenie_sf_show_descr) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_sf_show_thumbnails", $mycbgenie_sf_show_thumbnails) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_sf_text_color_thumbnails", $mycbgenie_sf_text_color_thumbnails) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_sf_bg_thumbnails", $mycbgenie_sf_bg_thumbnails) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_sf_thumbnail_location", $mycbgenie_sf_thumbnail_location) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mycbgenie_cb_tracking_id", $mycbgenie_cb_tracking_id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_update_post($post_update). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($post_id, "_mycbgenie_image_url", $image_name) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_mycbgenie_last_image_updated", $last_image_updated) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_mycbgenie_screenshot_allowed", $screenshot_allowed) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_price", $price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_mycbgenie_rank", $rank) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_mycbgenie_gravity", $gravity) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_product_url", $target_url) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_mycbgenie_last_sync", date("m/d/Y h:i:s a", time())) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_mycbgenie_sync_id", $sync_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("mycbgenie_featured_products", $featured_products_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_post_meta($post_id, "_featured", "no") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("mycbgenie_featured_products", mycbgenie_remove_array_item($featured_products_array, $mycbgenie_id)) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_post_meta($post_id[0], "_visibility", "visible") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("mycbgenie_disabled_products", mycbgenie_remove_array_item($disabled_products_array, $mycbgenie_id)) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_post_meta($post_id[0], "_visibility", "hidden") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("mycbgenie_disabled_products", $disabled_products_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_post_meta($post_id[0], "featured", "product_visibility") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("mycbgenie_featured_products", $featured_products_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_post_meta($post_id[0], "", "product_visibility") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("mycbgenie_featured_products", mycbgenie_remove_array_item($reverse_featured_products_array, $mycbgenie_id)) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option", "true", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to wp_update_post($mycbgenie_custom_edit_post). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($custom_edit_id, "_mycbgenie_image_url", $image_name) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($custom_edit_id, "_price", $price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($custom_edit_id, "_mycbgenie_rank", $rank) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($custom_edit_id, "_mycbgenie_gravity", $gravity) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($custom_edit_id, "_mycbgenie_custom_edited", "No") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($custom_edit_id, "_mycbgenie_last_sync", date("m/d/Y h:i:s a", time())) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("mycbgenie_custom_edited_products", $mycbgenie_custom_edit_products_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_update_post($mycbgenie_custom_edit_post, $wp_error). Passed arguments: 1: $wp_error (bool), 0: $postarr (array|object). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($custom_edit_id, "_price", $custom_edit_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($custom_edit_id, "_mycbgenie_custom_edited", "Yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("mycbgenie_custom_edited_products", $mycbgenie_custom_edit_products_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_post_meta($post_id, "_visibility", "hidden") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("mycbgenie_disabled_products", $disabled_products_array) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_post_meta($post_id, "_visibility", "visible") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("mycbgenie_disabled_products", mycbgenie_remove_array_item($disabled_products_array, $mycbgenie_id)) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_post_meta($post_id, "_featured", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_post(["comment_status" => "closed", "ping_status" => "closed", "post_author" => $author_id, "post_name" => sanitize_title($title), "post_title" => htmlspecialchars_decode($title), "post_status" => "publish", "post_type" => "post", "post_date" => date("Y-m-d H:i:s", strtotime($pdate)), "post_excerpt" => htmlspecialchars_decode($review_descr), "post_content" => htmlspecialchars_decode("<div id="cbpro-product-detail">" . $contentr . "</div>"), "post_category" => [$cs_sub_cat_id]]). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "add_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option", "true", true)", found in file functions_products.inc.php at line 1311. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "add_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option", "true", true)", found in file functions_fresh_install_import.inc.php at line 1826. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "add_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option", "true", true)", found in file functions.inc.php at line 292. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "add_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option", "true", true)", found in file functions.inc.php at line 293. 

[has_storage] Storage check is WP 

[Art.17, Right to erasure] Wordpress storage of PII through add_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option", "true", true) has deletion method delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option"). Storage method found in file functions_products.inc.php at line 1311. Deletion method found in file functions.inc.php at line 513. 

[Art.17, Right to erasure] Wordpress storage of PII through add_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option", "true", true) has deletion method delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option"). Storage method found in file functions_products.inc.php at line 1311. Deletion method found in file functions_products.inc.php at line 1325. 

[Art.17, Right to erasure] Wordpress storage of PII through add_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option", "true", true) has deletion method delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option"). Storage method found in file functions_fresh_install_import.inc.php at line 1826. Deletion method found in file functions.inc.php at line 514. 

[Art.17, Right to erasure] Wordpress storage of PII through add_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option", "true", true) has deletion method delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option"). Storage method found in file functions_fresh_install_import.inc.php at line 1826. Deletion method found in file functions_fresh_install_import.inc.php at line 1835. 

[Art.17, Right to erasure] Wordpress storage of PII through add_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option", "true", true) has deletion method delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option"). Storage method found in file functions.inc.php at line 292. Deletion method found in file functions.inc.php at line 514. 

[Art.17, Right to erasure] Wordpress storage of PII through add_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option", "true", true) has deletion method delete_user_meta(get_current_user_id(), "mycbgenie_import_screen_dismiss_option"). Storage method found in file functions.inc.php at line 292. Deletion method found in file functions_fresh_install_import.inc.php at line 1835. 

[Art.17, Right to erasure] Wordpress storage of PII through add_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option", "true", true) has deletion method delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option"). Storage method found in file functions.inc.php at line 293. Deletion method found in file functions.inc.php at line 513. 

[Art.17, Right to erasure] Wordpress storage of PII through add_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option", "true", true) has deletion method delete_user_meta(get_current_user_id(), "mycbgenie_product_screen_dismiss_option"). Storage method found in file functions.inc.php at line 293. Deletion method found in file functions_products.inc.php at line 1325. 

[Art.17, Right to erasure] Deletion access is NONE_BUT_NOT_REQUIRED 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 20363. Found in file functions_products.inc.php at line 1311 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 12505. Found in file functions_fresh_install_import.inc.php at line 1826 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 866. Found in file functions.inc.php at line 292 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 879. Found in file functions.inc.php at line 293 

[Art.15, Right to access] Data access is NONE_BUT_NOT_REQUIRED 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? False 

[main] Is access in violation? False 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? True 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        

##################
### Fix Report ###
##################

############################
# Data Deletion Fix Report #
############################

This report suggests fixes to comply with the GDPR Art. 17, Right to erasure (https://gdpr-info.eu/art-17-gdpr/). The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/adding-the-personal-data-eraser-to-your-plugin/ for more details.

1) Implement a function that deletes all the user data collected in the plugin. Sample code:


/**
* Removes all collected data of a user.
*
* @param string $email_address   email address to manipulate
* @param int    $page            pagination
*
* @return array
*/
function mycbgenie-clickbank-storefront_remove_data( $email_address, $page = 1 ) {
    
    $page = (int) $page;


    //TODO: Delete the user data that was stored using Wordpress functions

    //Below is the sample code for deleting user meta and may need to be modified to suit the plugin.
    $user_id = get_user_by('email', $email_address)
    $key = 'email' //Sample user meta key
    if ( $customer->user_id > 0 ) {
        //Delete user meta data by $key
        delete_user_meta( $user_id, $key );
    }
        



    // Tell core if we have more data to delete still
    $done = true;
    return array(
        'items_removed'  => $items_removed, // true if collected data of a user is being deleted
        'items_retained' => $items_retained, // true if certain data needs to be retained
        'messages'       => sprintf( __( 'Data of user with email %s successfully deleted.', 'mycbgenie-clickbank-storefront' ), $email_address ), // Put messages for data removal
        'done'           => $done, // true if all the removal processes are done (all data of the user is removed)
    );
}
        

2) Hook the deletion function to the Wordpress's Personal Data Removal tool


/**
* Registers all data erasers.
*
* @param array $exporters
*
* @return mixed
*/
function mycbgenie-clickbank-storefront_register_privacy_erasers( $erasers ) {
    $erasers['my-plugin-slug'] = array(
        'eraser_friendly_name' => __( '<eraser name>', 'mycbgenie-clickbank-storefront' ),
        'callback'             => 'mycbgenie-clickbank-storefront_remove_data',
    );
    return $erasers;
}
        

add_filter( 'wp_privacy_personal_data_erasers', 'mycbgenie-clickbank-storefront_register_privacy_erasers' );
        

        

#############################
# Privacy Policy Fix Report #
#############################

This report suggests fixes to comply with the GDPR Art. 13 (https://gdpr-info.eu/art-13-gdpr/) through including a privacy notice. The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/suggesting-text-for-the-site-privacy-policy/ for more details.

1) Implement a function that includes the privacy policy for the plugin and provide it to wordpress through wp_add_privacy_policy_content(). Sample code:


/**
* Adds a privacy policy statement.
*/
function mycbgenie-clickbank-storefront_add_privacy_policy_content() {
    if ( ! function_exists( 'wp_add_privacy_policy_content' ) ) {
        return;
    }
    //TODO: modify the content below to include the privacy policy for the plugin.
    $content = '<p class="privacy-policy-tutorial">' . __( 'Some introductory content for the suggested text.', 'mycbgenie-clickbank-storefront' ) . '</p>'
            . '<strong class="privacy-policy-tutorial">' . __( 'Suggested Text:', 'mycbgenie-clickbank-storefront' ) . '</strong> '
            . sprintf(
                __( 'When you leave a comment on this site, we send your name, email address, IP address and comment text to example.com. Example.com does not retain your personal data. The example.com privacy policy is <a href="%1$s" target="_blank">here</a>.', 'mycbgenie-clickbank-storefront' ),
                'https://example.com/privacy-policy'
            );
    wp_add_privacy_policy_content( 'mycbgenie-clickbank-storefront', wp_kses_post( wpautop( $content, false ) ) );
}
        

2) Hook the privacy policy function to the Wordpress's admin initialization action.


add_action( 'admin_init', 'mycbgenie-clickbank-storefront_add_privacy_policy_content' );
        

        


Disclaimer: The sample code provided above is only for reference and does not guarantee GDPR compliance. The recommended list of data to delete/export may not be comprehensive. 
        
Done.
