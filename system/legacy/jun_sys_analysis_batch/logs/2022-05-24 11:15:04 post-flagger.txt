Timeout in resolving values
Timeout in running neo4j query
Running Main.py on post-flagger

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:00.564364.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:01.070303.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 0 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.217878.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 0 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.368088.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 177 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:00.754516.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 0 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.754364.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.088431.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 63 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:01.211534.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 1306
Added 1066 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 1488
Added 182 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:01.036552.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/post-flagger/options.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/post-flagger/post-flagger.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/post-flagger/classes/flags-table.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/post-flagger/views/edit.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/post-flagger/views/list.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/post-flagger/views/new.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:00.712484.

1000 PHP_REACHES edges created
1306 PHP_REACHES edges created
182 PHP_REACHES edges created
1488 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 466 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:00.977426.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:01.706806.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 35 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:02.407261.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 24 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.156376.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.122975.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.685308.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.008071.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.035048.

59 PHP_REACHES edges created
59 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 39 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.118047.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
8 SQL operations to process.
SELECT * FROM $wpdbpost_flagger
SQL command (SELECT * FROM $wpdbpost_flagger) cannot be parsed correct.
SELECT * FROM $wpdbpost_flagger WHERE id = '$_GET_flag'
SQL command (SELECT * FROM $wpdbpost_flagger WHERE id = '$_GET_flag') cannot be parsed correct.
SELECT * FROM $wpdbpost_flagger WHERE slug = '$metaSlug'
SQL command (SELECT * FROM $wpdbpost_flagger WHERE slug = '$metaSlug') cannot be parsed correct.
SELECT meta_key FROM $wpdbpost_flagger WHERE slug = 'shortcode_atts(["slug" => null], $atts)'
SQL command (SELECT meta_key FROM $wpdbpost_flagger WHERE slug = 'shortcode_atts(["slug" => null], $atts)') cannot be parsed correct.
SELECT flagged_code FROM $wpdbpost_flagger WHERE slug = '$metaSlug'
SQL command (SELECT flagged_code FROM $wpdbpost_flagger WHERE slug = '$metaSlug') cannot be parsed correct.
SELECT unflagged_code, flagged_code FROM $wpdbpost_flagger WHERE slug = '$_POST_flag_slug'
SQL command (SELECT unflagged_code, flagged_code FROM $wpdbpost_flagger WHERE slug = '$_POST_flag_slug') cannot be parsed correct.
CREATE TABLE $wpdbpost_flagger (
		id mediumint(9) NOT NULL AUTO_INCREMENT,
		name varchar(50) NOT NULL,
		slug varchar(50) NOT NULL,
		meta_key varchar(50) NOT NULL,
		unflagged_code longtext NOT NULL,
		flagged_code longtext NOT NULL,
		UNIQUE KEY id (id)
	) $wpdb->get_charset_collate();
SQL command (CREATE TABLE $wpdbpost_flagger ( id mediumint(9) NOT NULL AUTO_INCREMENT, name varchar(50) NOT NULL, slug varchar(50) NOT NULL, meta_key varchar(50) NOT NULL, unflagged_code longtext NOT NULL, flagged_code longtext NOT NULL, UNIQUE KEY id (id) ) $wpdb->get_charset_collate();) cannot be parsed correct.
SELECT * FROM $wpdbpost_flagger WHERE slug = '{"name": "Favorites", "slug": "favorites", "unflagged_code": "Fav This", "flagged_code": "Faved"}'
SQL command (SELECT * FROM $wpdbpost_flagger WHERE slug = '{"name": "Favorites", "slug": "favorites", "unflagged_code": "Fav This", "flagged_code": "Faved"}') cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [1581, 1619, 1656, 1691, 1728, 1765, 1861, 1974]
Added 0 SQL nodes. 0 out of 8 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:04.441808.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'post_flagger_get_flag_html_codes($metaSlug)_$targetCode'' cannot be parsed correct.
HTML code '$'<div class=$class"> <p{"1": ["Flag successfully updated."], "2": ["Flag created!"], "3": ["Flags sent to outter space!"], "4": ["Opps that flag already exists!"]}</p></div>'' cannot be parsed correct.
HTML code '$'Edit Flag pf_add_new_button()'' cannot be parsed correct.
HTML code '$'$id'' cannot be parsed correct.
HTML code '$'Add a flag name'' cannot be parsed correct.
HTML code '$'$name'' cannot be parsed correct.
HTML code '$'e.g. view'' cannot be parsed correct.
HTML code '$'$slug'' cannot be parsed correct.
HTML code '$'$slug'' cannot be parsed correct.
HTML code '$'Unflagged Code'' cannot be parsed correct.
HTML code '$'$unflagged_code'' cannot be parsed correct.
HTML code '$'Use html whithout quotes. e.g.'' cannot be parsed correct.
HTML code '$'Flagged Code'' cannot be parsed correct.
HTML code '$'$flagged_code'' cannot be parsed correct.
HTML code '$'Use html whithout quotes. e.g.'' cannot be parsed correct.
HTML code '$'Cancel'' cannot be parsed correct.
HTML code '$'Update Flag'' cannot be parsed correct.
HTML code '$'My Flags pf_add_new_button()'' cannot be parsed correct.
HTML code '$'$_REQUEST_page'' cannot be parsed correct.
HTML code '$'Add New Flag'' cannot be parsed correct.
HTML code '$'Add a flag name'' cannot be parsed correct.
HTML code '$'e.g. view'' cannot be parsed correct.
HTML code '$'Unflagged Code'' cannot be parsed correct.
HTML code '$'Use html whithout quotes. e.g.'' cannot be parsed correct.
HTML code '$'Flagged Code'' cannot be parsed correct.
HTML code '$'Use html whithout quotes. e.g.'' cannot be parsed correct.
HTML code '$'Cancel'' cannot be parsed correct.
HTML code '$'Create Flag'' cannot be parsed correct.
HTML code '$'
    <div class="wrap">

        '' cannot be parsed correct.
HTML code '$'"/>

				<div class="pf-form-field primary">
					<input type="text" name="name" id="name" placeholder="'' cannot be parsed correct.
HTML code '$'" value="'' cannot be parsed correct.
HTML code '$'"/>
				</div>
				<div class="pf-form-field">
					<label for="slug">Slug</label>
					<input type="text" name="slug" id="slug" placeholder="'' cannot be parsed correct.
HTML code '$'" value="'' cannot be parsed correct.
HTML code '$'"/>
					<p class="legend">
						Use in your template: <code>do_shortcode(\'[flag slug="'' cannot be parsed correct.
HTML code '$'"]\');</code>
					</p>
				</div>
				<div class="pf-form-field">
					<label for="unflagged_code">'' cannot be parsed correct.
HTML code '$'</label>
					<textarea name="unflagged_code" id="unflagged_code" cols="30" rows="5">'' cannot be parsed correct.
HTML code '$'</textarea>
					<p class="legend">
						'' cannot be parsed correct.
HTML code '$' <code>&lt;img src=star.png /&gt;</code>
					</p>
				</div>
				<div class="pf-form-field">
					<label for="flagged_code">'' cannot be parsed correct.
HTML code '$'</label>
					<textarea name="flagged_code" id="flagged_code" cols="30" rows="5">'' cannot be parsed correct.
HTML code '$'</textarea>
					<p class="legend">
						'' cannot be parsed correct.
HTML code '$' <code>&lt;img src=star.png /&gt;</code>
					</p>
				</div>
				<div>
					<a class="button button-large" href="options-general.php?page=post-flagger-options">'' cannot be parsed correct.
HTML code '$'</a>
					<input type="submit" class="button button-primary button-large" value="'' cannot be parsed correct.
HTML code '$'"/>
				</div>
			</form>

		</div>
	</div>
</div>
'' cannot be parsed correct.
HTML code '$'" />
	<!-- Show my WP_List_Table -->
'' cannot be parsed correct.
HTML code '$'"/>
				</div>
				<div class="pf-form-field">
					<label for="slug">Slug</label>
					<input type="text" name="slug" id="slug" placeholder="'' cannot be parsed correct.
HTML code '$'"/>
				</div>
				<div class="pf-form-field">
					<label for="unflagged_code">'' cannot be parsed correct.
HTML code '$'</label>
					<textarea name="unflagged_code" id="unflagged_code" cols="30" rows="5"></textarea>
                    <p class="legend">
                        '' cannot be parsed correct.
HTML code '$' <code>&lt;img src=star.png /&gt;</code>
                    </p>
				</div>
				<div class="pf-form-field">
					<label for="flagged_code">'' cannot be parsed correct.
HTML code '$'</label>
					<textarea name="flagged_code" id="flagged_code" cols="30" rows="5"></textarea>
                    <p class="legend">
                        '' cannot be parsed correct.
HTML code '$' <code>&lt;img src=star.png /&gt;</code>
                    </p>
				</div>
				<div>
					<a class="button button-large" href="options-general.php?page=post-flagger-options">'' cannot be parsed correct.
HTML code '$'</a>
					<input type="submit" class="button button-primary button-large" value="'' cannot be parsed correct.
HTML code '$'"/>
				</div>
			</form>

		</div>
	</div>
</div>
'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:04.189251.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.047248.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 0 do_action/apply_filters calls and 10 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:00.655458.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running FileProDetector
### Start running FrontBaseDetector
### Finish running CubridDetector
### Start running HashDetector
### Finish running DbplusDetector
### Start running IBMDb2Detector
### Finish running FirebirdInterBaseDetector
### Start running InformixDetector
### Finish running DbaseDetector
### Start running IngresDetector
### Finish running FrontBaseDetector
### Start running maxdbDetector
### Finish running InformixDetector
### Start running MongoDbDetector
### Finish running IngresDetector
### Start running MongoDetector
### Finish running MongoDetector
### Start running MsqlDetector
### Finish running IBMDb2Detector
### Start running MySQLDetector
### Finish running MsqlDetector
### Start running MySQLiDetector
### Finish running MySQLDetector
### Start running Oci8Detector
### Finish running MongoDbDetector
### Start running OpenSSLDetector
### Finish running Oci8Detector
### Start running ParadoxDetector
### Finish running HashDetector
### Start running PasswordHashingDetector
### Finish running ParadoxDetector
### Start running PhpCurlDetector
### Finish running OpenSSLDetector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running PasswordHashingDetector
### Start running PHPRetrievalDetector
### Finish running ArrayElementDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PhpCurlDetector
### Start running PhpVarDetector
### Finish running PHPIncludedDetector
### Start running PostgreSQLDetector
### Finish running PostgreSQLDetector
### Start running PropertyDetector
### Finish running PhpVarDetector
### Start running Sqlite3Detector
### Finish running PHPStorageDetector
### Start running SqliteDetector
### Finish running PHPRetrievalDetector
### Start running SqlServerDetector
### Finish running SqliteDetector
### Start running SybaseDetector
### Finish running SybaseDetector
### Start running TokyoTyrantDetector
### Finish running Sqlite3Detector
### Start running UserInputDetector
### Finish running TokyoTyrantDetector
### Start running VariableDetector
### Finish running PropertyDetector
### Start running WordpressHashingFnDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressRemoteDetector
### Finish running MySQLiDetector
### Start running WordPressRetrievalDetector
### Finish running maxdbDetector
### Start running WordPressStorageDetector
### Finish running SqlServerDetector
### Start running WP_UserDetector
### Finish running WordPressRemoteDetector
### Start running GenericDatabaseUsageDetector
### Finish running WP_UserDetector
### Start running GenericEncryptionDetector
### Finish running VariableDetector
### Start running DeletionDetector
### Finish running GenericDatabaseUsageDetector
### Start running UninstallDetector
### Finish running GenericEncryptionDetector
### Finish running UserInputDetector
### Finish running WordPressStorageDetector
### Finish running WordPressRetrievalDetector
### Finish running UninstallDetector
### Finish running DeletionDetector
### Finished running detectors
post-flagger.php:87
  - RETRIEVAL call to get_user_meta($user_ID, $metaKey, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
post-flagger.php:314
  - RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array). 

post-flagger.php:100
  - STORAGE call to update_user_meta(get_current_user_id(), $metaKey, $value) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta 

post-flagger.php:344
  - Data from table $wpdbpost_flagger deleted: "$wpdb->delete($wpdb->prefix . "post_flagger", ["id" => $flagId])" 

By data type:
none
	WordPressRetrievalDetector.dbDelta($sql) - set()
	DeletionDetector.$wpdb->delete($wpdb->prefix . "post_flagger", ["id" => $flagId]) - set()
user_meta
	WordPressRetrievalDetector.get_user_meta($user_ID, $metaKey, true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta(get_current_user_id(), $metaKey, $value) - {'user_meta'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:05.449573.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 1 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.039723.

1 STORE_REACHES edges created
1 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 31 nodes as PERSONAL
In total, tainted 31 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
In total, tainted 0 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:00.601937.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:00:33.775345!
Data from table $wpdbpost_flagger deleted: "$wpdb->delete($wpdb->prefix . "post_flagger", ["id" => $flagId])",None,None
RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to get_user_meta($user_ID, $metaKey, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
STORAGE call to update_user_meta(get_current_user_id(), $metaKey, $value) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta(get_current_user_id(), $metaKey, $value)", found in file post-flagger.php at line 100. 

[has_storage] Storage check is WP 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta(get_current_user_id(), $metaKey, $value) does not have corresponding deletion method. Storage method found in file post-flagger.php at line 100. 

[Art.17, Right to erasure] Deletion access is NONE 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1291. Found in file post-flagger.php at line 100 

[Art.15, Right to access] Data access is NONE_BUT_NOT_REQUIRED 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? True 

[main] Is access in violation? False 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? False 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        

##################
### Fix Report ###
##################

############################
# Data Deletion Fix Report #
############################

This report suggests fixes to comply with the GDPR Art. 17, Right to erasure (https://gdpr-info.eu/art-17-gdpr/). The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/adding-the-personal-data-eraser-to-your-plugin/ for more details.

1) Implement a function that deletes all the user data collected in the plugin. Sample code:


/**
* Removes all collected data of a user.
*
* @param string $email_address   email address to manipulate
* @param int    $page            pagination
*
* @return array
*/
function post-flagger_remove_data( $email_address, $page = 1 ) {
    
    $page = (int) $page;


    //TODO: Delete the user data that was stored using Wordpress functions

    //Below is the sample code for deleting user meta and may need to be modified to suit the plugin.
    $user_id = get_user_by('email', $email_address)
    $key = 'email' //Sample user meta key
    if ( $customer->user_id > 0 ) {
        //Delete user meta data by $key
        delete_user_meta( $user_id, $key );
    }
        



    // Tell core if we have more data to delete still
    $done = true;
    return array(
        'items_removed'  => $items_removed, // true if collected data of a user is being deleted
        'items_retained' => $items_retained, // true if certain data needs to be retained
        'messages'       => sprintf( __( 'Data of user with email %s successfully deleted.', 'post-flagger' ), $email_address ), // Put messages for data removal
        'done'           => $done, // true if all the removal processes are done (all data of the user is removed)
    );
}
        

2) Hook the deletion function to the Wordpress's Personal Data Removal tool


/**
* Registers all data erasers.
*
* @param array $exporters
*
* @return mixed
*/
function post-flagger_register_privacy_erasers( $erasers ) {
    $erasers['my-plugin-slug'] = array(
        'eraser_friendly_name' => __( '<eraser name>', 'post-flagger' ),
        'callback'             => 'post-flagger_remove_data',
    );
    return $erasers;
}
        

add_filter( 'wp_privacy_personal_data_erasers', 'post-flagger_register_privacy_erasers' );
        

        

#############################
# Privacy Policy Fix Report #
#############################

This report suggests fixes to comply with the GDPR Art. 13 (https://gdpr-info.eu/art-13-gdpr/) through including a privacy notice. The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/suggesting-text-for-the-site-privacy-policy/ for more details.

1) Implement a function that includes the privacy policy for the plugin and provide it to wordpress through wp_add_privacy_policy_content(). Sample code:


/**
* Adds a privacy policy statement.
*/
function post-flagger_add_privacy_policy_content() {
    if ( ! function_exists( 'wp_add_privacy_policy_content' ) ) {
        return;
    }
    //TODO: modify the content below to include the privacy policy for the plugin.
    $content = '<p class="privacy-policy-tutorial">' . __( 'Some introductory content for the suggested text.', 'post-flagger' ) . '</p>'
            . '<strong class="privacy-policy-tutorial">' . __( 'Suggested Text:', 'post-flagger' ) . '</strong> '
            . sprintf(
                __( 'When you leave a comment on this site, we send your name, email address, IP address and comment text to example.com. Example.com does not retain your personal data. The example.com privacy policy is <a href="%1$s" target="_blank">here</a>.', 'post-flagger' ),
                'https://example.com/privacy-policy'
            );
    wp_add_privacy_policy_content( 'post-flagger', wp_kses_post( wpautop( $content, false ) ) );
}
        

2) Hook the privacy policy function to the Wordpress's admin initialization action.


add_action( 'admin_init', 'post-flagger_add_privacy_policy_content' );
        

        


Disclaimer: The sample code provided above is only for reference and does not guarantee GDPR compliance. The recommended list of data to delete/export may not be comprehensive. 
        
Done.
