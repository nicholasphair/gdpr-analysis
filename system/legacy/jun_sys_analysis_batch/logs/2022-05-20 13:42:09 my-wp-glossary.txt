Timeout in resolving values
Timeout in running neo4j query
Running Main.py on my-wp-glossary

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:00.947990.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:01.012226.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 458 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.679988.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 5 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.687632.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 2654 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:01.782356.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 0 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.454853.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.085102.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 559 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:08.880758.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 10407
Added 6731 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 11435
Added 1028 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:01.523521.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/my-wp-glossary/index.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/my-wp-glossary/my-wp-glossary.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/my-wp-glossary/classes/simple_html_dom.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/my-wp-glossary/css/index.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/my-wp-glossary/js/index.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:00.539827.

458 PHP_REACHES edges created
5 REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
9944 PHP_REACHES edges created
1000 PHP_REACHES edges created
1028 PHP_REACHES edges created
11435 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 3213 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.206306.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 3 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:04.560710.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 6650
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 6650
Added 167 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:05.661751.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 256 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.184897.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.774946.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 6650
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 6650
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:01.366397.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.028311.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.039257.

3 CALLS edges created
423 PHP_REACHES edges created
426 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 285 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.172178.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
8 SQL operations to process.
SELECT ID, post_title FROM $wpdb WHERE post_content LIKE '"placeholder_0"!-- wp:mywpglossary/glossary /-->%' AND post_status = 'publish' ORDER BY CHAR_LENGTH( post_title ) ASC
None
post_type
SQL command (post_type) cannot be parsed correct.
orderby
SQL command (orderby) cannot be parsed correct.
orderby
SQL command (orderby) cannot be parsed correct.
order
SQL command (order) cannot be parsed correct.
meta_key
SQL command (meta_key) cannot be parsed correct.
orderby
SQL command (orderby) cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [11699, 12263, 12270, 12282, 12295, 12307, 12317, 12324]
Added 0 SQL nodes. 0 out of 8 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:02.555847.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'str_repeat("	", $depth)$this_tag'' cannot be parsed correct.
HTML code '$'[$k]=>$v",'' cannot be parsed correct.
HTML code '$'$this_tag'' cannot be parsed correct.
HTML code '$'get_post_meta($post->ID, "mywpglossary_letter", true)'' cannot be parsed correct.
HTML code '$'sprintf(esc_html__("%1$s at %2$s", "my-wp-glossary"), date_i18n(get_option("date_format"), strtotime($d)), date_i18n(get_option("time_format"), strtotime($d)))'' cannot be parsed correct.
HTML code '$'implode("", $alphas_option)'' cannot be parsed correct.
HTML code '$' by get_userdata(get_post_meta($ID, "_edit_last", true))_display_name'' cannot be parsed correct.
HTML code '$' <button id="mywpglossary-index" style="float:right" class="button" name="mywpglossary-index" value="index-terms" >re-index glossary terms</button>'' cannot be parsed correct.
HTML code '$'('' cannot be parsed correct.
HTML code '$')'' cannot be parsed correct.
HTML code '$'
'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:01.645854.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.050859.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 17 do_action/apply_filters calls and 15 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:01.014347.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running FileProDetector
### Start running FrontBaseDetector
### Finish running DbplusDetector
### Start running HashDetector
### Finish running DbaseDetector
### Start running IBMDb2Detector
### Finish running CubridDetector
### Start running InformixDetector
### Finish running FirebirdInterBaseDetector
### Start running IngresDetector
### Finish running FrontBaseDetector
### Start running maxdbDetector
### Finish running InformixDetector
### Start running MongoDbDetector
### Finish running IngresDetector
### Start running MongoDetector
### Finish running IBMDb2Detector
### Start running MsqlDetector
### Finish running MongoDetector
### Start running MySQLDetector
### Finish running MsqlDetector
### Start running MySQLiDetector
### Finish running MySQLDetector
### Start running Oci8Detector
### Finish running MongoDbDetector
### Start running OpenSSLDetector
### Finish running Oci8Detector
### Start running ParadoxDetector
### Finish running ArrayElementDetector
### Start running PasswordHashingDetector
### Finish running ParadoxDetector
### Start running PhpCurlDetector
### Finish running PhpCurlDetector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running HashDetector
### Start running PHPRetrievalDetector
### Finish running PasswordHashingDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PHPIncludedDetector
### Start running PhpVarDetector
### Finish running PhpVarDetector
### Start running PostgreSQLDetector
### Finish running OpenSSLDetector
### Start running PropertyDetector
### Finish running PostgreSQLDetector
### Start running Sqlite3Detector
### Finish running Sqlite3Detector
### Start running SqliteDetector
### Finish running SqliteDetector
### Start running SqlServerDetector
### Finish running PropertyDetector
### Start running SybaseDetector
### Finish running PHPRetrievalDetector
### Start running TokyoTyrantDetector
### Finish running SybaseDetector
### Start running UserInputDetector
### Finish running TokyoTyrantDetector
### Start running VariableDetector
### Finish running SqlServerDetector
### Start running WordpressHashingFnDetector
### Finish running maxdbDetector
### Start running WordPressRemoteDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressRetrievalDetector
### Finish running MySQLiDetector
### Start running WordPressStorageDetector
### Finish running WordPressRemoteDetector
### Start running WP_UserDetector
### Finish running WP_UserDetector
### Start running GenericDatabaseUsageDetector
### Finish running UserInputDetector
### Start running GenericEncryptionDetector
### Finish running GenericEncryptionDetector
### Start running DeletionDetector
### Finish running VariableDetector
### Start running UninstallDetector
### Finish running GenericDatabaseUsageDetector
### Finish running WordPressStorageDetector
### Finish running UninstallDetector
### Finish running DeletionDetector
### Finish running WordPressRetrievalDetector
### Finish running PHPStorageDetector
### Finished running detectors
classes/simple_html_dom.php:77
  - RETRIEVAL call to file_get_contents($url, $use_include_path, $context, $offset, $maxLen).
  - Data types: file 

classes/simple_html_dom.php:1186
  - STORAGE call to file_put_contents($filepath, $ret, LOCK_EX).
  - Data types: file
classes/simple_html_dom.php:1576
  - STORAGE call to file_put_contents($filepath, $ret, LOCK_EX).
  - Data types: file 

my-wp-glossary.php:33
  - RETRIEVAL call to get_post($post) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: wp_post, post_meta, post
my-wp-glossary.php:35
  - RETRIEVAL call to get_post_meta($post - ID, "mywpglossary_post_matching_terms", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
my-wp-glossary.php:154
  - RETRIEVAL call to get_transient($name) alters data types {'site'}. Passed arguments: 0: $transient (string). Returns (mixed).
  - Data types: site
my-wp-glossary.php:171
  - RETRIEVAL call to get_post() alters data types {'wp_post', 'post_meta', 'post'}. Returns (WP_Post|array|null).
  - Data types: wp_post, post_meta, post
my-wp-glossary.php:289
  - RETRIEVAL call to get_post_meta($post->ID, "mywpglossary_letter", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
my-wp-glossary.php:290
  - RETRIEVAL call to get_post_meta($post->ID, "mywpglossary_letter", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
my-wp-glossary.php:300
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
my-wp-glossary.php:301
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
my-wp-glossary.php:303
  - RETRIEVAL call to get_post_meta($ID, "_edit_last", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
my-wp-glossary.php:304
  - RETRIEVAL call to get_userdata(get_post_meta($ID, "_edit_last", true)) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
my-wp-glossary.php:304
  - RETRIEVAL call to get_post_meta($ID, "_edit_last", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
my-wp-glossary.php:469
  - RETRIEVAL call to get_post() alters data types {'wp_post', 'post_meta', 'post'}. Returns (WP_Post|array|null).
  - Data types: wp_post, post_meta, post
my-wp-glossary.php:489
  - RETRIEVAL call to get_post_meta($object->ID, "mywpglossary_letter", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
my-wp-glossary.php:489
  - RETRIEVAL call to get_post_meta($object->ID, "mywpglossary_letter", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
my-wp-glossary.php:519
  - RETRIEVAL call to get_post() alters data types {'wp_post', 'post_meta', 'post'}. Returns (WP_Post|array|null).
  - Data types: wp_post, post_meta, post
my-wp-glossary.php:523
  - RETRIEVAL call to get_post_meta($post->ID, "mywpglossary_letter", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
my-wp-glossary.php:600
  - RETRIEVAL call to get_posts(["post_type" => $post_types, "post_status" => "publish", "numberposts" => -1]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]). 

my-wp-glossary.php:135
  - STORAGE call to update_post_meta($post_id, "mywpglossary_post_matching_terms", $parced_terms) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
my-wp-glossary.php:193
  - STORAGE call to set_transient($name, json_encode($glossary), 21600) alters data types {'site'}. Passed arguments: 0: $transient (string), 1: $value (mixed), 2: $expiration (int). Returns (bool).
  - Data types: site
my-wp-glossary.php:368
  - STORAGE call to update_post_meta($post_id, "mywpglossary_letter", $letter) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta 

By data type:
file
	PHPStorageDetector.file_put_contents($filepath, $ret, LOCK_EX) - {'file'}
	PHPRetrievalDetector.file_get_contents($url, $use_include_path, $context, $offset, $maxLen) - {'file'}
	PHPStorageDetector.file_put_contents($filepath, $ret, LOCK_EX) - {'file'}
none
	WordPressRetrievalDetector.get_posts(["post_type" => $post_types, "post_status" => "publish", "numberposts" => -1]) - set()
option
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
post
	WordPressRetrievalDetector.get_post() - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post($post) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post() - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post() - {'wp_post', 'post_meta', 'post'}
post_meta
	WordPressRetrievalDetector.get_post_meta($post - ID, "mywpglossary_post_matching_terms", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($ID, "_edit_last", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "mywpglossary_post_matching_terms", $parced_terms) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "mywpglossary_letter", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post() - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post($post) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_meta($object->ID, "mywpglossary_letter", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($object->ID, "mywpglossary_letter", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "mywpglossary_letter", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post() - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post() - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_meta($ID, "_edit_last", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "mywpglossary_letter", $letter) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "mywpglossary_letter", true) - {'post_meta'}
site
	WordPressStorageDetector.set_transient($name, json_encode($glossary), 21600) - {'site'}
	WordPressRetrievalDetector.get_transient($name) - {'site'}
user
	WordPressRetrievalDetector.get_userdata(get_post_meta($ID, "_edit_last", true)) - {'user_meta', 'user'}
user_meta
	WordPressRetrievalDetector.get_userdata(get_post_meta($ID, "_edit_last", true)) - {'user_meta', 'user'}
wp_post
	WordPressRetrievalDetector.get_post() - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post($post) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post() - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post() - {'wp_post', 'post_meta', 'post'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:01:00.721930.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 27 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.186590.

27 STORE_REACHES edges created
27 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 6 nodes as PERSONAL
In total, tainted 6 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
In total, tainted 0 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:00.300153.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:02:02.940898!
RETRIEVAL call to file_get_contents($url, $use_include_path, $context, $offset, $maxLen).,None,None
STORAGE call to file_put_contents($filepath, $ret, LOCK_EX).,None,None
STORAGE call to file_put_contents($filepath, $ret, LOCK_EX).,None,None
RETRIEVAL call to get_transient($name) alters data types {'site'}. Passed arguments: 0: $transient (string). Returns (mixed).,None,None
RETRIEVAL call to get_post() alters data types {'wp_post', 'post_meta', 'post'}. Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post_meta($post->ID, "mywpglossary_letter", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "mywpglossary_letter", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($ID, "_edit_last", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_userdata(get_post_meta($ID, "_edit_last", true)) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_post_meta($ID, "_edit_last", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($post) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post_meta($post - ID, "mywpglossary_post_matching_terms", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post() alters data types {'wp_post', 'post_meta', 'post'}. Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post_meta($object->ID, "mywpglossary_letter", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($object->ID, "mywpglossary_letter", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post() alters data types {'wp_post', 'post_meta', 'post'}. Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post_meta($post->ID, "mywpglossary_letter", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_posts(["post_type" => $post_types, "post_status" => "publish", "numberposts" => -1]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
STORAGE call to update_post_meta($post_id, "mywpglossary_post_matching_terms", $parced_terms) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to set_transient($name, json_encode($glossary), 21600) alters data types {'site'}. Passed arguments: 0: $transient (string), 1: $value (mixed), 2: $expiration (int). Returns (bool).,None,None
STORAGE call to update_post_meta($post_id, "mywpglossary_letter", $letter) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] Storage check is NONE 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['encryption', 'third_party'] 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? True 

No findings
