Timeout in resolving values
Timeout in running neo4j query
Running Main.py on scriblio

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:00.817241.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:02.172684.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 159 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.950105.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 11 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.839178.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 1863 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:01.487495.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 0 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.500705.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.102340.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 582 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:10.611522.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 12181
Added 9566 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 14864
Added 2683 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:01.929123.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
Added new filesystem node for: /home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/scriblio/code-that-should-be-integrated.php
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/scriblio/code-that-should-be-integrated.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/scriblio/scriblio.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/scriblio/compatibility/compatibility.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/scriblio/plugin/class-facet-post-author.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/scriblio/plugin/class-facet-post-type.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/scriblio/plugin/class-facet-publish-date.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/scriblio/plugin/class-facet-searchword.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/scriblio/plugin/class-facets.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/scriblio/plugin/class-facet-taxonomy.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/scriblio/plugin/class-scriblio.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/scriblio/plugin/class-scrib-suggest.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/scriblio/plugin/widgets.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/scriblio/tests/bootstrap.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/scriblio/tests/test-sample.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:01.359322.

2 Nodes Created
159 PHP_REACHES edges created
11 REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
12000 PHP_REACHES edges created
12011 PHP_REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
2683 PHP_REACHES edges created
1 DIRECTORY_OF edges created
1 FILE_OF edges created
14866 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 4404 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.287986.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:04.763695.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 93 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:03.498076.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 191 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.160019.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.340907.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.821981.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.030069.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.034589.

284 PHP_REACHES edges created
284 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 184 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.133066.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
23 SQL operations to process.

			CREATE TABLE $this (
			source_id varchar(85) NOT NULL,
			harvest_date date NOT NULL,
			imported tinyint(1) default '0',
			content longtext NOT NULL,
			enriched tinyint(1) default '0',
			PRIMARY KEY  (source_id),
			KEY imported (imported),
			KEY enriched (enriched)
			) 
		
SQL command ( CREATE TABLE $this ( source_id varchar(85) NOT NULL, harvest_date date NOT NULL, imported tinyint(1) default '0', content longtext NOT NULL, enriched tinyint(1) default '0', PRIMARY KEY (source_id), KEY imported (imported), KEY enriched (enriched) ) ) cannot be parsed correct.
UPDATE $wpdb SET post_status = 'draft' WHERE ID = absint($post_id)
SQL command (UPDATE $wpdb SET post_status = 'draft' WHERE ID = absint($post_id)) cannot be parsed correct.
SELECT t.name, ((( 100 - t.len ) + 1 ) * tt.count ) AS hits
					FROM
					(
						SELECT term_id, name, LENGTH(name) AS len
						FROM $wpdb
						WHERE slug LIKE ('$s%')
						ORDER BY len ASC
						LIMIT 100
					) t
					JOIN $wpdb AS tt ON tt.term_id = t.term_id
					WHERE tt.taxonomy IN('implode("\',\'", $taxonomy)')
					AND tt.count > 0
					ORDER BY hits DESC
					LIMIT 11;
				
SQL command (SELECT t.name, ((( 100 - t.len ) + 1 ) * tt.count ) AS hits FROM ( SELECT term_id, name, LENGTH(name) AS len FROM $wpdb WHERE slug LIKE ('$s%') ORDER BY len ASC LIMIT 100 ) t JOIN $wpdb AS tt ON tt.term_id = t.term_id WHERE tt.taxonomy IN('implode("\',\'", $taxonomy)') AND tt.count > 0 ORDER BY hits DESC LIMIT 11; ) cannot be parsed correct.
REPLACE INTO $this
			( source_id, harvest_date, imported, content, enriched )
			VALUES ( '$wpdb->escape($bibr["_sourceid"])', NOW(), 0, '$wpdb->escape(serialize($bibr))', absint($enriched) )
SQL command (REPLACE INTO $this ( source_id, harvest_date, imported, content, enriched ) VALUES ( '$wpdb->escape($bibr["_sourceid"])', NOW(), 0, '$wpdb->escape(serialize($bibr))', absint($enriched) )) cannot be parsed correct.
SELECT object_id, COUNT(*) AS hits
				FROM $wpdb
				WHERE term_taxonomy_id IN ('implode("\',\'", $tt_ids)')
				GROUP BY object_id
				ORDER BY hits DESC
				LIMIT 100
SQL command (SELECT object_id, COUNT(*) AS hits FROM $wpdb WHERE term_taxonomy_id IN ('implode("\',\'", $tt_ids)') GROUP BY object_id ORDER BY hits DESC LIMIT 100) cannot be parsed correct.

				UPDATE $wpdb tt
				SET tt.count = (
					SELECT COUNT(*)
					FROM $wpdb tr
					WHERE tr.term_taxonomy_id = tt.term_taxonomy_id
				)
SQL command ( UPDATE $wpdb tt SET tt.count = ( SELECT COUNT(*) FROM $wpdb tr WHERE tr.term_taxonomy_id = tt.term_taxonomy_id )) cannot be parsed correct.
SELECT * FROM $this WHERE imported = 0 ORDER BY enriched DESC LIMIT 25
SQL command (SELECT * FROM $this WHERE imported = 0 ORDER BY enriched DESC LIMIT 25) cannot be parsed correct.
SELECT t.name, tt.taxonomy, ( ( 100 - t.len ) * tt.count ) AS hits
				FROM
				(
					SELECT term_id, name, LENGTH(name) AS len
					FROM $wpdb
					WHERE slug LIKE ('sanitize_title(trim($_REQUEST["q"]))%')
					ORDER BY len ASC
					LIMIT 100
				) t
				JOIN $wpdb AS tt ON tt.term_id = t.term_id
				WHERE tt.taxonomy IN('implode("\',\'", $taxonomy)')
				AND tt.count > 0
				ORDER BY hits DESC
				LIMIT 25;
			
SQL command (SELECT t.name, tt.taxonomy, ( ( 100 - t.len ) * tt.count ) AS hits FROM ( SELECT term_id, name, LENGTH(name) AS len FROM $wpdb WHERE slug LIKE ('sanitize_title(trim($_REQUEST["q"]))%') ORDER BY len ASC LIMIT 100 ) t JOIN $wpdb AS tt ON tt.term_id = t.term_id WHERE tt.taxonomy IN('implode("\',\'", $taxonomy)') AND tt.count > 0 ORDER BY hits DESC LIMIT 25; ) cannot be parsed correct.
SELECT ID, post_title
				FROM $wpdb
				WHERE post_title LIKE 'sanitize_title(trim($_REQUEST["q"]))%'
				ORDER BY post_title ASC
				LIMIT 25;
			
SQL command (SELECT ID, post_title FROM $wpdb WHERE post_title LIKE 'sanitize_title(trim($_REQUEST["q"]))%' ORDER BY post_title ASC LIMIT 25; ) cannot be parsed correct.
SELECT * FROM $this WHERE imported = 0 ORDER BY enriched DESC LIMIT 0,25
SQL command (SELECT * FROM $this WHERE imported = 0 ORDER BY enriched DESC LIMIT 0,25) cannot be parsed correct.
SELECT post_author , COUNT(*) AS hits FROM $wpdb WHERE post_status = "publish" GROUP BY post_author LIMIT 1000 /* generated in Facet_Post_Author::get_terms_in_corpus() */
SQL command (SELECT post_author , COUNT(*) AS hits FROM $wpdb WHERE post_status = "publish" GROUP BY post_author LIMIT 1000 /* generated in Facet_Post_Author::get_terms_in_corpus() */) cannot be parsed correct.
SELECT post_author , COUNT(*) AS hits FROM $wpdb WHERE ID IN (implode(",", $matching_post_ids)) GROUP BY post_author LIMIT 1000 /* generated in Facet_Post_Author::get_terms_in_found_set() */
SQL command (SELECT post_author , COUNT(*) AS hits FROM $wpdb WHERE ID IN (implode(",", $matching_post_ids)) GROUP BY post_author LIMIT 1000 /* generated in Facet_Post_Author::get_terms_in_found_set() */) cannot be parsed correct.
SELECT post_type, COUNT(*) AS hits FROM $wpdb WHERE post_status = "publish" GROUP BY post_type LIMIT 1000 /* generated in Facet_Post_Type::get_terms_in_corpus() */
SQL command (SELECT post_type, COUNT(*) AS hits FROM $wpdb WHERE post_status = "publish" GROUP BY post_type LIMIT 1000 /* generated in Facet_Post_Type::get_terms_in_corpus() */) cannot be parsed correct.
SELECT post_type , COUNT(*) AS hits FROM $wpdb WHERE ID IN (implode(",", $matching_post_ids)) GROUP BY post_type LIMIT 1000 /* generated in Facet_Post_Type::get_terms_in_found_set() */
SQL command (SELECT post_type , COUNT(*) AS hits FROM $wpdb WHERE ID IN (implode(",", $matching_post_ids)) GROUP BY post_type LIMIT 1000 /* generated in Facet_Post_Type::get_terms_in_found_set() */) cannot be parsed correct.
SELECT COUNT( * ) AS count
			FROM $wpdb
			WHERE DATE( post_date_gmt ) = gmdate("Y-m-d", $post->post_date_gmt)"
			/* generated in Facet_Publish_Date::get_post_count_by_date() *
SQL command (SELECT COUNT( * ) AS count FROM $wpdb WHERE DATE( post_date_gmt ) = gmdate("Y-m-d", $post->post_date_gmt)" /* generated in Facet_Publish_Date::get_post_count_by_date() *) cannot be parsed correct.
SELECT DATE( post_date_gmt) AS date, COUNT(*) AS hits
				FROM $wpdb
				WHERE post_status = "publish"
					GROUP BY date
					ORDER BY date DESC
					LIMIT 1000
				/* generated in Facet_Publish_Date::get_terms_in_corpus() */
SQL command (SELECT DATE( post_date_gmt) AS date, COUNT(*) AS hits FROM $wpdb WHERE post_status = "publish" GROUP BY date ORDER BY date DESC LIMIT 1000 /* generated in Facet_Publish_Date::get_terms_in_corpus() */) cannot be parsed correct.
SELECT DATE( post_date_gmt) AS date, COUNT(*) AS hits
				FROM $wpdb
				WHERE ID IN (implode(",", $matching_post_ids))
					GROUP BY date
					ORDER BY date DESC
					LIMIT 1000
				/* generated in Facet_Publish_Date::get_terms_in_found_set() */
SQL command (SELECT DATE( post_date_gmt) AS date, COUNT(*) AS hits FROM $wpdb WHERE ID IN (implode(",", $matching_post_ids)) GROUP BY date ORDER BY date DESC LIMIT 1000 /* generated in Facet_Publish_Date::get_terms_in_found_set() */) cannot be parsed correct.
SELECT t.term_id, t.name, t.slug, t.term_group,
					tt.term_taxonomy_id, tt.taxonomy, tt.description,
					tt.parent, tt.count
				FROM $wpdb t 
					JOIN $wpdb tt
						ON t.term_id = tt.term_id
				WHERE t.slug = sanitize_title_with_dashes($search_slug[0])
				ORDER BY tt.count DESC
SELECT t.term_id, t.name, t.slug, t.term_group,
					tt.term_taxonomy_id, tt.taxonomy, tt.description,
					tt.parent, tt.count
				FROM $wpdb t 
					JOIN $wpdb tt
						ON t.term_id = tt.term_id
				WHERE t.slug = sanitize_title_with_dashes($search_slug[0])
				ORDER BY tt.count DESC
SQL command (SELECT t.term_id, t.name, t.slug, t.term_group, tt.term_taxonomy_id, tt.taxonomy, tt.description, tt.parent, tt.count FROM $wpdb t JOIN $wpdb tt ON t.term_id = tt.term_id WHERE t.slug = sanitize_title_with_dashes($search_slug[0]) ORDER BY tt.count DESC) cannot be parsed correct.

			UPDATE $wpdb tt
			SET tt.count = (
				SELECT COUNT(*)
				FROM $wpdb tr
				WHERE tr.term_taxonomy_id = tt.term_taxonomy_id
			) /* generated in Facet_Taxonomy::_update_term_counts() */
SQL command ( UPDATE $wpdb tt SET tt.count = ( SELECT COUNT(*) FROM $wpdb tr WHERE tr.term_taxonomy_id = tt.term_taxonomy_id ) /* generated in Facet_Taxonomy::_update_term_counts() */) cannot be parsed correct.
SELECT b.term_id, c.term_taxonomy_id, b.slug, b.name, a.taxonomy, a.description, COUNT(c.term_taxonomy_id) AS `count`
				FROM $wpdb c
				INNER JOIN $wpdb a ON a.term_taxonomy_id = c.term_taxonomy_id
				INNER JOIN $wpdb b ON a.term_id = b.term_id
				WHERE c.object_id IN (implode(",", $matching_post_ids))
				GROUP BY c.term_taxonomy_id ORDER BY count DESC LIMIT 2000
				/* generated in Facet_Taxonomy::get_terms_in_found_set() */
SQL command (SELECT b.term_id, c.term_taxonomy_id, b.slug, b.name, a.taxonomy, a.description, COUNT(c.term_taxonomy_id) AS `count` FROM $wpdb c INNER JOIN $wpdb a ON a.term_taxonomy_id = c.term_taxonomy_id INNER JOIN $wpdb b ON a.term_id = b.term_id WHERE c.object_id IN (implode(",", $matching_post_ids)) GROUP BY c.term_taxonomy_id ORDER BY count DESC LIMIT 2000 /* generated in Facet_Taxonomy::get_terms_in_found_set() */) cannot be parsed correct.
$this_matching_post_ids_sql
SQL command ($this_matching_post_ids_sql) cannot be parsed correct.
SELECT ID
					FROM $wpdb
					WHERE 1=1
					AND post_name LIKE sanitize_title($s)%
					AND post_status = 'publish'
					ORDER BY post_title ASC
					LIMIT 25;
				
SELECT ID
					FROM $wpdb
					WHERE 1=1
					AND post_name LIKE sanitize_title($s)%
					AND post_status = 'publish'
					ORDER BY post_title ASC
					LIMIT 25;
				
SQL command (SELECT ID FROM $wpdb WHERE 1=1 AND post_name LIKE sanitize_title($s)% AND post_status = 'publish' ORDER BY post_title ASC LIMIT 25; ) cannot be parsed correct.

				SELECT t.term_id , t.name , tt.taxonomy , tt.count , ( ( 100 - t.len ) * tt.count ) AS hits
				FROM
				(
					SELECT term_id, name, LENGTH(name) AS len
					FROM $wpdb
					WHERE slug LIKE ('sanitize_title($s)%')
					ORDER BY len ASC
					LIMIT 100
				) t
				JOIN $wpdb AS tt ON tt.term_id = t.term_id
				WHERE tt.taxonomy IN('implode("\',\'", $taxonomy)')
				AND tt.count > 0
				ORDER BY hits DESC
				LIMIT 25;
			
SQL command ( SELECT t.term_id , t.name , tt.taxonomy , tt.count , ( ( 100 - t.len ) * tt.count ) AS hits FROM ( SELECT term_id, name, LENGTH(name) AS len FROM $wpdb WHERE slug LIKE ('sanitize_title($s)%') ORDER BY len ASC LIMIT 100 ) t JOIN $wpdb AS tt ON tt.term_id = t.term_id WHERE tt.taxonomy IN('implode("\',\'", $taxonomy)') AND tt.count > 0 ORDER BY hits DESC LIMIT 25; ) cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [5329, 4035, 3686, 3753, 3936, 5048, 5128, 5546, 5582, 4771, 6475, 6657, 7385, 7569, 9038, 8565, 8690, 10169, 11493, 10891, 12391, 15086, 14813]
Added 0 SQL nodes. 0 out of 23 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:06.835572.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'<li id="scrib_meditor$handle-$key" class="fieldset_title"><h2>$prototype__elements_$key__title</h2><div class="description">$prototype__elements_$key__description</div><ul  class="fieldset_titl sortable""'' cannot be parsed correct.
HTML code '$'<li class="fieldsetrepeatable $handle $fieldset"><ul class="fieldset">'' cannot be parsed correct.
HTML code '$'<li class="field$handle $fieldset $key"<label for=scrib_meditor-$handle-$fieldset-$ordinal-$key"$prototype__elements_$key__title</label><br />'' cannot be parsed correct.
HTML code '$'<li><a href=add_query_arg(["sortby" => $handle, "sort" => $method["order"]])"class="selected">$method_name</a></li>'' cannot be parsed correct.
HTML code '$'<select name=scrib_meditor[$handle][$fieldset][$ordinal][$key]" id="scrib_meditor-$handle-$fieldset-$ordinal-$key" tabindex="$tabindex"'' cannot be parsed correct.
HTML code '$'<option selected="selected" value=$selval"$selname</option>'' cannot be parsed correct.
HTML code '$'<input type="checkbox" name="scrib_meditor[$handle][$fieldset][$ordinal][$key]" id="scrib_meditor-$handle-$fieldset-$ordinal-$key" value="1" checked="checked"  tabindex=$tabindex" /'' cannot be parsed correct.
HTML code '$'<textarea name=scrib_meditor[$handle][$fieldset][$ordinal][$key]" id="scrib_meditor-$handle-$fieldset-$ordinal-$key"  tabindex="$tabindex"format_to_edit($val)</textarea>'' cannot be parsed correct.
HTML code '$'<input type="text" name="$name" id="scrib_meditor-$handle-$fieldset-$ordinal-$key" value="format_to_edit($val)" autocomplete="off" tabindex=$tabindex" /'' cannot be parsed correct.
HTML code '$'<a href=admin_url("post-new.php?scrib_meditor_add=" . $rkey . "&scrib_meditor_from=" . $post_ID)">+$relationship__title</a> &nbsp; '' cannot be parsed correct.
HTML code '$'<p id="scrib_meditor_addrelated_needsid">Save this record before attempting to add a related record.</p>'' cannot be parsed correct.
HTML code '$'implode("
				", $this->meditor_suggest_js)
'' cannot be parsed correct.
HTML code '$'wp_cache_get($cachekey, "scrib_suggest_meditor")'' cannot be parsed correct.
HTML code '$'plugin_basename(dirname())'' cannot be parsed correct.
HTML code '$'<p>$this->import_harvest_tobepublished_count() records remain to be published.</p>'' cannot be parsed correct.
HTML code '$'get_num_queries()'' cannot be parsed correct.
HTML code '$'<p>Fetching records in batches of 25...publishing them...making coffee. Please be patient.<br /><br /></p>'' cannot be parsed correct.
HTML code '$'<li><a href=get_permalink($post_id)" target="_blank">get_the_title($post_id)</a> from $post_source_id</li>'' cannot be parsed correct.
HTML code '$'<li>Failed to publish $post_source_id</li>'' cannot be parsed correct.
HTML code '$'plugin_basename(dirname())'' cannot be parsed correct.
HTML code '$'implode($suggestion, "
")'' cannot be parsed correct.
HTML code '$'site_url("/index.php?scrib_suggest=go")'' cannot be parsed correct.
HTML code '$'$searchprompt'' cannot be parsed correct.
HTML code '$'json_encode($suggestion["array"])'' cannot be parsed correct.
HTML code '$'implode($suggestion["string"], "
")'' cannot be parsed correct.
HTML code '$'$args_before_titleapply_filters("widget_title", empty($instance["title"])""$instance["title"])$args_after_title'' cannot be parsed correct.
HTML code '$'
				<span class="wijax-loading">
					<img src="bcms_wijax()/img/loading-gray.gif" alt="loading external resource" />
					<a href="trailingslashit(untrailingslashit($url) . "/wijax/" . bcms_wijax()->encoded_name($this->id))" class="wijax-source wijax-onload" rel="nofollow"></a>
					<span class="wijax-opts" style="display: none;">json_encode(["source" => $wijax_source, "varname" => bcms_wijax()->varname($wijax_source), "title_element" => $title_element, "title_class" => $title_class, "title_before" => rawurlencode($args["before_title"]), "title_after" => rawurlencode($args["after_title"])])</span>
				</span>
			'' cannot be parsed correct.
HTML code '$'$args_after_widget'' cannot be parsed correct.
HTML code '$'$this->get_field_id("title")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("title")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("title")'' cannot be parsed correct.
HTML code '$'wp_parse_args($instance, ["title" => "", "facet" => FALSE, "format" => "cloud", "number" => 25, "orderby" => "name"])_title'' cannot be parsed correct.
HTML code '$'$this->get_field_id("facet")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("facet")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("facet")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("format")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("format")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("format")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("number")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("number")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("number")'' cannot be parsed correct.
HTML code '$'absint($instance["number"])'' cannot be parsed correct.
HTML code '$'$this->get_field_id("orderby")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("orderby")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("orderby")'' cannot be parsed correct.
HTML code '$'
	<option value=$facet"selected($default, $facet, FALSE)>scriblio()->facets()_facets_$facet_label$facet</option>'' cannot be parsed correct.
HTML code '$'$args_before_widget'' cannot be parsed correct.
HTML code '$'$args_before_titleapply_filters("widget_title", $instance["title"])$args_after_title'' cannot be parsed correct.
HTML code '$'<div class="textwidget scrib_search_edit context-top">do_shortcode(apply_filters("widget_text", $instance["context-top"]))</div>'' cannot be parsed correct.
HTML code '$'<div class="selected-facets"><ul class="facets">scriblio()->facets()->editsearch()</ul></div>'' cannot be parsed correct.
HTML code '$'<div class="textwidget scrib_search_edit context-bottom">do_shortcode(apply_filters("widget_text", $instance["context-bottom"]))</div>'' cannot be parsed correct.
HTML code '$'$args_after_widget'' cannot be parsed correct.
HTML code '$'$this->get_field_id("title")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("title")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("title")'' cannot be parsed correct.
HTML code '$'wp_parse_args($instance, ["title" => "Searching Our Collection", "context-top" => "Your search found [scrib_hit_count] items with all of the following terms:", "context-bottom" => "Click [x] to remove a term, or use the facets in the sidebar to narrow your search."])_title'' cannot be parsed correct.
HTML code '$'$this->get_field_id("context-top")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("context-top")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("context-top")'' cannot be parsed correct.
HTML code '$'format_to_edit($instance["context-top"])'' cannot be parsed correct.
HTML code '$'$this->get_field_id("context-bottom")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("context-bottom")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("context-bottom")'' cannot be parsed correct.
HTML code '$'format_to_edit($instance["context-bottom"])'' cannot be parsed correct.
HTML code '$'preg_replace("/class="", "class=" . esc_attr(implode(" ", $widget_classes)) . " ", $args["before_widget"])'' cannot be parsed correct.
HTML code '$'<ul id="scrib_meditor">'' cannot be parsed correct.
HTML code '$'</ul></li>'' cannot be parsed correct.
HTML code '$'</ul><p class="scrib_meditor_end" />'' cannot be parsed correct.
HTML code '$'</select>'' cannot be parsed correct.
HTML code '$'</li>'' cannot be parsed correct.
HTML code '$'</ul></li>'' cannot be parsed correct.
HTML code '$'<p id="scrib_meditor_addrelated">'' cannot be parsed correct.
HTML code '$'</p>'' cannot be parsed correct.
HTML code '$'&n='' cannot be parsed correct.
HTML code '$'";
			}
			setTimeout( "nextpage()", 1250 );

			//-->
			</script>
			'' cannot be parsed correct.
HTML code '$'<p>That&#039;s all folks. kthnxbye.</p>'' cannot be parsed correct.
HTML code '$'<pre>'' cannot be parsed correct.
HTML code '$'</pre>'' cannot be parsed correct.
HTML code '$'<ol>'' cannot be parsed correct.
HTML code '$'</ol>'' cannot be parsed correct.
HTML code '$'&n='' cannot be parsed correct.
HTML code '$'"'' cannot be parsed correct.
HTML code '$'<h2>Scriblio performance profile</h2>'' cannot be parsed correct.
HTML code '$'</table>'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:11.066018.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.048651.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 33 do_action/apply_filters calls and 24 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:01.409028.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running DbplusDetector
### Start running FrontBaseDetector
### Finish running CubridDetector
### Start running HashDetector
### Finish running FileProDetector
### Start running IBMDb2Detector
### Finish running FirebirdInterBaseDetector
### Start running InformixDetector
### Finish running DbaseDetector
### Start running IngresDetector
### Finish running InformixDetector
### Start running maxdbDetector
### Finish running FrontBaseDetector
### Start running MongoDbDetector
### Finish running IngresDetector
### Start running MongoDetector
### Finish running MongoDetector
### Start running MsqlDetector
### Finish running IBMDb2Detector
### Start running MySQLDetector
### Finish running MsqlDetector
### Start running MySQLiDetector
### Finish running MySQLDetector
### Start running Oci8Detector
### Finish running MongoDbDetector
### Start running OpenSSLDetector
### Finish running Oci8Detector
### Start running ParadoxDetector
### Finish running ArrayElementDetector
### Start running PasswordHashingDetector
### Finish running ParadoxDetector
### Start running PhpCurlDetector
### Finish running PhpCurlDetector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running HashDetector
### Start running PHPRetrievalDetector
### Finish running PasswordHashingDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running OpenSSLDetector
### Start running PhpVarDetector
### Finish running PHPStorageDetector
### Start running PostgreSQLDetector
### Finish running PHPRetrievalDetector
### Start running PropertyDetector
### Finish running PostgreSQLDetector
### Start running Sqlite3Detector
### Finish running Sqlite3Detector
### Start running SqliteDetector
### Finish running SqliteDetector
### Start running SqlServerDetector
### Finish running maxdbDetector
### Start running SybaseDetector
### Finish running MySQLiDetector
### Start running TokyoTyrantDetector
### Finish running PropertyDetector
### Start running UserInputDetector
### Finish running PhpVarDetector
### Start running VariableDetector
### Finish running SybaseDetector
### Start running WordpressHashingFnDetector
### Finish running PHPIncludedDetector
### Start running WordPressRemoteDetector
### Finish running TokyoTyrantDetector
### Start running WordPressRetrievalDetector
### Finish running WordPressRemoteDetector
### Start running WordPressStorageDetector
### Finish running SqlServerDetector
### Start running WP_UserDetector
### Finish running WordpressHashingFnDetector
### Start running GenericDatabaseUsageDetector
### Finish running WP_UserDetector
### Start running GenericEncryptionDetector
### Finish running GenericEncryptionDetector
### Start running DeletionDetector
### Finish running UserInputDetector
### Start running UninstallDetector
### Finish running VariableDetector
### Finish running GenericDatabaseUsageDetector
### Finish running UninstallDetector
### Finish running DeletionDetector
### Finish running WordPressStorageDetector
### Finish running WordPressRetrievalDetector
### Finished running detectors
compatibility/compatibility.php:567
  - MD5 called with parameters [implode, s, taxonomy]. Ignore if [implode, s, taxonomy] does not contain personal information.
compatibility/compatibility.php:965
  - MD5 called with parameters [implode, s, taxonomy]. Ignore if [implode, s, taxonomy] does not contain personal information.
compatibility/compatibility.php:1053
  - MD5 called with parameters [serialize, strtolower, key]. Ignore if [serialize, strtolower, key] does not contain personal information.
plugin/class-facet-post-author.php:129
  - MD5 called with parameters [serialize, matching_post_ids]. Ignore if [serialize, matching_post_ids] does not contain personal information.
plugin/class-facet-post-type.php:140
  - MD5 called with parameters [serialize, matching_post_ids]. Ignore if [serialize, matching_post_ids] does not contain personal information.
plugin/class-facet-publish-date.php:175
  - MD5 called with parameters [base]. Ignore if [base] does not contain personal information.
plugin/class-facet-taxonomy.php:112
  - MD5 called with parameters [serialize, matching_post_ids]. Ignore if [serialize, matching_post_ids] does not contain personal information.
plugin/class-facets.php:228
  - MD5 called with parameters [this, matching_post_ids_sql]. Ignore if [this, matching_post_ids_sql] does not contain personal information.
plugin/class-scrib-suggest.php:90
  - MD5 called with parameters [_taxonomy, implode, s, taxonomy]. Ignore if [_taxonomy, implode, s, taxonomy] does not contain personal information. 

plugin/class-facet-post-author.php:68
  - object property '$userdata->user_nicename' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
plugin/class-facet-post-author.php:70
  - object property '$userdata->user_nicename' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
plugin/class-facet-post-author.php:102
  - object property '$userdata->user_nicename' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
plugin/class-facet-post-author.php:147
  - object property '$userdata->user_nicename' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
plugin/class-facet-post-author.php:174
  - object property '$userdata->user_nicename' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user 

compatibility/compatibility.php:53
  - RETRIEVAL call to get_option("scrib_opts") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
compatibility/compatibility.php:69
  - RETRIEVAL call to get_option("scrib") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
compatibility/compatibility.php:100
  - RETRIEVAL call to get_option("scrib_opts") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
compatibility/compatibility.php:204
  - RETRIEVAL call to get_post_meta($post_ID, "scrib_meditor_content", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
compatibility/compatibility.php:215
  - RETRIEVAL call to get_post_meta(absint($_GET["scrib_meditor_from"]), "scrib_meditor_content", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
compatibility/compatibility.php:311
  - RETRIEVAL call to get_post_meta($post_id, "scrib_meditor_content", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
compatibility/compatibility.php:311
  - RETRIEVAL call to get_post_meta($post_id, "scrib_meditor_content", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
compatibility/compatibility.php:516
  - RETRIEVAL call to get_post_meta($_GET["posted"], "scrib_meditor_content", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
compatibility/compatibility.php:647
  - RETRIEVAL call to get_post($post_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: wp_post, post_meta, post
compatibility/compatibility.php:694
  - RETRIEVAL call to get_post_meta($postdata["ID"], "scrib_meditor_content", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
compatibility/compatibility.php:699
  - RETRIEVAL call to get_post_field("post_title", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: wp_post, post_meta, post
compatibility/compatibility.php:699
  - RETRIEVAL call to get_post_field("post_title", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: wp_post, post_meta, post
compatibility/compatibility.php:701
  - RETRIEVAL call to get_post_field("post_content", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: wp_post, post_meta, post
compatibility/compatibility.php:701
  - RETRIEVAL call to get_post_field("post_content", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: wp_post, post_meta, post
compatibility/compatibility.php:707
  - RETRIEVAL call to get_post_field("post_date", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: wp_post, post_meta, post
compatibility/compatibility.php:707
  - RETRIEVAL call to get_post_field("post_date", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: wp_post, post_meta, post
compatibility/compatibility.php:709
  - RETRIEVAL call to get_post_field("post_author", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: wp_post, post_meta, post
compatibility/compatibility.php:709
  - RETRIEVAL call to get_post_field("post_author", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: wp_post, post_meta, post
compatibility/compatibility.php:725
  - RETRIEVAL call to get_option("default_comment_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
compatibility/compatibility.php:726
  - RETRIEVAL call to get_option("default_ping_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
compatibility/compatibility.php:918
  - RETRIEVAL call to dbDelta("
			CREATE TABLE "$this->harvest_table" (
			source_id varchar(85) NOT NULL,
			harvest_date date NOT NULL,
			imported tinyint(1) default \'0\',
			content longtext NOT NULL,
			enriched tinyint(1) default \'0\',
			PRIMARY KEY  (source_id),
			KEY imported (imported),
			KEY enriched (enriched)
			) "$charset_collate"
		"). Passed arguments: 0: $queries (string[]|string). Returns (array).
compatibility/compatibility.php:952
  - RETRIEVAL call to get_option("blog_charset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
plugin/class-facet-post-author.php:66
  - RETRIEVAL call to get_user_by("slug", $val) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
plugin/class-facet-post-author.php:96
  - RETRIEVAL call to get_userdata($term->post_author) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
plugin/class-facet-post-author.php:141
  - RETRIEVAL call to get_userdata($term->post_author) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
plugin/class-facet-post-author.php:170
  - RETRIEVAL call to get_userdata(get_post($post_id)->post_author) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
plugin/class-facet-post-author.php:170
  - RETRIEVAL call to get_post($post_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: wp_post, post_meta, post
plugin/class-facet-post-type.php:187
  - RETRIEVAL call to get_post($post_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: wp_post, post_meta, post
plugin/class-facet-publish-date.php:278
  - RETRIEVAL call to get_post($post_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: wp_post, post_meta, post
plugin/class-scrib-suggest.php:57
  - RETRIEVAL call to get_option("blog_charset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
plugin/widgets.php:14
  - RETRIEVAL call to get_option("widget_scriblio_facets") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option 

compatibility/compatibility.php:73
  - STORAGE call to update_option("scrib_opts", ["browseid" => absint($old["browse_id"]), "searchprompt" => "Books, movies, music", "facetfound" => 1000]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
compatibility/compatibility.php:81
  - STORAGE call to update_option("scrib_categories", ["browse" => [absint($old["catalog_category_id"])], "hide" => [absint($old["catalog_category_id"])]]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
compatibility/compatibility.php:87
  - STORAGE call to update_option("scrib_taxonomies", ["name" => $old["taxonomies"], "search" => array_keys($old["taxonomies"]), "related" => $old["taxonomies_for_related"], "suggest" => $old["taxonomies_for_suggest"]]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
compatibility/compatibility.php:95
  - STORAGE call to delete_option("scrib") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
compatibility/compatibility.php:102
  - STORAGE call to update_option("scrib_opts", $this->options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
compatibility/compatibility.php:319
  - STORAGE call to add_post_meta($post_id, "scrib_meditor_content", $record, TRUE) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: post_meta
compatibility/compatibility.php:319
  - STORAGE call to update_post_meta($post_id, "scrib_meditor_content", $record) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
compatibility/compatibility.php:768
  - STORAGE call to wp_insert_post($postdata). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
compatibility/compatibility.php:775
  - STORAGE call to add_post_meta($post_id, "scrib_meditor_content", $bibr, TRUE) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: post_meta
compatibility/compatibility.php:775
  - STORAGE call to update_post_meta($post_id, "scrib_meditor_content", $bibr) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
compatibility/compatibility.php:781
  - STORAGE call to add_post_meta($post_id, "bsuite_post_icon", $the_icon, TRUE) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: post_meta
compatibility/compatibility.php:781
  - STORAGE call to update_post_meta($post_id, "bsuite_post_icon", $the_icon) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta 

compatibility/compatibility.php:95
  - DELETION call to delete_option("scrib") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

By data type:
none
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	WordPressStorageDetector.wp_insert_post($postdata) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	WordPressRetrievalDetector.dbDelta("
			CREATE TABLE "$this->harvest_table" (
			source_id varchar(85) NOT NULL,
			harvest_date date NOT NULL,
			imported tinyint(1) default \'0\',
			content longtext NOT NULL,
			enriched tinyint(1) default \'0\',
			PRIMARY KEY  (source_id),
			KEY imported (imported),
			KEY enriched (enriched)
			) "$charset_collate"
		") - set()
option
	WordPressRetrievalDetector.get_option("scrib") - {'option'}
	WordPressStorageDetector.update_option("scrib_taxonomies", ["name" => $old["taxonomies"], "search" => array_keys($old["taxonomies"]), "related" => $old["taxonomies_for_related"], "suggest" => $old["taxonomies_for_suggest"]]) - {'option'}
	WordPressStorageDetector.update_option("scrib_categories", ["browse" => [absint($old["catalog_category_id"])], "hide" => [absint($old["catalog_category_id"])]]) - {'option'}
	WordPressRetrievalDetector.get_option("widget_scriblio_facets") - {'option'}
	WordPressRetrievalDetector.get_option("default_comment_status") - {'option'}
	WordPressStorageDetector.update_option("scrib_opts", $this->options) - {'option'}
	WordPressRetrievalDetector.get_option("default_ping_status") - {'option'}
	WordPressRetrievalDetector.get_option("scrib_opts") - {'option'}
	WordPressRetrievalDetector.get_option("scrib_opts") - {'option'}
	WordPressRetrievalDetector.get_option("blog_charset") - {'option'}
	WordPressStorageDetector.update_option("scrib_opts", ["browseid" => absint($old["browse_id"]), "searchprompt" => "Books, movies, music", "facetfound" => 1000]) - {'option'}
	WordPressStorageDetector.delete_option("scrib") - {'option'}
	WordPressRetrievalDetector.get_option("blog_charset") - {'option'}
	DeletionDetector.delete_option("scrib") - {'option'}
post
	WordPressRetrievalDetector.get_post_field("post_title", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_title", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_date", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_content", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_date", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_author", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_content", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_author", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post_meta', 'post'}
post_meta
	WordPressRetrievalDetector.get_post_field("post_title", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressStorageDetector.update_post_meta($post_id, "scrib_meditor_content", $bibr) - {'post_meta'}
	WordPressStorageDetector.add_post_meta($post_id, "scrib_meditor_content", $record, TRUE) - {'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_title", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_meta($post_ID, "scrib_meditor_content", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post_meta', 'post'}
	WordPressStorageDetector.add_post_meta($post_id, "bsuite_post_icon", $the_icon, TRUE) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "scrib_meditor_content", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_meta(absint($_GET["scrib_meditor_from"]), "scrib_meditor_content", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_date", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_meta($_GET["posted"], "scrib_meditor_content", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($postdata["ID"], "scrib_meditor_content", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "bsuite_post_icon", $the_icon) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "scrib_meditor_content", $record) - {'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_content", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_date", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_author", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_content", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_author", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressStorageDetector.add_post_meta($post_id, "scrib_meditor_content", $bibr, TRUE) - {'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_meta($post_id, "scrib_meditor_content", true) - {'post_meta'}
user
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata(get_post($post_id)->post_author) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("slug", $val) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($term->post_author) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($term->post_author) - {'user_meta', 'user'}
user_meta
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata(get_post($post_id)->post_author) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("slug", $val) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($term->post_author) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($term->post_author) - {'user_meta', 'user'}
wp_post
	WordPressRetrievalDetector.get_post_field("post_title", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_title", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_date", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_content", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_date", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_author", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_content", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post_field("post_author", $postdata["ID"]) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post_meta', 'post'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:12.317576.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 148 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.300394.

148 STORE_REACHES edges created
148 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 53 nodes as PERSONAL
In total, tainted 53 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
Tainted 9 nodes as ENCRYPTED
In total, tainted 9 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:02.195623.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:01:28.965613!
DELETION call to delete_option("scrib") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
MD5 called with parameters [serialize, strtolower, key]. Ignore if [serialize, strtolower, key] does not contain personal information.,md5,None
MD5 called with parameters [implode, s, taxonomy]. Ignore if [implode, s, taxonomy] does not contain personal information.,md5,None
MD5 called with parameters [implode, s, taxonomy]. Ignore if [implode, s, taxonomy] does not contain personal information.,md5,None
MD5 called with parameters [serialize, matching_post_ids]. Ignore if [serialize, matching_post_ids] does not contain personal information.,md5,None
MD5 called with parameters [serialize, matching_post_ids]. Ignore if [serialize, matching_post_ids] does not contain personal information.,md5,None
MD5 called with parameters [base]. Ignore if [base] does not contain personal information.,md5,None
MD5 called with parameters [serialize, matching_post_ids]. Ignore if [serialize, matching_post_ids] does not contain personal information.,md5,None
MD5 called with parameters [this, matching_post_ids_sql]. Ignore if [this, matching_post_ids_sql] does not contain personal information.,md5,None
MD5 called with parameters [_taxonomy, implode, s, taxonomy]. Ignore if [_taxonomy, implode, s, taxonomy] does not contain personal information.,md5,None
object property '$userdata->user_nicename' of personal types {'user_meta', 'user'} is found.,,None
object property '$userdata->user_nicename' of personal types {'user_meta', 'user'} is found.,,None
object property '$userdata->user_nicename' of personal types {'user_meta', 'user'} is found.,,None
object property '$userdata->user_nicename' of personal types {'user_meta', 'user'} is found.,,None
object property '$userdata->user_nicename' of personal types {'user_meta', 'user'} is found.,,None
RETRIEVAL call to get_option("scrib_opts") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_ID, "scrib_meditor_content", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta(absint($_GET["scrib_meditor_from"]), "scrib_meditor_content", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "scrib_meditor_content", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "scrib_meditor_content", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($_GET["posted"], "scrib_meditor_content", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("scrib_opts") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($post_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("scrib") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($postdata["ID"], "scrib_meditor_content", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_field("post_title", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post_field("post_title", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post_field("post_content", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post_field("post_content", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post_field("post_date", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post_field("post_date", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post_field("post_author", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post_field("post_author", $postdata["ID"]) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_option("default_comment_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("default_ping_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to dbDelta("
			CREATE TABLE "$this->harvest_table" (
			source_id varchar(85) NOT NULL,
			harvest_date date NOT NULL,
			imported tinyint(1) default \'0\',
			content longtext NOT NULL,
			enriched tinyint(1) default \'0\',
			PRIMARY KEY  (source_id),
			KEY imported (imported),
			KEY enriched (enriched)
			) "$charset_collate"
		"). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to get_option("blog_charset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_userdata($term->post_author) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_userdata(get_post($post_id)->post_author) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_post($post_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_user_by("slug", $val) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_userdata($term->post_author) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_post($post_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post($post_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("blog_charset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("widget_scriblio_facets") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
STORAGE call to update_option("scrib_opts", $this->options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_post_meta($post_id, "scrib_meditor_content", $record, TRUE) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to update_post_meta($post_id, "scrib_meditor_content", $record) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("scrib_opts", ["browseid" => absint($old["browse_id"]), "searchprompt" => "Books, movies, music", "facetfound" => 1000]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_insert_post($postdata). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($post_id, "scrib_meditor_content", $bibr) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to add_post_meta($post_id, "scrib_meditor_content", $bibr, TRUE) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to add_post_meta($post_id, "bsuite_post_icon", $the_icon, TRUE) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to update_post_meta($post_id, "bsuite_post_icon", $the_icon) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("scrib_categories", ["browse" => [absint($old["catalog_category_id"])], "hide" => [absint($old["catalog_category_id"])]]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("scrib_taxonomies", ["name" => $old["taxonomies"], "search" => array_keys($old["taxonomies"]), "related" => $old["taxonomies_for_related"], "suggest" => $old["taxonomies_for_suggest"]]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("scrib") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] Storage check is NONE 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['encryption', 'third_party'] 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? True 

No findings
