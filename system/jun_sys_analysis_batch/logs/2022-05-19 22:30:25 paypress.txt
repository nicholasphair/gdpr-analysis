Timeout in resolving values
Timeout in running neo4j query
Running Main.py on paypress

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:00.459437.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:00.945893.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 22 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.409787.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 1 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.548638.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 371 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:00.794626.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 0 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.646853.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.127871.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 182 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:03.038093.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 2615
Added 2039 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 2750
Added 135 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:01.175111.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/paypress/admin.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/paypress/notification.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/paypress/paypress.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/paypress/paypress_poll.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/paypress/widget.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/paypress/classes/PayPressPayment.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:00.631066.

22 PHP_REACHES edges created
1 REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
2592 PHP_REACHES edges created
135 PHP_REACHES edges created
2750 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 950 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.037211.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.985529.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 15 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.927862.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 6 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.151675.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.101185.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.197657.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.007266.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.038899.

21 PHP_REACHES edges created
21 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 16 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.115810.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
9 SQL operations to process.
SELECT * FROM $wpdbpaypress_notification WHERE status = '2'
SQL command (SELECT * FROM $wpdbpaypress_notification WHERE status = '2') cannot be parsed correct.
SELECT * FROM $wpdbpaypress_notification WHERE status = '2'
SQL command (SELECT * FROM $wpdbpaypress_notification WHERE status = '2') cannot be parsed correct.
SELECT * FROM $wpdbpaypress_notification WHERE transaction_id = '$_GET_transaction_id';
SQL command (SELECT * FROM $wpdbpaypress_notification WHERE transaction_id = '$_GET_transaction_id';) cannot be parsed correct.
DELETE FROM $wpdbpaypress_notification WHERE time <= NOW()-7200 AND status <> 2
SQL command (DELETE FROM $wpdbpaypress_notification WHERE time <= NOW()-7200 AND status <> 2) cannot be parsed correct.
DELETE FROM $wpdbpaypress_notification WHERE time <= NOW()-7200 AND status <> 2
SQL command (DELETE FROM $wpdbpaypress_notification WHERE time <= NOW()-7200 AND status <> 2) cannot be parsed correct.
CREATE TABLE $wpdbpaypress_notification (
	  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	  time DATETIME DEFAULT '0000-00-00 00:00:00' NOT NULL,
          code INT NOT NULL,
          paymenttype VARCHAR(10) NOT NULL,
	  transaction_id INT NOT NULL,
	  customer_key VARCHAR(40) NOT NULL,
          session_id VARCHAR(40) NOT NULL,
	  status TINYINT NOT NULL
    );
SQL command (CREATE TABLE $wpdbpaypress_notification ( id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, time DATETIME DEFAULT '0000-00-00 00:00:00' NOT NULL, code INT NOT NULL, paymenttype VARCHAR(10) NOT NULL, transaction_id INT NOT NULL, customer_key VARCHAR(40) NOT NULL, session_id VARCHAR(40) NOT NULL, status TINYINT NOT NULL );) cannot be parsed correct.
SELECT * FROM $wpdbpaypress_notification WHERE transaction_id = '$_POST_paypress_transaction_id' AND code = '$_POST_paypress_code' AND session_id = 'session_id()';
SQL command (SELECT * FROM $wpdbpaypress_notification WHERE transaction_id = '$_POST_paypress_transaction_id' AND code = '$_POST_paypress_code' AND session_id = 'session_id()';) cannot be parsed correct.
INSERT INTO $wpdbpaypress_notification (time,
        code, paymenttype, transaction_id, customer_key, session_id) VALUES 
        (NOW(), '$payment->getPaymentCode()_code', 'ppc', '$payment->getPaymentCode()_transaction_id',
            '$payment->getPaymentCode()_customer_key', 'session_id()');
SQL command (INSERT INTO $wpdbpaypress_notification (time, code, paymenttype, transaction_id, customer_key, session_id) VALUES (NOW(), '$payment->getPaymentCode()_code', 'ppc', '$payment->getPaymentCode()_transaction_id', '$payment->getPaymentCode()_customer_key', 'session_id()');) cannot be parsed correct.
SELECT * FROM $wpdbpaypress_notification WHERE
                transaction_id = '$_POST_paypress_transid' AND
                    code = '$_POST_paypress_code' AND session_id = 'session_id()' AND time >= NOW()-900;
SQL command (SELECT * FROM $wpdbpaypress_notification WHERE transaction_id = '$_POST_paypress_transid' AND code = '$_POST_paypress_code' AND session_id = 'session_id()' AND time >= NOW()-900;) cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [945, 1267, 2425, 2514, 2594, 2740, 2958, 3636, 3945]
Added 0 SQL nodes. 0 out of 9 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:04.736331.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'<p>substr($group->name, 4) - <a href=$_SERVER_PHP_SELF?page=paypress-groups&delete_group=htmlspecialchars("ppp_" . $_POST["paypress_group_name"])_term_id">Verwijder Groep</a><br/'' cannot be parsed correct.
HTML code '$'            <div id="post-body">
                <div id="post-body-content">
                    <div class="meta-box-sortables ui-sortable">
                    
                        <div class="postbox">
                            <h3 style="cursor: default;"><span style="cursor: default">$title</span></h3>
                            <div class="inside">'' cannot be parsed correct.
HTML code '$'            <div id="post-body">
                <div id="post-body-content">
                    <div class="meta-box-sortables ui-sortable">
                    
                        <div class="postbox">
                            <h3 style="cursor: default;"><span style="cursor: default">$title</span></h3>
                            <div class="inside">'' cannot be parsed correct.
HTML code '$'        <div class="postbox">
            <h3 style="cursor: default;"><span style="cursor: default;">$title</span></h3>
            <div class="inside">
                Voor ondersteuning met de PayPress-plugin
        gaat u naar <a href="http://www.paypress.nl/">www.paypress.nl</a>
            </div>
        </div>'' cannot be parsed correct.
HTML code '$'<div id=\'paypress-warning\' class=\'updated fade\'><p><strong>PayPress is bijna klaar om te gebruiken.</strong> sprintf(__("Je moet <a href=" . admin_url() . "admin.php?page=paypress-settings" . "">de plugin koppelen aan je PayPress-account</a> om de plugin te kunnen gebruiken"), "admin.php?page=paypress-settings")</p></div>'' cannot be parsed correct.
HTML code '$' - substr($_paypress_paymentgroup, 4) (get_post_meta($post_id, "_paypress_paymentgroup", true))'' cannot be parsed correct.
HTML code '$'<p style="color: red;">false</p>'' cannot be parsed correct.
HTML code '$'    <p>
        <input class="paypress_paid" type="checkbox" get_post_meta($post->ID, "_paypress_paidcontent", true) name="paypress_paidcontent" value="true" /> Betaalde Content
    </p>
    <p class="paypress_options">
        '' cannot be parsed correct.
HTML code '$'<option selected="selected" value="$term"substr($term->name, 4) (PayPerPost)</option>'' cannot be parsed correct.
HTML code '$'<option value=$term"substr($term->name, 4) (PayPerPost)</option>'' cannot be parsed correct.
HTML code '$'    <p class="paypress_options">
        Wat laat je vooraf zien?
        <br /><br />
        <select name="paypress_display_type">
            <option selected($paypress_display_type, "none", false) value="nothing">Niets</option>
            <option selected($paypress_display_type, "excerpt", false) value="excerpt">Samenvatting (Tot aan \'more\'-tag)</option>
            <option selected($paypress_display_type, "all", false) value="all">Alles (Donatie)</option>
        </select>
    </p>'' cannot be parsed correct.
HTML code '$'<p style="color: red;">$err</p>'' cannot be parsed correct.
HTML code '$'        <table class="form-table">
            <p>Om content te verkopen met PayPress moet je jouw PayPress-account
                koppelen aan deze WordPress website.</p>
                <p style="display: none">Heb je al een PayPress-account?</p>
                <p style="display: none">Koppel hieronder jouw PayPress-account door jouw e-mailadres en wachtwoord in te vullen. Klik daarna op âKoppel mijn PayPress-accountâ.</p>
            <tbody>
                <tr>
                <th scope="row">Koppeling met PayPress-account</th>
                <td>
                    <fieldset>
                        <legend class="screen-reader-text">Koppeling met PayPress-account</legend>
                    </fieldset>
                    <p class="paypress_account" >
                        Log in bij PayPress&nbsp;&nbsp;
                        <span class="description">Log in met je PayPress email-adres en wachtwoord om je unieke betaalcodes op te halen</span>
                    </p>
                    <p class="paypress_account" style="display: none;">
                        <input type="text" name="paypress_account_username" value="" />
                        <br/><span class="description">PayPress email-adres</span>
                        <br/>
                        <input type="password" name="paypress_account_password" value="" />
                        <br/><span class="description">PayPress wachtwoord<br /><a href="http://my.paypress.nl/wachtwoord-vergeten/">Ik ben mijn wachtwoord vergeten.</a></span>
                    </p>
                    <p class="paypress_account_verified" >
                        <img src=PAYPRESS_PLUGINURLimages/success.gif" />&nbsp;Gekoppeld met je PayPress-account.
                    </p>
                </td>
            </tr>
            </tbody>
        </table>
        <p>
        Om transacties plaats te laten vinden heb je een PayPress-account nodig.</p>
        <p style="display: none">Heb je deze nog niet?
        <a target="_blank" href="http://my.paypress.nl/registreer/">Registreer je dan hier voor een PayPress-account &raquo;</a>
        </p>
        <p class="submit">
            <input style="display: none" type="submit" name="paypress_my_account" id="submit" class="button-primary" value="Koppel mijn PayPress-account" />
            <input  type="submit" name="paypress_remove_account" id="submit" class="button-secondary" value="Ontkoppel mijn PayPress-account" />
        </p>'' cannot be parsed correct.
HTML code '$'        <form action="" name="paypress_settings" method="post">
            <table class="form-table">
                <tbody>
                <tr>
                    <th scope="row">Tekst voor de more-tag</th>
                    <td>
                        <input style="width: 300px;" type="text" name="paypress_more_text" value="" />
                        <br /><span class="description">Deze tekst wordt getoond i.p.v. een \'more\'-button. Je kunt HTML-code gebruiken.</span>
                    </td>
                </tr>
                <tr>
                    <th scope="row">Stijl van het PayPress-betaalscherm</th>
                    <td>
                        <textarea name="paypress_user_style" cols="40" rows="4">get_option("paypress_user_style")</textarea>
                        <br /><span class="description">
                             Het is mogelijk om de stijl van het PayPress-betaalscherm aan te passen met CSS.
                        </span>
                        <br />
                        <input type="submit" name="paypress_reset_style" value="Reset" />
                    </td>
                </tr>
            </table>
            <p class="submit">
                <input type="submit" name="paypress_save_settings" id="submit" class="button-primary" value="Instellingen Opslaan" />
            </p>
        </form>'' cannot be parsed correct.
HTML code '$'<p>Aantal betalingen: count($result)<br/>Laatste betaling: $wpdb->get_results($query)__time</p>'' cannot be parsed correct.
HTML code '$'<?xml version="1.0" encoding="utf-8"?>
<response>
    <status>Invalid Parameters</status>
    <type>No type</type>
</response>'' cannot be parsed correct.
HTML code '$'<li><a href=get_permalink($paidpost)"$paidpost</a></li>'' cannot be parsed correct.
HTML code '$'PAYPRESS_PLUGINURLpaypress_poll.php'' cannot be parsed correct.
HTML code '$'PAYPRESS_PLUGINURLpaypress_poll.php'' cannot be parsed correct.
HTML code '$'<li><a href=get_permalink($post->ID)"$post_id</a></li>'' cannot be parsed correct.
HTML code '$'count(get_post_meta($post->ID, "_paypress_transaction_number"))'' cannot be parsed correct.
HTML code '$'Fout bij toevoegen van groep.'' cannot be parsed correct.
HTML code '$'<p>Geen groepen.</p>'' cannot be parsed correct.
HTML code '$'</p>'' cannot be parsed correct.
HTML code '$'    <h4>Nieuwe Groep toevoegen</h4>
        <p>
            <form action="" method="post">Type: 
        </p>
        <p>
        &nbsp;&nbsp;Naam: <input type="text" name="paypress_group_name" />
        <input type="submit" name="submit" value="Toevoegen" />
        </form>
        </p>'' cannot be parsed correct.
HTML code '$'   <div class="wrap">
        <div id="poststuff" class="metabox-holder has-right-sidebar">'' cannot be parsed correct.
HTML code '$'   <div class="wrap">
        <div id="poststuff" class="metabox-holder has-right-sidebar">
            <div class="inner-sidebar" style="width: 280px;">'' cannot be parsed correct.
HTML code '$'            </div>'' cannot be parsed correct.
HTML code '$'                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        </div>'' cannot be parsed correct.
HTML code '$'Betaald'' cannot be parsed correct.
HTML code '$' - (PayPerPost)'' cannot be parsed correct.
HTML code '$'Gratis'' cannot be parsed correct.
HTML code '$'<p>Kon geen verbinding maken met PayPress, probeer het later nog eens.</p>'' cannot be parsed correct.
HTML code '$'Behoort tot Groep: <br /><br /><select name="paypress_paymentgroup">'' cannot be parsed correct.
HTML code '$'<option selected="selected" value="geengroep">Geen Groep</option>'' cannot be parsed correct.
HTML code '$'<option selected="selected" value="geengroepen">Geen Groepen</option>'' cannot be parsed correct.
HTML code '$'</select></p>'' cannot be parsed correct.
HTML code '$'<form action="" name="paypress_account_settings" method="post">'' cannot be parsed correct.
HTML code '$'</form>'' cannot be parsed correct.
HTML code '$'[accepted]'' cannot be parsed correct.
HTML code '$'[accepted]'' cannot be parsed correct.
HTML code '$'FALSE'' cannot be parsed correct.
HTML code '$'FALSE'' cannot be parsed correct.
HTML code '$'<h3 class="widget-title">PayPress</h3>'' cannot be parsed correct.
HTML code '$'<h4>U heeft betaald voor: </h4>'' cannot be parsed correct.
HTML code '$'<ul>'' cannot be parsed correct.
HTML code '$'</ul>'' cannot be parsed correct.
HTML code '$'<li id="paypress-paid-widget"><h4>U heeft ook toegang tot:</h4>'' cannot be parsed correct.
HTML code '$'<ul>'' cannot be parsed correct.
HTML code '$'</ul><br /></li>'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:06.063116.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.045610.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 0 do_action/apply_filters calls and 14 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:00.662167.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running FileProDetector
### Start running FrontBaseDetector
### Finish running DbaseDetector
### Start running HashDetector
### Finish running CubridDetector
### Start running IBMDb2Detector
### Finish running FirebirdInterBaseDetector
### Start running InformixDetector
### Finish running DbplusDetector
### Start running IngresDetector
### Finish running InformixDetector
### Start running maxdbDetector
### Finish running FrontBaseDetector
### Start running MongoDbDetector
### Finish running IngresDetector
### Start running MongoDetector
### Finish running MongoDetector
### Start running MsqlDetector
### Finish running IBMDb2Detector
### Start running MySQLDetector
### Finish running MongoDbDetector
### Start running MySQLiDetector
### Finish running MsqlDetector
### Start running Oci8Detector
### Finish running MySQLDetector
### Start running OpenSSLDetector
### Finish running Oci8Detector
### Start running ParadoxDetector
### Finish running ParadoxDetector
### Start running PasswordHashingDetector
### Finish running HashDetector
### Start running PhpCurlDetector
### Finish running PasswordHashingDetector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running ArrayElementDetector
### Start running PHPRetrievalDetector
### Finish running OpenSSLDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PHPIncludedDetector
### Start running PhpVarDetector
### Finish running PhpCurlDetector
### Start running PostgreSQLDetector
### Finish running PhpVarDetector
### Start running PropertyDetector
### Finish running PostgreSQLDetector
### Start running Sqlite3Detector
### Finish running PHPStorageDetector
### Start running SqliteDetector
### Finish running SqliteDetector
### Start running SqlServerDetector
### Finish running Sqlite3Detector
### Start running SybaseDetector
### Finish running SybaseDetector
### Start running TokyoTyrantDetector
### Finish running PropertyDetector
### Start running UserInputDetector
### Finish running TokyoTyrantDetector
### Start running VariableDetector
### Finish running maxdbDetector
### Start running WordpressHashingFnDetector
### Finish running SqlServerDetector
### Start running WordPressRemoteDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressRetrievalDetector
### Finish running WordPressRemoteDetector
### Start running WordPressStorageDetector
### Finish running MySQLiDetector
### Start running WP_UserDetector
### Finish running WP_UserDetector
### Start running GenericDatabaseUsageDetector
### Finish running UserInputDetector
### Start running GenericEncryptionDetector
### Finish running VariableDetector
### Start running DeletionDetector
### Finish running GenericDatabaseUsageDetector
### Start running UninstallDetector
### Finish running PHPRetrievalDetector
### Finish running GenericEncryptionDetector
### Finish running UninstallDetector
### Finish running DeletionDetector
### Finish running WordPressStorageDetector
### Finish running WordPressRetrievalDetector
### Finished running detectors
admin.php:93
  - Request variable '$_POST["paypress_account_username"]' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
admin.php:94
  - Request variable '$_POST["paypress_account_password"]' of personal types {'password'} is found.
  - Data types: password
admin.php:96
  - Request variable '$_POST["paypress_account_username"]' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
admin.php:97
  - Request variable '$_POST["paypress_account_password"]' of personal types {'password'} is found.
  - Data types: password 

notification.php:22
  - hash_hmac called with approved hash algorithm sha512.
notification.php:34
  - hash_hmac called with approved hash algorithm sha512. 

admin.php:99
  - RETRIEVAL call to file_get_contents(PAYPRESS_API_URL . "?type=retrieve-keys&merchant_code=&emailaddress="$username"&password="$password).
  - Data types: file
admin.php:115
  - RETRIEVAL call to file_get_contents(PAYPRESS_API_URL . "?type=retrieve-shared-secret&merchant_code=&emailaddress="$username"&password="$password).
  - Data types: file
admin.php:122
  - RETRIEVAL call to file_get_contents(PAYPRESS_API_URL . "?type=register-profile&merchant_code="$merchant_code"&url="$url).
  - Data types: file
admin.php:609
  - RETRIEVAL call to file_get_contents("http://www.paypress.nl/category/paypress-plugin/feed/rss").
  - Data types: file
classes/PayPressPayment.php:40
  - RETRIEVAL call to file_get_contents($url).
  - Data types: file 

admin.php:96
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
admin.php:99
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
admin.php:115
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
admin.php:137
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta 

admin.php:19
  - RETRIEVAL call to get_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin.php:20
  - RETRIEVAL call to get_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin.php:21
  - RETRIEVAL call to get_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin.php:22
  - RETRIEVAL call to get_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin.php:64
  - RETRIEVAL call to get_post_meta($post_id, "_paypress_paidcontent", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
admin.php:65
  - RETRIEVAL call to get_post_meta($post_id, "_paypress_paymentgroup", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
admin.php:66
  - RETRIEVAL call to get_post_meta($post_id, "_paypress_display_type", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
admin.php:95
  - RETRIEVAL call to get_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin.php:161
  - RETRIEVAL call to get_option("paypress_original_style") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin.php:174
  - RETRIEVAL call to get_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin.php:236
  - RETRIEVAL call to get_option("paypress_more_text") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin.php:242
  - RETRIEVAL call to get_option("paypress_user_style") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin.php:484
  - RETRIEVAL call to get_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin.php:485
  - RETRIEVAL call to get_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin.php:486
  - RETRIEVAL call to get_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin.php:487
  - RETRIEVAL call to get_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin.php:491
  - RETRIEVAL call to get_post_meta($post->ID, "_paypress_paidcontent", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
admin.php:492
  - RETRIEVAL call to get_post_meta($post->ID, "_paypress_paymentgroup", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
admin.php:493
  - RETRIEVAL call to get_post_meta($post->ID, "_paypress_display_type", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
notification.php:9
  - RETRIEVAL call to get_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
notification.php:10
  - RETRIEVAL call to get_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
notification.php:11
  - RETRIEVAL call to get_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
paypress.php:62
  - RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).
paypress.php:109
  - RETRIEVAL call to get_post_meta($post->ID, "_paypress_paidcontent", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
paypress.php:110
  - RETRIEVAL call to get_post_meta($post->ID, "_paypress_paymentgroup", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
paypress.php:111
  - RETRIEVAL call to get_post_meta($post->ID, "_paypress_display_type", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
paypress.php:125
  - RETRIEVAL call to get_post_meta($post->ID, "_paypress_transaction_number") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $key (string). Returns (mixed).
  - Data types: post_meta
paypress.php:163
  - RETRIEVAL call to get_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
paypress.php:164
  - RETRIEVAL call to get_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
paypress.php:165
  - RETRIEVAL call to get_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
paypress.php:166
  - RETRIEVAL call to get_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
paypress.php:208
  - RETRIEVAL call to get_option("paypress_more_text") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
paypress.php:223
  - RETRIEVAL call to get_option("paypress_user_style") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
paypress.php:224
  - RETRIEVAL call to get_option("paypress_user_style") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
paypress.php:226
  - RETRIEVAL call to get_option("paypress_original_style") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
paypress.php:231
  - RETRIEVAL call to get_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
paypress.php:232
  - RETRIEVAL call to get_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
paypress.php:233
  - RETRIEVAL call to get_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
paypress.php:234
  - RETRIEVAL call to get_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
paypress.php:294
  - RETRIEVAL call to get_post_meta($post->ID, "_paypress_transaction_number") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $key (string). Returns (mixed).
  - Data types: post_meta
paypress.php:299
  - RETRIEVAL call to get_post_meta($post->ID, "_paypress_transaction_number") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $key (string). Returns (mixed).
  - Data types: post_meta
widget.php:37
  - RETRIEVAL call to get_post($paidpost) alters data types {'wp_post', 'post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: wp_post, post, post_meta
widget.php:54
  - RETRIEVAL call to get_post($post_id) alters data types {'wp_post', 'post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: wp_post, post, post_meta
widget.php:56
  - RETRIEVAL call to get_post_meta($post->ID, "_paypress_paidcontent", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
widget.php:77
  - RETRIEVAL call to get_post_meta($post->ID, "_paypress_transaction_number") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $key (string). Returns (mixed).
  - Data types: post_meta 

admin.php:129
  - STORAGE call to update_option("paypress_merchantcode", $merchant_code) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin.php:130
  - STORAGE call to update_option("paypress_apikey", $api_key) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin.php:131
  - STORAGE call to update_option("paypress_sharedsecret", $shared_secret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin.php:132
  - STORAGE call to update_option("paypress_profilekey", $profile_key) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin.php:141
  - STORAGE call to delete_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin.php:147
  - STORAGE call to delete_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin.php:148
  - STORAGE call to delete_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin.php:149
  - STORAGE call to delete_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin.php:150
  - STORAGE call to delete_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin.php:155
  - STORAGE call to update_option("paypress_more_text", htmlspecialchars($_POST["paypress_more_text"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin.php:156
  - STORAGE call to update_option("paypress_user_style", $_POST["paypress_user_style"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin.php:161
  - STORAGE call to update_option("paypress_user_style", get_option("paypress_original_style")) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin.php:576
  - STORAGE call to update_post_meta($post_id, "_paypress_paidcontent", "true") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
admin.php:577
  - STORAGE call to update_post_meta($post_id, "_paypress_paymentgroup", $paymentgroup) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
admin.php:578
  - STORAGE call to update_post_meta($post_id, "_paypress_display_type", htmlspecialchars($_POST["paypress_display_type"])) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
admin.php:592
  - STORAGE call to update_post_meta($post_id, "_paypress_paidcontent", "false") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
admin.php:593
  - STORAGE call to update_post_meta($post_id, "_paypress_paymentgroup", $paymentgroup) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
admin.php:595
  - STORAGE call to update_post_meta($post_id, "_paypress_display_type", htmlspecialchars($_POST["paypress_display_type"])) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
admin.php:597
  - STORAGE call to update_post_meta($post_id, "_paypress_display_type", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
paypress.php:65
  - STORAGE call to add_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
paypress.php:66
  - STORAGE call to add_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
paypress.php:67
  - STORAGE call to add_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
paypress.php:68
  - STORAGE call to add_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
paypress.php:69
  - STORAGE call to add_option("paypress_allowed_post_types") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
paypress.php:73
  - STORAGE call to update_option("paypress_original_style", $payment_style) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
paypress.php:74
  - STORAGE call to update_option("paypress_user_style", $payment_style) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
paypress.php:127
  - STORAGE call to add_post_meta($post->ID, "_paypress_transaction_number", session_id()) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|false).
  - Data types: post_meta 

notification.php:22
  - CRYPTOGRAPHY call to hash_hmac("sha512", $transaction->code . "|" . $transaction->customer_key . "|" . "2", $pp_sharedSecret).
notification.php:34
  - CRYPTOGRAPHY call to hash_hmac("sha512", $transaction->code . "|" . $transaction->customer_key . "|" . "1", $pp_sharedSecret). 

admin.php:141
  - DELETION call to delete_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin.php:147
  - DELETION call to delete_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin.php:148
  - DELETION call to delete_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin.php:149
  - DELETION call to delete_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin.php:150
  - DELETION call to delete_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin.php:308
  - DELETION call to wp_delete_term($term_to_delete->term_id, "paypress_paid") alters data types {'term'}. Passed arguments: 0: $term (int), 1: $taxonomy (string). Returns (bool|int|WP_Error).
  - Data types: term 

By data type:
file
	PHPRetrievalDetector.file_get_contents($url) - {'file'}
	PHPRetrievalDetector.file_get_contents(PAYPRESS_API_URL . "?type=retrieve-shared-secret&merchant_code=&emailaddress="$username"&password="$password) - {'file'}
	PHPRetrievalDetector.file_get_contents(PAYPRESS_API_URL . "?type=retrieve-keys&merchant_code=&emailaddress="$username"&password="$password) - {'file'}
	PHPRetrievalDetector.file_get_contents("http://www.paypress.nl/category/paypress-plugin/feed/rss") - {'file'}
	PHPRetrievalDetector.file_get_contents(PAYPRESS_API_URL . "?type=register-profile&merchant_code="$merchant_code"&url="$url) - {'file'}
none
	GenericEncryptionDetector.hash_hmac("sha512", $transaction->code . "|" . $transaction->customer_key . "|" . "1", $pp_sharedSecret) - set()
	WordPressRetrievalDetector.dbDelta($sql) - set()
	HashDetector.(unknown) - set()
	HashDetector.(unknown) - set()
	GenericEncryptionDetector.hash_hmac("sha512", $transaction->code . "|" . $transaction->customer_key . "|" . "2", $pp_sharedSecret) - set()
option
	WordPressRetrievalDetector.get_option("paypress_profilekey") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_apikey") - {'option'}
	WordPressStorageDetector.update_option("paypress_user_style", get_option("paypress_original_style")) - {'option'}
	DeletionDetector.delete_option("paypress_profilekey") - {'option'}
	WordPressStorageDetector.add_option("paypress_merchantcode") - {'option'}
	DeletionDetector.delete_option("paypress_apikey") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_user_style") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_original_style") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_more_text") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_sharedsecret") - {'option'}
	WordPressStorageDetector.delete_option("paypress_apikey") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_apikey") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_apikey") - {'option'}
	WordPressStorageDetector.add_option("paypress_apikey") - {'option'}
	WordPressStorageDetector.delete_option("paypress_sharedsecret") - {'option'}
	WordPressStorageDetector.update_option("paypress_original_style", $payment_style) - {'option'}
	WordPressStorageDetector.delete_option("paypress_profilekey") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_sharedsecret") - {'option'}
	WordPressStorageDetector.update_option("paypress_apikey", $api_key) - {'option'}
	WordPressStorageDetector.add_option("paypress_sharedsecret") - {'option'}
	WordPressStorageDetector.update_option("paypress_profilekey", $profile_key) - {'option'}
	WordPressRetrievalDetector.get_option("paypress_profilekey") - {'option'}
	WordPressStorageDetector.update_option("paypress_more_text", htmlspecialchars($_POST["paypress_more_text"])) - {'option'}
	WordPressRetrievalDetector.get_option("paypress_merchantcode") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_sharedsecret") - {'option'}
	WordPressStorageDetector.update_option("paypress_user_style", $_POST["paypress_user_style"]) - {'option'}
	WordPressStorageDetector.update_option("paypress_user_style", $payment_style) - {'option'}
	WordPressRetrievalDetector.get_option("paypress_profilekey") - {'option'}
	WordPressStorageDetector.add_option("paypress_allowed_post_types") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_merchantcode") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_merchantcode") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_more_text") - {'option'}
	DeletionDetector.delete_option("paypress_profilekey") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_original_style") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_sharedsecret") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_apikey") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_merchantcode") - {'option'}
	WordPressStorageDetector.delete_option("paypress_merchantcode") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_profilekey") - {'option'}
	WordPressStorageDetector.delete_option("paypress_profilekey") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_merchantcode") - {'option'}
	DeletionDetector.delete_option("paypress_merchantcode") - {'option'}
	WordPressStorageDetector.update_option("paypress_sharedsecret", $shared_secret) - {'option'}
	WordPressStorageDetector.update_option("paypress_merchantcode", $merchant_code) - {'option'}
	WordPressStorageDetector.add_option("paypress_profilekey") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_profilekey") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_profilekey") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_sharedsecret") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_user_style") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_user_style") - {'option'}
	DeletionDetector.delete_option("paypress_sharedsecret") - {'option'}
	WordPressRetrievalDetector.get_option("paypress_apikey") - {'option'}
password
	ArrayElementDetector.(unknown) - {'password'}
	ArrayElementDetector.(unknown) - {'password'}
post
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post', 'post_meta'}
	WordPressRetrievalDetector.get_post($paidpost) - {'wp_post', 'post', 'post_meta'}
post_meta
	WordPressStorageDetector.update_post_meta($post_id, "_paypress_paidcontent", "false") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_paypress_paidcontent", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_paypress_display_type", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_paypress_paidcontent", true) - {'post_meta'}
	WordPressStorageDetector.add_post_meta($post->ID, "_paypress_transaction_number", session_id()) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_paypress_paymentgroup", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_paypress_display_type", htmlspecialchars($_POST["paypress_display_type"])) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_paypress_paidcontent", "true") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_paypress_paymentgroup", $paymentgroup) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_paypress_transaction_number") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_paypress_transaction_number") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_paypress_display_type", htmlspecialchars($_POST["paypress_display_type"])) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_paypress_paidcontent", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_paypress_paymentgroup", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_paypress_paymentgroup", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_paypress_display_type", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_paypress_paymentgroup", $paymentgroup) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_paypress_display_type", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_paypress_transaction_number") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_paypress_paidcontent", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_paypress_display_type", "") - {'post_meta'}
	WordPressRetrievalDetector.get_post($paidpost) - {'wp_post', 'post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_paypress_transaction_number") - {'post_meta'}
term
	DeletionDetector.wp_delete_term($term_to_delete->term_id, "paypress_paid") - {'term'}
user
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	ArrayElementDetector.(unknown) - {'user', 'user_meta'}
	ArrayElementDetector.(unknown) - {'user', 'user_meta'}
user_meta
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	ArrayElementDetector.(unknown) - {'user', 'user_meta'}
	ArrayElementDetector.(unknown) - {'user', 'user_meta'}
wp_post
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post', 'post_meta'}
	WordPressRetrievalDetector.get_post($paidpost) - {'wp_post', 'post', 'post_meta'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:12.891399.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 660 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.566880.

660 STORE_REACHES edges created
660 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 245 nodes as PERSONAL
In total, tainted 245 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
Tainted 4 nodes as ENCRYPTED
In total, tainted 4 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:03.869384.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:00:48.176586!
Request variable '$_POST["paypress_account_username"]' of personal types {'user', 'user_meta'} is found.,,None
Request variable '$_POST["paypress_account_password"]' of personal types {'password'} is found.,,None
Request variable '$_POST["paypress_account_username"]' of personal types {'user', 'user_meta'} is found.,,None
Request variable '$_POST["paypress_account_password"]' of personal types {'password'} is found.,,None
DELETION call to delete_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to wp_delete_term($term_to_delete->term_id, "paypress_paid") alters data types {'term'}. Passed arguments: 0: $term (int), 1: $taxonomy (string). Returns (bool|int|WP_Error).,None,None
CRYPTOGRAPHY call to hash_hmac("sha512", $transaction->code . "|" . $transaction->customer_key . "|" . "2", $pp_sharedSecret).,None,None
CRYPTOGRAPHY call to hash_hmac("sha512", $transaction->code . "|" . $transaction->customer_key . "|" . "1", $pp_sharedSecret).,None,None
hash_hmac called with approved hash algorithm sha512.,sha512,None
hash_hmac called with approved hash algorithm sha512.,sha512,None
RETRIEVAL call to file_get_contents(PAYPRESS_API_URL . "?type=retrieve-shared-secret&merchant_code=&emailaddress="$username"&password="$password).,None,None
RETRIEVAL call to file_get_contents(PAYPRESS_API_URL . "?type=register-profile&merchant_code="$merchant_code"&url="$url).,None,None
RETRIEVAL call to file_get_contents("http://www.paypress.nl/category/paypress-plugin/feed/rss").,None,None
RETRIEVAL call to file_get_contents(PAYPRESS_API_URL . "?type=retrieve-keys&merchant_code=&emailaddress="$username"&password="$password).,None,None
RETRIEVAL call to file_get_contents($url).,None,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
RETRIEVAL call to get_option("paypress_original_style") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_more_text") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_user_style") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_paypress_paidcontent", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_paypress_paymentgroup", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_paypress_display_type", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_paypress_paidcontent", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_paypress_paymentgroup", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_paypress_display_type", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_paypress_paidcontent", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_paypress_paymentgroup", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_paypress_display_type", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_paypress_transaction_number") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_more_text") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_user_style") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_user_style") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_original_style") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_paypress_transaction_number") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_paypress_transaction_number") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to get_post($paidpost) alters data types {'wp_post', 'post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post($post_id) alters data types {'wp_post', 'post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_paypress_paidcontent", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_paypress_transaction_number") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $key (string). Returns (mixed).,None,None
STORAGE call to update_option("paypress_merchantcode", $merchant_code) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("paypress_apikey", $api_key) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("paypress_sharedsecret", $shared_secret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("paypress_profilekey", $profile_key) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("paypress_more_text", htmlspecialchars($_POST["paypress_more_text"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("paypress_user_style", $_POST["paypress_user_style"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("paypress_user_style", get_option("paypress_original_style")) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_post_meta($post_id, "_paypress_paidcontent", "true") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_paypress_paymentgroup", $paymentgroup) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_paypress_display_type", htmlspecialchars($_POST["paypress_display_type"])) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_paypress_paidcontent", "false") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_paypress_paymentgroup", $paymentgroup) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_paypress_display_type", htmlspecialchars($_POST["paypress_display_type"])) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_paypress_display_type", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to add_post_meta($post->ID, "_paypress_transaction_number", session_id()) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|false).,None,None
STORAGE call to add_option("paypress_merchantcode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_option("paypress_apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_option("paypress_sharedsecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_option("paypress_profilekey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_option("paypress_allowed_post_types") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("paypress_original_style", $payment_style) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("paypress_user_style", $payment_style) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['user', 'user_meta', 'password']) stored through WordPress function "update_option("paypress_user_style", get_option("paypress_original_style"))", found in file admin.php at line 161. 

[has_storage] PII of types (['user', 'user_meta', 'password']) stored through WordPress function "update_option("paypress_apikey", $api_key)", found in file admin.php at line 130. 

[has_storage] PII of types (['user', 'user_meta', 'password']) stored through WordPress function "update_option("paypress_profilekey", $profile_key)", found in file admin.php at line 132. 

[has_storage] PII of types (['user', 'user_meta', 'password']) stored through WordPress function "update_option("paypress_sharedsecret", $shared_secret)", found in file admin.php at line 131. 

[has_storage] PII of types (['user', 'user_meta', 'password']) stored through WordPress function "update_option("paypress_merchantcode", $merchant_code)", found in file admin.php at line 129. 

[has_storage] Storage check is WP 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_user_style", get_option("paypress_original_style")) has deletion method delete_option("paypress_profilekey"). Storage method found in file admin.php at line 161. Deletion method found in file admin.php at line 141. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_user_style", get_option("paypress_original_style")) has deletion method delete_option("paypress_profilekey"). Storage method found in file admin.php at line 161. Deletion method found in file admin.php at line 147. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_user_style", get_option("paypress_original_style")) has deletion method delete_option("paypress_apikey"). Storage method found in file admin.php at line 161. Deletion method found in file admin.php at line 148. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_user_style", get_option("paypress_original_style")) has deletion method delete_option("paypress_sharedsecret"). Storage method found in file admin.php at line 161. Deletion method found in file admin.php at line 149. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_user_style", get_option("paypress_original_style")) has deletion method delete_option("paypress_merchantcode"). Storage method found in file admin.php at line 161. Deletion method found in file admin.php at line 150. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_apikey", $api_key) has deletion method delete_option("paypress_profilekey"). Storage method found in file admin.php at line 130. Deletion method found in file admin.php at line 141. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_apikey", $api_key) has deletion method delete_option("paypress_profilekey"). Storage method found in file admin.php at line 130. Deletion method found in file admin.php at line 147. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_apikey", $api_key) has deletion method delete_option("paypress_apikey"). Storage method found in file admin.php at line 130. Deletion method found in file admin.php at line 148. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_apikey", $api_key) has deletion method delete_option("paypress_sharedsecret"). Storage method found in file admin.php at line 130. Deletion method found in file admin.php at line 149. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_apikey", $api_key) has deletion method delete_option("paypress_merchantcode"). Storage method found in file admin.php at line 130. Deletion method found in file admin.php at line 150. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_profilekey", $profile_key) has deletion method delete_option("paypress_profilekey"). Storage method found in file admin.php at line 132. Deletion method found in file admin.php at line 141. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_profilekey", $profile_key) has deletion method delete_option("paypress_profilekey"). Storage method found in file admin.php at line 132. Deletion method found in file admin.php at line 147. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_profilekey", $profile_key) has deletion method delete_option("paypress_apikey"). Storage method found in file admin.php at line 132. Deletion method found in file admin.php at line 148. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_profilekey", $profile_key) has deletion method delete_option("paypress_sharedsecret"). Storage method found in file admin.php at line 132. Deletion method found in file admin.php at line 149. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_profilekey", $profile_key) has deletion method delete_option("paypress_merchantcode"). Storage method found in file admin.php at line 132. Deletion method found in file admin.php at line 150. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_sharedsecret", $shared_secret) has deletion method delete_option("paypress_profilekey"). Storage method found in file admin.php at line 131. Deletion method found in file admin.php at line 141. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_sharedsecret", $shared_secret) has deletion method delete_option("paypress_profilekey"). Storage method found in file admin.php at line 131. Deletion method found in file admin.php at line 147. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_sharedsecret", $shared_secret) has deletion method delete_option("paypress_apikey"). Storage method found in file admin.php at line 131. Deletion method found in file admin.php at line 148. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_sharedsecret", $shared_secret) has deletion method delete_option("paypress_sharedsecret"). Storage method found in file admin.php at line 131. Deletion method found in file admin.php at line 149. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_sharedsecret", $shared_secret) has deletion method delete_option("paypress_merchantcode"). Storage method found in file admin.php at line 131. Deletion method found in file admin.php at line 150. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_merchantcode", $merchant_code) has deletion method delete_option("paypress_profilekey"). Storage method found in file admin.php at line 129. Deletion method found in file admin.php at line 141. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_merchantcode", $merchant_code) has deletion method delete_option("paypress_profilekey"). Storage method found in file admin.php at line 129. Deletion method found in file admin.php at line 147. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_merchantcode", $merchant_code) has deletion method delete_option("paypress_apikey"). Storage method found in file admin.php at line 129. Deletion method found in file admin.php at line 148. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_merchantcode", $merchant_code) has deletion method delete_option("paypress_sharedsecret"). Storage method found in file admin.php at line 129. Deletion method found in file admin.php at line 149. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("paypress_merchantcode", $merchant_code) has deletion method delete_option("paypress_merchantcode"). Storage method found in file admin.php at line 129. Deletion method found in file admin.php at line 150. 

[Art.17, Right to erasure] Deletion access is NONE_BUT_NOT_REQUIRED 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 746. Found in file admin.php at line 161 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 615. Found in file admin.php at line 130 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 629. Found in file admin.php at line 132 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 622. Found in file admin.php at line 131 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 608. Found in file admin.php at line 129 

[Art.15, Right to access] Data access is NONE_BUT_NOT_REQUIRED 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? False 

[main] Is access in violation? False 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? True 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        

##################
### Fix Report ###
##################

############################
# Data Deletion Fix Report #
############################

This report suggests fixes to comply with the GDPR Art. 17, Right to erasure (https://gdpr-info.eu/art-17-gdpr/). The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/adding-the-personal-data-eraser-to-your-plugin/ for more details.

1) Implement a function that deletes all the user data collected in the plugin. Sample code:


/**
* Removes all collected data of a user.
*
* @param string $email_address   email address to manipulate
* @param int    $page            pagination
*
* @return array
*/
function paypress_remove_data( $email_address, $page = 1 ) {
    
    $page = (int) $page;


    //TODO: Delete the user data that was stored using Wordpress functions

    //Below is the sample code for deleting user meta and may need to be modified to suit the plugin.
    $user_id = get_user_by('email', $email_address)
    $key = 'email' //Sample user meta key
    if ( $customer->user_id > 0 ) {
        //Delete user meta data by $key
        delete_user_meta( $user_id, $key );
    }
        



    // Tell core if we have more data to delete still
    $done = true;
    return array(
        'items_removed'  => $items_removed, // true if collected data of a user is being deleted
        'items_retained' => $items_retained, // true if certain data needs to be retained
        'messages'       => sprintf( __( 'Data of user with email %s successfully deleted.', 'paypress' ), $email_address ), // Put messages for data removal
        'done'           => $done, // true if all the removal processes are done (all data of the user is removed)
    );
}
        

2) Hook the deletion function to the Wordpress's Personal Data Removal tool


/**
* Registers all data erasers.
*
* @param array $exporters
*
* @return mixed
*/
function paypress_register_privacy_erasers( $erasers ) {
    $erasers['my-plugin-slug'] = array(
        'eraser_friendly_name' => __( '<eraser name>', 'paypress' ),
        'callback'             => 'paypress_remove_data',
    );
    return $erasers;
}
        

add_filter( 'wp_privacy_personal_data_erasers', 'paypress_register_privacy_erasers' );
        

        

#############################
# Privacy Policy Fix Report #
#############################

This report suggests fixes to comply with the GDPR Art. 13 (https://gdpr-info.eu/art-13-gdpr/) through including a privacy notice. The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/suggesting-text-for-the-site-privacy-policy/ for more details.

1) Implement a function that includes the privacy policy for the plugin and provide it to wordpress through wp_add_privacy_policy_content(). Sample code:


/**
* Adds a privacy policy statement.
*/
function paypress_add_privacy_policy_content() {
    if ( ! function_exists( 'wp_add_privacy_policy_content' ) ) {
        return;
    }
    //TODO: modify the content below to include the privacy policy for the plugin.
    $content = '<p class="privacy-policy-tutorial">' . __( 'Some introductory content for the suggested text.', 'paypress' ) . '</p>'
            . '<strong class="privacy-policy-tutorial">' . __( 'Suggested Text:', 'paypress' ) . '</strong> '
            . sprintf(
                __( 'When you leave a comment on this site, we send your name, email address, IP address and comment text to example.com. Example.com does not retain your personal data. The example.com privacy policy is <a href="%1$s" target="_blank">here</a>.', 'paypress' ),
                'https://example.com/privacy-policy'
            );
    wp_add_privacy_policy_content( 'paypress', wp_kses_post( wpautop( $content, false ) ) );
}
        

2) Hook the privacy policy function to the Wordpress's admin initialization action.


add_action( 'admin_init', 'paypress_add_privacy_policy_content' );
        

        


Disclaimer: The sample code provided above is only for reference and does not guarantee GDPR compliance. The recommended list of data to delete/export may not be comprehensive. 
        
Done.
