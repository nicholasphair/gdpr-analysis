Timeout in resolving values
Timeout in running neo4j query
Running Main.py on login-with-azure

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:02.826031.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:01.685142.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 48 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.522977.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 2 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.751629.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 1217 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:01.134653.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 43 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:01.019577.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.135433.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 583 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:21.322820.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 9694
Added 7801 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 57917
Added 48223 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:05.479457.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/class-customer.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/class-mo-oauth-widget.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/constants.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/mo_oauth_settings.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/pointers.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/uninstall.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/class-mo-oauth-client-admin.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/index.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/class-mo-oauth-client-admin-menu.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/class-mo-oauth-client-admin-utils.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/account/class-mo-oauth-client-admin-account.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/account/partials/register.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/account/partials/verify-otp.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/account/partials/verify-password.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/addons/class-mo-oauth-client-addons.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/apps/class-mo-oauth-client-apps.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/apps/partials/addapp.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/apps/partials/app-list.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/apps/partials/attr-role-mapping.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/apps/partials/customization.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/apps/partials/defaultapps.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/apps/partials/grant-settings.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/apps/partials/sign-in-settings.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/apps/partials/updateapp.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/demo/class-mo-oauth-client-demo.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/faq/class-mo-oauth-client-faq.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/guides/class-mo-oauth-client-attribute-mapping.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/guides/class-mo-oauth-client-guides.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/licensing/class-mo-oauth-client-license.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/reports/class-mo-oauth-client-reports.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/admin/partials/support/class-mo-oauth-client-support.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/handler/oauth_handler.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/includes/class-mo-oauth-client-loader.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/includes/class-mo-oauth-client.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/login-with-azure/views/feedback_form.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:03.164388.

48 PHP_REACHES edges created
2 REACHES edges created
1000 PHP_REACHES edges created
1217 PHP_REACHES edges created
43 CALLS edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
8384 PHP_REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
12000 PHP_REACHES edges created
13000 PHP_REACHES edges created
14000 PHP_REACHES edges created
15000 PHP_REACHES edges created
16000 PHP_REACHES edges created
17000 PHP_REACHES edges created
18000 PHP_REACHES edges created
19000 PHP_REACHES edges created
20000 PHP_REACHES edges created
21000 PHP_REACHES edges created
22000 PHP_REACHES edges created
23000 PHP_REACHES edges created
24000 PHP_REACHES edges created
25000 PHP_REACHES edges created
26000 PHP_REACHES edges created
27000 PHP_REACHES edges created
28000 PHP_REACHES edges created
29000 PHP_REACHES edges created
30000 PHP_REACHES edges created
31000 PHP_REACHES edges created
32000 PHP_REACHES edges created
33000 PHP_REACHES edges created
34000 PHP_REACHES edges created
35000 PHP_REACHES edges created
36000 PHP_REACHES edges created
37000 PHP_REACHES edges created
38000 PHP_REACHES edges created
39000 PHP_REACHES edges created
40000 PHP_REACHES edges created
41000 PHP_REACHES edges created
42000 PHP_REACHES edges created
43000 PHP_REACHES edges created
44000 PHP_REACHES edges created
45000 PHP_REACHES edges created
46000 PHP_REACHES edges created
47000 PHP_REACHES edges created
48000 PHP_REACHES edges created
48223 PHP_REACHES edges created
57917 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 3716 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.249740.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 3 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:02.472595.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 141 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:05.792761.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 128 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.194795.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.370772.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.949066.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.027337.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.035676.

3 CALLS edges created
269 PHP_REACHES edges created
272 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 243 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.135844.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
No SQL nodes to process.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:00.265720.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'$_SERVER_SERVER_NAME'' cannot be parsed correct.
HTML code '$'wp_get_current_user()'' cannot be parsed correct.
HTML code '$'wp_get_current_user()'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_phone")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_customer_key")'' cannot be parsed correct.
HTML code '$'add_query_arg(["tab" => "licensing"], htmlentities($_SERVER["REQUEST_URI"]))'' cannot be parsed correct.
HTML code '$'plugins_url($addon["img"], )'' cannot be parsed correct.
HTML code '$'$value_link'' cannot be parsed correct.
HTML code '$'$value_title'' cannot be parsed correct.
HTML code '$'$value_desc'' cannot be parsed correct.
HTML code '$'
                                    <td align="right"><a href="admin.php?page=mo_oauth_settings&tab=config&appId=sanitize_text_field($_GET["appId"])"><div id=\'mo_oauth_config_guide\' style="display:inline;background-color:#0085ba;color:#fff;padding:4px 8px;border-radius:4px">Hide instructions ^</div></a></td> '' cannot be parsed correct.
HTML code '$'
                                    <td align="right"><a href="admin.php?page=mo_oauth_settings&tab=config&action=instructions&appId=sanitize_text_field($_GET["appId"])"><div id=\'mo_oauth_config_guide\' style="display:inline;background-color:#0085ba;color:#fff;padding:4px 8px;border-radius:4px">How to Configure?</div></a></td>
                                    '' cannot be parsed correct.
HTML code '$'sanitize_text_field($_GET["appId"])'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_type'' cannot be parsed correct.
HTML code '$'<hr>

			<h3>I did not recieve any email with OTP . What should I do ?</h3>
			<form id="mo_oauth_register_with_phone_form" method="post" action="">
				<?php wp_nonce_field("mo_oauth_register_with_phone_form","mo_oauth_register_with_phone_form_field"); ?>
				<input type="hidden" name="option" value="mo_oauth_register_with_phone_option" />
				If you cannot see the email from miniOrange in your mails, please check your <b>SPAM</b> folder. If you don\'t see an email even in the SPAM folder, verify your identity with our alternate method.
				<br><br>
				<b>Enter your valid phone number here and verify your identity using one time passcode sent to your phone.</b><br><br>
				<input class="mo_oauth_table_textbox" type="tel" id="phone_contact" style="width:40%;"
				pattern="[\+]\d{11,14}|[\+]\d{1,4}([\s]{0,1})(\d{0}|\d{9,10})" class="mo_oauth_table_textbox" name="phone"
				title="Phone with country code eg. +1xxxxxxxxxx" required
				placeholder="Phone with country code eg. +1xxxxxxxxxx"
				value="get_option("mo_oauth_admin_phone")" />
				<br /><br /'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'mo_oauth_is_customer_registered()'' cannot be parsed correct.
HTML code '$'add_query_arg(["tab" => "account"], htmlentities($_SERVER["REQUEST_URI"]))'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/login'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_userinfo'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_label'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_scope'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_discovery'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_label'' cannot be parsed correct.
HTML code '$'Ex. mo_oauth_client_get_app($currentAppId)_domain'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_label'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_tenant'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_label'' cannot be parsed correct.
HTML code '$'Ex. mo_oauth_client_get_app($currentAppId)_policy'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_label'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_scope'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_authorize'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_token'' cannot be parsed correct.
HTML code '$'MO_OAUTH_ADMIN_MENU'' cannot be parsed correct.
HTML code '$'null'' cannot be parsed correct.
HTML code '$'$key'' cannot be parsed correct.
HTML code '$'<option value=\'$value\''' cannot be parsed correct.
HTML code '$' >$value</option>'' cannot be parsed correct.
HTML code '$'get_option("mo_attr_option")'' cannot be parsed correct.
HTML code '$'null_appIdother'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'null_apptype'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'
						<td align="right"><a href="admin.php?page=mo_oauth_settings&tab=config&action=delete&app=$appname"><div id=\'mo_oauth_config_guide\' style="display:inline;background-color:#0085ba;color:#fff;padding:4px 8px;border-radius:4px">Delete App</div></a></td>
						'' cannot be parsed correct.
HTML code '$'$app_appIdother'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'null_apptype'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$app_redirecturi'' cannot be parsed correct.
HTML code '$'$app_clientid'' cannot be parsed correct.
HTML code '$'null_clientsecret'' cannot be parsed correct.
HTML code '$'null_scope'' cannot be parsed correct.
HTML code '$'null_discovery'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'null_domain'' cannot be parsed correct.
HTML code '$'<i class="fa fa-thumbs-up" style="color:#0080007d; font-size: 30px;"></i>'' cannot be parsed correct.
HTML code '$'<i class="fa fa-thumbs-down" style="color:#ff000085; font-size: 30px;"></i>'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$app_tenant'' cannot be parsed correct.
HTML code '$'<i class="fa fa-thumbs-up" style="color:#0080007d; font-size: 30px;"></i>'' cannot be parsed correct.
HTML code '$'<i class="fa fa-thumbs-down" style="color:#ff000085; font-size: 30px;"></i>'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'null_policy'' cannot be parsed correct.
HTML code '$'<i class="fa fa-thumbs-up" style="color:#0080007d; font-size: 30px;"></i>'' cannot be parsed correct.
HTML code '$'<i class="fa fa-thumbs-down" style="color:#ff000085; font-size: 30px;"></i>'' cannot be parsed correct.
HTML code '$'null_authorizeurl'' cannot be parsed correct.
HTML code '$'$app_accesstokenurl'' cannot be parsed correct.
HTML code '$'$value_username_attr'' cannot be parsed correct.
HTML code '$'null_email_attr'' cannot be parsed correct.
HTML code '$'$text_attr'' cannot be parsed correct.
HTML code '$'null_username_attr'' cannot be parsed correct.
HTML code '$'null_email_attr'' cannot be parsed correct.
HTML code '$'null'' cannot be parsed correct.
HTML code '$'<li data-appid=$appId"><aid=vip-default-app href="#"><img class="mo_oauth_client_default_app_icon" src="plugins_url("../images/" . $application->image, )"><br$application</a></li>'' cannot be parsed correct.
HTML code '$'<li data-appid=$appId"><a href="#"><img class="mo_oauth_client_default_app_icon" src="plugins_url("../images/" . $application->image, )"><br$application</a></li>'' cannot be parsed correct.
HTML code '$'dirname(plugin_dir_url())'' cannot be parsed correct.
HTML code '$'null_resourceownerdetailsurl'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'$app_apptype'' cannot be parsed correct.
HTML code '$'<br><strong>Instructions to configure mo_oauth_client_get_app($currentapp["apptype"])_label:</strong><ol>'' cannot be parsed correct.
HTML code '$'<br><strong>Instructions to configure mo_oauth_client_get_app("other")_label as OAuth Server:</strong><ol>'' cannot be parsed correct.
HTML code '$'<li>Please follow the instruction given in Step by Step guide to get your Client ID, Client Secret and other necessary information. <a href=mo_oauth_client_get_app("other")_guide" target="_blank">Click here</a> to get the step by step guide to configure <i>explode("App", $app->label)_0</i> as OAuth/OpenID Connect server.</li>'' cannot be parsed correct.
HTML code '$'
			<li>Configure your application as a OAuth Provider.</li>
			<li>Provide <b>Configure OAuth->Redirect/Callback URI</b> for your OAuth server Redirect URI.<br/><b>Note : </b>Make sure, you have copied the exact callback url including http/https</li>
			<li>Choose the scopes as per your application/OAuth Server specification(if provided) and enter the same on the <a href="admin.php?page=mo_oauth_settings&appIdmo_oauth_client_get_app($appname)_appId" target="_blank"><b>MO_OAUTH_ADMIN_MENU -> Configure OAuth</b></a> page.</li>
			<li>Enter your <i>Client ID</i> and <i>Client Secret</i> provided by your OAuth Provider, on <a href="admin.php?page=mo_oauth_settings&appIdmo_oauth_client_get_app("other")_appId" target="_blank"><b>Configure OAuth</b></a> page.</li>'' cannot be parsed correct.
HTML code '$'<li>Once done with configuration, click on <b>Save Settings</b>. Click on <b>Test Configuration</b> button.</li><li> On successful configuration, you will get a table with attributes names and values.<br>For example:<br><img src=plugins_url("./images/testconfig.png", )" /></li><li>To proceed with SSO, you need to map attributes under Attribute Mapping section. Map attribute with the attribute name provided under Test Configuration table. <a href="https://faq.miniorange.com/knowledgebase/map-roles-usergroup/" target="_blank">Click here</a> to know more about how to configure attributes.</li><li>Go to <b>Appearance->Widgets</b>. Among the available widgets you will find <b>MO_OAUTH_ADMIN_MENU</b>, drag it to the widget area where you want it to appear.</li><li>To test the SSO, open the page where you have saved the widget in private window. On successful SSO, user will automatically get created in <a href="users.php" target="_blank">WordPress Users list</a>.</li></ol>'' cannot be parsed correct.
HTML code '$'MO_OAUTH_PLUGIN_NAME'' cannot be parsed correct.
HTML code '$'add_query_arg(["tab" => "licensing"], htmlentities($_SERVER["REQUEST_URI"]))'' cannot be parsed correct.
HTML code '$'&action=update&app=array_keys(get_option("mo_oauth_apps_list"))_0'' cannot be parsed correct.
HTML code '$'strtotime("Dec 31, 2020 23:59:59")'' cannot be parsed correct.
HTML code '$'time()'' cannot be parsed correct.
HTML code '$'add_query_arg(["tab" => "config"], htmlentities($_SERVER["REQUEST_URI"]))'' cannot be parsed correct.
HTML code '$'width: 350px; height:35px;'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'width: 350px; height:35px;'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'mo_oauth_is_customer_registered()'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/login'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/initializepayment'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/login'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/viewlicensekeys'' cannot be parsed correct.
HTML code '$'add_query_arg(["tab" => "account"], htmlentities($_SERVER["REQUEST_URI"]))'' cannot be parsed correct.
HTML code '$'add_query_arg(["tab" => "faq"], $_SERVER["REQUEST_URI"])'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_phone")'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'<a style="text-decoration:none" href="javascript:void(0)" onClick="moOAuthLoginNew(\'$key\');"><div class="mo_oauth_login_button"><i class="$this->mo_oauth_client_login_button_logo($app["appId"]) mo_oauth_login_button_icon"></i><h3 class="mo_oauth_login_button_text">ucwords($key)</h3></div></a>'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'$args_before_widget'' cannot be parsed correct.
HTML code '$'$args_before_title$wid_title$args_after_title'' cannot be parsed correct.
HTML code '$'$this->mo_oauth_login_form()'' cannot be parsed correct.
HTML code '$'$args_after_widget'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'<div class=$_SESSION_msg_class"$_SESSION_msg</div>'' cannot be parsed correct.
HTML code '$'<tr class=$tr_class_prefixtr"<td class=$tr_class_prefixtd"'' cannot be parsed correct.
HTML code '$'$nestedprefix.'' cannot be parsed correct.
HTML code '$'$key</td><td class=$tr_class_prefixtd"$resource</td></tr>'' cannot be parsed correct.
HTML code '$'Invalid response received from OAuth Provider. Contact your administrator for more details.<br><br><b>Response : </b><br>$this->getToken($tokenendpoint, $grant_type, $clientid, $clientsecret, $code, $redirect_url, $send_headers, $send_body)'' cannot be parsed correct.
HTML code '$'<div class=\'error\'> <p>get_option("message")</p></div>'' cannot be parsed correct.
HTML code '$'Invalid response received from OpenId Provider. Contact your administrator for more details.<br><br><b>Response : </b><br>$this->getToken($tokenendpoint, $grant_type, $clientid, $clientsecret, $code, $redirect_url, $send_headers, $send_body)'' cannot be parsed correct.
HTML code '$'Invalid response received.<br><b>Id_token : </b>$mo_oauth_handler->getIdToken($currentapp["accesstokenurl"], "authorization_code", $currentapp["clientid"], $currentapp["clientsecret"], $_GET["code"], $currentapp["redirecturi"], $currentapp["send_headers"], $currentapp["send_body"])'' cannot be parsed correct.
HTML code '$'<div class=\'updated\'><p>get_option("message")</p></div>'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'$deactivate_reason'' cannot be parsed correct.
HTML code '$'$deactivate_reason'' cannot be parsed correct.
HTML code '$'$deactivate_reason'' cannot be parsed correct.
HTML code '$'MO_OAUTH_README_PLUGIN_NAME'' cannot be parsed correct.
HTML code '$'</td>
		</tr>
		</table>
		<br /><br />

	<table>
	<tr>
	<td>
	<form name="f1" method="post" action="" id="mo_oauth_goto_login_form">
		'' cannot be parsed correct.
HTML code '$'<input type="hidden" name="option" value="mo_oauth_resend_otp_email"/>'' cannot be parsed correct.
HTML code '$'<input type="hidden" name="option" value="mo_oauth_resend_otp_phone"/>'' cannot be parsed correct.
HTML code '$'" width="45px" height="48px">
            </div>
        <div class="mo_float-child2">
          <div><strong><p style="font-size: 20px;margin: 1px;padding-left: 7px;line-height: 120%;font-weight: 600;font-family: Verdana, Arial, Helvetica, sans-serif;" ><a href= "'' cannot be parsed correct.
HTML code '$'</a></p></strong></div>
          </div>
        </div>
        <p style="text-align: center;font-family: Verdana, Arial, Helvetica, sans-serif;font-size: 12px;">'' cannot be parsed correct.
HTML code '$'</p>
        </div>
        </div>
      </div>
        '' cannot be parsed correct.
HTML code '$'<p style=\'color:#a94442;background-color:#f2dede;border-color:#ebccd1;border-radius:5px;padding:12px\'>You can only add 1 application with free version. Upgrade to <a href=\'admin.php?page=mo_oauth_settings&tab=licensing\'><b>enterprise</b></a> to add more.</p>'' cannot be parsed correct.
HTML code '$'<input type="submit" value="Send OTP" class="button button-primary button-large" />
			</form>'' cannot be parsed correct.
HTML code '$'https://plugins.miniorange.com/go/oauth-2fa-buy-now-payment'' cannot be parsed correct.
HTML code '$'required'' cannot be parsed correct.
HTML code '$'required'' cannot be parsed correct.
HTML code '$'required'' cannot be parsed correct.
HTML code '$'required'' cannot be parsed correct.
HTML code '$'required'' cannot be parsed correct.
HTML code '$'required'' cannot be parsed correct.
HTML code '$'required'' cannot be parsed correct.
HTML code '$'style="display:none"'' cannot be parsed correct.
HTML code '$'name="mo_oauth_username_attr"'' cannot be parsed correct.
HTML code '$' selected'' cannot be parsed correct.
HTML code '$'automatic'' cannot be parsed correct.
HTML code '$'name="mo_oauth_username_attr"'' cannot be parsed correct.
HTML code '$'style="border-color:red;"'' cannot be parsed correct.
HTML code '$' class="mo_table_textbox" type="text" name="mo_oauth_provider_domain"
                               value="'' cannot be parsed correct.
HTML code '$'style="border-color:red;"'' cannot be parsed correct.
HTML code '$' class="mo_table_textbox" type="text" name="mo_oauth_provider_tenant"
                                   value="'' cannot be parsed correct.
HTML code '$'style="border-color:red;"'' cannot be parsed correct.
HTML code '$' class="mo_table_textbox" type="text" name="mo_oauth_provider_policy" value="'' cannot be parsed correct.
HTML code '$'style="display:none"'' cannot be parsed correct.
HTML code '$'<tr>
			<td></td><td>
            <b><p style="margin-left:2px" class=" mop_table">
            Advanced attribute mapping is available in <a href="admin.php?page=mo_oauth_settings&amp;tab=licensing">premium</a> version.</b>
            </p>
			</td>
		</tr>
        <tr id="mo_oauth_name_attr_div">
				<td><strong>First Name:</strong></td>
				<td><input class="mo_table_textbox" required="" placeholder="Enter attribute name for First Name" disabled  type="text" value=""></td>
			</tr>
		<tr>
			<td><strong>Last Name:</strong></td>
			<td>
				<input type="text" class="mo_table_textbox" placeholder="Enter attribute name for Last Name"  disabled /></td>
		</tr>
		<tr>
			<td><strong>Email:</strong></td>
			<td><input type="text" class="mo_table_textbox" placeholder="Enter attribute name for Email"  value="" disabled /></td>
		</tr>
		<tr>
			<td><strong>Group/Role:</strong></td>
			<td><input type="text" class="mo_table_textbox" placeholder="Enter attribute name for Group/Role" value="" disabled /></td>
		</tr>
		<tr>
			<td><strong>Display Name:</strong></td>
			<td>
				<select disabled  class="mo_table_textbox" style="background-color: #eee;">
					<option>Username</option>
				</select>
			</td></tr>
			<tr><td>&nbsp;</td></tr>
			<tr><td colspan="3"><hr></td></tr>
			<tr>
				<td colspan="2">
					<strong>
						<input disabled type="checkbox"> Keep Existing User Attributes
					</strong><small> <a href="admin.php?page=mo_oauth_settings&tab=licensing" target="_blank" rel="noopener noreferrer">[PREMIUM]</a></small>
				</td>
			</tr>
			<tr>
				<td colspan="2"><p style="color:grey;margin-left:10px;font-size:14px"><small>If unchecked, each time existing WordPress User profile will get updated with above mapping. <br/> <b>Note :</b> User profile will get updated based on existing Usernames.</small></p>
				</td>
			</tr>
			<tr>
			  	<td colspan="2">
				    <table>
						<tr>
						  	<td>
						  		<strong><input disabled type="checkbox"> Keep Existing Email Attribute</strong><small> <a href="admin.php?page=mo_oauth_settings&tab=licensing" target="_blank" rel="noopener noreferrer">[PREMIUM]</a></small>
						  	</td>
						</tr>
						<tr><td colspan="2"><p style="color:grey;margin-left:10px;font-size:14px"><small>Uncheck only if you want existing user email to get updated each time after SSO. </small></p></td></tr>
				    </table>
				</td>
			</tr>
			<tr><td colspan="3"><hr></td></tr>
			<tr><td colspan="2">
			<h3>Map Custom Attributes <a href="admin.php?page=mo_oauth_settings&tab=licensing" target="_blank" rel="noopener noreferrer" style="font-size: x-small">[PREMIUM]</a></small></h3>
            <p>Map extra OAuth Provider attributes which you wish to be included in the user profile below</p>
			</td><td><input disabled type="button" value="+" class="button button-primary"  /></td>
			<td><input disabled type="button" value="-" class="button button-primary"   /></td></tr>
			<tr class="rows"><td><input disabled type="text" placeholder="Enter field meta name" /></td>
			<td><input disabled type="text" placeholder="Enter attribute name from OAuth Provider"  class="mo_table_textbox" /></td>
			</tr>'' cannot be parsed correct.
HTML code '$'<div id="mo_oauth_settings">'' cannot be parsed correct.
HTML code '$'
		<div class="miniorange_container">'' cannot be parsed correct.
HTML code '$'<table style="width:100%;">
			<tr>
				<td style="vertical-align:top;width:65%;" class="mo_oauth_content">'' cannot be parsed correct.
HTML code '$'</tr>
				</table>
				<div class="mo_tutorial_overlay" id="mo_tutorial_overlay" hidden></div>
		</div>'' cannot be parsed correct.
HTML code '$'<font color="#FF0000">*</font>'' cannot be parsed correct.
HTML code '$'required'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'<li>In front of <b>App Name</b> field, enter the name you would like to display on login button.</li>'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$' * 1000;
		var now = '' cannot be parsed correct.
HTML code '$' * 1000;
		var x = setInterval(function() {
			now = now + 1000;
			var distance = countDownDate - now;
			var days = Math.floor(distance / (1000 * 60 * 60 * 24));
			var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
			var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
			var seconds = Math.floor((distance % (1000 * 60)) / 1000);
			document.getElementById("demo").innerHTML = days + "d " + hours + "h " +
				minutes + "m " + seconds + "s ";
			if (distance < 0) {
				clearInterval(x);
				document.getElementById("demo").innerHTML = "EXPIRED";
			}
		}, 1000);
		</script>
		'' cannot be parsed correct.
HTML code '$'<td style="vertical-align:top;padding-left:1%;" class="mo_oauth_sidebar">'' cannot be parsed correct.
HTML code '$'</td>'' cannot be parsed correct.
HTML code '$'<p style="color:red;">(Warning: <a href="http://php.net/manual/en/curl.installation.php" target="_blank">PHP CURL extension</a> is not installed or disabled. Please install/enable it before you proceed.)</p>'' cannot be parsed correct.
HTML code '$'<div class="mo_oauth_premium_option_text"><span style="color:red;">*</span>This is a enterprise feature. 
				<a href="admin.php?page=mo_oauth_settings&tab=licensing">Click Here</a> to see our full list of Enterprise Features.</div>
				<div class="mo_table_layout mo_oauth_premium_option">
				<div class="mo_oauth_client_small_layout">'' cannot be parsed correct.
HTML code '$'<h2>Login Transactions Report</h2>
					<div class="mo_oauth_client_small_layout hidden">	
						<h3>Advanced Report</h3>
						<form method="post" action="">
							<input type="hidden" name="option" value="mo_oauth_client_advanced_reports">
							<br><input disabled type="submit" style="width:100px;" value="Search" class="button button-primary button-large">
						</form>
						<br>
					</div>
					
					<table id="login_reports" class="display" style="border-collapse: collapse;" cellspacing="0" width="100%">
						<thead>
							<tr style="border-bottom: 2px solid #000;">
								<th>IP Address</th>
								<th>Username</th>
								<th>Status</th>
								<th>TimeStamp</th>
							</tr>
						</thead>
						<tr style="border-bottom: 2px solid #000;"><td colspan="4" align="center" style="background: #f2f2f2; padding: 10px;">No Data Found in the Table.</td></tr>
						<tbody>'' cannot be parsed correct.
HTML code '$'	        </tbody>
					</table>
				</div>
				
			</div>'' cannot be parsed correct.
HTML code '$'<br>'' cannot be parsed correct.
HTML code '$'<h4>Connect with :</h4><br>'' cannot be parsed correct.
HTML code '$'<div class="row">'' cannot be parsed correct.
HTML code '$'</div><br><br>'' cannot be parsed correct.
HTML code '$'\' + \'/?option=generateDynmicUrl&app_name=\' + app_name;
		}
		function moOAuthLoginNew(app_name) {
			window.location.href = \''' cannot be parsed correct.
HTML code '$'\' + \'/?option=oauthredirect&app_name=\' + app_name;
		}
	</script>
	'' cannot be parsed correct.
HTML code '$'<div style="font-family:Calibri;padding:0 3%;">'' cannot be parsed correct.
HTML code '$'<style>table{border-collapse:collapse;}th {background-color: #eee; text-align: center; padding: 8px; border-width:1px; border-style:solid; border-color:#212121;}tr:nth-child(odd) {background-color: #f2f2f2;} td{padding:8px;border-width:1px; border-style:solid; border-color:#212121;}</style>'' cannot be parsed correct.
HTML code '$'<h2>Test Configuration</h2><table><tr><th>Attribute Name</th><th>Attribute Value</th></tr>'' cannot be parsed correct.
HTML code '$'</table>'' cannot be parsed correct.
HTML code '$'<div style="padding: 10px;"></div><input style="padding:1%;width:100px;background: #0091CD none repeat scroll 0% 0%;cursor: pointer;font-size:15px;border-width: 1px;border-style: solid;border-radius: 3px;white-space: nowrap;box-sizing: border-box;border-color: #0073AA;box-shadow: 0px 1px 0px rgba(120, 200, 230, 0.6) inset;color: #FFF;"type="button" value="Done" onClick="self.close();"></div>'' cannot be parsed correct.
HTML code '$'<b>Response : </b><br>'' cannot be parsed correct.
HTML code '$'<br><br>'' cannot be parsed correct.
HTML code '$'<b>Response : </b><br>'' cannot be parsed correct.
HTML code '$'<br><br>'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:21.453652.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.049058.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 1 do_action/apply_filters calls and 14 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:00.930058.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running FileProDetector
### Start running FrontBaseDetector
### Finish running DbaseDetector
### Start running HashDetector
### Finish running DbplusDetector
### Start running IBMDb2Detector
### Finish running CubridDetector
### Start running InformixDetector
### Finish running IBMDb2Detector
### Start running IngresDetector
### Finish running FrontBaseDetector
### Start running maxdbDetector
### Finish running HashDetector
### Start running MongoDbDetector
### Finish running InformixDetector
### Start running MongoDetector
### Finish running FirebirdInterBaseDetector
### Start running MsqlDetector
### Finish running MongoDetector
### Start running MySQLDetector
### Finish running IngresDetector
### Start running MySQLiDetector
### Finish running MongoDbDetector
### Start running Oci8Detector
### Finish running MySQLDetector
### Start running OpenSSLDetector
### Finish running MsqlDetector
### Start running ParadoxDetector
### Finish running OpenSSLDetector
### Start running PasswordHashingDetector
### Finish running ArrayElementDetector
### Start running PhpCurlDetector
### Finish running Oci8Detector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running PhpCurlDetector
### Start running PHPRetrievalDetector
### Finish running ParadoxDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PHPStorageDetector
### Start running PhpVarDetector
### Finish running PasswordHashingDetector
### Start running PostgreSQLDetector
### Finish running PostgreSQLDetector
### Start running PropertyDetector
### Finish running PHPIncludedDetector
### Start running Sqlite3Detector
### Finish running PHPRetrievalDetector
### Start running SqliteDetector
### Finish running Sqlite3Detector
### Start running SqlServerDetector
### Finish running SqliteDetector
### Start running SybaseDetector
### Finish running SqlServerDetector
### Start running TokyoTyrantDetector
### Finish running PropertyDetector
### Start running UserInputDetector
### Finish running TokyoTyrantDetector
### Start running VariableDetector
### Finish running SybaseDetector
### Start running WordpressHashingFnDetector
### Finish running UserInputDetector
### Start running WordPressRemoteDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressRetrievalDetector
### Finish running VariableDetector
### Start running WordPressStorageDetector
### Finish running maxdbDetector
### Start running WP_UserDetector
### Finish running MySQLiDetector
### Start running GenericDatabaseUsageDetector
### Finish running WP_UserDetector
### Start running GenericEncryptionDetector
### Finish running GenericDatabaseUsageDetector
### Start running DeletionDetector
### Finish running PhpVarDetector
### Start running UninstallDetector
### Finish running GenericEncryptionDetector
### Finish running UninstallDetector
### Finish running DeletionDetector
### Finish running WordPressRemoteDetector
### Finish running WordPressRetrievalDetector
### Finish running WordPressStorageDetector
### Finished running detectors
class-mo-oauth-widget.php:400
  - Request variable '$_POST["email"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:120
  - Request variable '$_POST["email"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:129
  - Request variable '$_POST["email"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:211
  - Request variable '$_REQUEST["mo_oauth_verify_password_form_field"]' of personal types {'password'} is found.
  - Data types: password
mo_oauth_settings.php:211
  - Request variable '$_REQUEST["mo_oauth_verify_password_form_field"]' of personal types {'password'} is found.
  - Data types: password
mo_oauth_settings.php:220
  - Request variable '$_POST["email"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:225
  - Request variable '$_POST["email"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:390
  - Request variable '$_POST["mo_oauth_username_attr"]' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
mo_oauth_settings.php:421
  - Request variable '$_POST["mo_oauth_contact_us_email"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:450
  - Request variable '$_POST["mo_auto_create_demosite_email"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:561
  - Request variable '$_REQUEST["mo_oauth_change_email_form_field"]' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:561
  - Request variable '$_REQUEST["mo_oauth_change_email_form_field"]' of personal types {'email'} is found.
  - Data types: email 

class-customer.php:160
  - hash called with approved hash algorithm sha512.
class-customer.php:232
  - hash called with approved hash algorithm sha512.
class-customer.php:315
  - hash called with approved hash algorithm sha512.
class-customer.php:400
  - hash called with approved hash algorithm sha512.
class-customer.php:463
  - hash called with approved hash algorithm sha512.
class-customer.php:526
  - hash called with approved hash algorithm sha512. 

class-mo-oauth-widget.php:385
  - openssl_encrypt called with unknown encryption algorithm. 

admin/partials/apps/partials/defaultapps.php:12
  - RETRIEVAL call to file_get_contents(dirname() . DIRECTORY_SEPARATOR . "defaultapps.json").
  - Data types: file
admin/partials/apps/partials/defaultapps.php:53
  - RETRIEVAL call to file_get_contents(dirname() . DIRECTORY_SEPARATOR . "defaultapps.json").
  - Data types: file
mo_oauth_settings.php:351
  - RETRIEVAL call to file_get_contents($discovery_endpoint).
  - Data types: file 

admin/partials/account/partials/register.php:42
  - object property '$current_user->user_firstname' of personal types {'user_meta', 'first_name', 'user'} is found.
  - Data types: user_meta, first_name, user
admin/partials/account/partials/register.php:42
  - object property '$current_user->user_firstname' of personal types {'user_meta', 'first_name', 'user'} is found.
  - Data types: user_meta, first_name, user
admin/partials/account/partials/register.php:47
  - object property '$current_user->user_lastname' of personal types {'user_meta', 'user', 'last_name'} is found.
  - Data types: user_meta, user, last_name
admin/partials/account/partials/register.php:47
  - object property '$current_user->user_lastname' of personal types {'user_meta', 'user', 'last_name'} is found.
  - Data types: user_meta, user, last_name
class-customer.php:31
  - object property '$this->email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:43
  - object property '$this->email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:185
  - object property '$current_user->user_firstname' of personal types {'user_meta', 'first_name', 'user'} is found.
  - Data types: user_meta, first_name, user
class-customer.php:185
  - object property '$current_user->user_firstname' of personal types {'user_meta', 'first_name', 'user'} is found.
  - Data types: user_meta, first_name, user
class-customer.php:186
  - object property '$current_user->user_lastname' of personal types {'user_meta', 'user', 'last_name'} is found.
  - Data types: user_meta, user, last_name
class-customer.php:186
  - object property '$current_user->user_lastname' of personal types {'user_meta', 'user', 'last_name'} is found.
  - Data types: user_meta, user, last_name
class-customer.php:412
  - object property '$user->user_firstname' of personal types {'user_meta', 'first_name', 'user'} is found.
  - Data types: user_meta, first_name, user
class-customer.php:412
  - object property '$user->user_lastname' of personal types {'user_meta', 'user', 'last_name'} is found.
  - Data types: user_meta, user, last_name
class-customer.php:412
  - object property '$user->user_firstname' of personal types {'user_meta', 'first_name', 'user'} is found.
  - Data types: user_meta, first_name, user
class-customer.php:412
  - object property '$user->user_lastname' of personal types {'user_meta', 'user', 'last_name'} is found.
  - Data types: user_meta, user, last_name
mo_oauth_settings.php:611
  - object property '$user->user_email' of personal types {'email'} is found.
  - Data types: email 

admin/partials/demo/class-mo-oauth-client-demo.php:52
  - variable '$mo_oauth_client_demo_email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:73
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:78
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:188
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:225
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-customer.php:241
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-customer.php:308
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-customer.php:359
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:362
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:404
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:467
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:536
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:126
  - variable '$link_with_username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:128
  - variable '$link_with_username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:254
  - variable '$username_attr' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:260
  - variable '$username_attr' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:263
  - variable '$username_attr' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:311
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:324
  - variable '$username_attr' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:325
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:325
  - variable '$username_attr' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:327
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:327
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:330
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:331
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:334
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:336
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:343
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:345
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:398
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:400
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:403
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:404
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:405
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:409
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:410
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:410
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:410
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:422
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:423
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:423
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:424
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
mo_oauth_settings.php:113
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:129
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:138
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:151
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:218
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:225
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:229
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:281
  - variable '$email_attr' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:390
  - variable '$username_attr' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
mo_oauth_settings.php:400
  - variable '$username_attr' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
mo_oauth_settings.php:421
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:426
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:433
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:450
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:454
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:465
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:512
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:513
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:551
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:554
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:557
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:609
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:610
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:611
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:616
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:710
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings.php:712
  - variable '$email' of personal types {'email'} is found.
  - Data types: email 

class-mo-oauth-widget.php:410
  - CRYPTOGRAPHY call to wp_create_user($user_email, $random_password, $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:423
  - CRYPTOGRAPHY call to wp_create_user($username, $random_password) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:425
  - CRYPTOGRAPHY call to wp_update_user(["ID" => $user_id]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user 

class-customer.php:60
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:95
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:141
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:209
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:267
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:291
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:346
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:377
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:444
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:505
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:556
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
handler/oauth_handler.php:41
  - API call to wp_remote_post($tokenendpoint, ["method" => "POST", "timeout" => 45, "redirection" => 5, "httpversion" => "1.0", "blocking" => true, "headers" => $headers, "body" => $body, "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
handler/oauth_handler.php:100
  - API call to wp_remote_post($resourceownerdetailsurl, ["method" => "GET", "timeout" => 45, "redirection" => 5, "httpversion" => "1.0", "blocking" => true, "headers" => $headers, "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
handler/oauth_handler.php:132
  - API call to wp_remote_get($url, ["method" => "GET", "timeout" => 45, "redirection" => 5, "httpversion" => , "blocking" => true, "headers" => [], "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
mo_oauth_settings.php:478
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote 

admin/partials/account/partials/register.php:5
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
admin/partials/account/partials/register.php:30
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/register.php:52
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/register.php:106
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/register.php:110
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/verify-otp.php:31
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/verify-otp.php:31
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/verify-otp.php:44
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/verify-otp.php:44
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/verify-otp.php:44
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/verify-otp.php:58
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/verify-password.php:19
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/addons/class-mo-oauth-client-addons.php:264
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/addons/class-mo-oauth-client-addons.php:266
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/addapp.php:7
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/app-list.php:51
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/app-list.php:53
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/app-list.php:65
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:5
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:6
  - RETRIEVAL call to get_option("mo_oauth_attr_name_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:48
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:48
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:48
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:82
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:82
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:83
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:83
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:83
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:85
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:85
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/updateapp.php:5
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/updateapp.php:20
  - RETRIEVAL call to get_option("mo_discovery_validation") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/updateapp.php:20
  - RETRIEVAL call to get_option("mo_discovery_validation") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/updateapp.php:86
  - RETRIEVAL call to get_option("mo_existing_app_flow") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/updateapp.php:113
  - RETRIEVAL call to get_option("mo_existing_app_flow") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:69
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:101
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:101
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:150
  - RETRIEVAL call to get_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:172
  - RETRIEVAL call to get_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:174
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:174
  - RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:174
  - RETRIEVAL call to get_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:176
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:176
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:176
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:176
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/demo/class-mo-oauth-client-demo.php:31
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/guides/class-mo-oauth-client-attribute-mapping.php:6
  - RETRIEVAL call to get_option("mo_oauth_attr_name_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/guides/class-mo-oauth-client-guides.php:12
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/licensing/class-mo-oauth-client-license.php:169
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/licensing/class-mo-oauth-client-license.php:171
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/licensing/class-mo-oauth-client-license.php:173
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/licensing/class-mo-oauth-client-license.php:177
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/licensing/class-mo-oauth-client-license.php:179
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/licensing/class-mo-oauth-client-license.php:181
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/support/class-mo-oauth-client-support.php:21
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/support/class-mo-oauth-client-support.php:24
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:30
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:31
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:32
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:33
  - RETRIEVAL call to get_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:34
  - RETRIEVAL call to get_option("mo_oauth_admin_fname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:35
  - RETRIEVAL call to get_option("mo_oauth_admin_lname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:36
  - RETRIEVAL call to get_option("mo_oauth_admin_company") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:71
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:73
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:75
  - RETRIEVAL call to get_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:106
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:107
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:108
  - RETRIEVAL call to get_option("mo_oauth_" . $name . "_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:109
  - RETRIEVAL call to get_option("mo_oauth_" . $name . "_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:110
  - RETRIEVAL call to get_option("mo_oauth_" . $name . "_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:173
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
class-customer.php:195
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:220
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:225
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:226
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:278
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:302
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:308
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:357
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:359
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:391
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:409
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
class-customer.php:456
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:471
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
class-customer.php:514
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:516
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:519
  - RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:23
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:95
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:105
  - RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:105
  - RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:106
  - RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:106
  - RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:107
  - RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:107
  - RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:108
  - RETRIEVAL call to get_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:125
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
class-mo-oauth-widget.php:171
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:181
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:253
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:334
  - RETRIEVAL call to get_user_by("login", $username) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:336
  - RETRIEVAL call to get_user_by("email", $username) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:350
  - RETRIEVAL call to wp_set_current_user($user->ID) alters data types {'user_meta'}. Passed arguments: 0: $id (int). Returns (WP_User).
  - Data types: user_meta
class-mo-oauth-widget.php:352
  - RETRIEVAL call to get_user_by("ID", $user->ID) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:354
  - RETRIEVAL call to get_option("mo_oauth_redirect_url") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:376
  - RETRIEVAL call to get_option("mo_oauth_" . $_REQUEST["app_name"] . "_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:378
  - RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:381
  - RETRIEVAL call to get_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:390
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:390
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:405
  - RETRIEVAL call to get_user_by("email", $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:424
  - RETRIEVAL call to get_user_by("login", $username) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
mo_oauth_settings.php:41
  - RETRIEVAL call to get_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:51
  - RETRIEVAL call to get_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:151
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:276
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:277
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:397
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:512
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:515
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:529
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:551
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:600
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
mo_oauth_settings.php:609
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:613
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:692
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:710
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings.php:711
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
pointers.php:37
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
pointers.php:37
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option 

admin/class-mo-oauth-client-admin.php:50
  - STORAGE call to update_option("host_name", "https://login.xecurify.com") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin/partials/account/partials/register.php:4
  - STORAGE call to update_option("new_registration", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:72
  - STORAGE call to delete_option("mo_oauth_client_custom_token_endpoint_no_csecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:74
  - STORAGE call to delete_option("mo_oauth_client_disable_authorization_header") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:75
  - STORAGE call to delete_option("mo_oauth_attr_name_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:76
  - STORAGE call to delete_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:79
  - STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
class-mo-oauth-widget.php:6
  - STORAGE call to update_option("host_name", "https://login.xecurify.com") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
class-mo-oauth-widget.php:173
  - STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
class-mo-oauth-widget.php:183
  - STORAGE call to update_option("mo_oauth_redirect_url", $_REQUEST["redirect_url"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
class-mo-oauth-widget.php:312
  - STORAGE call to update_option("mo_oauth_attr_name_list", $resourceOwner) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
class-mo-oauth-widget.php:410
  - STORAGE call to wp_create_user($user_email, $random_password, $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:423
  - STORAGE call to wp_create_user($username, $random_password) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:425
  - STORAGE call to wp_update_user(["ID" => $user_id]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
mo_oauth_settings.php:56
  - STORAGE call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:57
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:58
  - STORAGE call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:59
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:60
  - STORAGE call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:61
  - STORAGE call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:62
  - STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:63
  - STORAGE call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:64
  - STORAGE call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:65
  - STORAGE call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:66
  - STORAGE call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:93
  - STORAGE call to update_option("mo_oauth_client_show_mo_server_message", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:98
  - STORAGE call to update_user_meta(get_current_user_id(), "dismissed_wp_pointers", "") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
mo_oauth_settings.php:121
  - STORAGE call to update_option("message", "All the fields are required. Please enter valid entries.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:125
  - STORAGE call to update_option("message", "Choose a password with minimum length 8.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:138
  - STORAGE call to update_option("mo_oauth_admin_email", $email) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:139
  - STORAGE call to update_option("mo_oauth_admin_phone", $phone) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:140
  - STORAGE call to update_option("mo_oauth_admin_fname", $fname) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:141
  - STORAGE call to update_option("mo_oauth_admin_lname", $lname) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:142
  - STORAGE call to update_option("mo_oauth_admin_company", $company) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:149
  - STORAGE call to update_option("password", $password) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:160
  - STORAGE call to update_option("message", "Please use your Enterprise email to create an account.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:162
  - STORAGE call to update_option("message", "Failed to create customer. Try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:169
  - STORAGE call to update_option("message", "Passwords do not match.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:170
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:178
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:179
  - STORAGE call to update_option("verify_customer", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:191
  - STORAGE call to update_option("message", "Please enter a value in OTP field.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:192
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_VALIDATION_FAILURE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:204
  - STORAGE call to update_option("message", "Invalid one time passcode. Please enter a valid OTP.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:205
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_VALIDATION_FAILURE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:221
  - STORAGE call to update_option("message", "All the fields are required. Please enter valid entries.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:229
  - STORAGE call to update_option("mo_oauth_admin_email", $email) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:230
  - STORAGE call to update_option("password", $password) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:235
  - STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:236
  - STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:237
  - STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:239
  - STORAGE call to update_option("mo_oauth_admin_phone", $customerKey["phone"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:240
  - STORAGE call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:241
  - STORAGE call to update_option("message", "Customer retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:242
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:243
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:246
  - STORAGE call to update_option("message", "Invalid username or password. Please try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:258
  - STORAGE call to update_option("message", "Please enter valid Client ID and Client Secret.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:273
  - STORAGE call to update_option("mo_oauth_client_custom_token_endpoint_no_csecret", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:295
  - STORAGE call to update_option("message", "You can only add 1 application with free version. Upgrade to enterprise version if you want to add more applications.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:332
  - STORAGE call to add_option("mo_existing_app_flow", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:350
  - STORAGE call to update_option("mo_oc_valid_discovery_ep", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:362
  - STORAGE call to update_option("mo_oc_valid_discovery_ep", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:370
  - STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:378
  - STORAGE call to update_option("mo_oauth_icon_width", stripslashes($_POST["mo_oauth_icon_width"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:379
  - STORAGE call to update_option("mo_oauth_icon_height", stripslashes($_POST["mo_oauth_icon_height"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:380
  - STORAGE call to update_option("mo_oauth_icon_margin", stripslashes($_POST["mo_oauth_icon_margin"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:381
  - STORAGE call to update_option("mo_oauth_icon_configure_css", stripcslashes(stripslashes($_POST["mo_oauth_icon_configure_css"]))) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:382
  - STORAGE call to update_option("message", "Your settings were saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:393
  - STORAGE call to update_option("message", "You MUST configure an application before you map attributes.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:406
  - STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:407
  - STORAGE call to update_option("message", "Your settings are saved successfully.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:408
  - STORAGE call to update_option("mo_attr_option", $attr_option) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:427
  - STORAGE call to update_option("message", "Please fill up Email and Query fields to submit your query.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:435
  - STORAGE call to update_option("message", "Your query could not be submitted. Please try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:438
  - STORAGE call to update_option("message", "Thanks for getting in touch! We shall get back to you shortly.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:455
  - STORAGE call to update_option("message", "Please fill up Usecase, Email field and Requested demo plan to submit your query.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:489
  - STORAGE call to update_option("message", "Something went wrong! contact to your administrator") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:494
  - STORAGE call to update_option("message", $output->message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:497
  - STORAGE call to update_option("message", $output->message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:515
  - STORAGE call to update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:517
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:520
  - STORAGE call to update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:521
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:533
  - STORAGE call to update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:534
  - STORAGE call to update_option("mo_oauth_transactionId", $content["txId"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:535
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:538
  - STORAGE call to update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:539
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:546
  - STORAGE call to update_option("mo_oauth_message", "ERROR: <a href="http://php.net/manual/en/curl.installation.php" target="_blank">PHP cURL extension</a> is not installed or disabled. Resend OTP failed.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:557
  - STORAGE call to update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:563
  - STORAGE call to update_option("verify_customer", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:564
  - STORAGE call to update_option("mo_oauth_registration_status", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:565
  - STORAGE call to update_option("new_registration", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:575
  - STORAGE call to update_option("mo_oauth_admin_phone", $phone) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:579
  - STORAGE call to update_option("message", " A one time passcode is sent to " . get_site_option("mo_oauth_admin_phone") . ". Please enter the otp here to verify your email.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:581
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:584
  - STORAGE call to update_option("message", "There was an error in sending SMS. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:585
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:594
  - STORAGE call to update_option("message", "Plugin deactivated successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:618
  - STORAGE call to update_option("message", "Thank you for the feedback.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:621
  - STORAGE call to update_option("message", "Please Select one of the reasons ,if your reason is not mentioned please select Other Reasons") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:635
  - STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:636
  - STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:637
  - STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:638
  - STORAGE call to update_option("password", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:639
  - STORAGE call to update_option("message", "Customer retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:640
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:641
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:645
  - STORAGE call to update_option("message", "You already have an account with miniOrange. Please enter a valid password.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:646
  - STORAGE call to update_option("verify_customer", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:659
  - STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:661
  - STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:662
  - STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:663
  - STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:664
  - STORAGE call to update_option("password", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:665
  - STORAGE call to update_option("message", "Registered successfully.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:666
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OAUTH_REGISTRATION_COMPLETE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:667
  - STORAGE call to update_option("mo_oauth_new_customer", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings.php:668
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:669
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:676
  - STORAGE call to update_option("message", "<a href="http://php.net/manual/en/curl.installation.php" target="_blank">PHP CURL extension</a> is not installed or disabled. Please enable it to continue.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
uninstall.php:6
  - STORAGE call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:7
  - STORAGE call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:8
  - STORAGE call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:9
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:10
  - STORAGE call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:11
  - STORAGE call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:12
  - STORAGE call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:13
  - STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:14
  - STORAGE call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:15
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:16
  - STORAGE call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:17
  - STORAGE call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

class-customer.php:160
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-customer.php:232
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-customer.php:315
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-customer.php:400
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-customer.php:463
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-customer.php:526
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-mo-oauth-widget.php:385
  - CRYPTOGRAPHY call to openssl_encrypt($token, $method, $customer_token, OPENSSL_RAW_DATAOPENSSL_ZERO_PADDING, $iv). 

admin/partials/apps/partials/app-list.php:72
  - DELETION call to delete_option("mo_oauth_client_custom_token_endpoint_no_csecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:74
  - DELETION call to delete_option("mo_oauth_client_disable_authorization_header") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:75
  - DELETION call to delete_option("mo_oauth_attr_name_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:76
  - DELETION call to delete_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:56
  - DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:57
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:58
  - DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:59
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:60
  - DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:61
  - DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:62
  - DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:63
  - DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:64
  - DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:65
  - DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:66
  - DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:170
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:178
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:240
  - DELETION call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:242
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:243
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:640
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:641
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:659
  - DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:668
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_oauth_settings.php:669
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:6
  - DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:7
  - DELETION call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:8
  - DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:9
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:10
  - DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:11
  - DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:12
  - DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:13
  - DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:14
  - DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:15
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:16
  - DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:17
  - DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

uninstall.php:6
  - Uninstall deletion call: DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:7
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:8
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:9
  - Uninstall deletion call: DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:10
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:11
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:12
  - Uninstall deletion call: DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:13
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:14
  - Uninstall deletion call: DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:15
  - Uninstall deletion call: DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:16
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:17
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

By data type:
email
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
file
	PHPRetrievalDetector.file_get_contents(dirname() . DIRECTORY_SEPARATOR . "defaultapps.json") - {'file'}
	PHPRetrievalDetector.file_get_contents(dirname() . DIRECTORY_SEPARATOR . "defaultapps.json") - {'file'}
	PHPRetrievalDetector.file_get_contents($discovery_endpoint) - {'file'}
first_name
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
last_name
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
none
	GenericEncryptionDetector.openssl_encrypt($token, $method, $customer_token, OPENSSL_RAW_DATAOPENSSL_ZERO_PADDING, $iv) - set()
	OpenSSLDetector.(unknown) - set()
	HashDetector.(unknown) - set()
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	HashDetector.(unknown) - set()
	HashDetector.(unknown) - set()
	HashDetector.(unknown) - set()
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	HashDetector.(unknown) - set()
	HashDetector.(unknown) - set()
option
	WordPressStorageDetector.update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") - {'option'}
	WordPressStorageDetector.update_option("message", "There was an error in sending SMS. Please click on Resend OTP to try again.") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_transactionId", $content["txId"]) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") - {'option'}
	WordPressStorageDetector.update_option("message", " A one time passcode is sent to " . get_site_option("mo_oauth_admin_phone") . ". Please enter the otp here to verify your email.") - {'option'}
	WordPressStorageDetector.update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_phone", $phone) - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	WordPressStorageDetector.update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") - {'option'}
	DeletionDetector.delete_option("mo_oauth_client_show_mo_server_message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_" . $name . "_client_id") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_message", "ERROR: <a href="http://php.net/manual/en/curl.installation.php" target="_blank">PHP cURL extension</a> is not installed or disabled. Resend OTP failed.") - {'option'}
	DeletionDetector.delete_option("mo_oauth_new_customer") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") - {'option'}
	WordPressStorageDetector.update_option("verify_customer", "") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_" . $_REQUEST["app_name"] . "_client_id") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_api_key") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_redirect_url") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_api_key") - {'option'}
	WordPressStorageDetector.delete_option("message") - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("message") - {'option'}
	WordPressRetrievalDetector.get_option("message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	DeletionDetector.delete_option("mo_oauth_client_disable_authorization_header") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.update_option("mo_oc_valid_discovery_ep", true) - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	DeletionDetector.delete_option("message") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	DeletionDetector.delete_option("mo_oauth_new_customer") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_icon_configure_css", stripcslashes(stripslashes($_POST["mo_oauth_icon_configure_css"]))) - {'option'}
	DeletionDetector.delete_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("message", "Thank you for the feedback.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_client_show_mo_server_message") - {'option'}
	DeletionDetector.delete_option("customer_token") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_attr_name_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_api_key") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_phone", $customerKey["phone"]) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_redirect_url", $_REQUEST["redirect_url"]) - {'option'}
	WordPressStorageDetector.update_option("password", $password) - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_lname", $lname) - {'option'}
	WordPressStorageDetector.update_option("message", "Passwords do not match.") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("message", "Failed to create customer. Try again.") - {'option'}
	UninstallDetector.delete_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("message", "<a href="http://php.net/manual/en/curl.installation.php" target="_blank">PHP CURL extension</a> is not installed or disabled. Please enable it to continue.") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter a value in OTP field.") - {'option'}
	WordPressStorageDetector.update_option("mo_attr_option", $attr_option) - {'option'}
	WordPressStorageDetector.update_option("host_name", "https://login.xecurify.com") - {'option'}
	UninstallDetector.delete_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("message", "Please use your Enterprise email to create an account.") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_phone") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_company", $company) - {'option'}
	WordPressStorageDetector.update_option("message", "Invalid one time passcode. Please enter a valid OTP.") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("verify_customer", "true") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_width") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.add_option("mo_existing_app_flow", true) - {'option'}
	WordPressStorageDetector.update_option("message", "Please fill up Email and Query fields to submit your query.") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressStorageDetector.update_option("host_name", "https://login.xecurify.com") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("message", $output->message) - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	WordPressStorageDetector.update_option("mo_oc_valid_discovery_ep", true) - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_client_disable_authorization_header") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_height") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_client_custom_token_endpoint_no_csecret") - {'option'}
	WordPressStorageDetector.update_option("message", "Plugin deactivated successfully") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_configure_css") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_customer_key", $customerKey["id"]) - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_attr_name_list") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressStorageDetector.delete_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("new_registration", "true") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("message", "Something went wrong! contact to your administrator") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") - {'option'}
	WordPressRetrievalDetector.get_option("verify_customer") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_attr_name_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_width") - {'option'}
	WordPressStorageDetector.update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_phone", $phone) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("message", "Your settings are saved successfully.") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	UninstallDetector.delete_option("mo_oauth_new_customer") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_fname", $fname) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_api_key") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_email", $email) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_" . $name . "_scope") - {'option'}
	UninstallDetector.delete_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_margin") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_attr_name_list", $resourceOwner) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressStorageDetector.update_option("message", "Choose a password with minimum length 8.") - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	UninstallDetector.delete_option("mo_oauth_admin_api_key") - {'option'}
	WordPressStorageDetector.update_option("message", "Thanks for getting in touch! We shall get back to you shortly.") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_apps_list", $appslist) - {'option'}
	WordPressRetrievalDetector.get_option("customer_token") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressRetrievalDetector.get_option("mo_existing_app_flow") - {'option'}
	WordPressStorageDetector.update_option("password", $password) - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressRetrievalDetector.get_option("mo_discovery_validation") - {'option'}
	DeletionDetector.delete_option("mo_oauth_attr_name_list") - {'option'}
	WordPressStorageDetector.delete_option("message") - {'option'}
	WordPressRetrievalDetector.get_option("password") - {'option'}
	WordPressStorageDetector.update_option("message", "Customer retrieved successfully") - {'option'}
	DeletionDetector.delete_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	DeletionDetector.delete_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_icon_margin", stripslashes($_POST["mo_oauth_icon_margin"])) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_company") - {'option'}
	WordPressRetrievalDetector.get_option("mo_discovery_validation") - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	UninstallDetector.delete_option("message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.update_option("message", "Please Select one of the reasons ,if your reason is not mentioned please select Other Reasons") - {'option'}
	WordPressStorageDetector.update_option("message", "Your query could not be submitted. Please try again.") - {'option'}
	WordPressStorageDetector.update_option("message", "Your settings were saved") - {'option'}
	WordPressStorageDetector.update_option("message", "All the fields are required. Please enter valid entries.") - {'option'}
	WordPressStorageDetector.update_option("message", "Please fill up Usecase, Email field and Requested demo plan to submit your query.") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_icon_height", stripslashes($_POST["mo_oauth_icon_height"])) - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OAUTH_REGISTRATION_COMPLETE") - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	UninstallDetector.delete_option("mo_oauth_admin_phone") - {'option'}
	DeletionDetector.delete_option("mo_oauth_client_show_mo_server_message") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	DeletionDetector.delete_option("mo_oauth_client_custom_token_endpoint_no_csecret") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	UninstallDetector.delete_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	UninstallDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_height") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_VALIDATION_FAILURE") - {'option'}
	WordPressStorageDetector.update_option("message", "You can only add 1 application with free version. Upgrade to enterprise version if you want to add more applications.") - {'option'}
	WordPressRetrievalDetector.get_option("new_registration") - {'option'}
	WordPressStorageDetector.delete_option("password") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_customer_key", $customerKey["id"]) - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_apps_list", $appslist) - {'option'}
	DeletionDetector.delete_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressStorageDetector.update_option("message", "Invalid username or password. Please try again.") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_phone") - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	UninstallDetector.delete_option("mo_oauth_client_show_mo_server_message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_apps_list") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_icon_width", stripslashes($_POST["mo_oauth_icon_width"])) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_client_show_mo_server_message") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_client_show_mo_server_message", 1) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_apps_list", $appslist) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_client_show_mo_server_message") - {'option'}
	DeletionDetector.delete_option("host_name") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_customer_key") - {'option'}
	UninstallDetector.delete_option("customer_token") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressStorageDetector.update_option("message", $output->message) - {'option'}
	WordPressStorageDetector.update_option("message", "Customer retrieved successfully") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	DeletionDetector.delete_option("customer_token") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressStorageDetector.update_option("customer_token", $customerKey["token"]) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_" . $name . "_client_secret") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_customer_key") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_phone") - {'option'}
	WordPressStorageDetector.delete_option("customer_token") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.update_option("message", "You MUST configure an application before you map attributes.") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_client_custom_token_endpoint_no_csecret", true) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressStorageDetector.update_option("password", "") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_VALIDATION_FAILURE") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_fname") - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("password") - {'option'}
	WordPressStorageDetector.update_option("message", "You already have an account with miniOrange. Please enter a valid password.") - {'option'}
	DeletionDetector.delete_option("message") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_apps_list", $appslist) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_email", $email) - {'option'}
	WordPressStorageDetector.update_option("customer_token", $customerKey["token"]) - {'option'}
	WordPressStorageDetector.update_option("verify_customer", "true") - {'option'}
	WordPressRetrievalDetector.get_option("mo_existing_app_flow") - {'option'}
	DeletionDetector.delete_option("mo_oauth_new_customer") - {'option'}
	WordPressStorageDetector.delete_option("customer_token") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_lname") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_new_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_customer_key", $customerKey["id"]) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter valid Client ID and Client Secret.") - {'option'}
	WordPressStorageDetector.delete_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("message", "All the fields are required. Please enter valid entries.") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_new_customer") - {'option'}
	WordPressStorageDetector.update_option("customer_token", $customerKey["token"]) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("password", "") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("message", "Registered successfully.") - {'option'}
	DeletionDetector.delete_option("password") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_new_customer", 1) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	UninstallDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("new_registration", "true") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_margin") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_new_customer") - {'option'}
password
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	ArrayElementDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	ArrayElementDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
remote
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
user
	WordPressRetrievalDetector.get_user_by("email", $user_email) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $username) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $username) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("ID", $user->ID) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_create_user($username, $random_password) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_update_user(["ID" => $user_id]) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_create_user($user_email, $random_password, $user_email) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressStorageDetector.wp_create_user($user_email, $random_password, $user_email) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("email", $username) - {'user_meta', 'user'}
	ArrayElementDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_create_user($username, $random_password) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_update_user(["ID" => $user_id]) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
user_meta
	WordPressRetrievalDetector.get_user_by("email", $user_email) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $username) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $username) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("ID", $user->ID) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_create_user($username, $random_password) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_update_user(["ID" => $user_id]) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_create_user($user_email, $random_password, $user_email) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressStorageDetector.wp_create_user($user_email, $random_password, $user_email) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_set_current_user($user->ID) - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("email", $username) - {'user_meta', 'user'}
	ArrayElementDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_create_user($username, $random_password) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_update_user(["ID" => $user_id]) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta(get_current_user_id(), "dismissed_wp_pointers", "") - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'first_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'last_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:43.909788.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 15778 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:01.549443.

!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 331
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 7275
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 7619
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 8717
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 16505
1000 STORE_REACHES edges created
2000 STORE_REACHES edges created
3000 STORE_REACHES edges created
4000 STORE_REACHES edges created
5000 STORE_REACHES edges created
6000 STORE_REACHES edges created
7000 STORE_REACHES edges created
8000 STORE_REACHES edges created
9000 STORE_REACHES edges created
10000 STORE_REACHES edges created
11000 STORE_REACHES edges created
12000 STORE_REACHES edges created
13000 STORE_REACHES edges created
14000 STORE_REACHES edges created
15000 STORE_REACHES edges created
15778 STORE_REACHES edges created
15778 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 1000 nodes as PERSONAL
Tainted 1148 nodes as PERSONAL
In total, tainted 1148 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
Tainted 194 nodes as ENCRYPTED
In total, tainted 194 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:57.758459.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:03:32.212729!
Request variable '$_POST["email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["email"]' of personal types {'email'} is found.,,None
Request variable '$_REQUEST["mo_oauth_verify_password_form_field"]' of personal types {'password'} is found.,,None
Request variable '$_REQUEST["mo_oauth_verify_password_form_field"]' of personal types {'password'} is found.,,None
Request variable '$_POST["email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["mo_oauth_username_attr"]' of personal types {'user_meta', 'user'} is found.,,None
Request variable '$_POST["mo_oauth_contact_us_email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["mo_auto_create_demosite_email"]' of personal types {'email'} is found.,,None
Request variable '$_REQUEST["mo_oauth_change_email_form_field"]' of personal types {'email'} is found.,,None
Request variable '$_REQUEST["mo_oauth_change_email_form_field"]' of personal types {'email'} is found.,,None
DELETION call to delete_option("mo_oauth_client_custom_token_endpoint_no_csecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_client_disable_authorization_header") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_attr_name_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to openssl_encrypt($token, $method, $customer_token, OPENSSL_RAW_DATAOPENSSL_ZERO_PADDING, $iv).,None,None
hash called with approved hash algorithm sha512.,sha512,None
hash called with approved hash algorithm sha512.,sha512,None
hash called with approved hash algorithm sha512.,sha512,None
hash called with approved hash algorithm sha512.,sha512,None
hash called with approved hash algorithm sha512.,sha512,None
hash called with approved hash algorithm sha512.,sha512,None
openssl_encrypt called with unknown encryption algorithm.,None,None
RETRIEVAL call to file_get_contents(dirname() . DIRECTORY_SEPARATOR . "defaultapps.json").,None,None
RETRIEVAL call to file_get_contents(dirname() . DIRECTORY_SEPARATOR . "defaultapps.json").,None,None
RETRIEVAL call to file_get_contents($discovery_endpoint).,None,None
object property '$current_user->user_firstname' of personal types {'user_meta', 'first_name', 'user'} is found.,,None
object property '$current_user->user_firstname' of personal types {'user_meta', 'first_name', 'user'} is found.,,None
object property '$current_user->user_lastname' of personal types {'user_meta', 'user', 'last_name'} is found.,,None
object property '$current_user->user_lastname' of personal types {'user_meta', 'user', 'last_name'} is found.,,None
object property '$current_user->user_firstname' of personal types {'user_meta', 'first_name', 'user'} is found.,,None
object property '$current_user->user_firstname' of personal types {'user_meta', 'first_name', 'user'} is found.,,None
object property '$current_user->user_lastname' of personal types {'user_meta', 'user', 'last_name'} is found.,,None
object property '$current_user->user_lastname' of personal types {'user_meta', 'user', 'last_name'} is found.,,None
object property '$this->email' of personal types {'email'} is found.,,None
object property '$user->user_lastname' of personal types {'user_meta', 'user', 'last_name'} is found.,,None
object property '$user->user_firstname' of personal types {'user_meta', 'first_name', 'user'} is found.,,None
object property '$user->user_firstname' of personal types {'user_meta', 'first_name', 'user'} is found.,,None
object property '$user->user_lastname' of personal types {'user_meta', 'user', 'last_name'} is found.,,None
object property '$this->email' of personal types {'email'} is found.,,None
object property '$user->user_email' of personal types {'email'} is found.,,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
variable '$mo_oauth_client_demo_email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$link_with_username' of personal types {'user_meta', 'user'} is found.,,None
variable '$link_with_username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username_attr' of personal types {'user_meta', 'user'} is found.,,None
variable '$username_attr' of personal types {'user_meta', 'user'} is found.,,None
variable '$username_attr' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username_attr' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username_attr' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email_attr' of personal types {'email'} is found.,,None
variable '$username_attr' of personal types {'user_meta', 'user'} is found.,,None
variable '$username_attr' of personal types {'user_meta', 'user'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($resourceownerdetailsurl, ["method" => "GET", "timeout" => 45, "redirection" => 5, "httpversion" => "1.0", "blocking" => true, "headers" => $headers, "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_get($url, ["method" => "GET", "timeout" => 45, "redirection" => 5, "httpversion" => , "blocking" => true, "headers" => [], "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($tokenendpoint, ["method" => "POST", "timeout" => 45, "redirection" => 5, "httpversion" => "1.0", "blocking" => true, "headers" => $headers, "body" => $body, "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,['https://demo.miniorange.com/wordpress-oauth/']
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_attr_name_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_existing_app_flow") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_discovery_validation") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_discovery_validation") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_existing_app_flow") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_attr_name_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_" . $name . "_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_" . $name . "_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_" . $name . "_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_fname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_lname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_company") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("login", $username) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_user_by("email", $username) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to wp_set_current_user($user->ID) alters data types {'user_meta'}. Passed arguments: 0: $id (int). Returns (WP_User).,None,None
RETRIEVAL call to get_user_by("ID", $user->ID) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("mo_oauth_redirect_url") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_" . $_REQUEST["app_name"] . "_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("email", $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_user_by("login", $username) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
STORAGE call to update_option("host_name", "https://login.xecurify.com") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("new_registration", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_client_custom_token_endpoint_no_csecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_client_disable_authorization_header") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_attr_name_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_redirect_url", $_REQUEST["redirect_url"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_attr_name_list", $resourceOwner) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_create_user($user_email, $random_password, $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).,None,None
STORAGE call to wp_create_user($username, $random_password) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string). Returns (int|WP_Error).,None,None
STORAGE call to wp_update_user(["ID" => $user_id]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,None,None
STORAGE call to update_option("host_name", "https://login.xecurify.com") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "All the fields are required. Please enter valid entries.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Choose a password with minimum length 8.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_email", $email) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_phone", $phone) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_fname", $fname) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_lname", $lname) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_company", $company) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("password", $password) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please use your Enterprise email to create an account.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Failed to create customer. Try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Passwords do not match.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("verify_customer", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter a value in OTP field.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_VALIDATION_FAILURE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Invalid one time passcode. Please enter a valid OTP.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_VALIDATION_FAILURE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "All the fields are required. Please enter valid entries.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_email", $email) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("password", $password) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_phone", $customerKey["phone"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Customer retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Invalid username or password. Please try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter valid Client ID and Client Secret.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_client_custom_token_endpoint_no_csecret", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "You can only add 1 application with free version. Upgrade to enterprise version if you want to add more applications.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mo_existing_app_flow", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oc_valid_discovery_ep", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oc_valid_discovery_ep", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_icon_width", stripslashes($_POST["mo_oauth_icon_width"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_icon_height", stripslashes($_POST["mo_oauth_icon_height"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_icon_margin", stripslashes($_POST["mo_oauth_icon_margin"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_icon_configure_css", stripcslashes(stripslashes($_POST["mo_oauth_icon_configure_css"]))) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your settings were saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "You MUST configure an application before you map attributes.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your settings are saved successfully.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_attr_option", $attr_option) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please fill up Email and Query fields to submit your query.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your query could not be submitted. Please try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Thanks for getting in touch! We shall get back to you shortly.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please fill up Usecase, Email field and Requested demo plan to submit your query.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Something went wrong! contact to your administrator") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", $output->message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", $output->message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_transactionId", $content["txId"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_message", "ERROR: <a href="http://php.net/manual/en/curl.installation.php" target="_blank">PHP cURL extension</a> is not installed or disabled. Resend OTP failed.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("verify_customer", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("new_registration", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_phone", $phone) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", " A one time passcode is sent to " . get_site_option("mo_oauth_admin_phone") . ". Please enter the otp here to verify your email.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "There was an error in sending SMS. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Plugin deactivated successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Thank you for the feedback.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Please Select one of the reasons ,if your reason is not mentioned please select Other Reasons") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("password", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Customer retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "You already have an account with miniOrange. Please enter a valid password.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("verify_customer", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("password", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Registered successfully.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OAUTH_REGISTRATION_COMPLETE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_new_customer", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "<a href="http://php.net/manual/en/curl.installation.php" target="_blank">PHP CURL extension</a> is not installed or disabled. Please enable it to continue.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_client_show_mo_server_message", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_user_meta(get_current_user_id(), "dismissed_wp_pointers", "") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
CRYPTOGRAPHY call to wp_create_user($user_email, $random_password, $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).,hash,None
CRYPTOGRAPHY call to wp_create_user($username, $random_password) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string). Returns (int|WP_Error).,hash,None
CRYPTOGRAPHY call to wp_update_user(["ID" => $user_id]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,hash,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['last_name', 'first_name', 'email', 'user', 'user_meta']) stored through WordPress function "update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.")", found in file mo_oauth_settings.php at line 533. 

[has_storage] PII of types (['last_name', 'first_name', 'email', 'user', 'user_meta']) stored through WordPress function "update_option("mo_oauth_transactionId", $content["txId"])", found in file mo_oauth_settings.php at line 534. 

[has_storage] PII of types (['last_name', 'first_name', 'email', 'user', 'user_meta']) stored through WordPress function "update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".")", found in file mo_oauth_settings.php at line 557. 

[has_storage] WP User info of types (['user', 'user_meta', 'password', 'email']) stored through WordPress function "wp_create_user($user_email, $random_password, $user_email)", found in file class-mo-oauth-widget.php at line 410. 

[has_storage] PII of types (['last_name', 'first_name', 'email', 'user', 'user_meta']) stored through WordPress function "update_option("mo_oauth_admin_phone", $customerKey["phone"])", found in file mo_oauth_settings.php at line 239. 

[has_storage] PII of types (['email']) stored through WordPress function "update_option("message", $output->message)", found in file mo_oauth_settings.php at line 494. 

[has_storage] PII of types (['last_name', 'first_name', 'email', 'user', 'user_meta']) stored through WordPress function "update_option("mo_oauth_admin_customer_key", $customerKey["id"])", found in file mo_oauth_settings.php at line 635. 

[has_storage] PII of types (['last_name', 'first_name', 'email', 'user', 'user_meta']) stored through WordPress function "update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.")", found in file mo_oauth_settings.php at line 515. 

[has_storage] PII of types (['email']) stored through WordPress function "update_option("mo_oauth_admin_email", $email)", found in file mo_oauth_settings.php at line 138. 

[has_storage] WP User info of types (['last_name', 'first_name', 'email', 'user', 'user_meta', 'password']) stored through WordPress function "wp_create_user($username, $random_password)", found in file class-mo-oauth-widget.php at line 423. 

[has_storage] WP User info of types (['last_name', 'first_name', 'email', 'user', 'user_meta', 'password']) stored through WordPress function "wp_update_user(["ID" => $user_id])", found in file class-mo-oauth-widget.php at line 425. 

[has_storage] PII of types (['last_name', 'first_name', 'email', 'user', 'user_meta']) stored through WordPress function "update_option("mo_oauth_admin_api_key", $customerKey["apiKey"])", found in file mo_oauth_settings.php at line 236. 

[has_storage] PII of types (['last_name', 'first_name', 'email', 'user', 'user_meta']) stored through WordPress function "update_option("mo_oauth_admin_customer_key", $customerKey["id"])", found in file mo_oauth_settings.php at line 235. 

[has_storage] PII of types (['last_name', 'first_name', 'email', 'user', 'user_meta']) stored through WordPress function "update_option("mo_oauth_apps_list", $appslist)", found in file admin/partials/apps/partials/app-list.php at line 79. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta(get_current_user_id(), "dismissed_wp_pointers", "")", found in file mo_oauth_settings.php at line 98. 

[has_storage] PII of types (['last_name', 'first_name', 'email', 'user', 'user_meta']) stored through WordPress function "update_option("mo_oauth_apps_list", $appslist)", found in file mo_oauth_settings.php at line 406. 

[has_storage] PII of types (['email']) stored through WordPress function "update_option("message", $output->message)", found in file mo_oauth_settings.php at line 497. 

[has_storage] PII of types (['last_name', 'first_name', 'email', 'user', 'user_meta']) stored through WordPress function "update_option("customer_token", $customerKey["token"])", found in file mo_oauth_settings.php at line 637. 

[has_storage] PII of types (['last_name', 'first_name', 'email', 'user', 'user_meta']) stored through WordPress function "update_option("mo_oauth_admin_api_key", $customerKey["apiKey"])", found in file mo_oauth_settings.php at line 636. 

[has_storage] PII of types (['last_name', 'first_name', 'email', 'user', 'user_meta']) stored through WordPress function "update_option("mo_oauth_apps_list", $appslist)", found in file class-mo-oauth-widget.php at line 173. 

[has_storage] PII of types (['email']) stored through WordPress function "update_option("mo_oauth_admin_email", $email)", found in file mo_oauth_settings.php at line 229. 

[has_storage] PII of types (['last_name', 'first_name', 'email', 'user', 'user_meta']) stored through WordPress function "update_option("customer_token", $customerKey["token"])", found in file mo_oauth_settings.php at line 237. 

[has_storage] Storage check is WP 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 533. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 534. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 557. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 239. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 494. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 635. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 515. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 138. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 236. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 235. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 79. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta(get_current_user_id(), "dismissed_wp_pointers", "") does not have corresponding deletion method. Storage method found in file mo_oauth_settings.php at line 98. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 406. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $output->message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 497. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 637. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 636. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file class-mo-oauth-widget.php at line 173. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 229. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file admin/partials/apps/partials/app-list.php at line 72. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_disable_authorization_header"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file admin/partials/apps/partials/app-list.php at line 74. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file admin/partials/apps/partials/app-list.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file admin/partials/apps/partials/app-list.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 56. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 58. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 59. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 60. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 61. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 62. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 63. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 64. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 65. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 66. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 240. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 242. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 243. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 640. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 641. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 659. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 668. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file mo_oauth_settings.php at line 669. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings.php at line 237. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Deletion access is NONE 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 15924. Found in file mo_oauth_settings.php at line 533 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 15935. Found in file mo_oauth_settings.php at line 534 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 16099. Found in file mo_oauth_settings.php at line 557 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 13835. Found in file mo_oauth_settings.php at line 239 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 15611. Found in file mo_oauth_settings.php at line 494 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 16729. Found in file mo_oauth_settings.php at line 635 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 15753. Found in file mo_oauth_settings.php at line 515 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 13126. Found in file mo_oauth_settings.php at line 138 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 13810. Found in file mo_oauth_settings.php at line 236 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 13801. Found in file mo_oauth_settings.php at line 235 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 2296. Found in file admin/partials/apps/partials/app-list.php at line 79 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 12781. Found in file mo_oauth_settings.php at line 98 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 15096. Found in file mo_oauth_settings.php at line 406 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 15628. Found in file mo_oauth_settings.php at line 497 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 16747. Found in file mo_oauth_settings.php at line 637 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 16738. Found in file mo_oauth_settings.php at line 636 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8883. Found in file class-mo-oauth-widget.php at line 173 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 13749. Found in file mo_oauth_settings.php at line 229 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 13819. Found in file mo_oauth_settings.php at line 237 

[Art.15, Right to access] Data access is NONE_BUT_NOT_REQUIRED 

[third_party] Third party at "https://demo.miniorange.com/wordpress-oauth/" used with data types ['email'], found in file mo_oauth_settings.php at line 478 . Personal data flows from sources with nodeID [15401, 15395, 15494]  

[third_party] Third party usage is CONFIRMED for data types ['email'] 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 377 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 505 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 346 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 291 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 556 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is securely encrypted with ['hash']. Found in file class-customer.php at line 444 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 267 

[encryption] API call that sends PII to "https://demo.miniorange.com/wordpress-oauth/" uses https. PII is insecurely encrypted with []. Found in file mo_oauth_settings.php at line 478 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 141 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 60 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 95 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 209 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? True 

[main] Is access in violation? False 

[main] Is third_party in violation? True 

[main] Is encryption in violation? True 

[main] Complaint? False 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        

##################
### Fix Report ###
##################

############################
# Data Deletion Fix Report #
############################

This report suggests fixes to comply with the GDPR Art. 17, Right to erasure (https://gdpr-info.eu/art-17-gdpr/). The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/adding-the-personal-data-eraser-to-your-plugin/ for more details.

1) Implement a function that deletes all the user data collected in the plugin. Sample code:


/**
* Removes all collected data of a user.
*
* @param string $email_address   email address to manipulate
* @param int    $page            pagination
*
* @return array
*/
function login-with-azure_remove_data( $email_address, $page = 1 ) {
    
    $page = (int) $page;


    //TODO: Delete the user data that was stored using Wordpress functions

    //Below is the sample code for deleting user meta and may need to be modified to suit the plugin.
    $user_id = get_user_by('email', $email_address)
    $key = 'email' //Sample user meta key
    if ( $customer->user_id > 0 ) {
        //Delete user meta data by $key
        delete_user_meta( $user_id, $key );
    }
        



    // Tell core if we have more data to delete still
    $done = true;
    return array(
        'items_removed'  => $items_removed, // true if collected data of a user is being deleted
        'items_retained' => $items_retained, // true if certain data needs to be retained
        'messages'       => sprintf( __( 'Data of user with email %s successfully deleted.', 'login-with-azure' ), $email_address ), // Put messages for data removal
        'done'           => $done, // true if all the removal processes are done (all data of the user is removed)
    );
}
        

2) Hook the deletion function to the Wordpress's Personal Data Removal tool


/**
* Registers all data erasers.
*
* @param array $exporters
*
* @return mixed
*/
function login-with-azure_register_privacy_erasers( $erasers ) {
    $erasers['my-plugin-slug'] = array(
        'eraser_friendly_name' => __( '<eraser name>', 'login-with-azure' ),
        'callback'             => 'login-with-azure_remove_data',
    );
    return $erasers;
}
        

add_filter( 'wp_privacy_personal_data_erasers', 'login-with-azure_register_privacy_erasers' );
        

        

#############################
# Privacy Policy Fix Report #
#############################

This report suggests fixes to comply with the GDPR Art. 13 (https://gdpr-info.eu/art-13-gdpr/) through including a privacy notice. The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/suggesting-text-for-the-site-privacy-policy/ for more details.

1) Implement a function that includes the privacy policy for the plugin and provide it to wordpress through wp_add_privacy_policy_content(). Sample code:


/**
* Adds a privacy policy statement.
*/
function login-with-azure_add_privacy_policy_content() {
    if ( ! function_exists( 'wp_add_privacy_policy_content' ) ) {
        return;
    }
    //TODO: modify the content below to include the privacy policy for the plugin.
    $content = '<p class="privacy-policy-tutorial">' . __( 'Some introductory content for the suggested text.', 'login-with-azure' ) . '</p>'
            . '<strong class="privacy-policy-tutorial">' . __( 'Suggested Text:', 'login-with-azure' ) . '</strong> '
            . sprintf(
                __( 'When you leave a comment on this site, we send your name, email address, IP address and comment text to example.com. Example.com does not retain your personal data. The example.com privacy policy is <a href="%1$s" target="_blank">here</a>.', 'login-with-azure' ),
                'https://example.com/privacy-policy'
            );
    wp_add_privacy_policy_content( 'login-with-azure', wp_kses_post( wpautop( $content, false ) ) );
}
        

2) Hook the privacy policy function to the Wordpress's admin initialization action.


add_action( 'admin_init', 'login-with-azure_add_privacy_policy_content' );
        

        


Disclaimer: The sample code provided above is only for reference and does not guarantee GDPR compliance. The recommended list of data to delete/export may not be comprehensive. 
        
Done.
