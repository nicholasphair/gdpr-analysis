Timeout in resolving values
Timeout in running neo4j query
Running Main.py on eventissimo

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:03.842497.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:02.128298.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 60 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.568379.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 6 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:01.027332.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 1917 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:01.530371.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 20 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:01.490742.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
Added 4 PHP_REACHES edges.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.073786.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 1040 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:52.104092.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 13716
Added 10669 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 69909
Added 56193 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:06.547094.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/backend.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/endpoint.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/eventissimo.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/frontend.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/function_fb.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/function.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/apievent/get.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/call_function/calendar.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/call_function/listEvents.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/function/duplicatePost.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/function/eventFB.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/function/repeatingEvent.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/function/shortcode.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/function/single_template.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/function/wejnswpwhitespacefix.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/function/widget.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/meta_post/data_events.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/meta_post/facebook_events.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/meta_post/images_events.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/meta_post/location_events.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/pages/events-template-single_personal.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/pages/events-template-single.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/pages/single-events.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/plugin/facebook/sdk-facebook/base_facebook.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/eventissimo/plugin/facebook/sdk-facebook/facebook.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:02.305278.

60 PHP_REACHES edges created
6 REACHES edges created
1000 PHP_REACHES edges created
1917 PHP_REACHES edges created
14 CALLS edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
11719 PHP_REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
12000 PHP_REACHES edges created
13000 PHP_REACHES edges created
14000 PHP_REACHES edges created
15000 PHP_REACHES edges created
16000 PHP_REACHES edges created
17000 PHP_REACHES edges created
18000 PHP_REACHES edges created
19000 PHP_REACHES edges created
20000 PHP_REACHES edges created
21000 PHP_REACHES edges created
22000 PHP_REACHES edges created
23000 PHP_REACHES edges created
24000 PHP_REACHES edges created
25000 PHP_REACHES edges created
26000 PHP_REACHES edges created
27000 PHP_REACHES edges created
28000 PHP_REACHES edges created
29000 PHP_REACHES edges created
30000 PHP_REACHES edges created
31000 PHP_REACHES edges created
32000 PHP_REACHES edges created
33000 PHP_REACHES edges created
34000 PHP_REACHES edges created
35000 PHP_REACHES edges created
36000 PHP_REACHES edges created
37000 PHP_REACHES edges created
38000 PHP_REACHES edges created
39000 PHP_REACHES edges created
40000 PHP_REACHES edges created
41000 PHP_REACHES edges created
42000 PHP_REACHES edges created
43000 PHP_REACHES edges created
44000 PHP_REACHES edges created
45000 PHP_REACHES edges created
46000 PHP_REACHES edges created
47000 PHP_REACHES edges created
48000 PHP_REACHES edges created
49000 PHP_REACHES edges created
50000 PHP_REACHES edges created
51000 PHP_REACHES edges created
52000 PHP_REACHES edges created
53000 PHP_REACHES edges created
54000 PHP_REACHES edges created
55000 PHP_REACHES edges created
56000 PHP_REACHES edges created
56193 PHP_REACHES edges created
69909 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 4934 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.403856.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:04.506068.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Added 270 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:12.395376.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 275 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.242482.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.756582.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 19591
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:04.273928.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.048665.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.032826.

545 PHP_REACHES edges created
545 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 433 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.161412.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
3 SQL operations to process.
SELECT meta_key, meta_value FROM $wpdb WHERE post_id=$post_id
SQL command (SELECT meta_key, meta_value FROM $wpdb WHERE post_id=$post_id) cannot be parsed correct.
INSERT INTO $wpdb (post_id, meta_key, meta_value) 
SQL command (INSERT INTO $wpdb (post_id, meta_key, meta_value) ) cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [6896, 975, 7001]
Added 0 SQL nodes. 0 out of 3 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:01.820573.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'<div id="message" class="error"><p>To view this page you need to set the app key and password of Facebook | <a href="edit.php?post_type=events&page=eventissimo_setting">Go to page</a></p></div>'' cannot be parsed correct.
HTML code '$'<div class="updated">
						<p>sprintf(__("Import event %s successful", "eventissimo"), $title)| <a href="post.php?postwp_insert_post($post)&action=edit"Edit</a></p>
					</div>'' cannot be parsed correct.
HTML code '$'<div class="wrap">
	<h2>Import you events from Facebook</h2>'' cannot be parsed correct.
HTML code '$'<input type="hidden" name="appTokenFb" id="appTokenFb" value=""/>
		<input type="hidden" name="appTokenUidFb" id="appTokenUidFb" value=""/>
		<input type="hidden" name="idAuthorFB" id="idAuthorFB" value=""/>
		<input type="hidden" name="appIdFb" id="appIdFb" value="FACEBOOOK_API_KEY"/> 
		<div id="fb-root"></div>'' cannot be parsed correct.
HTML code '$'<code>[<br/>
    	{<br/>
        "id": 123,<br/>
        "classname": 123,<br/>
        "randomColor": "#C913D5",<br/>
        "id_author": "1",<br/>
        "description": "test events for json",<br/>
        "title": "Test event",<br/>
        "url": "http://www.example.it/events/tests",<br/>
        "thumbs": htmlspecialchars("<img width="150" height="150" src="http://www.example.it/wp-content/uploads/2014/02/example150x150.jpg" class="attachment-thumbnail wp-post-image" alt="Example" />"),<br/>
        "cover":htmlspecialchars("<img width="690" height="300" src="http://www.example.it/wp-content/uploads/2014/02/example90x300.jpg" class="attachment-fb_cover_image wp-post-image" alt="Example" />"),<br/>
        "coverBig":htmlspecialchars("<img width="690" height="500" src="http://www.example.it/wp-content/uploads/2014/02/example.jpg" class="attachment-large wp-post-image" alt="Example" />"),<br/>
        "types": [<br/>
            {<br/>
                "term_id": 1,<br/>
                "name": "test1",<br/>
                "slug": "test1",<br/>
                "term_group": 0,<br/>
                "term_taxonomy_id": 1,<br/>
                "taxonomy": "typeEvents",<br/>
                "description": "",<br/>
                "parent": 0,<br/>
                "count": 1,<br/>
                "filter": "raw"<br/>
            }<br/>
        ],<br/>
        "categories": [<br/>
            {<br/>
                "term_id": 2,<br/>
                "name": "test2",<br/>
                "slug": "test2",<br/>
				"term_group": 0,<br/>
                "term_taxonomy_id": 2,<br/>
                "taxonomy": "eventscategories",<br/>
                "description": "",<br/>
                "parent": 0,<br/>
                "count": 1,<br/>
                "filter": "raw"<br/>
            },<br/>
            {<br/>
                "term_id": 3,<br/>
                "name": "test3",<br/>
                "slug": "test3",<br/>
                "term_group": 0,<br/>
                "term_taxonomy_id": 3,<br/>
                "taxonomy": "eventscategories",<br/>
                "description": "",<br/>
                "parent": 0,<br/>
                "count": 1,<br/>
                "filter": "raw"<br/>
            }<br/>
        ],<br/>
        "date_begin": "1391904000",<br/>
        "date_end": "1391904000",<br/>
        "hour_begin": "00:00",<br/>
        "hour_end": "03:00"<br/>
    },<br/> {..}<br/>]</code>'' cannot be parsed correct.
HTML code '$'404 - Service not found.'' cannot be parsed correct.
HTML code '$'To read: get_bloginfo("wpurl")/apievent/'' cannot be parsed correct.
HTML code '$'eventissimo_stamp_calendar($array, "#069c88")'' cannot be parsed correct.
HTML code '$'This is correct url'' cannot be parsed correct.
HTML code '$'List All Events Feed Rss get_bloginfo("wpurl")/apievent/get?type=rss'' cannot be parsed correct.
HTML code '$'List All Events Json get_bloginfo("wpurl")/apievent/get?type=json'' cannot be parsed correct.
HTML code '$'<h2>Parameters</h2>'' cannot be parsed correct.
HTML code '$'<tr><td width=\'25%\'><b>Parameters</b></td><td width=\'25%\'><b>Allowed values</b></td><td ><b>Example</b></td></tr>'' cannot be parsed correct.
HTML code '$'<tr><td>type</td><td>JSON | RSS</td><td>get_bloginfo("wpurl")/apievent/get?type=rss</td></tr>'' cannot be parsed correct.
HTML code '$'<tr>
	  			<td>search</td>
				<td>id_author | description | title</td>
				<td rowspan=\'2\'>get_bloginfo("wpurl")/apievent/get?type=rss&search=id_author&value=1</td>
			</tr>
			<tr>
				<td>value</td>
				<td>Term of search</td>
			</tr>

		</td></tr>'' cannot be parsed correct.
HTML code '$'<tr><td>defined</td><td>TODAY | MONTH</td><td>get_bloginfo("wpurl")/apievent/get?type=rss&defined=TODAY</td></tr>'' cannot be parsed correct.
HTML code '$'<tr><td>view</td><td>OLD | NEXT</td><td>get_bloginfo("wpurl")/apievent/get?type=rss&view=NEXT</td></tr>'' cannot be parsed correct.
HTML code '$'<h2>Structure Json</h2>'' cannot be parsed correct.
HTML code '$'<script type="text/javascript">
	var maxZoom ="get_option("wp_locationZoom")";
	var iconMarker = "plugins_url("images/pin.png", )";
	var url_pathPlugin ="plugin_dir_url()";
	var admin_ajax ="admin_url("admin-ajax.php")";
	</script'' cannot be parsed correct.
HTML code '$'<h2>Settings Plugin Eventissimo</h2>'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format"), $dataInizio)'' cannot be parsed correct.
HTML code '$'get_post_meta($post_id, "ora_inizio", true)'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format"), $dataFine)'' cannot be parsed correct.
HTML code '$'get_post_meta($post_id, "ora_fine", true)'' cannot be parsed correct.
HTML code '$'get_post_meta($post_id, "address", true)'' cannot be parsed correct.
HTML code '$'get_post_meta($post_id, "city", true)'' cannot be parsed correct.
HTML code '$'get_option("wp_locationCityDefault")'' cannot be parsed correct.
HTML code '$'get_option("wp_locationAdressDefault")'' cannot be parsed correct.
HTML code '$'get_option("wp_locationZoom")'' cannot be parsed correct.
HTML code '$'$latlongMaps'' cannot be parsed correct.
HTML code '$'Yes'' cannot be parsed correct.
HTML code '$'No'' cannot be parsed correct.
HTML code '$'get_option("wp_order_singleevent")'' cannot be parsed correct.
HTML code '$'<li id=\'$key\' class=\'ui-state-default\'>'' cannot be parsed correct.
HTML code '$'<input type=\'checkbox\' value=\'$key\' name=\'wp_view_singleevent[]\''' cannot be parsed correct.
HTML code '$'<span class=\'ui-icon ui-icon-arrowthick-2-n-s\'></span>ucfirst($text)'' cannot be parsed correct.
HTML code '$'Yes'' cannot be parsed correct.
HTML code '$'No'' cannot be parsed correct.
HTML code '$'get_option("wp_publicatePageId")'' cannot be parsed correct.
HTML code '$'get_option("wp_fbAppId")'' cannot be parsed correct.
HTML code '$'get_option("wp_fbprivateKey")'' cannot be parsed correct.
HTML code '$'plugins_url("images/exfb.png", )'' cannot be parsed correct.
HTML code '$'Example pages App Facebook'' cannot be parsed correct.
HTML code '$'rand(0, time())'' cannot be parsed correct.
HTML code '$'$event'' cannot be parsed correct.
HTML code '$'addslashes($event->title)'' cannot be parsed correct.
HTML code '$'addslashes($images)'' cannot be parsed correct.
HTML code '$'
		<form role="search" method="post" id="searchform" action="#">
            <input type="text" name="s1" id="s1" value="$termSearch"/>
            <input type="submit" id="searchsubmit" value="Search" />
        </form>
	'' cannot be parsed correct.
HTML code '$'<li><a href=\'get_term_link($term->slug, $type)\'>$term</a>'' cannot be parsed correct.
HTML code '$' ($term)'' cannot be parsed correct.
HTML code '$'<ul>'' cannot be parsed correct.
HTML code '$'$e'' cannot be parsed correct.
HTML code '$'$e'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'$this->get_field_id("num")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("num")'' cannot be parsed correct.
HTML code '$'5'' cannot be parsed correct.
HTML code '$'$this->get_field_id("dateview")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("dateview")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("dateview")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("filter")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("filter")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("filter")'' cannot be parsed correct.
HTML code '$'$before_widget'' cannot be parsed correct.
HTML code '$'$before_titleapply_filters("eventissimo_taxonomy", $instance["title"])$after_title'' cannot be parsed correct.
HTML code '$'eventissimo_frontend_taxonomy($numview, $type)'' cannot be parsed correct.
HTML code '$'$after_widget'' cannot be parsed correct.
HTML code '$'get_the_ID()'' cannot be parsed correct.
HTML code '$'eventissimo_order(strtoupper(trim($key)), $post_id)'' cannot be parsed correct.
HTML code '$'$before_widget'' cannot be parsed correct.
HTML code '$'$before_titleapply_filters("eventissimo_list", $instance["title"])$after_title'' cannot be parsed correct.
HTML code '$'eventissimo_frontend_list($num, $dateview, "NEXT", FALSE, "LIST", $filter)'' cannot be parsed correct.
HTML code '$'$after_widget'' cannot be parsed correct.
HTML code '$'$this->get_field_id("title")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("title")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("title")'' cannot be parsed correct.
HTML code '$'List Events'' cannot be parsed correct.
HTML code '$'$this->get_field_id("num")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("title")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("title")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("title")'' cannot be parsed correct.
HTML code '$'apply_filters("eventissimo_list", $instance["title"])'' cannot be parsed correct.
HTML code '$'$this->get_field_id("numview")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("numview")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("numview")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("type")'' cannot be parsed correct.
HTML code '$'$this->get_field_id("type")'' cannot be parsed correct.
HTML code '$'$this->get_field_name("type")'' cannot be parsed correct.
HTML code '$'<div class=\'error\'>Remove events: $e</div>'' cannot be parsed correct.
HTML code '$'\'$hour\','' cannot be parsed correct.
HTML code '$'get_post_custom($post->ID)'' cannot be parsed correct.
HTML code '$'Post events: $e'' cannot be parsed correct.
HTML code '$'deleteEventsFacebook($id["id"])'' cannot be parsed correct.
HTML code '$'strtoupper(substr(md5(rand()), 0, 6))'' cannot be parsed correct.
HTML code '$'date_i18n("Y-m-d", $values["data_inizio"][0])'' cannot be parsed correct.
HTML code '$'date_i18n("Y-m-d", $values["data_fine"][0])'' cannot be parsed correct.
HTML code '$'date_i18n("Y-m-d", $timestampUntil)'' cannot be parsed correct.
HTML code '$'get_the_date(get_option("date_format"))'' cannot be parsed correct.
HTML code '$'display:block'' cannot be parsed correct.
HTML code '$'get_post_custom($post->ID)'' cannot be parsed correct.
HTML code '$'display:block'' cannot be parsed correct.
HTML code '$'get_the_date(get_option("date_format"))'' cannot be parsed correct.
HTML code '$'get_post_custom($post->ID)'' cannot be parsed correct.
HTML code '$'display:none'' cannot be parsed correct.
HTML code '$'display:none'' cannot be parsed correct.
HTML code '$'display:none'' cannot be parsed correct.
HTML code '$'eventissimo_yesno($everyYear)'' cannot be parsed correct.
HTML code '$'eventissimo_settstamp($dayRepeatSelect)'' cannot be parsed correct.
HTML code '$'display:none'' cannot be parsed correct.
HTML code '$'  <input type=\'checkbox\' id=\'AllCheckedMonth\' checked=\'checked\'> '' cannot be parsed correct.
HTML code '$'eventissimo_monthtstamp($dayRepeatMount)'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format"), strtotime("+1 years", time()))'' cannot be parsed correct.
HTML code '$'<p style="padding:10px 0 0 0;">These settings enable you to manage the gallery of this event. Upload your images and use "Manage Images" to edit, reorder and delete images.</p>'' cannot be parsed correct.
HTML code '$'wp_create_nonce(basename())'' cannot be parsed correct.
HTML code '$'<li class="image" style="float:left" data-attachment_id="$attachment_id">
									wp_get_attachment_image($attachment_id, [80, 80])
										<ul class="actions">
											<li><a href="#" class="delete" title="Delete image"Delete</a></li>
										</ul>
									</li>'' cannot be parsed correct.
HTML code '$'get_post_custom($post->ID)'' cannot be parsed correct.
HTML code '$'FACEBOOOK_API_KEY'' cannot be parsed correct.
HTML code '$'get_post_custom($post->ID)'' cannot be parsed correct.
HTML code '$'createStatusPublicFacebook($statusEventFB)'' cannot be parsed correct.
HTML code '$'get_post_custom($post->ID)'' cannot be parsed correct.
HTML code '$'get_post_custom($post->ID)'' cannot be parsed correct.
HTML code '$'get_post_custom($post->ID)'' cannot be parsed correct.
HTML code '$'get_post_meta($post->ID, "_eventissimo_image_gallery", true)'' cannot be parsed correct.
HTML code '$'get_post_custom($post->ID)'' cannot be parsed correct.
HTML code '$'get_post_custom($post->ID)'' cannot be parsed correct.
HTML code '$'get_post_custom($post->ID)'' cannot be parsed correct.
HTML code '$'get_avatar(get_the_author_meta("user_email"), "128")'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'
		<script>
			jQuery(document).ready(function() {
				checkFBStatus();  	
			});
		</script>'' cannot be parsed correct.
HTML code '$'<br/>'' cannot be parsed correct.
HTML code '$'<ul><li>'' cannot be parsed correct.
HTML code '$' <li>'' cannot be parsed correct.
HTML code '$'</li>'' cannot be parsed correct.
HTML code '$'</li></ul>'' cannot be parsed correct.
HTML code '$'<table width=\'100%\' border=\'1\'>'' cannot be parsed correct.
HTML code '$'</table>'' cannot be parsed correct.
HTML code '$'<div class="wrap">'' cannot be parsed correct.
HTML code '$'<form method="post" action="options.php">'' cannot be parsed correct.
HTML code '$' '' cannot be parsed correct.
HTML code '$'<br/>'' cannot be parsed correct.
HTML code '$' '' cannot be parsed correct.
HTML code '$'<br/>'' cannot be parsed correct.
HTML code '$'</h3>
				
					<table class="form-table">
                        <tr valign="top">
                        
							<td>
							
								<table>
							
									<tr valign="top">
									<th scope="row">'' cannot be parsed correct.
HTML code '$'</strong>
                                    
                                    </td>
									</tr>
								
								</table>
								
                                
							</td>
						
							<td>
							
								<h5>'' cannot be parsed correct.
HTML code '$'</h3>
		   
           <table class="form-table">
                    
                    <tr>
                    	<td width="50%">
                        	<label>'' cannot be parsed correct.
HTML code '$'</label>
                       		
                        '' cannot be parsed correct.
HTML code '$'selected=\'selected\''' cannot be parsed correct.
HTML code '$'</option>
                                
                                 <option value="NO" '' cannot be parsed correct.
HTML code '$'selected=\'selected\''' cannot be parsed correct.
HTML code '$'</option>
                              </select>
                              
                              <p>'' cannot be parsed correct.
HTML code '$' (single-events.php)</label>
                         <input type="hidden" value="'' cannot be parsed correct.
HTML code '$'checked=\'checked\''' cannot be parsed correct.
HTML code '$'>'' cannot be parsed correct.
HTML code '$'</li>'' cannot be parsed correct.
HTML code '$'</h3>
            
            <p>
			'' cannot be parsed correct.
HTML code '$'selected=\'selected\''' cannot be parsed correct.
HTML code '$'                                        
                                         <option value="no" '' cannot be parsed correct.
HTML code '$'selected=\'selected\''' cannot be parsed correct.
HTML code '$'                                    </select>
                                    
                                    </td>
                                    
                                 </tr>
                                  
                                  <tr valign="top">
                                    <th scope="row">
                                        '' cannot be parsed correct.
HTML code '$'" height="80%">
                        
                        </td>
                     
                </table>
           

	  '' cannot be parsed correct.
HTML code '$'</form></div>'' cannot be parsed correct.
HTML code '$'"'' cannot be parsed correct.
HTML code '$'<ul>'' cannot be parsed correct.
HTML code '$'</li>'' cannot be parsed correct.
HTML code '$'</ul>'' cannot be parsed correct.
HTML code '$'selected=\'selected\''' cannot be parsed correct.
HTML code '$'selected=\'selected\''' cannot be parsed correct.
HTML code '$'selected=\'selected\''' cannot be parsed correct.
HTML code '$'selected=\'selected\''' cannot be parsed correct.
HTML code '$'selected=\'selected\''' cannot be parsed correct.
HTML code '$'selected=\'selected\''' cannot be parsed correct.
HTML code '$'selected=\'selected\''' cannot be parsed correct.
HTML code '$'selected=\'selected\''' cannot be parsed correct.
HTML code '$'selected=\'selected\''' cannot be parsed correct.
HTML code '$'\'\''' cannot be parsed correct.
HTML code '$'</h4>  
	    <textarea name="descrizione" style="width:100%;height:150px" id="descrizione" >'' cannot be parsed correct.
HTML code '$'<br/>'' cannot be parsed correct.
HTML code '$'"/>

    <input type="hidden" name="data_inizio_yy-mm-dd" id="data_inizio_yy-mm-dd" value="'' cannot be parsed correct.
HTML code '$'</h4></td></tr>
    
	    <tr style=\'display:block;\'>
		    <td width="60px">
			    <label for="data_inizio">'' cannot be parsed correct.
HTML code '$'</label>  
		    </td>
		    <td width="60px">
	    	  <input type="text" name="data_inizio" readonly=\'true\' class="required" id="data_inizio" value="'' cannot be parsed correct.
HTML code '$'</label>  
		    </td>
		    <td width="60px">
	    	  <input type="text" name="data_fine" readonly=\'true\'  class="required" id="data_fine" value="'' cannot be parsed correct.
HTML code '$' <input name="dayRepeat" id="chkRepeat" type="checkbox" '' cannot be parsed correct.
HTML code '$'</strong></td>
                </tr>
            </thead>
            <tbody id="repeatSelect" style="'' cannot be parsed correct.
HTML code '$'</label>  
                        <select   name="EveryYear" id="EveryYear">
                            '' cannot be parsed correct.
HTML code '$'</h5>
                    </td>
                </tr>
                
                <tr valign="top">
                    
                    <td>
                        
                        <table>
                            <tr valign="top">
                                <td width="20%">
                                    <label for="dayRepeatSelect">'' cannot be parsed correct.
HTML code '$'</label>				
                                </td>
                                <td width="80%">
                                    '' cannot be parsed correct.
HTML code '$'<div class=\'blockCheched\'><b>'' cannot be parsed correct.
HTML code '$'</b></div>'' cannot be parsed correct.
HTML code '$'<input type="hidden" name="eventissimo_meta_box_nonce" value="'' cannot be parsed correct.
HTML code '$'" /'' cannot be parsed correct.
HTML code '$' 
						<input type="checkbox" name="autoFb" id="autoFb" value="Yes"/>
                        
                        
					'' cannot be parsed correct.
HTML code '$' <a href="edit.php?post_type=events&page=eventissimo_setting"> '' cannot be parsed correct.
HTML code '$'</a>'' cannot be parsed correct.
HTML code '$'</label></td>
            <td width=\'80%\'>
            	
                <input type="text" style="width:100%" name="urlEventFB" '' cannot be parsed correct.
HTML code '$'</label></td>
            <td width=\'80%\'><input type="text" style="width:100%" name="urlEventSite" id="urlEventSite" value="'' cannot be parsed correct.
HTML code '$'</h4>  

    <table id=\'location\'>
    
    
	    <tr style=\'display:block;\'>
		    
            <td colspan="2"></td>
            
            <td width="40%">
			    
                <table>
							
                        <tr valign="top">
                        	<th scope="row">'' cannot be parsed correct.
HTML code '$'</strong>
                            
                        	</td>
                        </tr>
                        
                        
                    
                    </table>

		    </td>
		    
            <script>
			jQuery(document).ready(function() {
				
				var address = jQuery("#city").val() + " " + jQuery("#address").val();
				getLangLat(address,jQuery("#latlongMaps").val(),maxZoom);

				
				jQuery("#updateMaps").click(function(){
					var address = jQuery("#city").val() + " " + jQuery("#address").val();
					getLangLat(address,"",maxZoom);
				});
				
				
			});
		</script>
		    <td width="60%">
           		 <h5>'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:19.583172.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.049108.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 16 do_action/apply_filters calls and 34 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:02.367665.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running FileProDetector
### Start running FrontBaseDetector
### Finish running DbplusDetector
### Start running HashDetector
### Finish running DbaseDetector
### Start running IBMDb2Detector
### Finish running CubridDetector
### Start running InformixDetector
### Finish running IBMDb2Detector
### Start running IngresDetector
### Finish running FirebirdInterBaseDetector
### Start running maxdbDetector
### Finish running FrontBaseDetector
### Start running MongoDbDetector
### Finish running HashDetector
### Start running MongoDetector
### Finish running ArrayElementDetector
### Start running MsqlDetector
### Finish running MongoDetector
### Start running MySQLDetector
### Finish running InformixDetector
### Start running MySQLiDetector
### Finish running MongoDbDetector
### Start running Oci8Detector
### Finish running MySQLDetector
### Start running OpenSSLDetector
### Finish running IngresDetector
### Start running ParadoxDetector
### Finish running MsqlDetector
### Start running PasswordHashingDetector
### Finish running OpenSSLDetector
### Start running PhpCurlDetector
### Finish running Oci8Detector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running ParadoxDetector
### Start running PHPRetrievalDetector
### Finish running PHPRetrievalDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PHPStorageDetector
### Start running PhpVarDetector
### Finish running PasswordHashingDetector
### Start running PostgreSQLDetector
### Finish running PostgreSQLDetector
### Start running PropertyDetector
### Finish running PhpVarDetector
### Start running Sqlite3Detector
### Finish running PropertyDetector
### Start running SqliteDetector
### Finish running Sqlite3Detector
### Start running SqlServerDetector
### Finish running SqlServerDetector
### Start running SybaseDetector
### Finish running SqliteDetector
### Start running TokyoTyrantDetector
### Finish running TokyoTyrantDetector
### Start running UserInputDetector
### Finish running PHPIncludedDetector
### Start running VariableDetector
### Finish running SybaseDetector
### Start running WordpressHashingFnDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressRemoteDetector
### Finish running PhpCurlDetector
### Start running WordPressRetrievalDetector
### Finish running WordPressRemoteDetector
### Start running WordPressStorageDetector
### Finish running UserInputDetector
### Start running WP_UserDetector
### Finish running WP_UserDetector
### Start running GenericDatabaseUsageDetector
### Finish running GenericDatabaseUsageDetector
### Start running GenericEncryptionDetector
### Finish running VariableDetector
### Start running DeletionDetector
### Finish running GenericEncryptionDetector
### Start running UninstallDetector
### Finish running maxdbDetector
### Finish running MySQLiDetector
### Finish running UninstallDetector
### Finish running DeletionDetector
### Finish running WordPressStorageDetector
### Finish running WordPressRetrievalDetector
### Finished running detectors
meta_post/facebook_events.php:200
  - Request variable '$_POST["address"]' of personal types {'address'} is found.
  - Data types: address
meta_post/facebook_events.php:200
  - Request variable '$_POST["address"]' of personal types {'address'} is found.
  - Data types: address
meta_post/location_events.php:112
  - Request variable '$_POST["address"]' of personal types {'address'} is found.
  - Data types: address
meta_post/location_events.php:112
  - Request variable '$_POST["address"]' of personal types {'address'} is found.
  - Data types: address 

plugin/facebook/sdk-facebook/base_facebook.php:961
  - hash_hmac called with approved hash algorithm sha256.
plugin/facebook/sdk-facebook/base_facebook.php:1066
  - hash_hmac called with approved hash algorithm sha256.
plugin/facebook/sdk-facebook/base_facebook.php:1103
  - hash_hmac called with approved hash algorithm sha256. 

backend.php:110
  - MD5 called with parameters [rand]. Ignore if [rand] does not contain personal information.
meta_post/data_events.php:69
  - MD5 called with parameters [rand]. Ignore if [rand] does not contain personal information.
meta_post/data_events.php:71
  - MD5 called with parameters [rand]. Ignore if [rand] does not contain personal information.
plugin/facebook/sdk-facebook/base_facebook.php:779
  - MD5 called with parameters [uniqid, true, mt_rand]. Ignore if [uniqid, true, mt_rand] does not contain personal information.
plugin/facebook/sdk-facebook/facebook.php:102
  - MD5 called with parameters [uniqid, true, mt_rand]. Ignore if [uniqid, true, mt_rand] does not contain personal information. 

function.php:206
  - object property '$post->address' of personal types {'address'} is found.
  - Data types: address
function.php:248
  - object property '$post->address' of personal types {'address'} is found.
  - Data types: address
function/duplicatePost.php:43
  - object property '$post->post_password' of personal types {'password'} is found.
  - Data types: password 

function/eventFB.php:50
  - variable '$address' of personal types {'address'} is found.
  - Data types: address
function/eventFB.php:52
  - variable '$address' of personal types {'address'} is found.
  - Data types: address
function/single_template.php:46
  - variable '$address' of personal types {'address'} is found.
  - Data types: address
function/single_template.php:326
  - variable '$address' of personal types {'address'} is found.
  - Data types: address
function/single_template.php:338
  - variable '$address' of personal types {'address'} is found.
  - Data types: address
meta_post/facebook_events.php:200
  - variable '$address' of personal types {'address'} is found.
  - Data types: address
meta_post/facebook_events.php:209
  - variable '$address' of personal types {'address'} is found.
  - Data types: address
meta_post/facebook_events.php:217
  - variable '$address' of personal types {'address'} is found.
  - Data types: address
meta_post/location_events.php:29
  - variable '$address' of personal types {'address'} is found.
  - Data types: address
meta_post/location_events.php:35
  - variable '$address' of personal types {'address'} is found.
  - Data types: address
meta_post/location_events.php:59
  - variable '$address' of personal types {'address'} is found.
  - Data types: address 

apievent/get.php:28
  - RETRIEVAL call to get_option("blog_charset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
apievent/get.php:29
  - RETRIEVAL call to get_option("blog_charset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
apievent/get.php:54
  - RETRIEVAL call to get_the_author_meta("display_name", $event->id_author) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).
  - Data types: user_meta
apievent/get.php:58
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
apievent/get.php:58
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
apievent/get.php:82
  - RETRIEVAL call to get_option("blog_charset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
backend.php:40
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
backend.php:46
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
call_function/listEvents.php:22
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
call_function/listEvents.php:25
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:28
  - RETRIEVAL call to get_option("wp_fbAppId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:29
  - RETRIEVAL call to get_option("wp_fbprivateKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:30
  - RETRIEVAL call to get_option("wp_publicatefeedFB") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:251
  - RETRIEVAL call to get_post_meta($post_id, "data_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:252
  - RETRIEVAL call to get_post_meta($post_id, "data_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:256
  - RETRIEVAL call to get_post_meta($post_id, "EveryYear", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:257
  - RETRIEVAL call to get_post_meta($post_id, "dayRepeat", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:258
  - RETRIEVAL call to get_post_meta($post_id, "allDateRepeat", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:259
  - RETRIEVAL call to get_post_meta($post_id, "dayRepeatSelect", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:259
  - RETRIEVAL call to get_post_meta($post_id, "dayRepeatSelect", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:260
  - RETRIEVAL call to get_post_meta($post_id, "dayRepeatMount", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:260
  - RETRIEVAL call to get_post_meta($post_id, "dayRepeatMount", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:267
  - RETRIEVAL call to get_post_meta($post_id, "untilRepeat", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:276
  - RETRIEVAL call to get_post_meta($post_id, "data_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:280
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:280
  - RETRIEVAL call to get_post_meta($post_id, "untilRepeat", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:286
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:288
  - RETRIEVAL call to get_post_meta($post_id, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:290
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:292
  - RETRIEVAL call to get_post_meta($post_id, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:298
  - RETRIEVAL call to get_post_meta($post_id, "address", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:300
  - RETRIEVAL call to get_post_meta($post_id, "city", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
eventissimo.php:401
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:402
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:426
  - RETRIEVAL call to get_option("wp_locationZoom") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:445
  - RETRIEVAL call to get_option("wp_locationCityDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:445
  - RETRIEVAL call to get_option("wp_locationAdressDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:488
  - RETRIEVAL call to get_option("wp_locationCityDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:493
  - RETRIEVAL call to get_option("wp_locationAdressDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:502
  - RETRIEVAL call to get_option("wp_locationZoom") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:536
  - RETRIEVAL call to get_option("UseSingleTemplateDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:560
  - RETRIEVAL call to get_option("wp_order_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:564
  - RETRIEVAL call to get_option("wp_order_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:566
  - RETRIEVAL call to get_option("wp_view_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:616
  - RETRIEVAL call to get_option("wp_publicatefeedFB") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:639
  - RETRIEVAL call to get_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:647
  - RETRIEVAL call to get_option("wp_fbAppId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:653
  - RETRIEVAL call to get_option("wp_fbprivateKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
eventissimo.php:682
  - RETRIEVAL call to get_post_meta(get_the_ID(), "idEventFfb", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:180
  - RETRIEVAL call to get_posts($args). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).
function.php:192
  - RETRIEVAL call to get_post_meta($id_events, "data_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:192
  - RETRIEVAL call to get_post_meta($id_events, "data_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:196
  - RETRIEVAL call to get_post_meta($id_events, "colorRandom", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:198
  - RETRIEVAL call to get_post_meta($id_events, "descrizione", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:211
  - RETRIEVAL call to get_post_meta($id_events, "data_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:211
  - RETRIEVAL call to get_post_meta($id_events, "data_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:213
  - RETRIEVAL call to get_post_meta($id_events, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:213
  - RETRIEVAL call to get_post_meta($id_events, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:214
  - RETRIEVAL call to get_post_meta($id_events, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:214
  - RETRIEVAL call to get_post_meta($id_events, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:218
  - RETRIEVAL call to get_post_meta($id_events, "allDateRepeat", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:218
  - RETRIEVAL call to get_post_meta($id_events, "allDateRepeat", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:228
  - RETRIEVAL call to get_post_meta($id_events, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:228
  - RETRIEVAL call to get_post_meta($id_events, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:229
  - RETRIEVAL call to get_post_meta($id_events, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:229
  - RETRIEVAL call to get_post_meta($id_events, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:237
  - RETRIEVAL call to get_post_meta($id_events, "colorRandom", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:239
  - RETRIEVAL call to get_post_meta($id_events, "descrizione", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:255
  - RETRIEVAL call to get_post_meta($id_events, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:255
  - RETRIEVAL call to get_post_meta($id_events, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:256
  - RETRIEVAL call to get_post_meta($id_events, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:256
  - RETRIEVAL call to get_post_meta($id_events, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function.php:276
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
function.php:277
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
function.php:278
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
function.php:292
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
function/duplicatePost.php:18
  - RETRIEVAL call to get_post($post_id) alters data types {'wp_post', 'post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: wp_post, post, post_meta
function/duplicatePost.php:24
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
function/eventFB.php:8
  - RETRIEVAL call to get_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
function/eventFB.php:10
  - RETRIEVAL call to get_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
function/eventFB.php:75
  - RETRIEVAL call to get_option("wp_publicatefeedFB" != "no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
function/single_template.php:6
  - RETRIEVAL call to get_post() alters data types {'wp_post', 'post', 'post_meta'}. Returns (WP_Post|array|null).
  - Data types: wp_post, post, post_meta
function/single_template.php:7
  - RETRIEVAL call to get_option("UseSingleTemplateDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
function/single_template.php:36
  - RETRIEVAL call to get_post_meta($post_id, "data_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:38
  - RETRIEVAL call to get_post_meta($post_id, "data_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:40
  - RETRIEVAL call to get_post_meta($post_id, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:42
  - RETRIEVAL call to get_post_meta($post_id, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:44
  - RETRIEVAL call to get_post_meta($post_id, "city", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:44
  - RETRIEVAL call to get_post_meta($post_id, "city", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:46
  - RETRIEVAL call to get_post_meta($post_id, "address", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:46
  - RETRIEVAL call to get_post_meta($post_id, "address", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:48
  - RETRIEVAL call to get_post_meta($post_id, "latlongMaps", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:48
  - RETRIEVAL call to get_post_meta($post_id, "latlongMaps", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:50
  - RETRIEVAL call to get_post_meta($post_id, "idEventFfb", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:50
  - RETRIEVAL call to get_post_meta($post_id, "idEventFfb", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:52
  - RETRIEVAL call to get_post_meta($post_id, "urlEventFB", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:52
  - RETRIEVAL call to get_post_meta($post_id, "urlEventFB", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:182
  - RETRIEVAL call to get_the_author_meta("display_name") alters data types {'user_meta'}. Passed arguments: 0: $field (string). Returns (string).
  - Data types: user_meta
function/single_template.php:182
  - RETRIEVAL call to get_the_author_meta("ID") alters data types {'user_meta'}. Passed arguments: 0: $field (string). Returns (string).
  - Data types: user_meta
function/single_template.php:182
  - RETRIEVAL call to get_the_author_meta("ID") alters data types {'user_meta'}. Passed arguments: 0: $field (string). Returns (string).
  - Data types: user_meta
function/single_template.php:184
  - RETRIEVAL call to get_the_author_meta("display_name") alters data types {'user_meta'}. Passed arguments: 0: $field (string). Returns (string).
  - Data types: user_meta
function/single_template.php:200
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
function/single_template.php:202
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
function/single_template.php:228
  - RETRIEVAL call to get_post_meta($post_id, "descrizione", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:240
  - RETRIEVAL call to get_post_meta($post_id, "urlEventSite", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:240
  - RETRIEVAL call to get_post_meta($post_id, "urlEventSite", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:336
  - RETRIEVAL call to get_option("wp_locationZoom") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
function/single_template.php:384
  - RETRIEVAL call to get_post_meta($post_id, "_eventissimo_image_gallery", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
function/single_template.php:390
  - RETRIEVAL call to get_posts("post_parent=" . $post_id . "&numberposts=-1&post_type=attachment&orderby=menu_order&order=ASC&post_mime_type=image&fields=ids"). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).
function/single_template.php:445
  - RETRIEVAL call to get_option("wp_view_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
function_fb.php:67
  - RETRIEVAL call to get_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
function_fb.php:68
  - RETRIEVAL call to get_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
function_fb.php:90
  - RETRIEVAL call to get_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/data_events.php:27
  - RETRIEVAL call to get_post_custom($post->ID). Passed arguments: 0: $post_id (int). Returns (array).
meta_post/data_events.php:33
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/data_events.php:33
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/data_events.php:35
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/data_events.php:40
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/data_events.php:40
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/data_events.php:42
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/data_events.php:53
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/data_events.php:56
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/facebook_events.php:28
  - RETRIEVAL call to get_post_custom($post->ID). Passed arguments: 0: $post_id (int). Returns (array).
meta_post/facebook_events.php:33
  - RETRIEVAL call to get_option("wp_fbAppId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/facebook_events.php:34
  - RETRIEVAL call to get_option("wp_fbprivateKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/facebook_events.php:166
  - RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/facebook_events.php:169
  - RETRIEVAL call to get_option("timezone_string") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/facebook_events.php:171
  - RETRIEVAL call to get_option("timezone_string") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/facebook_events.php:231
  - RETRIEVAL call to get_option("wp_fbAppId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/facebook_events.php:232
  - RETRIEVAL call to get_option("wp_fbprivateKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/images_events.php:50
  - RETRIEVAL call to get_post_meta($post->ID, "_eventissimo_image_gallery", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
meta_post/images_events.php:53
  - RETRIEVAL call to get_posts("post_parent=" . $post->ID . "&numberposts=-1&post_type=attachment&orderby=menu_order&order=ASC&post_mime_type=image&fields=ids"). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).
meta_post/location_events.php:27
  - RETRIEVAL call to get_post_custom($post->ID). Passed arguments: 0: $post_id (int). Returns (array).
meta_post/location_events.php:28
  - RETRIEVAL call to get_option("wp_locationCityDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
meta_post/location_events.php:29
  - RETRIEVAL call to get_option("wp_locationAdressDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
pages/events-template-single.php:14
  - RETRIEVAL call to get_option("wp_order_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
pages/events-template-single_personal.php:16
  - RETRIEVAL call to get_option("wp_order_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
pages/events-template-single_personal.php:26
  - RETRIEVAL call to get_the_author_meta("description") alters data types {'user_meta'}. Passed arguments: 0: $field (string). Returns (string).
  - Data types: user_meta
pages/events-template-single_personal.php:28
  - RETRIEVAL call to get_the_author_meta("user_email") alters data types {'user_meta'}. Passed arguments: 0: $field (string). Returns (string).
  - Data types: user_meta
pages/events-template-single_personal.php:29
  - RETRIEVAL call to the_author_meta("display_name") alters data types {'user_meta'}. Passed arguments: 0: $field (string).
  - Data types: user_meta
pages/events-template-single_personal.php:30
  - RETRIEVAL call to the_author_meta("description") alters data types {'user_meta'}. Passed arguments: 0: $field (string).
  - Data types: user_meta
pages/single-events.php:14
  - RETRIEVAL call to get_option("wp_order_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option 

backend.php:149
  - STORAGE call to wp_insert_post($post). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
backend.php:151
  - STORAGE call to add_post_meta($the_post_id, "descrizione", $description, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: post_meta
backend.php:152
  - STORAGE call to add_post_meta($the_post_id, "statusEventFB", $privacy, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: post_meta
backend.php:153
  - STORAGE call to add_post_meta($the_post_id, "idEventFfb", $id, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: post_meta
backend.php:154
  - STORAGE call to add_post_meta($the_post_id, "urlEventFB", "https://www.facebook.com/" . $id, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: post_meta
backend.php:155
  - STORAGE call to add_post_meta($the_post_id, "idAuthorFB", $owner, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: post_meta
backend.php:156
  - STORAGE call to add_post_meta($the_post_id, "data_inizio", $dateBegin, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: post_meta
backend.php:157
  - STORAGE call to add_post_meta($the_post_id, "data_fine", $dateEnd, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: post_meta
backend.php:158
  - STORAGE call to add_post_meta($the_post_id, "ora_inizio", $hourBegin, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: post_meta
backend.php:159
  - STORAGE call to add_post_meta($the_post_id, "ora_fine", $hourEnd, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: post_meta
backend.php:160
  - STORAGE call to add_post_meta($the_post_id, "colorRandom", $randomColor, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: post_meta
backend.php:161
  - STORAGE call to add_post_meta($the_post_id, "city", $location, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: post_meta
backend.php:162
  - STORAGE call to add_post_meta($the_post_id, "address", $venue["address"] . " " . $venue["street"], true) alters data types {'address', 'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: address, post_meta
backend.php:163
  - STORAGE call to add_post_meta($the_post_id, "latlongMaps", $venue["latitude"] . "," . $venue["longitude"], true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).
  - Data types: post_meta
eventissimo.php:67
  - STORAGE call to add_option("wp_locationCityDefault", "Italy") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
eventissimo.php:70
  - STORAGE call to add_option("wp_locationAdressDefault", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
eventissimo.php:73
  - STORAGE call to add_option("wp_locationPosition", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
eventissimo.php:76
  - STORAGE call to add_option("wp_locationUrl", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
eventissimo.php:79
  - STORAGE call to add_option("wp_locationZoom", "15") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
eventissimo.php:82
  - STORAGE call to add_option("wp_fbUser", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
eventissimo.php:85
  - STORAGE call to add_option("wp_fbAppId", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
eventissimo.php:88
  - STORAGE call to add_option("wp_fbprivateKey", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
eventissimo.php:91
  - STORAGE call to add_option("wp_publicatefeedFB", "no") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
eventissimo.php:94
  - STORAGE call to add_option("wp_ownerEventFB", "user") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
eventissimo.php:97
  - STORAGE call to add_option("wp_publicatePageId", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
eventissimo.php:100
  - STORAGE call to add_option("UseSingleTemplateDefault", "YES") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
eventissimo.php:103
  - STORAGE call to add_option("wp_order_singleevent", "evidenceimg,title,category,author,date,description,gallery,maps") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
eventissimo.php:107
  - STORAGE call to add_option("wp_view_singleevent", ["evidenceimg", "title", "category", "author", "date", "description", "allery", "maps"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
eventissimo.php:117
  - STORAGE call to delete_option("wp_locationCityDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:118
  - STORAGE call to delete_option("wp_locationAdressDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:119
  - STORAGE call to delete_option("wp_locationPosition") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:120
  - STORAGE call to delete_option("wp_locationUrl") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:122
  - STORAGE call to delete_option("wp_fbUser") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:123
  - STORAGE call to delete_option("wp_fbAppId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:124
  - STORAGE call to delete_option("wp_fbprivateKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:125
  - STORAGE call to delete_option("wp_fbPages_publicKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:126
  - STORAGE call to delete_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:128
  - STORAGE call to delete_option("wp_publicatefeedFB") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:129
  - STORAGE call to delete_option("wp_ownerEventFB") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:131
  - STORAGE call to delete_option("UseSingleTemplateDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:132
  - STORAGE call to delete_option("wp_order_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:133
  - STORAGE call to delete_option("wp_view_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
function/duplicatePost.php:54
  - STORAGE call to wp_insert_post($args). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
meta_post/data_events.php:413
  - STORAGE call to update_post_meta($post->ID, "colorRandom", $_POST["randomColor"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/data_events.php:414
  - STORAGE call to update_post_meta($post->ID, "descrizione", isset($_POST["descrizione"])esc_textarea($_POST["descrizione"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/data_events.php:415
  - STORAGE call to update_post_meta($post->ID, "data_inizio", strtotime($_POST["data_inizio_yy-mm-dd"])) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/data_events.php:416
  - STORAGE call to update_post_meta($post->ID, "ora_inizio", $_POST["ora_inizio"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/data_events.php:417
  - STORAGE call to update_post_meta($post->ID, "data_fine", strtotime($_POST["data_fine_yy-mm-dd"])) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/data_events.php:418
  - STORAGE call to update_post_meta($post->ID, "ora_fine", $_POST["ora_fine"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/data_events.php:419
  - STORAGE call to update_post_meta($post->ID, "dayRepeat", isset($_POST["dayRepeat"])esc_attr($_POST["dayRepeat"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/data_events.php:420
  - STORAGE call to update_post_meta($post->ID, "EveryYear", isset($_POST["EveryYear"])esc_attr($_POST["EveryYear"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/data_events.php:422
  - STORAGE call to update_post_meta($post->ID, "dayRepeatSelect", serialize($arrayDayRepeat)) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/data_events.php:425
  - STORAGE call to update_post_meta($post->ID, "dayRepeatMount", serialize($arrayMontRepeat)) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/data_events.php:441
  - STORAGE call to update_post_meta($post->ID, "allDateRepeat", serialize($arrayDay)) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/data_events.php:444
  - STORAGE call to update_post_meta($post->ID, "untilRepeat", strtotime($_POST["untilRepeat_yy-mm-dd"])) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/facebook_events.php:144
  - STORAGE call to update_post_meta($post->ID, "urlFB", isset($_POST["urlFB"])esc_attr($_POST["urlFB"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/facebook_events.php:145
  - STORAGE call to update_post_meta($post->ID, "statusEventFB", isset($_POST["statusEventFB"])esc_attr($_POST["statusEventFB"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/facebook_events.php:203
  - STORAGE call to update_post_meta($post->ID, "idAuthorFB", $_POST["idAuthorFB"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/facebook_events.php:205
  - STORAGE call to update_post_meta($post->ID, "idAuthorFB", $_POST["appTokenUidFb"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/facebook_events.php:211
  - STORAGE call to update_post_meta($post->ID, "idEventFfb", $idEventFfb) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/facebook_events.php:212
  - STORAGE call to update_post_meta($post->ID, "autoFb", "No") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/facebook_events.php:213
  - STORAGE call to update_post_meta($post->ID, "urlEventFB", "https://www.facebook.com/events/" . $idEventFfb . "/") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/facebook_events.php:223
  - STORAGE call to update_post_meta($post->ID, "urlEventFB", isset($_POST["urlEventFB"])esc_attr($_POST["urlEventFB"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/facebook_events.php:226
  - STORAGE call to update_post_meta($post->ID, "urlEventSite", isset($_POST["urlEventSite"])esc_attr($_POST["urlEventSite"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/images_events.php:205
  - STORAGE call to update_post_meta($post_id, "_eventissimo_image_gallery", implode(",", $attachment_ids)) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/location_events.php:111
  - STORAGE call to update_post_meta($post->ID, "city", isset($_POST["city"])esc_attr($_POST["city"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/location_events.php:112
  - STORAGE call to update_post_meta($post->ID, "address", isset($_POST["address"])esc_attr($_POST["address"])"") alters data types {'address', 'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: address, post_meta
meta_post/location_events.php:113
  - STORAGE call to update_post_meta($post->ID, "urlLocationMaps", isset($_POST["urlLocationMaps"])esc_attr($_POST["urlLocationMaps"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
meta_post/location_events.php:114
  - STORAGE call to update_post_meta($post->ID, "latlongMaps", isset($_POST["latlongMaps"])esc_attr($_POST["latlongMaps"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta 

plugin/facebook/sdk-facebook/base_facebook.php:961
  - CRYPTOGRAPHY call to hash_hmac("sha256", $access_token, $this->getAppSecret()).
plugin/facebook/sdk-facebook/base_facebook.php:1066
  - CRYPTOGRAPHY call to hash_hmac("sha256", $payload, $this->getAppSecret(), $rawtrue).
plugin/facebook/sdk-facebook/base_facebook.php:1103
  - CRYPTOGRAPHY call to hash_hmac("sha256", $b64, $this->getAppSecret(), $rawtrue). 

eventissimo.php:117
  - DELETION call to delete_option("wp_locationCityDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:118
  - DELETION call to delete_option("wp_locationAdressDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:119
  - DELETION call to delete_option("wp_locationPosition") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:120
  - DELETION call to delete_option("wp_locationUrl") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:122
  - DELETION call to delete_option("wp_fbUser") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:123
  - DELETION call to delete_option("wp_fbAppId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:124
  - DELETION call to delete_option("wp_fbprivateKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:125
  - DELETION call to delete_option("wp_fbPages_publicKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:126
  - DELETION call to delete_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:128
  - DELETION call to delete_option("wp_publicatefeedFB") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:129
  - DELETION call to delete_option("wp_ownerEventFB") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:131
  - DELETION call to delete_option("UseSingleTemplateDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:132
  - DELETION call to delete_option("wp_order_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
eventissimo.php:133
  - DELETION call to delete_option("wp_view_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

By data type:
address
	VariableDetector.(unknown) - {'address'}
	ArrayElementDetector.(unknown) - {'address'}
	VariableDetector.(unknown) - {'address'}
	VariableDetector.(unknown) - {'address'}
	VariableDetector.(unknown) - {'address'}
	ArrayElementDetector.(unknown) - {'address'}
	ArrayElementDetector.(unknown) - {'address'}
	PropertyDetector.(unknown) - {'address'}
	VariableDetector.(unknown) - {'address'}
	VariableDetector.(unknown) - {'address'}
	VariableDetector.(unknown) - {'address'}
	PropertyDetector.(unknown) - {'address'}
	WordPressStorageDetector.update_post_meta($post->ID, "address", isset($_POST["address"])esc_attr($_POST["address"])"") - {'address', 'post_meta'}
	ArrayElementDetector.(unknown) - {'address'}
	VariableDetector.(unknown) - {'address'}
	WordPressStorageDetector.add_post_meta($the_post_id, "address", $venue["address"] . " " . $venue["street"], true) - {'address', 'post_meta'}
	VariableDetector.(unknown) - {'address'}
	VariableDetector.(unknown) - {'address'}
	VariableDetector.(unknown) - {'address'}
none
	GenericEncryptionDetector.hash_hmac("sha256", $b64, $this->getAppSecret(), $rawtrue) - set()
	HashDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	WordPressRetrievalDetector.get_posts($args) - set()
	WordPressStorageDetector.wp_insert_post($args) - set()
	WordPressRetrievalDetector.get_post_custom($post->ID) - set()
	PHPIncludedDetector.(unknown) - set()
	WordPressRetrievalDetector.get_post_custom($post->ID) - set()
	PHPIncludedDetector.(unknown) - set()
	WordPressRetrievalDetector.get_posts("post_parent=" . $post_id . "&numberposts=-1&post_type=attachment&orderby=menu_order&order=ASC&post_mime_type=image&fields=ids") - set()
	PHPIncludedDetector.(unknown) - set()
	GenericEncryptionDetector.hash_hmac("sha256", $payload, $this->getAppSecret(), $rawtrue) - set()
	GenericEncryptionDetector.hash_hmac("sha256", $access_token, $this->getAppSecret()) - set()
	WordPressRetrievalDetector.get_posts("post_parent=" . $post->ID . "&numberposts=-1&post_type=attachment&orderby=menu_order&order=ASC&post_mime_type=image&fields=ids") - set()
	WordPressRetrievalDetector.get_post_custom($post->ID) - set()
	HashDetector.(unknown) - set()
	WordPressStorageDetector.wp_insert_post($post) - set()
	HashDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
option
	WordPressRetrievalDetector.get_option("wp_fbAppId") - {'option'}
	WordPressRetrievalDetector.get_option("wp_view_singleevent") - {'option'}
	WordPressRetrievalDetector.get_option("blog_charset") - {'option'}
	WordPressRetrievalDetector.get_option("wp_publicatePageId") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressStorageDetector.delete_option("wp_fbprivateKey") - {'option'}
	WordPressStorageDetector.delete_option("wp_publicatePageId") - {'option'}
	WordPressRetrievalDetector.get_option("wp_locationCityDefault") - {'option'}
	WordPressStorageDetector.delete_option("wp_locationAdressDefault") - {'option'}
	WordPressStorageDetector.delete_option("wp_order_singleevent") - {'option'}
	WordPressRetrievalDetector.get_option("wp_publicatefeedFB") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("wp_publicatePageId") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("wp_publicatePageId") - {'option'}
	WordPressRetrievalDetector.get_option("wp_fbprivateKey") - {'option'}
	WordPressRetrievalDetector.get_option("wp_locationZoom") - {'option'}
	WordPressRetrievalDetector.get_option("wp_publicatePageId") - {'option'}
	WordPressStorageDetector.delete_option("wp_publicatefeedFB") - {'option'}
	WordPressRetrievalDetector.get_option("wp_locationCityDefault") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressStorageDetector.delete_option("wp_fbAppId") - {'option'}
	WordPressRetrievalDetector.get_option("wp_locationAdressDefault") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressStorageDetector.add_option("wp_fbAppId", "") - {'option'}
	DeletionDetector.delete_option("wp_locationAdressDefault") - {'option'}
	WordPressStorageDetector.add_option("wp_ownerEventFB", "user") - {'option'}
	WordPressRetrievalDetector.get_option("wp_locationAdressDefault") - {'option'}
	DeletionDetector.delete_option("wp_locationCityDefault") - {'option'}
	WordPressStorageDetector.delete_option("wp_fbPages_publicKey") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("wp_order_singleevent") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("wp_order_singleevent") - {'option'}
	WordPressStorageDetector.add_option("UseSingleTemplateDefault", "YES") - {'option'}
	WordPressRetrievalDetector.get_option("wp_publicatePageId") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressStorageDetector.add_option("wp_fbprivateKey", "") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	DeletionDetector.delete_option("wp_locationUrl") - {'option'}
	WordPressRetrievalDetector.get_option("wp_locationZoom") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressStorageDetector.delete_option("wp_locationUrl") - {'option'}
	WordPressStorageDetector.delete_option("wp_ownerEventFB") - {'option'}
	DeletionDetector.delete_option("wp_fbAppId") - {'option'}
	WordPressRetrievalDetector.get_option("blog_charset") - {'option'}
	WordPressStorageDetector.add_option("wp_publicatePageId", "") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressStorageDetector.add_option("wp_locationPosition", "") - {'option'}
	WordPressRetrievalDetector.get_option("UseSingleTemplateDefault") - {'option'}
	WordPressRetrievalDetector.get_option("UseSingleTemplateDefault") - {'option'}
	WordPressRetrievalDetector.get_option("wp_order_singleevent") - {'option'}
	DeletionDetector.delete_option("wp_ownerEventFB") - {'option'}
	WordPressStorageDetector.delete_option("UseSingleTemplateDefault") - {'option'}
	WordPressRetrievalDetector.get_option("wp_view_singleevent") - {'option'}
	WordPressStorageDetector.delete_option("wp_fbUser") - {'option'}
	WordPressRetrievalDetector.get_option("wp_order_singleevent") - {'option'}
	WordPressStorageDetector.add_option("wp_order_singleevent", "evidenceimg,title,category,author,date,description,gallery,maps") - {'option'}
	WordPressRetrievalDetector.get_option("wp_publicatePageId") - {'option'}
	WordPressStorageDetector.delete_option("wp_locationCityDefault") - {'option'}
	WordPressStorageDetector.delete_option("wp_view_singleevent") - {'option'}
	WordPressStorageDetector.delete_option("wp_locationPosition") - {'option'}
	WordPressRetrievalDetector.get_option("wp_locationAdressDefault") - {'option'}
	WordPressRetrievalDetector.get_option("wp_locationZoom") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("gmt_offset") - {'option'}
	WordPressRetrievalDetector.get_option("wp_fbprivateKey") - {'option'}
	DeletionDetector.delete_option("UseSingleTemplateDefault") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("wp_fbprivateKey") - {'option'}
	WordPressRetrievalDetector.get_option("wp_fbAppId") - {'option'}
	WordPressStorageDetector.add_option("wp_view_singleevent", ["evidenceimg", "title", "category", "author", "date", "description", "allery", "maps"]) - {'option'}
	WordPressRetrievalDetector.get_option("wp_fbAppId") - {'option'}
	WordPressStorageDetector.add_option("wp_locationCityDefault", "Italy") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("blog_charset") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	DeletionDetector.delete_option("wp_fbprivateKey") - {'option'}
	WordPressStorageDetector.add_option("wp_locationUrl", "") - {'option'}
	WordPressStorageDetector.add_option("wp_publicatefeedFB", "no") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("wp_locationCityDefault") - {'option'}
	DeletionDetector.delete_option("wp_order_singleevent") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	DeletionDetector.delete_option("wp_view_singleevent") - {'option'}
	WordPressRetrievalDetector.get_option("wp_publicatefeedFB") - {'option'}
	WordPressStorageDetector.add_option("wp_locationAdressDefault", "") - {'option'}
	WordPressStorageDetector.add_option("wp_fbUser", "") - {'option'}
	DeletionDetector.delete_option("wp_publicatefeedFB") - {'option'}
	WordPressRetrievalDetector.get_option("wp_publicatefeedFB" != "no") - {'option'}
	DeletionDetector.delete_option("wp_publicatePageId") - {'option'}
	WordPressRetrievalDetector.get_option("timezone_string") - {'option'}
	WordPressRetrievalDetector.get_option("timezone_string") - {'option'}
	DeletionDetector.delete_option("wp_fbPages_publicKey") - {'option'}
	WordPressRetrievalDetector.get_option("wp_fbprivateKey") - {'option'}
	DeletionDetector.delete_option("wp_locationPosition") - {'option'}
	WordPressRetrievalDetector.get_option("wp_fbAppId") - {'option'}
	WordPressRetrievalDetector.get_option("wp_order_singleevent") - {'option'}
	WordPressStorageDetector.add_option("wp_locationZoom", "15") - {'option'}
	DeletionDetector.delete_option("wp_fbUser") - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
password
	PropertyDetector.(unknown) - {'password'}
post
	WordPressRetrievalDetector.get_post() - {'wp_post', 'post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post', 'post_meta'}
post_meta
	WordPressRetrievalDetector.get_post_meta($post_id, "data_inizio", true) - {'post_meta'}
	WordPressStorageDetector.add_post_meta($the_post_id, "descrizione", $description, true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "ora_fine", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "data_inizio", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "latlongMaps", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "data_fine", strtotime($_POST["data_fine_yy-mm-dd"])) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "address", true) - {'post_meta'}
	WordPressStorageDetector.add_post_meta($the_post_id, "idAuthorFB", $owner, true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "urlEventFB", "https://www.facebook.com/events/" . $idEventFfb . "/") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "urlEventSite", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "address", true) - {'post_meta'}
	WordPressStorageDetector.add_post_meta($the_post_id, "idEventFfb", $id, true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "dayRepeatMount", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "data_inizio", strtotime($_POST["data_inizio_yy-mm-dd"])) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "data_inizio", true) - {'post_meta'}
	WordPressStorageDetector.add_post_meta($the_post_id, "urlEventFB", "https://www.facebook.com/" . $id, true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta(get_the_ID(), "idEventFfb", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "data_inizio", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "data_fine", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "ora_fine", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "dayRepeat", isset($_POST["dayRepeat"])esc_attr($_POST["dayRepeat"])"") - {'post_meta'}
	WordPressRetrievalDetector.get_post() - {'wp_post', 'post', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "ora_fine", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "data_inizio", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "ora_fine", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "allDateRepeat", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "dayRepeatSelect", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "colorRandom", $_POST["randomColor"]) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "ora_inizio", $_POST["ora_inizio"]) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "city", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "ora_fine", $_POST["ora_fine"]) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "latlongMaps", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "ora_inizio", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "untilRepeat", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "colorRandom", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "address", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "EveryYear", isset($_POST["EveryYear"])esc_attr($_POST["EveryYear"])"") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "ora_fine", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "dayRepeatSelect", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "descrizione", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "_eventissimo_image_gallery", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "descrizione", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "urlEventSite", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "ora_inizio", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "data_fine", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "_eventissimo_image_gallery", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "ora_fine", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "idAuthorFB", $_POST["appTokenUidFb"]) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "dayRepeatMount", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "descrizione", isset($_POST["descrizione"])esc_textarea($_POST["descrizione"])"") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "allDateRepeat", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "city", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "data_fine", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "data_fine", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post', 'post_meta'}
	WordPressStorageDetector.add_post_meta($the_post_id, "statusEventFB", $privacy, true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "allDateRepeat", true) - {'post_meta'}
	WordPressStorageDetector.add_post_meta($the_post_id, "data_inizio", $dateBegin, true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "descrizione", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "urlEventSite", isset($_POST["urlEventSite"])esc_attr($_POST["urlEventSite"])"") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "_eventissimo_image_gallery", implode(",", $attachment_ids)) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "ora_fine", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "idEventFfb", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "city", isset($_POST["city"])esc_attr($_POST["city"])"") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "urlLocationMaps", isset($_POST["urlLocationMaps"])esc_attr($_POST["urlLocationMaps"])"") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "colorRandom", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "dayRepeat", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "autoFb", "No") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "ora_inizio", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "latlongMaps", isset($_POST["latlongMaps"])esc_attr($_POST["latlongMaps"])"") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "urlEventFB", isset($_POST["urlEventFB"])esc_attr($_POST["urlEventFB"])"") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "ora_fine", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "address", isset($_POST["address"])esc_attr($_POST["address"])"") - {'address', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "ora_inizio", true) - {'post_meta'}
	WordPressStorageDetector.add_post_meta($the_post_id, "data_fine", $dateEnd, true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "idAuthorFB", $_POST["idAuthorFB"]) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "ora_inizio", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "urlEventFB", true) - {'post_meta'}
	WordPressStorageDetector.add_post_meta($the_post_id, "city", $location, true) - {'post_meta'}
	WordPressStorageDetector.add_post_meta($the_post_id, "latlongMaps", $venue["latitude"] . "," . $venue["longitude"], true) - {'post_meta'}
	WordPressStorageDetector.add_post_meta($the_post_id, "colorRandom", $randomColor, true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "idEventFfb", $idEventFfb) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "EveryYear", true) - {'post_meta'}
	WordPressStorageDetector.add_post_meta($the_post_id, "address", $venue["address"] . " " . $venue["street"], true) - {'address', 'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "urlEventFB", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "ora_inizio", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "ora_inizio", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "allDateRepeat", serialize($arrayDay)) - {'post_meta'}
	WordPressStorageDetector.add_post_meta($the_post_id, "ora_fine", $hourEnd, true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($id_events, "ora_inizio", true) - {'post_meta'}
	WordPressStorageDetector.add_post_meta($the_post_id, "ora_inizio", $hourBegin, true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "dayRepeatSelect", serialize($arrayDayRepeat)) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "urlFB", isset($_POST["urlFB"])esc_attr($_POST["urlFB"])"") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "dayRepeatMount", serialize($arrayMontRepeat)) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "statusEventFB", isset($_POST["statusEventFB"])esc_attr($_POST["statusEventFB"])"") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "city", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "idEventFfb", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post->ID, "untilRepeat", strtotime($_POST["untilRepeat_yy-mm-dd"])) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "untilRepeat", true) - {'post_meta'}
user
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
user_meta
	WordPressRetrievalDetector.get_the_author_meta("display_name", $event->id_author) - {'user_meta'}
	WordPressRetrievalDetector.the_author_meta("description") - {'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_the_author_meta("display_name") - {'user_meta'}
	WordPressRetrievalDetector.get_the_author_meta("ID") - {'user_meta'}
	WordPressRetrievalDetector.get_the_author_meta("description") - {'user_meta'}
	WordPressRetrievalDetector.get_the_author_meta("ID") - {'user_meta'}
	WordPressRetrievalDetector.get_the_author_meta("user_email") - {'user_meta'}
	WordPressRetrievalDetector.the_author_meta("display_name") - {'user_meta'}
	WordPressRetrievalDetector.get_the_author_meta("display_name") - {'user_meta'}
wp_post
	WordPressRetrievalDetector.get_post() - {'wp_post', 'post', 'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'wp_post', 'post', 'post_meta'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:38.563559.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 4188 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:01.277084.

!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 6712
1000 STORE_REACHES edges created
2000 STORE_REACHES edges created
3000 STORE_REACHES edges created
4000 STORE_REACHES edges created
4188 STORE_REACHES edges created
4188 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 400 nodes as PERSONAL
In total, tainted 400 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
Tainted 52 nodes as ENCRYPTED
In total, tainted 52 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:23.261106.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:03:36.929746!
Request variable '$_POST["address"]' of personal types {'address'} is found.,,None
Request variable '$_POST["address"]' of personal types {'address'} is found.,,None
Request variable '$_POST["address"]' of personal types {'address'} is found.,,None
Request variable '$_POST["address"]' of personal types {'address'} is found.,,None
DELETION call to delete_option("wp_locationCityDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("wp_locationAdressDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("wp_locationPosition") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("wp_locationUrl") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("wp_fbUser") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("wp_fbAppId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("wp_fbprivateKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("wp_fbPages_publicKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("wp_publicatefeedFB") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("wp_ownerEventFB") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("UseSingleTemplateDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("wp_order_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("wp_view_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
CRYPTOGRAPHY call to hash_hmac("sha256", $payload, $this->getAppSecret(), $rawtrue).,None,None
CRYPTOGRAPHY call to hash_hmac("sha256", $b64, $this->getAppSecret(), $rawtrue).,None,None
CRYPTOGRAPHY call to hash_hmac("sha256", $access_token, $this->getAppSecret()).,None,None
hash_hmac called with approved hash algorithm sha256.,sha256,None
hash_hmac called with approved hash algorithm sha256.,sha256,None
hash_hmac called with approved hash algorithm sha256.,sha256,None
MD5 called with parameters [rand]. Ignore if [rand] does not contain personal information.,md5,None
MD5 called with parameters [rand]. Ignore if [rand] does not contain personal information.,md5,None
MD5 called with parameters [rand]. Ignore if [rand] does not contain personal information.,md5,None
MD5 called with parameters [uniqid, true, mt_rand]. Ignore if [uniqid, true, mt_rand] does not contain personal information.,md5,None
MD5 called with parameters [uniqid, true, mt_rand]. Ignore if [uniqid, true, mt_rand] does not contain personal information.,md5,None
object property '$post->address' of personal types {'address'} is found.,,None
object property '$post->address' of personal types {'address'} is found.,,None
object property '$post->post_password' of personal types {'password'} is found.,,None
variable '$address' of personal types {'address'} is found.,,None
variable '$address' of personal types {'address'} is found.,,None
variable '$address' of personal types {'address'} is found.,,None
variable '$address' of personal types {'address'} is found.,,None
variable '$address' of personal types {'address'} is found.,,None
variable '$address' of personal types {'address'} is found.,,None
variable '$address' of personal types {'address'} is found.,,None
variable '$address' of personal types {'address'} is found.,,None
variable '$address' of personal types {'address'} is found.,,None
variable '$address' of personal types {'address'} is found.,,None
variable '$address' of personal types {'address'} is found.,,None
RETRIEVAL call to get_option("blog_charset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("blog_charset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_the_author_meta("display_name", $event->id_author) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("blog_charset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "data_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "data_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "EveryYear", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "dayRepeat", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "allDateRepeat", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "dayRepeatSelect", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "dayRepeatSelect", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "dayRepeatMount", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "dayRepeatMount", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "untilRepeat", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "data_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_fbAppId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "untilRepeat", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_fbprivateKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "address", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_publicatefeedFB") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "city", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_locationZoom") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_locationAdressDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_locationCityDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_locationCityDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_locationAdressDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_locationZoom") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("UseSingleTemplateDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_order_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_order_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_view_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_publicatefeedFB") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_fbAppId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_fbprivateKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta(get_the_ID(), "idEventFfb", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_posts($args). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
RETRIEVAL call to get_post_meta($id_events, "data_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "data_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "colorRandom", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "descrizione", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "data_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "data_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "allDateRepeat", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "allDateRepeat", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "colorRandom", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "descrizione", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($id_events, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($post_id) alters data types {'wp_post', 'post', 'post_meta'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_publicatefeedFB" != "no") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_the_author_meta("ID") alters data types {'user_meta'}. Passed arguments: 0: $field (string). Returns (string).,None,None
RETRIEVAL call to get_the_author_meta("ID") alters data types {'user_meta'}. Passed arguments: 0: $field (string). Returns (string).,None,None
RETRIEVAL call to get_the_author_meta("display_name") alters data types {'user_meta'}. Passed arguments: 0: $field (string). Returns (string).,None,None
RETRIEVAL call to get_the_author_meta("display_name") alters data types {'user_meta'}. Passed arguments: 0: $field (string). Returns (string).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "descrizione", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "urlEventSite", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "urlEventSite", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_locationZoom") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "data_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "data_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "_eventissimo_image_gallery", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_posts("post_parent=" . $post_id . "&numberposts=-1&post_type=attachment&orderby=menu_order&order=ASC&post_mime_type=image&fields=ids"). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
RETRIEVAL call to get_post_meta($post_id, "ora_inizio", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "ora_fine", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "city", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "city", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_view_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "address", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "address", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "latlongMaps", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "latlongMaps", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "idEventFfb", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "idEventFfb", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "urlEventFB", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, "urlEventFB", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post() alters data types {'wp_post', 'post', 'post_meta'}. Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("UseSingleTemplateDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_custom($post->ID). Passed arguments: 0: $post_id (int). Returns (array).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("timezone_string") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("timezone_string") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_fbAppId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_fbprivateKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_custom($post->ID). Passed arguments: 0: $post_id (int). Returns (array).,None,None
RETRIEVAL call to get_option("wp_fbAppId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_fbprivateKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "_eventissimo_image_gallery", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_posts("post_parent=" . $post->ID . "&numberposts=-1&post_type=attachment&orderby=menu_order&order=ASC&post_mime_type=image&fields=ids"). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
RETRIEVAL call to get_post_custom($post->ID). Passed arguments: 0: $post_id (int). Returns (array).,None,None
RETRIEVAL call to get_option("wp_locationCityDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_locationAdressDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_order_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wp_order_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_the_author_meta("description") alters data types {'user_meta'}. Passed arguments: 0: $field (string). Returns (string).,None,None
RETRIEVAL call to get_the_author_meta("user_email") alters data types {'user_meta'}. Passed arguments: 0: $field (string). Returns (string).,None,None
RETRIEVAL call to the_author_meta("display_name") alters data types {'user_meta'}. Passed arguments: 0: $field (string).,None,None
RETRIEVAL call to the_author_meta("description") alters data types {'user_meta'}. Passed arguments: 0: $field (string).,None,None
RETRIEVAL call to get_option("wp_order_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
STORAGE call to wp_insert_post($post). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to add_post_meta($the_post_id, "descrizione", $description, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to add_post_meta($the_post_id, "statusEventFB", $privacy, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to add_post_meta($the_post_id, "idEventFfb", $id, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to add_post_meta($the_post_id, "urlEventFB", "https://www.facebook.com/" . $id, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to add_post_meta($the_post_id, "idAuthorFB", $owner, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to add_post_meta($the_post_id, "data_inizio", $dateBegin, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to add_post_meta($the_post_id, "data_fine", $dateEnd, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to add_post_meta($the_post_id, "ora_inizio", $hourBegin, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to add_post_meta($the_post_id, "ora_fine", $hourEnd, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to add_post_meta($the_post_id, "colorRandom", $randomColor, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to add_post_meta($the_post_id, "city", $location, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to add_post_meta($the_post_id, "address", $venue["address"] . " " . $venue["street"], true) alters data types {'address', 'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to add_post_meta($the_post_id, "latlongMaps", $venue["latitude"] . "," . $venue["longitude"], true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed), 3: $unique (bool). Returns (int|false).,None,None
STORAGE call to add_option("UseSingleTemplateDefault", "YES") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("wp_order_singleevent", "evidenceimg,title,category,author,date,description,gallery,maps") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("wp_view_singleevent", ["evidenceimg", "title", "category", "author", "date", "description", "allery", "maps"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("wp_locationCityDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("wp_locationAdressDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("wp_locationPosition") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("wp_locationUrl") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("wp_fbUser") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("wp_fbAppId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("wp_fbprivateKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("wp_fbPages_publicKey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("wp_publicatePageId") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("wp_publicatefeedFB") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("wp_ownerEventFB") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("UseSingleTemplateDefault") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("wp_order_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("wp_view_singleevent") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_option("wp_locationCityDefault", "Italy") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("wp_locationAdressDefault", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("wp_locationPosition", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("wp_locationUrl", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("wp_locationZoom", "15") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("wp_fbUser", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("wp_fbAppId", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("wp_fbprivateKey", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("wp_publicatefeedFB", "no") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("wp_ownerEventFB", "user") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("wp_publicatePageId", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_insert_post($args). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($post->ID, "colorRandom", $_POST["randomColor"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "descrizione", isset($_POST["descrizione"])esc_textarea($_POST["descrizione"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "data_inizio", strtotime($_POST["data_inizio_yy-mm-dd"])) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "ora_inizio", $_POST["ora_inizio"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "data_fine", strtotime($_POST["data_fine_yy-mm-dd"])) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "ora_fine", $_POST["ora_fine"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "dayRepeat", isset($_POST["dayRepeat"])esc_attr($_POST["dayRepeat"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "EveryYear", isset($_POST["EveryYear"])esc_attr($_POST["EveryYear"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "dayRepeatSelect", serialize($arrayDayRepeat)) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "dayRepeatMount", serialize($arrayMontRepeat)) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "allDateRepeat", serialize($arrayDay)) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "untilRepeat", strtotime($_POST["untilRepeat_yy-mm-dd"])) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "urlFB", isset($_POST["urlFB"])esc_attr($_POST["urlFB"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "statusEventFB", isset($_POST["statusEventFB"])esc_attr($_POST["statusEventFB"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "idAuthorFB", $_POST["idAuthorFB"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "idAuthorFB", $_POST["appTokenUidFb"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "idEventFfb", $idEventFfb) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "autoFb", "No") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "urlEventFB", "https://www.facebook.com/events/" . $idEventFfb . "/") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "urlEventFB", isset($_POST["urlEventFB"])esc_attr($_POST["urlEventFB"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "urlEventSite", isset($_POST["urlEventSite"])esc_attr($_POST["urlEventSite"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, "_eventissimo_image_gallery", implode(",", $attachment_ids)) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "city", isset($_POST["city"])esc_attr($_POST["city"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "address", isset($_POST["address"])esc_attr($_POST["address"])"") alters data types {'address', 'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "urlLocationMaps", isset($_POST["urlLocationMaps"])esc_attr($_POST["urlLocationMaps"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post->ID, "latlongMaps", isset($_POST["latlongMaps"])esc_attr($_POST["latlongMaps"])"") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['address', 'password', 'user_meta', 'user']) stored through WordPress function "wp_insert_post($args)", found in file function/duplicatePost.php at line 54. 

[has_storage] PII of types (['address']) stored through WordPress function "update_post_meta($post->ID, "address", isset($_POST["address"])esc_attr($_POST["address"])"")", found in file meta_post/location_events.php at line 112. 

[has_storage] PII of types (['address']) stored through WordPress function "add_post_meta($the_post_id, "address", $venue["address"] . " " . $venue["street"], true)", found in file backend.php at line 162. 

[has_storage] Storage check is WP 

[Art.17, Right to erasure] Wordpress storage of PII through wp_insert_post($args) does not have corresponding deletion method. Storage method found in file function/duplicatePost.php at line 54. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($post->ID, "address", isset($_POST["address"])esc_attr($_POST["address"])"") does not have corresponding deletion method. Storage method found in file meta_post/location_events.php at line 112. 

[Art.17, Right to erasure] Wordpress storage of PII through add_post_meta($the_post_id, "address", $venue["address"] . " " . $venue["street"], true) does not have corresponding deletion method. Storage method found in file backend.php at line 162. 

[Art.17, Right to erasure] Deletion access is NONE 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 6819. Found in file function/duplicatePost.php at line 54 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 17762. Found in file meta_post/location_events.php at line 112 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1573. Found in file backend.php at line 162 

[Art.15, Right to access] Data access is NONE_BUT_NOT_REQUIRED 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? True 

[main] Is access in violation? False 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? False 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        
