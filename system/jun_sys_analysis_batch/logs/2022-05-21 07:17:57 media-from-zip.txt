Timeout in resolving values
Timeout in running neo4j query
Running Main.py on media-from-zip

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:01.099737.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:01.105376.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 12 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.315630.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 0 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.424681.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 495 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:00.877816.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 0 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.574038.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.099639.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 214 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:04.801678.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 3546
Added 2825 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 10438
Added 6892 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:01.893383.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/media-from-zip/mediafromzip.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/media-from-zip/uninstall.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/media-from-zip/lib/class-mediafromzipadmin.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/media-from-zip/lib/class-mediafromzip.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:00.531801.

1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
3546 PHP_REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
6892 PHP_REACHES edges created
10438 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 1329 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.085225.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:01.622834.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 11 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.723636.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 9 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.185851.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.417666.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.117171.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.006105.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.033392.

20 PHP_REACHES edges created
20 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 18 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.120410.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
1 SQL operations to process.
SELECT blog_id FROM $wpdbblogs
SQL command (SELECT blog_id FROM $wpdbblogs) cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [6014]
Added 0 SQL nodes. 0 out of 1 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:01.367836.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'<div class="notice notice-error is-dismissible"><ul><li>sprintf(esc_html__("Multi-byte characters cannot be used in file and directory names.[%1$s] Please change.", "media-from-zip"), $zipentry["name"])</li></ul></div>'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip")'' cannot be parsed correct.
HTML code '$'<div class="notice notice-success is-dismissible"><ul><li>sprintf(__("Registration of media unzipped from %1$s in the background has started. You will be notified by email at the end.", "media-from-zip"), $name)</li></ul></div>'' cannot be parsed correct.
HTML code '$'<div class="notice notice-info is-dismissible"><ul><li>wp_kses_post(sprintf(__("Execution time for this server is fixed at %1$s. If this limit is exceeded, times out. No email is sent.", "media-from-zip"), $limit_seconds_html))</li></ul></div>'' cannot be parsed correct.
HTML code '$'<div class="notice notice-error is-dismissible"><ul><li>Sorry, this file type is not permitted for security reasons.</li></ul></div>'' cannot be parsed correct.
HTML code '$'<div class="notice notice-error is-dismissible"><ul><li>Could not copy file.</li></ul></div>'' cannot be parsed correct.
HTML code '$'<div class="notice notice-error is-dismissible"><ul><li>Sorry, this file type is not permitted for security reasons.</li></ul></div>'' cannot be parsed correct.
HTML code '$'<div class="notice notice-error is-dismissible"><ul><li>No such file exists! Double check the name and try again.</li></ul></div>'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip-upload-register")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip-server-register")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip-settings")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=zipfrommedia")'' cannot be parsed correct.
HTML code '$'sprintf(__("Maximum upload file size: %s."), $limit_str)'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip-upload-register")'' cannot be parsed correct.
HTML code '$'<div class="notice notice-error is-dismissible"><ul><li>This is larger than the maximum size. Please try another.</li></ul></div>'' cannot be parsed correct.
HTML code '$'$value'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip-settings")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip-server-register")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip-upload-register")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip-server-register")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip-upload-register")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip-settings")'' cannot be parsed correct.
HTML code '$'admin_url("plugin-install.php?tab=plugin-information&plugin=zip-from-media")'' cannot be parsed correct.
HTML code '$'wp_kses_post(sprintf(__("Select a file that has been uploaded to the server path[ %1$s ] via FTP.", "media-from-zip"), $upload_path))'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip-server-register")'' cannot be parsed correct.
HTML code '$'$value'' cannot be parsed correct.
HTML code '$'https://wordpress.org/support/view/plugin-reviews/end($slugs)'' cannot be parsed correct.
HTML code '$'https://translate.wordpress.org/projects/wp-plugins/end($slugs)'' cannot be parsed correct.
HTML code '$'sprintf(__("Translations for %s"), $plugin_name)'' cannot be parsed correct.
HTML code '$'https://www.facebook.com/katsushikawamori/'' cannot be parsed correct.
HTML code '$'https://twitter.com/dodesyo312'' cannot be parsed correct.
HTML code '$'https://www.youtube.com/channel/UC5zTLeyROkvZm86OgNRcb_w'' cannot be parsed correct.
HTML code '$'sprintf(esc_html__("https://shop.riverforest-wp.info/donate/", "media-from-zip"), $slug)'' cannot be parsed correct.
HTML code '$'network_admin_url("plugin-install.php?tab=plugin-information&plugin=zip-from-media")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip-settings")'' cannot be parsed correct.
HTML code '$'get_user_option("mediafromzip", get_current_user_id())_datefixed'' cannot be parsed correct.
HTML code '$'wp_kses_post(sprintf(__("Execution time for this server is fixed at %1$s. If this limit is exceeded, times out. No email is sent.", "media-from-zip"), $limit_seconds_html))'' cannot be parsed correct.
HTML code '$'ini_get("max_execution_time")'' cannot be parsed correct.
HTML code '$'wp_kses_post($max_execution_time_text)'' cannot be parsed correct.
HTML code '$'get_user_option("mediafromzip", get_current_user_id())_max_execution_time'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip-upload-register")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip-server-register")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=mediafromzip-settings")'' cannot be parsed correct.
HTML code '$'admin_url("plugin-install.php?tab=plugin-information&plugin=zip-from-media")'' cannot be parsed correct.
HTML code '$'<div class="notice notice-success is-dismissible"><ul><li>Settings --> Changes saved.</li></ul></div>'' cannot be parsed correct.
HTML code '$'wp_kses_post(sprintf(__(" : %1$s : %2$s : %3$d files have been added to the Media Library. Details have been sent by e-mail.", "media-from-zip"), $mediafromzip_mail_send["datetime"], $zip_name, $mediafromzip_mail_send["count"]))'' cannot be parsed correct.
HTML code '$'wp_kses_post(sprintf(__(" : %1$s : %2$s : %3$d files could not be added to the Media Library. Details have been sent by e-mail.", "media-from-zip"), $mediafromzip_mail_send["datetime"], $zip_name, $mediafromzip_mail_send["deny_count"]))'' cannot be parsed correct.
HTML code '$'wp_kses_post(sprintf(__(" : %1$s : Processing may have been interrupted. Please increase "Execution time" and register again.", "media-from-zip"), $zip_name))'' cannot be parsed correct.
HTML code '$'Version: get_file_data($plugin_path . $file, ["name" => "Plugin Name", "version" => "Version"])_version'' cannot be parsed correct.
HTML code '$'sprintf(esc_html__("https://wordpress.org/plugins/%s/faq", "media-from-zip"), $slug)'' cannot be parsed correct.
HTML code '$'https://wordpress.org/support/plugin/end($slugs)'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:06.862109.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.048099.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 2 do_action/apply_filters calls and 8 add_action/add_filter calls. Now connecting do-add pairs.
Added 12 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:00.953277.

12 PHP_REACHES edges created
12 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running DbplusDetector
### Start running FrontBaseDetector
### Finish running FileProDetector
### Start running HashDetector
### Finish running DbaseDetector
### Start running IBMDb2Detector
### Finish running CubridDetector
### Start running InformixDetector
### Finish running FirebirdInterBaseDetector
### Start running IngresDetector
### Finish running FrontBaseDetector
### Start running maxdbDetector
### Finish running InformixDetector
### Start running MongoDbDetector
### Finish running IngresDetector
### Start running MongoDetector
### Finish running IBMDb2Detector
### Start running MsqlDetector
### Finish running MongoDetector
### Start running MySQLDetector
### Finish running HashDetector
### Start running MySQLiDetector
### Finish running MsqlDetector
### Start running Oci8Detector
### Finish running MySQLDetector
### Start running OpenSSLDetector
### Finish running MongoDbDetector
### Start running ParadoxDetector
### Finish running Oci8Detector
### Start running PasswordHashingDetector
### Finish running ArrayElementDetector
### Start running PhpCurlDetector
### Finish running ParadoxDetector
### Start running PHPDataObjectDetector
### Finish running OpenSSLDetector
### Start running PHPIncludedDetector
### Finish running PHPDataObjectDetector
### Start running PHPRetrievalDetector
### Finish running PhpCurlDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PasswordHashingDetector
### Start running PhpVarDetector
### Finish running PHPIncludedDetector
### Start running PostgreSQLDetector
### Finish running PhpVarDetector
### Start running PropertyDetector
### Finish running PHPRetrievalDetector
### Start running Sqlite3Detector
### Finish running PostgreSQLDetector
### Start running SqliteDetector
### Finish running PHPStorageDetector
### Start running SqlServerDetector
### Finish running SqliteDetector
### Start running SybaseDetector
### Finish running SybaseDetector
### Start running TokyoTyrantDetector
### Finish running Sqlite3Detector
### Start running UserInputDetector
### Finish running SqlServerDetector
### Start running VariableDetector
### Finish running TokyoTyrantDetector
### Start running WordpressHashingFnDetector
### Finish running PropertyDetector
### Start running WordPressRemoteDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressRetrievalDetector
### Finish running WordPressRemoteDetector
### Start running WordPressStorageDetector
### Finish running VariableDetector
### Start running WP_UserDetector
### Finish running UserInputDetector
### Start running GenericDatabaseUsageDetector
### Finish running WP_UserDetector
### Start running GenericEncryptionDetector
### Finish running GenericEncryptionDetector
### Start running DeletionDetector
### Finish running GenericDatabaseUsageDetector
### Start running UninstallDetector
### Finish running maxdbDetector
### Finish running MySQLiDetector
### Finish running DeletionDetector
### Finish running UninstallDetector
### Finish running WordPressRetrievalDetector
### Finish running WordPressStorageDetector
### Finished running detectors
lib/class-mediafromzipadmin.php:218
  - object property '$user->user_email' of personal types {'email'} is found.
  - Data types: email
lib/class-mediafromzipadmin.php:321
  - object property '$user->user_email' of personal types {'email'} is found.
  - Data types: email 

lib/class-mediafromzip.php:142
  - RETRIEVAL call to get_user_option("mediafromzip_generate_mail_" . $name, $uid) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).
  - Data types: user_meta
lib/class-mediafromzip.php:162
  - RETRIEVAL call to get_user_option("mediafromzip", $uid) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).
  - Data types: user_meta
lib/class-mediafromzip.php:302
  - RETRIEVAL call to get_option("blogname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
lib/class-mediafromzip.php:352
  - RETRIEVAL call to get_post_meta($attach_id, "_wp_attached_file", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
lib/class-mediafromzipadmin.php:217
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
lib/class-mediafromzipadmin.php:318
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
lib/class-mediafromzipadmin.php:432
  - RETRIEVAL call to get_user_option("mediafromzip", get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).
  - Data types: user_meta
lib/class-mediafromzipadmin.php:667
  - RETRIEVAL call to get_user_option("mediafromzip", get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).
  - Data types: user_meta
lib/class-mediafromzipadmin.php:695
  - RETRIEVAL call to get_option("mediafromzip") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
lib/class-mediafromzipadmin.php:699
  - RETRIEVAL call to get_user_option("mediafromzip", get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).
  - Data types: user_meta
lib/class-mediafromzipadmin.php:712
  - RETRIEVAL call to get_user_option("mediafromzip", get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).
  - Data types: user_meta
lib/class-mediafromzipadmin.php:780
  - RETRIEVAL call to get_user_option("mediafromzip_submit_file", get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).
  - Data types: user_meta
lib/class-mediafromzipadmin.php:781
  - RETRIEVAL call to get_user_option("mediafromzip_submit_file", get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).
  - Data types: user_meta
lib/class-mediafromzipadmin.php:784
  - RETRIEVAL call to get_user_option("mediafromzip_generate_mail_" . $zip_name, get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).
  - Data types: user_meta
lib/class-mediafromzipadmin.php:785
  - RETRIEVAL call to get_user_option("mediafromzip_generate_mail_" . $zip_name, get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).
  - Data types: user_meta
lib/class-mediafromzipadmin.php:809
  - RETRIEVAL call to get_user_option("mediafromzip_stop_" . $zip_name, get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).
  - Data types: user_meta
uninstall.php:18
  - RETRIEVAL call to get_users(["fields" => ["ID"]]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $args (array). Returns (array).
  - Data types: user_meta, user
uninstall.php:31
  - RETRIEVAL call to get_users(["blog_id" => $blogid, "fields" => ["ID"]]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $args (array). Returns (array).
  - Data types: user_meta, user 

lib/class-mediafromzip.php:143
  - STORAGE call to update_user_option($uid, "mediafromzip_stop_" . $name, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $newvalue (mixed). Returns (int|bool).
  - Data types: user_meta
lib/class-mediafromzip.php:211
  - STORAGE call to update_post_meta($attach_id, "_wp_attached_file", $metapath_name) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
lib/class-mediafromzip.php:235
  - STORAGE call to wp_update_post($up_post). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).
lib/class-mediafromzip.php:248
  - STORAGE call to update_post_meta($attach_id, "_wp_attached_file", $metapath_scaled_file_name) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
lib/class-mediafromzip.php:299
  - STORAGE call to update_user_option($uid, "mediafromzip_generate_mail_" . $name, $mediafromzip_mail_send) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $newvalue (mixed). Returns (int|bool).
  - Data types: user_meta
lib/class-mediafromzipadmin.php:213
  - STORAGE call to update_user_option(get_current_user_id(), "mediafromzip_submit_file", $post_zipfiles) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $newvalue (mixed). Returns (int|bool).
  - Data types: user_meta
lib/class-mediafromzipadmin.php:317
  - STORAGE call to update_user_option(get_current_user_id(), "mediafromzip_submit_file", $post_zipfiles) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $newvalue (mixed). Returns (int|bool).
  - Data types: user_meta
lib/class-mediafromzipadmin.php:680
  - STORAGE call to update_user_option(get_current_user_id(), "mediafromzip", $mediafromzip_settings) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $newvalue (mixed). Returns (int|bool).
  - Data types: user_meta
lib/class-mediafromzipadmin.php:696
  - STORAGE call to delete_option("mediafromzip") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
lib/class-mediafromzipadmin.php:710
  - STORAGE call to update_user_option(get_current_user_id(), "mediafromzip", $mediafromzip_tbl) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $newvalue (mixed). Returns (int|bool).
  - Data types: user_meta
lib/class-mediafromzipadmin.php:716
  - STORAGE call to update_user_option(get_current_user_id(), "mediafromzip", $mediafromzip_settings) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $newvalue (mixed). Returns (int|bool).
  - Data types: user_meta
lib/class-mediafromzipadmin.php:807
  - STORAGE call to delete_user_option(get_current_user_id(), "mediafromzip_generate_mail_" . $zip_name) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string). Returns (bool).
  - Data types: user_meta
lib/class-mediafromzipadmin.php:818
  - STORAGE call to delete_user_option(get_current_user_id(), "mediafromzip_stop_" . $zip_name) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string). Returns (bool).
  - Data types: user_meta
uninstall.php:20
  - STORAGE call to delete_user_option($user->ID, $option_name, false) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $global (bool). Returns (bool).
  - Data types: user_meta
uninstall.php:21
  - STORAGE call to delete_user_option($user->ID, $option_name2, false) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $global (bool). Returns (bool).
  - Data types: user_meta
uninstall.php:22
  - STORAGE call to delete_user_option($user->ID, $option_name3, false) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $global (bool). Returns (bool).
  - Data types: user_meta
uninstall.php:38
  - STORAGE call to delete_user_option($user->ID, $option_name, false) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $global (bool). Returns (bool).
  - Data types: user_meta
uninstall.php:39
  - STORAGE call to delete_user_option($user->ID, $option_name2, false) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $global (bool). Returns (bool).
  - Data types: user_meta
uninstall.php:40
  - STORAGE call to delete_user_option($user->ID, $option_name3, false) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $global (bool). Returns (bool).
  - Data types: user_meta 

lib/class-mediafromzipadmin.php:696
  - DELETION call to delete_option("mediafromzip") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

By data type:
email
	PropertyDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
none
	WordPressStorageDetector.wp_update_post($up_post) - set()
option
	WordPressStorageDetector.delete_option("mediafromzip") - {'option'}
	DeletionDetector.delete_option("mediafromzip") - {'option'}
	WordPressRetrievalDetector.get_option("blogname") - {'option'}
	WordPressRetrievalDetector.get_option("mediafromzip") - {'option'}
post_meta
	WordPressStorageDetector.update_post_meta($attach_id, "_wp_attached_file", $metapath_name) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($attach_id, "_wp_attached_file", $metapath_scaled_file_name) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($attach_id, "_wp_attached_file", true) - {'post_meta'}
user
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_users(["blog_id" => $blogid, "fields" => ["ID"]]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_users(["fields" => ["ID"]]) - {'user_meta', 'user'}
user_meta
	WordPressRetrievalDetector.get_user_option("mediafromzip_submit_file", get_current_user_id()) - {'user_meta'}
	WordPressStorageDetector.update_user_option($uid, "mediafromzip_generate_mail_" . $name, $mediafromzip_mail_send) - {'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_option("mediafromzip", $uid) - {'user_meta'}
	WordPressRetrievalDetector.get_user_option("mediafromzip_submit_file", get_current_user_id()) - {'user_meta'}
	WordPressRetrievalDetector.get_users(["blog_id" => $blogid, "fields" => ["ID"]]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_option("mediafromzip_generate_mail_" . $zip_name, get_current_user_id()) - {'user_meta'}
	WordPressRetrievalDetector.get_user_option("mediafromzip", get_current_user_id()) - {'user_meta'}
	WordPressRetrievalDetector.get_user_option("mediafromzip", get_current_user_id()) - {'user_meta'}
	WordPressStorageDetector.update_user_option(get_current_user_id(), "mediafromzip", $mediafromzip_tbl) - {'user_meta'}
	WordPressRetrievalDetector.get_user_option("mediafromzip", get_current_user_id()) - {'user_meta'}
	WordPressRetrievalDetector.get_user_option("mediafromzip", get_current_user_id()) - {'user_meta'}
	WordPressStorageDetector.delete_user_option($user->ID, $option_name2, false) - {'user_meta'}
	WordPressStorageDetector.update_user_option(get_current_user_id(), "mediafromzip", $mediafromzip_settings) - {'user_meta'}
	WordPressStorageDetector.delete_user_option($user->ID, $option_name, false) - {'user_meta'}
	WordPressStorageDetector.update_user_option(get_current_user_id(), "mediafromzip", $mediafromzip_settings) - {'user_meta'}
	WordPressStorageDetector.delete_user_option(get_current_user_id(), "mediafromzip_generate_mail_" . $zip_name) - {'user_meta'}
	WordPressStorageDetector.delete_user_option($user->ID, $option_name2, false) - {'user_meta'}
	WordPressStorageDetector.update_user_option($uid, "mediafromzip_stop_" . $name, true) - {'user_meta'}
	WordPressStorageDetector.update_user_option(get_current_user_id(), "mediafromzip_submit_file", $post_zipfiles) - {'user_meta'}
	WordPressRetrievalDetector.get_user_option("mediafromzip_generate_mail_" . $name, $uid) - {'user_meta'}
	WordPressStorageDetector.update_user_option(get_current_user_id(), "mediafromzip_submit_file", $post_zipfiles) - {'user_meta'}
	WordPressRetrievalDetector.get_users(["fields" => ["ID"]]) - {'user_meta', 'user'}
	WordPressStorageDetector.delete_user_option(get_current_user_id(), "mediafromzip_stop_" . $zip_name) - {'user_meta'}
	WordPressStorageDetector.delete_user_option($user->ID, $option_name, false) - {'user_meta'}
	WordPressRetrievalDetector.get_user_option("mediafromzip_stop_" . $zip_name, get_current_user_id()) - {'user_meta'}
	WordPressRetrievalDetector.get_user_option("mediafromzip_generate_mail_" . $zip_name, get_current_user_id()) - {'user_meta'}
	WordPressStorageDetector.delete_user_option($user->ID, $option_name3, false) - {'user_meta'}
	WordPressStorageDetector.delete_user_option($user->ID, $option_name3, false) - {'user_meta'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:11.593331.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 229 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.287977.

!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 3209
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 3673
229 STORE_REACHES edges created
229 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 139 nodes as PERSONAL
In total, tainted 139 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
In total, tainted 0 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:04.463330.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:00:51.612260!
DELETION call to delete_option("mediafromzip") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
object property '$user->user_email' of personal types {'email'} is found.,,None
object property '$user->user_email' of personal types {'email'} is found.,,None
RETRIEVAL call to get_user_option("mediafromzip_generate_mail_" . $name, $uid) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).,None,None
RETRIEVAL call to get_user_option("mediafromzip", $uid) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).,None,None
RETRIEVAL call to get_option("blogname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($attach_id, "_wp_attached_file", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_user_option("mediafromzip", get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).,None,None
RETRIEVAL call to get_user_option("mediafromzip", get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).,None,None
RETRIEVAL call to get_option("mediafromzip") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_option("mediafromzip", get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).,None,None
RETRIEVAL call to get_user_option("mediafromzip", get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).,None,None
RETRIEVAL call to get_user_option("mediafromzip_submit_file", get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).,None,None
RETRIEVAL call to get_user_option("mediafromzip_submit_file", get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).,None,None
RETRIEVAL call to get_user_option("mediafromzip_generate_mail_" . $zip_name, get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).,None,None
RETRIEVAL call to get_user_option("mediafromzip_generate_mail_" . $zip_name, get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).,None,None
RETRIEVAL call to get_user_option("mediafromzip_stop_" . $zip_name, get_current_user_id()) alters data types {'user_meta'}. Passed arguments: 0: $option (string), 1: $user (int). Returns (mixed).,None,None
RETRIEVAL call to get_users(["fields" => ["ID"]]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $args (array). Returns (array).,None,None
RETRIEVAL call to get_users(["blog_id" => $blogid, "fields" => ["ID"]]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $args (array). Returns (array).,None,None
STORAGE call to update_user_option($uid, "mediafromzip_stop_" . $name, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $newvalue (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($attach_id, "_wp_attached_file", $metapath_name) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_update_post($up_post). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($attach_id, "_wp_attached_file", $metapath_scaled_file_name) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_option($uid, "mediafromzip_generate_mail_" . $name, $mediafromzip_mail_send) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $newvalue (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_option(get_current_user_id(), "mediafromzip_submit_file", $post_zipfiles) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $newvalue (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_option(get_current_user_id(), "mediafromzip_submit_file", $post_zipfiles) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $newvalue (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_option(get_current_user_id(), "mediafromzip", $mediafromzip_settings) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $newvalue (mixed). Returns (int|bool).,None,None
STORAGE call to delete_option("mediafromzip") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_user_option(get_current_user_id(), "mediafromzip", $mediafromzip_tbl) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $newvalue (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_option(get_current_user_id(), "mediafromzip", $mediafromzip_settings) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $newvalue (mixed). Returns (int|bool).,None,None
STORAGE call to delete_user_option(get_current_user_id(), "mediafromzip_generate_mail_" . $zip_name) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string). Returns (bool).,None,None
STORAGE call to delete_user_option(get_current_user_id(), "mediafromzip_stop_" . $zip_name) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string). Returns (bool).,None,None
STORAGE call to delete_user_option($user->ID, $option_name, false) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $global (bool). Returns (bool).,None,None
STORAGE call to delete_user_option($user->ID, $option_name2, false) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $global (bool). Returns (bool).,None,None
STORAGE call to delete_user_option($user->ID, $option_name3, false) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $global (bool). Returns (bool).,None,None
STORAGE call to delete_user_option($user->ID, $option_name, false) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $global (bool). Returns (bool).,None,None
STORAGE call to delete_user_option($user->ID, $option_name2, false) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $global (bool). Returns (bool).,None,None
STORAGE call to delete_user_option($user->ID, $option_name3, false) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $option_name (string), 2: $global (bool). Returns (bool).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['user_meta', 'email', 'user']) stored through WordPress function "update_user_option($uid, "mediafromzip_generate_mail_" . $name, $mediafromzip_mail_send)", found in file lib/class-mediafromzip.php at line 299. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_option(get_current_user_id(), "mediafromzip", $mediafromzip_tbl)", found in file lib/class-mediafromzipadmin.php at line 710. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "delete_user_option($user->ID, $option_name2, false)", found in file uninstall.php at line 21. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_option(get_current_user_id(), "mediafromzip", $mediafromzip_settings)", found in file lib/class-mediafromzipadmin.php at line 680. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "delete_user_option($user->ID, $option_name, false)", found in file uninstall.php at line 38. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_option(get_current_user_id(), "mediafromzip", $mediafromzip_settings)", found in file lib/class-mediafromzipadmin.php at line 716. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "delete_user_option(get_current_user_id(), "mediafromzip_generate_mail_" . $zip_name)", found in file lib/class-mediafromzipadmin.php at line 807. 

[has_storage] PII of types (['user_meta', 'email', 'user']) stored through WordPress function "wp_update_post($up_post)", found in file lib/class-mediafromzip.php at line 235. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "delete_user_option($user->ID, $option_name2, false)", found in file uninstall.php at line 39. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_option($uid, "mediafromzip_stop_" . $name, true)", found in file lib/class-mediafromzip.php at line 143. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_option(get_current_user_id(), "mediafromzip_submit_file", $post_zipfiles)", found in file lib/class-mediafromzipadmin.php at line 213. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_option(get_current_user_id(), "mediafromzip_submit_file", $post_zipfiles)", found in file lib/class-mediafromzipadmin.php at line 317. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "delete_user_option(get_current_user_id(), "mediafromzip_stop_" . $zip_name)", found in file lib/class-mediafromzipadmin.php at line 818. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "delete_user_option($user->ID, $option_name, false)", found in file uninstall.php at line 20. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "delete_user_option($user->ID, $option_name3, false)", found in file uninstall.php at line 40. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "delete_user_option($user->ID, $option_name3, false)", found in file uninstall.php at line 22. 

[has_storage] Storage check is WP 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_option($uid, "mediafromzip_generate_mail_" . $name, $mediafromzip_mail_send) does not have corresponding deletion method. Storage method found in file lib/class-mediafromzip.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_option(get_current_user_id(), "mediafromzip", $mediafromzip_tbl) does not have corresponding deletion method. Storage method found in file lib/class-mediafromzipadmin.php at line 710. 

[Art.17, Right to erasure] Wordpress storage of PII through delete_user_option($user->ID, $option_name2, false) does not have corresponding deletion method. Storage method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_option(get_current_user_id(), "mediafromzip", $mediafromzip_settings) does not have corresponding deletion method. Storage method found in file lib/class-mediafromzipadmin.php at line 680. 

[Art.17, Right to erasure] Wordpress storage of PII through delete_user_option($user->ID, $option_name, false) does not have corresponding deletion method. Storage method found in file uninstall.php at line 38. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_option(get_current_user_id(), "mediafromzip", $mediafromzip_settings) does not have corresponding deletion method. Storage method found in file lib/class-mediafromzipadmin.php at line 716. 

[Art.17, Right to erasure] Wordpress storage of PII through delete_user_option(get_current_user_id(), "mediafromzip_generate_mail_" . $zip_name) does not have corresponding deletion method. Storage method found in file lib/class-mediafromzipadmin.php at line 807. 

[Art.17, Right to erasure] Wordpress storage of PII through wp_update_post($up_post) does not have corresponding deletion method. Storage method found in file lib/class-mediafromzip.php at line 235. 

[Art.17, Right to erasure] Wordpress storage of PII through delete_user_option($user->ID, $option_name2, false) does not have corresponding deletion method. Storage method found in file uninstall.php at line 39. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_option($uid, "mediafromzip_stop_" . $name, true) does not have corresponding deletion method. Storage method found in file lib/class-mediafromzip.php at line 143. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_option(get_current_user_id(), "mediafromzip_submit_file", $post_zipfiles) does not have corresponding deletion method. Storage method found in file lib/class-mediafromzipadmin.php at line 213. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_option(get_current_user_id(), "mediafromzip_submit_file", $post_zipfiles) does not have corresponding deletion method. Storage method found in file lib/class-mediafromzipadmin.php at line 317. 

[Art.17, Right to erasure] Wordpress storage of PII through delete_user_option(get_current_user_id(), "mediafromzip_stop_" . $zip_name) does not have corresponding deletion method. Storage method found in file lib/class-mediafromzipadmin.php at line 818. 

[Art.17, Right to erasure] Wordpress storage of PII through delete_user_option($user->ID, $option_name, false) does not have corresponding deletion method. Storage method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through delete_user_option($user->ID, $option_name3, false) does not have corresponding deletion method. Storage method found in file uninstall.php at line 40. 

[Art.17, Right to erasure] Wordpress storage of PII through delete_user_option($user->ID, $option_name3, false) does not have corresponding deletion method. Storage method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Deletion access is NONE 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1622. Found in file lib/class-mediafromzip.php at line 299 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5327. Found in file lib/class-mediafromzipadmin.php at line 710 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5979. Found in file uninstall.php at line 21 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5220. Found in file lib/class-mediafromzipadmin.php at line 680 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 6071. Found in file uninstall.php at line 38 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5370. Found in file lib/class-mediafromzipadmin.php at line 716 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5806. Found in file lib/class-mediafromzipadmin.php at line 807 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1170. Found in file lib/class-mediafromzip.php at line 235 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 6084. Found in file uninstall.php at line 39 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 670. Found in file lib/class-mediafromzip.php at line 143 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 3170. Found in file lib/class-mediafromzipadmin.php at line 213 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 3662. Found in file lib/class-mediafromzipadmin.php at line 317 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5856. Found in file lib/class-mediafromzipadmin.php at line 818 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5966. Found in file uninstall.php at line 20 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 6097. Found in file uninstall.php at line 40 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 5992. Found in file uninstall.php at line 22 

[Art.15, Right to access] Data access is NONE_BUT_NOT_REQUIRED 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? True 

[main] Is access in violation? False 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? False 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        
