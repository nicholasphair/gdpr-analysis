Timeout in resolving values
Timeout in running neo4j query
Running Main.py on miniorange-openid-connect-client

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:02.934010.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:01.757080.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 63 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.489888.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 2 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.820813.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 1784 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:01.202172.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 37 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:01.071514.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.087995.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 789 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:30.524441.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 12464
Added 9789 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 65648
Added 53184 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:05.647570.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/class-customer.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/class-mo-oauth-widget.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/mo_oauth_settings_page.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/mo_openidconnect_settings.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/pointers.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/uninstall.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/class-mo-oauth-client-admin.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/index.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/class-mo-oauth-client-admin-menu.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/class-mo-oauth-client-admin-utils.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/account/class-mo-oauth-client-admin-account.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/account/partials/register.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/account/partials/verify-otp.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/account/partials/verify-password.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/addons/class-mo-oauth-client-addons.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/apps/class-mo-oauth-client-apps.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/apps/partials/addapp.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/apps/partials/app-list.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/apps/partials/attr-role-mapping.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/apps/partials/customization.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/apps/partials/defaultapps.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/apps/partials/eveonline.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/apps/partials/grant-settings.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/apps/partials/sign-in-settings.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/apps/partials/updateapp.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/demo/class-mo-oauth-client-demo.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/faq/class-mo-oauth-client-faq.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/guides/class-mo-oauth-client-guides.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/licensing/class-mo-oauth-client-license.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/reports/class-mo-oauth-client-reports.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/admin/partials/support/class-mo-oauth-client-support.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/handler/oauth_handler.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/includes/class-mo-oauth-client-loader.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/includes/class-mo-oauth-client.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/includes/manage-avatar.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/views/feedback_form.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/miniorange-openid-connect-client/views/PointersManager.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:03.439252.

63 PHP_REACHES edges created
2 REACHES edges created
1000 PHP_REACHES edges created
1784 PHP_REACHES edges created
37 CALLS edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
10578 PHP_REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
12000 PHP_REACHES edges created
13000 PHP_REACHES edges created
14000 PHP_REACHES edges created
15000 PHP_REACHES edges created
16000 PHP_REACHES edges created
17000 PHP_REACHES edges created
18000 PHP_REACHES edges created
19000 PHP_REACHES edges created
20000 PHP_REACHES edges created
21000 PHP_REACHES edges created
22000 PHP_REACHES edges created
23000 PHP_REACHES edges created
24000 PHP_REACHES edges created
25000 PHP_REACHES edges created
26000 PHP_REACHES edges created
27000 PHP_REACHES edges created
28000 PHP_REACHES edges created
29000 PHP_REACHES edges created
30000 PHP_REACHES edges created
31000 PHP_REACHES edges created
32000 PHP_REACHES edges created
33000 PHP_REACHES edges created
34000 PHP_REACHES edges created
35000 PHP_REACHES edges created
36000 PHP_REACHES edges created
37000 PHP_REACHES edges created
38000 PHP_REACHES edges created
39000 PHP_REACHES edges created
40000 PHP_REACHES edges created
41000 PHP_REACHES edges created
42000 PHP_REACHES edges created
43000 PHP_REACHES edges created
44000 PHP_REACHES edges created
45000 PHP_REACHES edges created
46000 PHP_REACHES edges created
47000 PHP_REACHES edges created
48000 PHP_REACHES edges created
49000 PHP_REACHES edges created
50000 PHP_REACHES edges created
51000 PHP_REACHES edges created
52000 PHP_REACHES edges created
53000 PHP_REACHES edges created
53184 PHP_REACHES edges created
65648 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 4756 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.299789.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 3 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:02.993042.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 187 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:08.087059.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 197 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.167856.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.363547.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:02.238559.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.048296.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.034612.

3 CALLS edges created
384 PHP_REACHES edges created
387 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 330 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.142383.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
1 SQL operations to process.
SELECT option_name, option_value FROM $wpdboptions WHERE (option_name LIKE "mo_openidconnect%" OR option_name LIKE "mo_openid_connect%")
SQL command (SELECT option_name, option_value FROM $wpdboptions WHERE (option_name LIKE "mo_openidconnect%" OR option_name LIKE "mo_openid_connect%")) cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [16372]
Added 0 SQL nodes. 0 out of 1 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:01.330070.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'$_SERVER_SERVER_NAME'' cannot be parsed correct.
HTML code '$'wp_get_current_user()'' cannot be parsed correct.
HTML code '$'wp_get_current_user()'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_phone")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_customer_key")'' cannot be parsed correct.
HTML code '$'add_query_arg(["tab" => "licensing"], htmlentities($_SERVER["REQUEST_URI"]))'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_scope'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_authorize'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_token'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_userinfo'' cannot be parsed correct.
HTML code '$'<tr><td>$key'' cannot be parsed correct.
HTML code '$'$app_apptype'' cannot be parsed correct.
HTML code '$') </td><td><a href=\'admin.php?page=mo_oauth_settings&tab=config&action=update&app=$key\'>Edit Application</a> | <a href=\'admin.php?page=mo_oauth_settings&tab=attributemapping&action=update&app=$key#attribute-mapping\'>Attribute Mapping</a> | <a href=\'admin.php?page=mo_oauth_settings&tab=attributemapping&action=update&app=$key#role-mapping\'>Role Mapping</a> | <a onclick=\'return confirm("Are you sure you want to delete this item?")\' href=\'admin.php?page=mo_oauth_settings&tab=config&action=delete&app=$key\'>Delete</a> | '' cannot be parsed correct.
HTML code '$'<a href=\'admin.php?page=mo_oauth_settings&tab=config&action=instructions&appId=$app_appId\'>How to Configure?</a></td></tr>'' cannot be parsed correct.
HTML code '$'null'' cannot be parsed correct.
HTML code '$'null'' cannot be parsed correct.
HTML code '$'<option value=\'$value\''' cannot be parsed correct.
HTML code '$' >$value</option>'' cannot be parsed correct.
HTML code '$'get_option("mo_attr_option")'' cannot be parsed correct.
HTML code '$'$value_username_attr'' cannot be parsed correct.
HTML code '$'null_email_attr'' cannot be parsed correct.
HTML code '$'$text_attr'' cannot be parsed correct.
HTML code '$'$value_username_attr'' cannot be parsed correct.
HTML code '$'null_email_attr'' cannot be parsed correct.
HTML code '$'null'' cannot be parsed correct.
HTML code '$'<hr>

			<h3>I did not recieve any email with OTP . What should I do ?</h3>
			<form id="mo_oauth_register_with_phone_form" method="post" action="">
				<input type="hidden" name="option" value="mo_oauth_register_with_phone_option" />
				If you cannot see the email from miniOrange in your mails, please check your <b>SPAM</b> folder. If you don\'t see an email even in the SPAM folder, verify your identity with our alternate method.
				<br><br>
				<b>Enter your valid phone number here and verify your identity using one time passcode sent to your phone.</b><br><br>
				<input class="mo_oauth_table_textbox" type="tel" id="phone_contact" style="width:40%;"
				pattern="[\+]\d{11,14}|[\+]\d{1,4}([\s]{0,1})(\d{0}|\d{9,10})" class="mo_oauth_table_textbox" name="phone"
				title="Phone with country code eg. +1xxxxxxxxxx" required
				placeholder="Phone with country code eg. +1xxxxxxxxxx"
				value="get_option("mo_oauth_admin_phone")" />
				<br /><br /><input type="submit" value="Send OTP" class="button button-primary button-large" />

			</form>'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'plugins_url("images/page-restriction.png", )'' cannot be parsed correct.
HTML code '$'plugins_url("images/buddypress-logo.png", )'' cannot be parsed correct.
HTML code '$'plugins_url("images/login-form.png", )'' cannot be parsed correct.
HTML code '$'plugins_url("images/member-login.png", )'' cannot be parsed correct.
HTML code '$'plugins_url("images/learndash-icon.png", )'' cannot be parsed correct.
HTML code '$'plugins_url("images/report-icon.png", )'' cannot be parsed correct.
HTML code '$'plugins_url("images/attribute-icon.png", )'' cannot be parsed correct.
HTML code '$'plugins_url("images/scim-icon.png", )'' cannot be parsed correct.
HTML code '$'
							<td align="right"><a href="admin.php?page=mo_oauth_settings&tab=config&appId=sanitize_text_field($_GET["appId"])"><div id=\'mo_oauth_config_guide\' style="display:inline;background-color:#0085ba;color:#fff;padding:4px 8px;border-radius:4px">Hide instructions ^</div></a></td> '' cannot be parsed correct.
HTML code '$'
							<td align="right"><a href="admin.php?page=mo_oauth_settings&tab=config&action=instructions&appId=sanitize_text_field($_GET["appId"])"><div id=\'mo_oauth_config_guide\' style="display:inline;background-color:#0085ba;color:#fff;padding:4px 8px;border-radius:4px">How to Configure?</div></a></td>
							'' cannot be parsed correct.
HTML code '$'sanitize_text_field($_GET["appId"])'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_type'' cannot be parsed correct.
HTML code '$'mo_oauth_client_get_app($currentAppId)_label'' cannot be parsed correct.
HTML code '$'$app_resourceownerdetailsurl'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'<li data-appid=$appId"><a href="#"><img class="mo_oauth_client_default_app_icon" src="plugins_url("../images/" . $application->image, )"><br$application</a></li>'' cannot be parsed correct.
HTML code '$'<li data-appid=$appId"><a href="#"><img class="mo_oauth_client_default_app_icon" src="plugins_url("../images/" . $application->image, )"><br$application</a></li>'' cannot be parsed correct.
HTML code '$'get_option("mo_eve_api_key")'' cannot be parsed correct.
HTML code '$'get_option("mo_eve_verification_code")'' cannot be parsed correct.
HTML code '$'get_option("mo_eve_allowed_corps")'' cannot be parsed correct.
HTML code '$'get_option("mo_eve_allowed_alliances")'' cannot be parsed correct.
HTML code '$'get_option("mo_eve_allowed_char_name")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_google_client_id")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_google_client_secret")'' cannot be parsed correct.
HTML code '$'site_url()/oauthcallback'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_eveonline_client_id")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_eveonline_client_secret")'' cannot be parsed correct.
HTML code '$'site_url()/oauthcallback'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_facebook_client_id")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_facebook_client_secret")'' cannot be parsed correct.
HTML code '$'site_url()/oauthcallback'' cannot be parsed correct.
HTML code '$'strtotime("Dec 31, 2020 23:59:59")'' cannot be parsed correct.
HTML code '$'time()'' cannot be parsed correct.
HTML code '$'dirname(plugin_dir_url())'' cannot be parsed correct.
HTML code '$'add_query_arg(["tab" => "licensing"], htmlentities($_SERVER["REQUEST_URI"]))'' cannot be parsed correct.
HTML code '$'add_query_arg(["tab" => "config"], htmlentities($_SERVER["REQUEST_URI"]))'' cannot be parsed correct.
HTML code '$'width: 350px; height:35px;'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'width: 350px; height:35px;'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'$app_appIdother'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$app_apptype'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$app_redirecturi'' cannot be parsed correct.
HTML code '$'$app_clientid'' cannot be parsed correct.
HTML code '$'null_clientsecret'' cannot be parsed correct.
HTML code '$'null_scope'' cannot be parsed correct.
HTML code '$'null_authorizeurl'' cannot be parsed correct.
HTML code '$'$app_accesstokenurl'' cannot be parsed correct.
HTML code '$'$app_apptype'' cannot be parsed correct.
HTML code '$'<br><strong>Instructions to configure mo_oauth_client_get_app($currentapp["apptype"])_label:</strong><ol>'' cannot be parsed correct.
HTML code '$'<br><strong>Instructions to configure mo_oauth_client_get_app($appname)_label as OAuth Server:</strong><ol>'' cannot be parsed correct.
HTML code '$'<li>Please follow the instruction given in Step by Step guide to get your Client ID, Client Secret and other necessary information. <a href=mo_oauth_client_get_app($appname)_guide" target="_blank">Click here</a> to get the step by step guide to configure <i>explode("App", $app->label)_0</i> as OAuth/OpenID Connect server.</li>'' cannot be parsed correct.
HTML code '$'
			<li>Configure your application as a OAuth Provider.</li>
			<li>Provide <b>Configure OAuth->Redirect/Callback URI</b> for your OAuth server Redirect URI.<br/><b>Note : </b>Make sure, you have copied the exact callback url including http/https</li>
			<li>Choose the scopes as per your application/OAuth Server specification(if provided) and enter the same on the <a href="admin.php?page=mo_oauth_settings&appIdmo_oauth_client_get_app($currentapp["apptype"])_appId" target="_blank"><b>miniOrange OAuth Client -> Configure OAuth</b></a> page.</li>
			<li>Enter your <i>Client ID</i> and <i>Client Secret</i> provided by your OAuth Provider, on <a href="admin.php?page=mo_oauth_settings&appId=mo_oauth_client_get_app($currentapp["apptype"])_appId" target="_blank"><b>Configure OAuth</b></a> page.</li>'' cannot be parsed correct.
HTML code '$'<li>Once done with configuration, click on <b>Save Settings</b>. Click on <b>Test Configuration</b> button.</li><li> On successful configuration, you will get a table with attributes names and values.<br>For example:<br><img src=plugins_url("./images/testconfig.png", )" /></li><li>To proceed with SSO, you need to map attributes under Attribute Mapping section. Map attribute with the attribute name provided under Test Configuration table. <a href="https://faq.miniorange.com/knowledgebase/map-roles-usergroup/" target="_blank">Click here</a> to know more about how to configure attributes.</li><li>Go to <b>Appearance->Widgets</b>. Among the available widgets you will find <b>miniOrange OAuth</b>, drag it to the widget area where you want it to appear.</li><li>To test the SSO, open the page where you have saved the widget in private window. On successful SSO, user will automatically get created in <a href="users.php" target="_blank">WordPress Users list</a>.</li></ol>'' cannot be parsed correct.
HTML code '$'mo_oauth_is_customer_registered()'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/login'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/initializepayment'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/login'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/viewlicensekeys'' cannot be parsed correct.
HTML code '$'add_query_arg(["tab" => "account"], htmlentities($_SERVER["REQUEST_URI"]))'' cannot be parsed correct.
HTML code '$'add_query_arg(["tab" => "faq"], $_SERVER["REQUEST_URI"])'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_phone")'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'<a style="text-decoration:none" href="javascript:void(0)" onClick="moOAuthLoginNew(\'$key\');"><div class="mo_oauth_login_button"><i class="fa fa-facebook mo_oauth_login_button_icon"></i><h4 class="mo_oauth_login_button_text">Login with ucwords($key)</h4></div></a>'' cannot be parsed correct.
HTML code '$'$args_before_widget'' cannot be parsed correct.
HTML code '$'$args_before_title$wid_title$args_after_title'' cannot be parsed correct.
HTML code '$'$this->mo_oauth_login_form()'' cannot be parsed correct.
HTML code '$'$args_after_widget'' cannot be parsed correct.
HTML code '$'Something went wrong: $response->get_error_message()'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'<div class=$_SESSION_msg_class"$_SESSION_msg</div>'' cannot be parsed correct.
HTML code '$'rtrim($nestedprefix, ".").'' cannot be parsed correct.
HTML code '$'$key</td><td>$resource</td></tr>'' cannot be parsed correct.
HTML code '$'Invalid response received from OpenId Provider. Contact your administrator for more details.<br><br><b>Response : </b><br>$this->getToken($tokenendpoint, $grant_type, $clientid, $clientsecret, $code, $redirect_url, $send_headers, $send_body)'' cannot be parsed correct.
HTML code '$'Invalid response received.<br><b>Id_token : </b>$mo_oauth_handler->getIdToken($currentapp["accesstokenurl"], "authorization_code", $currentapp["clientid"], $currentapp["clientsecret"], $_GET["code"], $currentapp["redirecturi"], $currentapp["send_headers"], $currentapp["send_body"])'' cannot be parsed correct.
HTML code '$'Invalid response received from OAuth Provider. Contact your administrator for more details.<br><br><b>Response : </b><br>$this->getToken($tokenendpoint, $grant_type, $clientid, $clientsecret, $code, $redirect_url, $send_headers, $send_body)'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'miniorange_support()'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'$_SERVER_SERVER_NAME'' cannot be parsed correct.
HTML code '$'wp_get_current_user()'' cannot be parsed correct.
HTML code '$'wp_get_current_user()'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_phone")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'site_url()/oauthcallback'' cannot be parsed correct.
HTML code '$'site_url()/oauthcallback'' cannot be parsed correct.
HTML code '$'site_url()/oauthcallback'' cannot be parsed correct.
HTML code '$'site_url()/oauthcallback'' cannot be parsed correct.
HTML code '$'site_url()/oauthcallback'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/login'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/viewlicensekeys'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/login'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("host_name")/moas/initializepayment'' cannot be parsed correct.
HTML code '$'explode(";", $textarea)_0;
'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'site_url()/oauthcallback'' cannot be parsed correct.
HTML code '$'$app_clientid'' cannot be parsed correct.
HTML code '$'$app_clientsecret'' cannot be parsed correct.
HTML code '$'$app_scope'' cannot be parsed correct.
HTML code '$'$app_authorizeurl'' cannot be parsed correct.
HTML code '$'$app_accesstokenurl'' cannot be parsed correct.
HTML code '$'$app_resourceownerdetailsurl'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$appname'' cannot be parsed correct.
HTML code '$'$app_email_attr'' cannot be parsed correct.
HTML code '$'$app_name_attr'' cannot be parsed correct.
HTML code '$'site_url()'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_google_client_id")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_google_client_secret")'' cannot be parsed correct.
HTML code '$'site_url()/oauthcallback'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_eveonline_client_id")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_eveonline_client_secret")'' cannot be parsed correct.
HTML code '$'site_url()/oauthcallback'' cannot be parsed correct.
HTML code '$'explode(";", $textarea)_0
'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_icon_width")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_icon_height")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_icon_margin")'' cannot be parsed correct.
HTML code '$'rtrim(trim(format_custom_css_value($custom_css)), ";")'' cannot be parsed correct.
HTML code '$'<tr><td>$key</td><td><a href=\'admin.php?page=mo_oauth_settings&action=update&app=$key\'>Edit Application</a> | <a href=\'admin.php?page=mo_oauth_settings&action=update&app=$key#attribute-mapping\'>Attribute Mapping</a> | <a href=\'admin.php?page=mo_oauth_settings&action=update&app=$key#role-mapping\'>Role Mapping</a> | <a onclick=\'return confirm("Are you sure you want to delete this item?")\' href=\'admin.php?page=mo_oauth_settings&action=delete&app=$key\'>Delete</a> | <a href=\'admin.php?page=mo_oauth_settings&action=instructions&appId=$key\'>How to Configure?</a></td></tr>'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_facebook_client_id")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_facebook_client_secret")'' cannot be parsed correct.
HTML code '$'site_url()/oauthcallback'' cannot be parsed correct.
HTML code '$'get_option("mo_eve_api_key")'' cannot be parsed correct.
HTML code '$'get_option("mo_eve_verification_code")'' cannot be parsed correct.
HTML code '$'get_option("mo_eve_allowed_corps")'' cannot be parsed correct.
HTML code '$'get_option("mo_eve_allowed_alliances")'' cannot be parsed correct.
HTML code '$'get_option("mo_eve_allowed_char_name")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_email")'' cannot be parsed correct.
HTML code '$'get_option("mo_oauth_admin_phone")'' cannot be parsed correct.
HTML code '$'<hr>

			<h3>I did not recieve any email with OTP . What should I do ?</h3>
			<form id="mo_oauth_register_with_phone_form" method="post" action="">
				<input type="hidden" name="option" value="mo_oauth_register_with_phone_option" />
				If you cannot see the email from miniOrange in your mails, please check your <b>SPAM</b> folder. If you don\'t see an email even in the SPAM folder, verify your identity with our alternate method.
				<br><br>
				<b>Enter your valid phone number here and verify your identity using one time passcode sent to your phone.</b><br><br>
				<input class="mo_oauth_table_textbox" type="tel" id="phone_contact" style="width:40%;"
				pattern="[\+]\d{11,14}|[\+]\d{1,4}([\s]{0,1})(\d{0}|\d{9,10})" class="mo_oauth_table_textbox" name="phone"
				title="Phone with country code eg. +1xxxxxxxxxx" required
				placeholder="Phone with country code eg. +1xxxxxxxxxx"
				value="get_site_option("mo_oauth_admin_phone")" />
				<br /><br /><input type="submit" value="Send OTP" class="button button-primary button-large" />

			</form>'' cannot be parsed correct.
HTML code '$'<h2>Login Transactions Report</h2>
			<div class="mo_oauth_client_small_layout hidden">	
				<div style="float:right;margin-top:10px">
					<input type="submit" $disabled name="printcsv" style="width:100px;" value="Print PDF" class="button button-success button-large">
					<input type="submit" $disabled name="printpdf" style="width:100px;" value="Print CSV" class="button button-success button-large">
				</div>
				<h3>Advanced Report</h3>
				
				<form id="mo_oauth_client_advanced_reports" method="post" action="">
					<input type="hidden" name="option" value="mo_oauth_client_advanced_reports">
					<table style="width:100%">
					<tr>
					<td width="33%">WordPress Username : <input class="mo_oauth_client_table_textbox" type="text" $disabled name="username" required="" placeholder="Search by username" value=""></td>
					<td width="33%">IP Address :<input class="mo_oauth_client_table_textbox" type="text" $disabled name="ip" required="" placeholder="Search by IP" value=""></td>
					<td width="33%">Status : <select $disabled name="status" style="width:100%;">
						  <option value="success" selected="">Success</option>
						  <option value="failed">Failed</option>
						</select>
					</td>
					</tr>
					<tr><td><br></td></tr>
					<tr>
					<td width="33%">User Action : <select true name="action" style="width:100%;">
						  <option value="login" selected="">User Login</option>
						  <option value="register">User Registeration</option>
						</select>
					</td>
					<td width="33%">From Date : <input true class="mo_oauth_client_table_textbox" type="date"  name="fromdate"></td>
					<td width="33%">To Date :<input true class="mo_oauth_client_table_textbox" type="date"  name="todate"></td>
					</tr>
					</table>
					<br><input type="submit" true name="Search" style="width:100px;" value="Search" class="button button-primary button-large">
				</form>
				<br>
			</div>
			
			<table id="login_reports" class="display" cellspacing="0" width="100%">
		        <thead>
		            <tr>
		                <th>IP Address</th>
						<th>Username</th>
						<th>Status</th>
		                <th>TimeStamp</th>
		            </tr>
		        </thead>
		        <tbody>'' cannot be parsed correct.
HTML code '$'<div class=\'error\'> <p>get_option("message")</p></div>'' cannot be parsed correct.
HTML code '$'<div class=\'updated\'><p>get_option("message")</p></div>'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, "user_eveonline_character_name", true)'' cannot be parsed correct.
HTML code '$'mo_oauth_avatar_manager_get_custom_avatar($user->ID, "128")'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, "user_eveonline_corporation_name", true)'' cannot be parsed correct.
HTML code '$'get_user_meta($user->ID, "user_eveonline_alliance_name", true)'' cannot be parsed correct.
HTML code '$'$deactivate_reason'' cannot be parsed correct.
HTML code '$'$deactivate_reason'' cannot be parsed correct.
HTML code '$'$deactivate_reason'' cannot be parsed correct.
HTML code '$'</td>
		</tr>
		</table>
		<br /><br />

	<table>
	<tr>
	<td>
	<form name="f1" method="post" action="" id="mo_oauth_goto_login_form">
		<input type="hidden" value="change_miniorange" name="option"/>
		<input type="submit" value="Change Email Address" class="button button-primary button-large"/>
	</form>
	</td><td>
	<a href="'' cannot be parsed correct.
HTML code '$'<input type="hidden" name="option" value="mo_oauth_resend_otp_email"/>'' cannot be parsed correct.
HTML code '$'<input type="hidden" name="option" value="mo_oauth_resend_otp_phone"/>'' cannot be parsed correct.
HTML code '$'required'' cannot be parsed correct.
HTML code '$'<br><a href=\'#\'><button disabled style=\'float:right\'>Add Application</button></a>'' cannot be parsed correct.
HTML code '$'<br><a href=\'admin.php?page=mo_oauth_settings&action=add\'><button style=\'float:right\'>Add Application</button></a>'' cannot be parsed correct.
HTML code '$'<h3>Applications List</h3>'' cannot be parsed correct.
HTML code '$'<p style=\'color:#a94442;background-color:#f2dede;border-color:#ebccd1;border-radius:5px;padding:12px\'>You can only add 1 application with free version. Upgrade to <a href=\'admin.php?page=mo_oauth_settings&tab=licensing\'><b>enterprise</b></a> to add more.</p>'' cannot be parsed correct.
HTML code '$'<table class=\'tableborder\'>'' cannot be parsed correct.
HTML code '$'<tr><th><b>Name</b></th><th>Action</th></tr>'' cannot be parsed correct.
HTML code '$' ('' cannot be parsed correct.
HTML code '$'<a href=\'admin.php?page=mo_oauth_settings&tab=config\'>Hide Instructions</a></td></tr>'' cannot be parsed correct.
HTML code '$'</table>'' cannot be parsed correct.
HTML code '$'<br><br>'' cannot be parsed correct.
HTML code '$'style="display:none"'' cannot be parsed correct.
HTML code '$'name="mo_oauth_username_attr"'' cannot be parsed correct.
HTML code '$' selected'' cannot be parsed correct.
HTML code '$'automatic'' cannot be parsed correct.
HTML code '$'name="mo_oauth_username_attr"'' cannot be parsed correct.
HTML code '$'style="display:none"'' cannot be parsed correct.
HTML code '$'<tr>
			<td></td><td>
            <b><p style="margin-left:2px" class=" mop_table">
            Advanced attribute mapping is available in <a href="admin.php?page=mo_oauth_settings&amp;tab=licensing">premium</a> version.</b>
            </p>
			</td>
		</tr>
        <tr id="mo_oauth_name_attr_div">
				<td><strong>First Name:</strong></td>
				<td><input class="mo_table_textbox" required="" placeholder="Enter attribute name for First Name" disabled  type="text" value=""></td>
			</tr>
		<tr>
			<td><strong>Last Name:</strong></td>
			<td>
				<input type="text" class="mo_table_textbox" placeholder="Enter attribute name for Last Name"  disabled /></td>
		</tr>
		<tr>
			<td><strong>Email:</strong></td>
			<td><input type="text" class="mo_table_textbox" placeholder="Enter attribute name for Email"  value="" disabled /></td>
		</tr>
		<tr>
			<td><strong>Group/Role:</strong></td>
			<td><input type="text" class="mo_table_textbox" placeholder="Enter attribute name for Group/Role" value="" disabled /></td>
		</tr>
		<tr>
			<td><strong>Display Name:</strong></td>
			<td>
				<select disabled  class="mo_table_textbox" style="background-color: #eee;">
					<option>Username</option>
				</select>
			</td></tr>
			<tr><td>&nbsp;</td></tr>
			<tr><td colspan="3"><hr></td></tr>
			<tr>
				<td colspan="2">
					<strong>
						<input disabled type="checkbox"> Keep Existing User Attributes
					</strong><small> <a href="admin.php?page=mo_oauth_settings&tab=licensing" target="_blank" rel="noopener noreferrer">[PREMIUM]</a></small>
				</td>
			</tr>
			<tr>
				<td colspan="2"><p style="color:grey;margin-left:10px;font-size:14px"><small>If unchecked, each time existing WordPress User profile will get updated with above mapping. <br/> <b>Note :</b> User profile will get updated based on existing Usernames.</small></p>
				</td>
			</tr>
			<tr>
			  	<td colspan="2">
				    <table>
						<tr>
						  	<td>
						  		<strong><input disabled type="checkbox"> Keep Existing Email Attribute</strong><small> <a href="admin.php?page=mo_oauth_settings&tab=licensing" target="_blank" rel="noopener noreferrer">[PREMIUM]</a></small>
						  	</td>
						</tr>
						<tr><td colspan="2"><p style="color:grey;margin-left:10px;font-size:14px"><small>Uncheck only if you want existing user email to get updated each time after SSO. </small></p></td></tr>
				    </table>
				</td>
			</tr>
			<tr><td colspan="3"><hr></td></tr>
			<tr><td colspan="2">
			<h3>Map Custom Attributes <a href="admin.php?page=mo_oauth_settings&tab=licensing" target="_blank" rel="noopener noreferrer" style="font-size: x-small">[PREMIUM]</a></small></h3>
            <p>Map extra OAuth Provider attributes which you wish to be included in the user profile below</p>
			</td><td><input disabled type="button" value="+" class="button button-primary"  /></td>
			<td><input disabled type="button" value="-" class="button button-primary"   /></td></tr>
			<tr class="rows"><td><input disabled type="text" placeholder="Enter field meta name" /></td>
			<td><input disabled type="text" placeholder="Enter attribute name from OAuth Provider"  class="mo_table_textbox" /></td>
			</tr>'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">Page Restriction</h5>
          <p>Allows to restrict access to WordPress pages/posts based on user roles and their login status, thereby preventing them from unauthorized access.</p>
        </div>
      </div>
    </div>      
    <div class="grid_view column_container">
      <div class="column_inner">
        <div class="row benefits-outer-block">
          <img src="'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">BuddyPress Integrator</h5>
          <p>Allows to integrate user information received from OAuth/OpenID Provider with the BuddyPress profile.</p>
        </div>
      </div>
    </div>  
  </div>
  <div class="row-view">
    <div class="grid_view column_container">
      <div class="column_inner">
        <div class="row benefits-outer-block">
          <img src="'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">Login Form Add-on</h5>
          <p>Provides Login form for OAuth/OpenID login instead of a only a button. It relies on OAuth/OpenID plugin to have Password Grant configured. It can be customized using custom CSS and JS.</p>
        </div>
      </div>
    </div>
    <div class="grid_view column_container">
      <div class="column_inner">
        <div class="row benefits-outer-block">
          <img src="'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">Membership Level based Login Redirection</h5>
          <p>Allows to redirect users to custom pages based on users\' membership levels. Checks for the user\'s membership level during every login, so any update on the membership level doesn\'t affect redirection.</p>
        </div>
      </div>    
    </div>  
  </div>
  <div class="row-view">
    <div class="grid_view column_container">
      <div class="column_inner">
        <div class="row benefits-outer-block">
          <img src="'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">LearnDash Integration</h5>
          <p>LearnDash is popular WordPress LMS plugin. If you want to integrate LearnDash with your IDP then you can opt-in for this add-on. This add-on will map the users to LearnDash groups based on the attributes sent by your IDP.</p>
        </div>
      </div>
    </div>
    <div class="grid_view column_container">
      <div class="column_inner">
        <div class="row benefits-outer-block">
          <img src="'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">SSO Login Audit</h5>
          <p>SSO Login Audit captures all the SSO users and will generate the reports.</p>
        </div>
      </div>    
    </div>  
  </div>
  <div class="row-view">
    <div class="grid_view column_container">
      <div class="column_inner">
        <div class="row benefits-outer-block">
          <img src="'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">Attribute Based Redirection</h5>
          <p>ABR add-on helps you to redirect your users to different pages after they log into your site, based on the attributes sent by your Identity Provider.</p>
        </div>
      </div>
    </div>
    <div class="grid_view column_container">
      <div class="column_inner">
        <div class="row benefits-outer-block">
          <img src="'' cannot be parsed correct.
HTML code '$'" width="40px" height="40px">
          <h5 style="margin-top:1em;">SCIM</h5>
          <p>This plugin allows user provisioning with SCIM standard. System for Cross-domain Identity Management is a standard for automating the exchange of user identity information between identity domains, or IT systems.</p>
        </div>
      </div>    
    </div>  
  </div>
</div>

'' cannot be parsed correct.
HTML code '$'<p style=\'color:#a94442;background-color:#f2dede;border-color:#ebccd1;border-radius:5px;padding:12px\'>You can only add 1 application with free version. Upgrade to <a href=\'admin.php?page=mo_oauth_settings&tab=licensing\'><b>enterprise</b></a> to add more.</p>'' cannot be parsed correct.
HTML code '$'required'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'<div id="mo_oauth_settings">'' cannot be parsed correct.
HTML code '$'
		<div class="miniorange_container">'' cannot be parsed correct.
HTML code '$'<table style="width:100%;">
			<tr>
				<td style="vertical-align:top;width:65%;" class="mo_oauth_content">'' cannot be parsed correct.
HTML code '$'</tr>
				</table>
				<div class="mo_tutorial_overlay" id="mo_tutorial_overlay" hidden></div>
		</div>'' cannot be parsed correct.
HTML code '$' * 1000;
		var now = '' cannot be parsed correct.
HTML code '$' * 1000;
		var x = setInterval(function() {
			now = now + 1000;
			var distance = countDownDate - now;
			var days = Math.floor(distance / (1000 * 60 * 60 * 24));
			var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
			var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
			var seconds = Math.floor((distance % (1000 * 60)) / 1000);
			document.getElementById("demo").innerHTML = days + "d " + hours + "h " +
				minutes + "m " + seconds + "s ";
			if (distance < 0) {
				clearInterval(x);
				document.getElementById("demo").innerHTML = "EXPIRED";
			}
		}, 1000);
		</script>
		'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'<td style="vertical-align:top;padding-left:1%;" class="mo_oauth_sidebar">'' cannot be parsed correct.
HTML code '$'</td>'' cannot be parsed correct.
HTML code '$'<p style="color:red;">(Warning: <a href="http://php.net/manual/en/curl.installation.php" target="_blank">PHP CURL extension</a> is not installed or disabled. Please install/enable it before you proceed.)</p>'' cannot be parsed correct.
HTML code '$'https://login.xecurify.com/moas/oauth/client/callback'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'<font color="#FF0000">*</font>'' cannot be parsed correct.
HTML code '$'<li>In front of <b>App Name</b> field, enter the name you would like to display on login button.</li>'' cannot be parsed correct.
HTML code '$'<div class="mo_oauth_premium_option_text"><span style="color:red;">*</span>This is a enterprise feature. 
				<a href="admin.php?page=mo_oauth_settings&tab=licensing">Click Here</a> to see our full list of Enterprise Features.</div>
				<div class="mo_table_layout mo_oauth_premium_option">
				<div class="mo_oauth_client_small_layout">'' cannot be parsed correct.
HTML code '$'<h2>Login Transactions Report</h2>
					<div class="mo_oauth_client_small_layout hidden">	
						<h3>Advanced Report</h3>
						<form method="post" action="">
							<input type="hidden" name="option" value="mo_oauth_client_advanced_reports">
							<br><input disabled type="submit" style="width:100px;" value="Search" class="button button-primary button-large">
						</form>
						<br>
					</div>
					
					<table id="login_reports" class="display" style="border-collapse: collapse;" cellspacing="0" width="100%">
						<thead>
							<tr style="border-bottom: 2px solid #000;">
								<th>IP Address</th>
								<th>Username</th>
								<th>Status</th>
								<th>TimeStamp</th>
							</tr>
						</thead>
						<tr style="border-bottom: 2px solid #000;"><td colspan="4" align="center" style="background: #f2f2f2; padding: 10px;">No Data Found in the Table.</td></tr>
						<tbody>'' cannot be parsed correct.
HTML code '$'	        </tbody>
					</table>
				</div>
				
			</div>'' cannot be parsed correct.
HTML code '$'<br>'' cannot be parsed correct.
HTML code '$'<h4>Connect with :</h4><br>'' cannot be parsed correct.
HTML code '$'<div class="row">'' cannot be parsed correct.
HTML code '$'</div><br><br>'' cannot be parsed correct.
HTML code '$'\' + \'/?option=generateDynmicUrl&app_name=\' + app_name;
		}
		function moOAuthLoginNew(app_name) {
			window.location.href = \''' cannot be parsed correct.
HTML code '$'\' + \'/?option=oauthredirect&app_name=\' + app_name;
		}
	</script>
	'' cannot be parsed correct.
HTML code '$'<div style="font-family:Calibri;padding:0 3%;">'' cannot be parsed correct.
HTML code '$'<style>table{border-collapse:collapse;}th {background-color: #eee; text-align: center; padding: 8px; border-width:1px; border-style:solid; border-color:#212121;}tr:nth-child(odd) {background-color: #f2f2f2;} td{padding:8px;border-width:1px; border-style:solid; border-color:#212121;}</style>'' cannot be parsed correct.
HTML code '$'<h2>Test Configuration</h2><table><tr><th>Attribute Name</th><th>Attribute Value</th></tr>'' cannot be parsed correct.
HTML code '$'</table>'' cannot be parsed correct.
HTML code '$'<div style="padding: 10px;"></div><input style="padding:1%;width:100px;background: #0091CD none repeat scroll 0% 0%;cursor: pointer;font-size:15px;border-width: 1px;border-style: solid;border-radius: 3px;white-space: nowrap;box-sizing: border-box;border-color: #0073AA;box-shadow: 0px 1px 0px rgba(120, 200, 230, 0.6) inset;color: #FFF;"type="button" value="Done" onClick="self.close();"></div>'' cannot be parsed correct.
HTML code '$'<tr><td>'' cannot be parsed correct.
HTML code '$'<b>Response : </b><br>'' cannot be parsed correct.
HTML code '$'<br><br>'' cannot be parsed correct.
HTML code '$'<b>Response : </b><br>'' cannot be parsed correct.
HTML code '$'<br><br>'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'<p style=\'color:#a94442;background-color:#f2dede;border-color:#ebccd1;border-radius:5px;padding:12px\'>You can only add 1 application with free version. Upgrade to <a href=\'admin.php?page=mo_oauth_settings&tab=licensing\'><b>enterprise</b></a> to add more.</p>'' cannot be parsed correct.
HTML code '$'https://login.xecurify.com/moas/oauth/client/callback'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'<tr>
			<td><strong>Last Name:</strong></td>
			<td>
				<p>Advanced attribute mapping is available in <a href="admin.php?page=mo_oauth_settings&amp;tab=licensing"><b>premium</b></a> version.</p>
				<input type="text" name="oauth_client_am_last_name" placeholder="Enter attribute name for Last Name" style="width: 350px;" value="" readonly /></td>
		  </tr>
		  <tr>
			<td><strong>Username:</strong></td>
			<td><input type="text" name="oauth_client_am_group_name" placeholder="Enter attribute name for Username" style="width: 350px;" value="" readonly /></td>
		  </tr>
		  <tr>
			<td><strong>Group/Role:</strong></td>
			<td><input type="text" name="oauth_client_am_group_name" placeholder="Enter attribute name for Group/Role" style="width: 350px;" value="" readonly /></td>
		  </tr>
		  <tr>
			<td><strong>Display Name:</strong></td>
			<td>
				<select name="oauth_client_am_display_name" id="oauth_client_am_display_name" disabled style="background-color: #eee;">
					<option value="USERNAME"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'>Username</option>
					<option value="FNAME"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'>FirstName</option>
					<option value="LNAME"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'>LastName</option>
					<option value="FNAME_LNAME"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'>FirstName LastName</option>
					<option value="LNAME_FNAME"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'>LastName FirstName</option>
				</select>
			</td></tr>'' cannot be parsed correct.
HTML code '$'<br><a href=\'#\'><button disabled style=\'float:right\'>Add Application</button></a>'' cannot be parsed correct.
HTML code '$'<br><a href=\'admin.php?page=mo_oauth_settings&action=add\'><button style=\'float:right\'>Add Application</button></a>'' cannot be parsed correct.
HTML code '$'<h3>Applications List</h3>'' cannot be parsed correct.
HTML code '$'<p style=\'color:#a94442;background-color:#f2dede;border-color:#ebccd1;border-radius:5px;padding:12px\'>You can only add 1 application with free version. Upgrade to <a href=\'admin.php?page=mo_oauth_settings&tab=licensing\'><b>enterprise</b></a> to add more.</p>'' cannot be parsed correct.
HTML code '$'<table class=\'tableborder\'>'' cannot be parsed correct.
HTML code '$'<tr><th><b>Name</b></th><th>Action</th></tr>'' cannot be parsed correct.
HTML code '$'</table>'' cannot be parsed correct.
HTML code '$'<br><br>'' cannot be parsed correct.
HTML code '$'<input type="hidden" name="option" value="mo_oauth_resend_otp_email"/>'' cannot be parsed correct.
HTML code '$'<input type="hidden" name="option" value="mo_oauth_resend_otp_phone"/>'' cannot be parsed correct.
HTML code '$'<div class="mo_oauth_premium_option_text"><span style="color:red;">*</span>This is a premium feature. 
		<a href="admin.php?page=mo_oauth_settings&tab=licensing">Click Here</a> to see our full list of Premium Features.</div>
		<div class="mo_table_layout mo_oauth_premium_option">
		<div class="mo_oauth_client_small_layout">'' cannot be parsed correct.
HTML code '$'	        </tbody>
		    </table>
		</div>
		
	</div>
<script>
	jQuery(document).ready(function() {
		jQuery("#login_reports").DataTable({
			"order": [[ 3, "desc" ]]
		});
		jQuery("#error_reports").DataTable({
			"order": [[ 4, "desc" ]]
		});
	} );
</script>'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:33.747636.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.071079.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 5 do_action/apply_filters calls and 23 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:01.480040.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running DbplusDetector
### Start running FrontBaseDetector
### Finish running FileProDetector
### Start running HashDetector
### Finish running DbaseDetector
### Start running IBMDb2Detector
### Finish running CubridDetector
### Start running InformixDetector
### Finish running FirebirdInterBaseDetector
### Start running IngresDetector
### Finish running IBMDb2Detector
### Start running maxdbDetector
### Finish running FrontBaseDetector
### Start running MongoDbDetector
### Finish running InformixDetector
### Start running MongoDetector
### Finish running HashDetector
### Start running MsqlDetector
### Finish running MongoDetector
### Start running MySQLDetector
### Finish running IngresDetector
### Start running MySQLiDetector
### Finish running MongoDbDetector
### Start running Oci8Detector
### Finish running MySQLDetector
### Start running OpenSSLDetector
### Finish running MsqlDetector
### Start running ParadoxDetector
### Finish running ArrayElementDetector
### Start running PasswordHashingDetector
### Finish running OpenSSLDetector
### Start running PhpCurlDetector
### Finish running Oci8Detector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running ParadoxDetector
### Start running PHPRetrievalDetector
### Finish running PhpCurlDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PasswordHashingDetector
### Start running PhpVarDetector
### Finish running PHPStorageDetector
### Start running PostgreSQLDetector
### Finish running PHPRetrievalDetector
### Start running PropertyDetector
### Finish running PostgreSQLDetector
### Start running Sqlite3Detector
### Finish running Sqlite3Detector
### Start running SqliteDetector
### Finish running PHPIncludedDetector
### Start running SqlServerDetector
### Finish running SqlServerDetector
### Start running SybaseDetector
### Finish running SqliteDetector
### Start running TokyoTyrantDetector
### Finish running TokyoTyrantDetector
### Start running UserInputDetector
### Finish running PhpVarDetector
### Start running VariableDetector
### Finish running SybaseDetector
### Start running WordpressHashingFnDetector
### Finish running PropertyDetector
### Start running WordPressRemoteDetector
### Finish running UserInputDetector
### Start running WordPressRetrievalDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressStorageDetector
### Finish running VariableDetector
### Start running WP_UserDetector
### Finish running WP_UserDetector
### Start running GenericDatabaseUsageDetector
### Finish running GenericDatabaseUsageDetector
### Start running GenericEncryptionDetector
### Finish running maxdbDetector
### Start running DeletionDetector
### Finish running MySQLiDetector
### Start running UninstallDetector
### Finish running GenericEncryptionDetector
### Finish running WordPressRemoteDetector
### Finish running UninstallDetector
### Finish running DeletionDetector
### Finish running WordPressRetrievalDetector
### Finish running WordPressStorageDetector
### Finished running detectors
class-mo-oauth-widget.php:501
  - Request variable '$_POST["email"]' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:253
  - Request variable '$_POST["email"]' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:262
  - Request variable '$_POST["email"]' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:357
  - Request variable '$_POST["email"]' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:362
  - Request variable '$_POST["email"]' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:580
  - Request variable '$_POST["mo_oauth_username_attr"]' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
mo_openidconnect_settings.php:736
  - Request variable '$_POST["mo_oauth_contact_us_email"]' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:763
  - Request variable '$_POST["mo_oauth_client_demo_email"]' of personal types {'email'} is found.
  - Data types: email 

class-customer.php:159
  - hash called with approved hash algorithm sha512.
class-customer.php:230
  - hash called with approved hash algorithm sha512.
class-customer.php:313
  - hash called with approved hash algorithm sha512.
class-customer.php:397
  - hash called with approved hash algorithm sha512.
class-customer.php:460
  - hash called with approved hash algorithm sha512.
class-customer.php:523
  - hash called with approved hash algorithm sha512. 

class-mo-oauth-widget.php:486
  - openssl_encrypt called with unknown encryption algorithm. 

includes/manage-avatar.php:186
  - MD5 called with parameters [strtolower, trim, email]. Ignore if [strtolower, trim, email] does not contain personal information. 

admin/partials/apps/partials/defaultapps.php:12
  - RETRIEVAL call to file_get_contents(dirname() . DIRECTORY_SEPARATOR . "defaultapps.json").
  - Data types: file
admin/partials/apps/partials/defaultapps.php:46
  - RETRIEVAL call to file_get_contents(dirname() . DIRECTORY_SEPARATOR . "defaultapps.json").
  - Data types: file
includes/manage-avatar.php:17
  - RETRIEVAL call to file_get_contents($characterurl).
  - Data types: file
mo_openidconnect_settings.php:101
  - RETRIEVAL call to file_get_contents(dirname() . DIRECTORY_SEPARATOR . "admin/partials/apps/partials/defaultapps.json").
  - Data types: file 

includes/manage-avatar.php:17
  - STORAGE call to file_put_contents($img, file_get_contents($characterurl)).
  - Data types: file 

admin/partials/account/partials/register.php:41
  - object property '$current_user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.
  - Data types: user_meta, user, first_name
admin/partials/account/partials/register.php:41
  - object property '$current_user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.
  - Data types: user_meta, user, first_name
admin/partials/account/partials/register.php:46
  - object property '$current_user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.
  - Data types: user_meta, last_name, user
admin/partials/account/partials/register.php:46
  - object property '$current_user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.
  - Data types: user_meta, last_name, user
class-customer.php:30
  - object property '$this->email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:42
  - object property '$this->email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:183
  - object property '$current_user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.
  - Data types: user_meta, user, first_name
class-customer.php:183
  - object property '$current_user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.
  - Data types: user_meta, user, first_name
class-customer.php:184
  - object property '$current_user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.
  - Data types: user_meta, last_name, user
class-customer.php:184
  - object property '$current_user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.
  - Data types: user_meta, last_name, user
class-customer.php:409
  - object property '$user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.
  - Data types: user_meta, user, first_name
class-customer.php:409
  - object property '$user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.
  - Data types: user_meta, last_name, user
class-customer.php:409
  - object property '$user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.
  - Data types: user_meta, user, first_name
class-customer.php:409
  - object property '$user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.
  - Data types: user_meta, last_name, user
includes/manage-avatar.php:174
  - object property '$user->user_email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:307
  - object property '$user->user_email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:316
  - object property '$user->user_email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:317
  - object property '$id_or_email->comment_author_email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:318
  - object property '$id_or_email->comment_author_email' of personal types {'email'} is found.
  - Data types: email
mo_oauth_settings_page.php:109
  - object property '$current_user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.
  - Data types: user_meta, user, first_name
mo_oauth_settings_page.php:109
  - object property '$current_user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.
  - Data types: user_meta, user, first_name
mo_oauth_settings_page.php:114
  - object property '$current_user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.
  - Data types: user_meta, last_name, user
mo_oauth_settings_page.php:114
  - object property '$current_user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.
  - Data types: user_meta, last_name, user
mo_openidconnect_settings.php:873
  - object property '$user->user_email' of personal types {'email'} is found.
  - Data types: email 

admin/partials/demo/class-mo-oauth-client-demo.php:48
  - variable '$mo_oauth_client_demo_email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:72
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:77
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:186
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:223
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-customer.php:239
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-customer.php:306
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-customer.php:357
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:360
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:401
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:464
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-customer.php:533
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:220
  - variable '$link_with_username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:222
  - variable '$link_with_username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:350
  - variable '$username_attr' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:356
  - variable '$username_attr' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:359
  - variable '$username_attr' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:412
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:425
  - variable '$username_attr' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:426
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:426
  - variable '$username_attr' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:428
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:428
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:431
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:432
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:435
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:444
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:446
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:499
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:501
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:504
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:505
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:506
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:510
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:511
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:511
  - variable '$user_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:511
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:562
  - variable '$eveonline_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:573
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:576
  - variable '$eveonline_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:577
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:607
  - variable '$eveonline_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:615
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:618
  - variable '$eveonline_email' of personal types {'email'} is found.
  - Data types: email
class-mo-oauth-widget.php:619
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:638
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:643
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
class-mo-oauth-widget.php:643
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
class-mo-oauth-widget.php:644
  - variable '$username' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
includes/manage-avatar.php:174
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:186
  - variable '$email_hash' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:186
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:191
  - variable '$email_hash' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:245
  - variable '$email_hash' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:298
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:300
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:301
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:307
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:308
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:309
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:310
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:316
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:317
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:318
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:318
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:321
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:321
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:323
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
includes/manage-avatar.php:338
  - variable '$id_or_email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:246
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:262
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:271
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:284
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:355
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:362
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:366
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:471
  - variable '$email_attr' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:580
  - variable '$username_attr' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
mo_openidconnect_settings.php:590
  - variable '$username_attr' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user
mo_openidconnect_settings.php:736
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:741
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:748
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:763
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:767
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:771
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:771
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:783
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:784
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:820
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:823
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:826
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:871
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:872
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:873
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:878
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:998
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
mo_openidconnect_settings.php:1001
  - variable '$email' of personal types {'email'} is found.
  - Data types: email 

class-mo-oauth-widget.php:511
  - CRYPTOGRAPHY call to wp_create_user($user_email, $random_password, $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:643
  - CRYPTOGRAPHY call to wp_create_user($username, $random_password) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:645
  - CRYPTOGRAPHY call to wp_update_user(["ID" => $user_id]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user 

class-customer.php:59
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:94
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:140
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:207
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:265
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:289
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:344
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:375
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:441
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:502
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
class-customer.php:553
  - API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
handler/oauth_handler.php:40
  - API call to wp_remote_post($tokenendpoint, ["method" => "POST", "timeout" => 45, "redirection" => 5, "httpversion" => "1.0", "blocking" => true, "headers" => $headers, "body" => $body, "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
handler/oauth_handler.php:99
  - API call to wp_remote_post($resourceownerdetailsurl, ["method" => "GET", "timeout" => 45, "redirection" => 5, "httpversion" => "1.0", "blocking" => true, "headers" => $headers, "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote
handler/oauth_handler.php:132
  - API call to wp_remote_get($url, ["method" => "GET", "timeout" => 45, "redirection" => 5, "httpversion" => , "blocking" => true, "headers" => [], "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).
  - Data types: remote 

admin/partials/account/partials/register.php:5
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
admin/partials/account/partials/register.php:29
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/register.php:51
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/register.php:105
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/register.php:109
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/verify-otp.php:31
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/verify-otp.php:31
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/verify-otp.php:43
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/verify-otp.php:43
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/verify-otp.php:43
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/verify-otp.php:56
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/account/partials/verify-password.php:18
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/addapp.php:7
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/app-list.php:40
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/app-list.php:42
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/app-list.php:72
  - RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/app-list.php:79
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/app-list.php:93
  - RETRIEVAL call to get_option("mo_openidconnect_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:5
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:6
  - RETRIEVAL call to get_option("mo_oauth_attr_name_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:35
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:35
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:35
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:69
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:69
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:70
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:70
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:70
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:72
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/attr-role-mapping.php:72
  - RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/eveonline.php:12
  - RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/eveonline.php:29
  - RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/eveonline.php:37
  - RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/eveonline.php:92
  - RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/eveonline.php:100
  - RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/eveonline.php:108
  - RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/eveonline.php:163
  - RETRIEVAL call to get_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/eveonline.php:172
  - RETRIEVAL call to get_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/eveonline.php:180
  - RETRIEVAL call to get_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/eveonline.php:239
  - RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/eveonline.php:248
  - RETRIEVAL call to get_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/eveonline.php:256
  - RETRIEVAL call to get_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/eveonline.php:307
  - RETRIEVAL call to get_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/eveonline.php:316
  - RETRIEVAL call to get_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/eveonline.php:324
  - RETRIEVAL call to get_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/apps/partials/updateapp.php:5
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:53
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:130
  - RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:147
  - RETRIEVAL call to get_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:168
  - RETRIEVAL call to get_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:170
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:170
  - RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:170
  - RETRIEVAL call to get_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:172
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:172
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:172
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:172
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/demo/class-mo-oauth-client-demo.php:30
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/guides/class-mo-oauth-client-guides.php:12
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/licensing/class-mo-oauth-client-license.php:169
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/licensing/class-mo-oauth-client-license.php:171
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/licensing/class-mo-oauth-client-license.php:173
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/licensing/class-mo-oauth-client-license.php:177
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/licensing/class-mo-oauth-client-license.php:179
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/licensing/class-mo-oauth-client-license.php:181
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/support/class-mo-oauth-client-support.php:20
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/partials/support/class-mo-oauth-client-support.php:23
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:29
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:30
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:31
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:32
  - RETRIEVAL call to get_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:33
  - RETRIEVAL call to get_option("mo_oauth_admin_fname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:34
  - RETRIEVAL call to get_option("mo_oauth_admin_lname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:35
  - RETRIEVAL call to get_option("mo_oauth_admin_company") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:70
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:72
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:74
  - RETRIEVAL call to get_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:105
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:106
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:107
  - RETRIEVAL call to get_option("mo_oauth_" . $name . "_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:108
  - RETRIEVAL call to get_option("mo_oauth_" . $name . "_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:109
  - RETRIEVAL call to get_option("mo_oauth_" . $name . "_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:172
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
class-customer.php:193
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:218
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:223
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:224
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:276
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:300
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:306
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:355
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:357
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:389
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:406
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
class-customer.php:453
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:468
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
class-customer.php:511
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:513
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-customer.php:516
  - RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:26
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:125
  - RETRIEVAL call to get_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:125
  - RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:125
  - RETRIEVAL call to get_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:127
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:137
  - RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:137
  - RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:138
  - RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:138
  - RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:139
  - RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:139
  - RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:140
  - RETRIEVAL call to get_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:146
  - RETRIEVAL call to get_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:149
  - RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:152
  - RETRIEVAL call to get_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:219
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
class-mo-oauth-widget.php:265
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:275
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:349
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:435
  - RETRIEVAL call to get_user_by("login", $username) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:451
  - RETRIEVAL call to wp_set_current_user($user->ID) alters data types {'user_meta'}. Passed arguments: 0: $id (int). Returns (WP_User).
  - Data types: user_meta
class-mo-oauth-widget.php:453
  - RETRIEVAL call to get_user_by("ID", $user->ID) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:455
  - RETRIEVAL call to get_option("mo_oauth_redirect_url") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:477
  - RETRIEVAL call to get_option("mo_oauth_" . $_REQUEST["app_name"] . "_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:479
  - RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:482
  - RETRIEVAL call to get_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:491
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:491
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:506
  - RETRIEVAL call to get_user_by("email", $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:519
  - RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:520
  - RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:537
  - RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:537
  - RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:538
  - RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:538
  - RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:539
  - RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:539
  - RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:546
  - RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:550
  - RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:554
  - RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
class-mo-oauth-widget.php:564
  - RETRIEVAL call to get_user_by("login", $characterID) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:609
  - RETRIEVAL call to get_user_by("login", $characterID) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
class-mo-oauth-widget.php:644
  - RETRIEVAL call to get_user_by("login", $username) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
includes/manage-avatar.php:23
  - RETRIEVAL call to get_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
includes/manage-avatar.php:149
  - RETRIEVAL call to get_option("show_avatars") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
includes/manage-avatar.php:168
  - RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
includes/manage-avatar.php:178
  - RETRIEVAL call to get_option("avatar_default") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
includes/manage-avatar.php:208
  - RETRIEVAL call to get_option("avatar_rating") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
includes/manage-avatar.php:211
  - RETRIEVAL call to get_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
includes/manage-avatar.php:218
  - RETRIEVAL call to get_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar_rating", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
includes/manage-avatar.php:227
  - RETRIEVAL call to get_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
includes/manage-avatar.php:280
  - RETRIEVAL call to get_option("show_avatars") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
includes/manage-avatar.php:304
  - RETRIEVAL call to get_userdata($id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
includes/manage-avatar.php:313
  - RETRIEVAL call to get_userdata($id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
includes/manage-avatar.php:325
  - RETRIEVAL call to get_userdata($id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
includes/manage-avatar.php:381
  - RETRIEVAL call to get_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
includes/manage-avatar.php:390
  - RETRIEVAL call to get_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
includes/manage-avatar.php:415
  - RETRIEVAL call to get_users($args) alters data types {'user_meta', 'user'}. Passed arguments: 0: $args (array). Returns (array).
  - Data types: user_meta, user
mo_oauth_settings_page.php:21
  - RETRIEVAL call to get_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:45
  - RETRIEVAL call to get_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:48
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:48
  - RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:48
  - RETRIEVAL call to get_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:50
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:50
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:50
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:50
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:79
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
mo_oauth_settings_page.php:97
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:119
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:169
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:266
  - RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:475
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:477
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:478
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:481
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:483
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:484
  - RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:507
  - RETRIEVAL call to get_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:527
  - RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:531
  - RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:535
  - RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:595
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:597
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:618
  - RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:625
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:772
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:867
  - RETRIEVAL call to get_option("mo_oauth_client_disable_authorization_header") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:921
  - RETRIEVAL call to get_option("oauth_client_am_display_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:924
  - RETRIEVAL call to get_option("oauth_client_am_display_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:927
  - RETRIEVAL call to get_option("oauth_client_am_display_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:930
  - RETRIEVAL call to get_option("oauth_client_am_display_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:934
  - RETRIEVAL call to get_option("oauth_client_am_display_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:985
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1023
  - RETRIEVAL call to get_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1032
  - RETRIEVAL call to get_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1040
  - RETRIEVAL call to get_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1099
  - RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1108
  - RETRIEVAL call to get_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1116
  - RETRIEVAL call to get_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1167
  - RETRIEVAL call to get_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1176
  - RETRIEVAL call to get_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1184
  - RETRIEVAL call to get_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1239
  - RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1257
  - RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1265
  - RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1320
  - RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1328
  - RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1336
  - RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1392
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1395
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1447
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1447
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1459
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1459
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1459
  - RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_oauth_settings_page.php:1480
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:38
  - RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:140
  - RETRIEVAL call to get_option($newkey) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:146
  - RETRIEVAL call to get_option($newkey) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:156
  - RETRIEVAL call to get_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:166
  - RETRIEVAL call to get_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:284
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:404
  - RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:404
  - RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:425
  - RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:425
  - RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:425
  - RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:426
  - RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:426
  - RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:434
  - RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:434
  - RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:466
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:467
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:517
  - RETRIEVAL call to get_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:517
  - RETRIEVAL call to get_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:587
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:626
  - RETRIEVAL call to get_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:626
  - RETRIEVAL call to get_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:667
  - RETRIEVAL call to get_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:667
  - RETRIEVAL call to get_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:711
  - RETRIEVAL call to get_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:711
  - RETRIEVAL call to get_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:783
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:786
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:800
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:820
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:862
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
mo_openidconnect_settings.php:871
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:875
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:953
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:977
  - RETRIEVAL call to get_user_meta($user->ID, "user_eveonline_character_name", true) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta, user
mo_openidconnect_settings.php:984
  - RETRIEVAL call to get_user_meta($user->ID, "user_eveonline_corporation_name", true) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta, user
mo_openidconnect_settings.php:990
  - RETRIEVAL call to get_user_meta($user->ID, "user_eveonline_alliance_name", true) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta, user
mo_openidconnect_settings.php:998
  - RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:999
  - RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
mo_openidconnect_settings.php:1000
  - RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
pointers.php:37
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
pointers.php:37
  - RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
views/PointersManager.php:30
  - RETRIEVAL call to get_user_meta($uid, "dismissed_wp_pointers", TRUE) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta 

admin/class-mo-oauth-client-admin.php:53
  - STORAGE call to update_option("host_name", "https://login.xecurify.com") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin/partials/account/partials/register.php:4
  - STORAGE call to update_option("new_registration", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:83
  - STORAGE call to delete_option("mo_oauth_client_custom_token_endpoint_no_csecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:85
  - STORAGE call to delete_option("mo_oauth_attr_name_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:87
  - STORAGE call to update_option("mo_oauth_eveonline_enable", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:88
  - STORAGE call to delete_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:91
  - STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:103
  - STORAGE call to update_option("mo_openidconnect_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:103
  - STORAGE call to update_option("mo_license_plan_from_feedback", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin/partials/class-mo-oauth-client-admin-menu.php:104
  - STORAGE call to update_option("mo_saml_license_message", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
class-mo-oauth-widget.php:9
  - STORAGE call to update_option("host_name", "https://login.xecurify.com") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
class-mo-oauth-widget.php:267
  - STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
class-mo-oauth-widget.php:277
  - STORAGE call to update_option("mo_oauth_redirect_url", $_REQUEST["redirect_url"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
class-mo-oauth-widget.php:413
  - STORAGE call to update_option("mo_oauth_attr_name_list", $resourceOwner) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
class-mo-oauth-widget.php:511
  - STORAGE call to wp_create_user($user_email, $random_password, $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:567
  - STORAGE call to update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:568
  - STORAGE call to update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:569
  - STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:582
  - STORAGE call to wp_insert_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:583
  - STORAGE call to update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:584
  - STORAGE call to update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:585
  - STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:611
  - STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:623
  - STORAGE call to wp_insert_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:624
  - STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, user
class-mo-oauth-widget.php:643
  - STORAGE call to wp_create_user($username, $random_password) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string). Returns (int|WP_Error).
  - Data types: user_meta, user
class-mo-oauth-widget.php:645
  - STORAGE call to wp_update_user(["ID" => $user_id]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
includes/manage-avatar.php:50
  - STORAGE call to update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", $custom_avatar) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
includes/manage-avatar.php:51
  - STORAGE call to update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating", "G") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
includes/manage-avatar.php:52
  - STORAGE call to update_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
includes/manage-avatar.php:55
  - STORAGE call to update_user_meta($user_id, "mo_oauth_avatar_manager_avatar_type", "custom") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
includes/manage-avatar.php:56
  - STORAGE call to update_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", $attachment_id) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
includes/manage-avatar.php:238
  - STORAGE call to update_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", $avatar) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
includes/manage-avatar.php:402
  - STORAGE call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
includes/manage-avatar.php:403
  - STORAGE call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
includes/manage-avatar.php:404
  - STORAGE call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
includes/manage-avatar.php:405
  - STORAGE call to delete_post_meta($attachment_id, "_wp_attached_file") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
includes/manage-avatar.php:406
  - STORAGE call to delete_post_meta($attachment_id, "_wp_attachment_metadata") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
includes/manage-avatar.php:419
  - STORAGE call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_avatar_type") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
includes/manage-avatar.php:420
  - STORAGE call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
includes/manage-avatar.php:422
  - STORAGE call to wp_delete_post($attachment_id, true) alters data types {'post', 'post_meta', 'wp_post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, post_meta, wp_post
mo_oauth_settings_page.php:78
  - STORAGE call to update_option("new_registration", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings_page.php:990
  - STORAGE call to update_option("mo_oauth_eveonline_enable", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_oauth_settings_page.php:993
  - STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:142
  - STORAGE call to update_option($newkey, $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:147
  - STORAGE call to update_option($newkey, $option->option_value) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:172
  - STORAGE call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:173
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:174
  - STORAGE call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:175
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:176
  - STORAGE call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:177
  - STORAGE call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:178
  - STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:179
  - STORAGE call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:180
  - STORAGE call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:181
  - STORAGE call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:182
  - STORAGE call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:230
  - STORAGE call to update_option("mo_oauth_client_show_mo_server_message", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:235
  - STORAGE call to update_user_meta(get_current_user_id(), "dismissed_wp_pointers", "") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
mo_openidconnect_settings.php:254
  - STORAGE call to update_option("message", "All the fields are required. Please enter valid entries.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:258
  - STORAGE call to update_option("message", "Choose a password with minimum length 8.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:271
  - STORAGE call to update_option("mo_oauth_admin_email", $email) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:272
  - STORAGE call to update_option("mo_oauth_admin_phone", $phone) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:273
  - STORAGE call to update_option("mo_oauth_admin_fname", $fname) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:274
  - STORAGE call to update_option("mo_oauth_admin_lname", $lname) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:275
  - STORAGE call to update_option("mo_oauth_admin_company", $company) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:282
  - STORAGE call to update_option("password", $password) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:293
  - STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:294
  - STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:295
  - STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:296
  - STORAGE call to update_option("mo_oauth_admin_phone", $customerKey["phone"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:297
  - STORAGE call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:298
  - STORAGE call to update_option("message", "Customer created & retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:299
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:305
  - STORAGE call to update_option("message", "Failed to create customer. Try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:309
  - STORAGE call to update_option("message", "Account already exist. Please Login.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:311
  - STORAGE call to update_option("message", $content["status"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:314
  - STORAGE call to update_option("message", "Passwords do not match.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:315
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:321
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:322
  - STORAGE call to update_option("verify_customer", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:332
  - STORAGE call to update_option("message", "Please enter a value in OTP field.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:333
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_VALIDATION_FAILURE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:345
  - STORAGE call to update_option("message", "Invalid one time passcode. Please enter a valid OTP.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:346
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_VALIDATION_FAILURE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:358
  - STORAGE call to update_option("message", "All the fields are required. Please enter valid entries.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:366
  - STORAGE call to update_option("mo_oauth_admin_email", $email) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:367
  - STORAGE call to update_option("password", $password) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:372
  - STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:373
  - STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:374
  - STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:375
  - STORAGE call to update_option("mo_oauth_admin_phone", $customerKey["phone"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:376
  - STORAGE call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:377
  - STORAGE call to update_option("message", "Customer retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:378
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:381
  - STORAGE call to update_option("message", "Invalid username or password. Please try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:394
  - STORAGE call to update_option("message", "All the fields are required. Please enter Key ID and Verfication code to save API Key details.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:402
  - STORAGE call to update_option("mo_eve_api_key", $apiKey) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:403
  - STORAGE call to update_option("mo_eve_verification_code", $verificationCode) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:405
  - STORAGE call to update_option("message", "Your API Key details have been saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:408
  - STORAGE call to update_option("message", "Please enter Key ID and Verfication code to save API Key details") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:422
  - STORAGE call to update_option("mo_eve_allowed_corps", $corps) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:423
  - STORAGE call to update_option("mo_eve_allowed_alliances", $alliances) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:424
  - STORAGE call to update_option("mo_eve_allowed_char_name", $charName) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:427
  - STORAGE call to update_option("message", "Your allowed Corporations, Alliances and Characters have been saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:430
  - STORAGE call to update_option("message", "Please enter Key ID and Verification code to filter Characters. Your allowed Corporations, Alliances and Characters have been saved.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:435
  - STORAGE call to update_option("message", "Characters of all Corporations and Alliances will be allowed.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:438
  - STORAGE call to update_option("message", "Please enter Key ID and Verification code to filter Characters. Characters of all Corporations and Alliances will be allowed.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:448
  - STORAGE call to update_option("message", "Please enter valid Client ID and Client Secret.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:463
  - STORAGE call to update_option("mo_oauth_client_custom_token_endpoint_no_csecret", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:485
  - STORAGE call to update_option("message", "You can only add 1 application with free version. Upgrade to enterprise version if you want to add more applications.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:514
  - STORAGE call to update_option("mo_oauth_eveonline_enable", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:515
  - STORAGE call to update_option("mo_oauth_eveonline_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:516
  - STORAGE call to update_option("mo_oauth_eveonline_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:521
  - STORAGE call to update_option("message", "Your settings were saved. Go to Advanced EVE Online Settings for configuring restrictions on user sign in.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:524
  - STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:564
  - STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:571
  - STORAGE call to update_option("mo_oauth_icon_width", stripslashes($_POST["mo_oauth_icon_width"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:572
  - STORAGE call to update_option("mo_oauth_icon_height", stripslashes($_POST["mo_oauth_icon_height"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:573
  - STORAGE call to update_option("mo_oauth_icon_margin", stripslashes($_POST["mo_oauth_icon_margin"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:574
  - STORAGE call to update_option("mo_oauth_icon_configure_css", stripcslashes(stripslashes($_POST["mo_oauth_icon_configure_css"]))) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:575
  - STORAGE call to update_option("message", "Your settings were saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:583
  - STORAGE call to update_option("message", "You MUST configure an application before you map attributes.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:596
  - STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:597
  - STORAGE call to update_option("mo_attr_option", $attr_option) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:598
  - STORAGE call to update_option("message", "Your settings are saved successfully.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:612
  - STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:622
  - STORAGE call to update_option("mo_oauth_google_enable", isset($_POST["mo_oauth_google_enable"])$_POST["mo_oauth_google_enable"]0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:623
  - STORAGE call to update_option("mo_oauth_google_scope", $scope) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:624
  - STORAGE call to update_option("mo_oauth_google_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:625
  - STORAGE call to update_option("mo_oauth_google_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:630
  - STORAGE call to update_option("message", "Your settings were saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:633
  - STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:637
  - STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:638
  - STORAGE call to update_option("mo_oauth_google_enable", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:642
  - STORAGE call to update_option("message", "Please register customer before trying to save other configurations") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:655
  - STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:664
  - STORAGE call to update_option("mo_oauth_eveonline_enable", isset($_POST["mo_oauth_eveonline_enable"])$_POST["mo_oauth_eveonline_enable"]0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:665
  - STORAGE call to update_option("mo_oauth_eveonline_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:666
  - STORAGE call to update_option("mo_oauth_eveonline_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:671
  - STORAGE call to update_option("message", "Your settings were saved. Go to Advanced EVE Online Settings for configuring restrictions on user sign in.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:674
  - STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:678
  - STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:679
  - STORAGE call to update_option("mo_oauth_eveonline_enable", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:683
  - STORAGE call to update_option("message", "Please register customer before trying to save other configurations") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:697
  - STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:707
  - STORAGE call to update_option("mo_oauth_facebook_enable", isset($_POST["mo_oauth_facebook_enable"])$_POST["mo_oauth_facebook_enable"]0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:708
  - STORAGE call to update_option("mo_oauth_facebook_scope", $scope) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:709
  - STORAGE call to update_option("mo_oauth_facebook_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:710
  - STORAGE call to update_option("mo_oauth_facebook_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:715
  - STORAGE call to update_option("message", "Your settings were saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:718
  - STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:722
  - STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:723
  - STORAGE call to update_option("mo_oauth_google_enable", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:727
  - STORAGE call to update_option("message", "Please register customer before trying to save other configurations") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:742
  - STORAGE call to update_option("message", "Please fill up Email and Query fields to submit your query.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:750
  - STORAGE call to update_option("message", "Your query could not be submitted. Please try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:753
  - STORAGE call to update_option("message", "Thanks for getting in touch! We shall get back to you shortly.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:768
  - STORAGE call to update_option("message", "Please fill up Usecase, Email field and Requested demo plan to submit your query.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:772
  - STORAGE call to update_option("message", "Thanks for getting in touch! We shall get back to you shortly.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:786
  - STORAGE call to update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:788
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:791
  - STORAGE call to update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:792
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:804
  - STORAGE call to update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:805
  - STORAGE call to update_option("mo_oauth_transactionId", $content["txId"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:806
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:809
  - STORAGE call to update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:810
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:815
  - STORAGE call to update_option("mo_oauth_message", "ERROR: <a href="http://php.net/manual/en/curl.installation.php" target="_blank">PHP cURL extension</a> is not installed or disabled. Resend OTP failed.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:826
  - STORAGE call to update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:831
  - STORAGE call to update_option("verify_customer", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:832
  - STORAGE call to update_option("mo_oauth_registration_status", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:833
  - STORAGE call to update_option("new_registration", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:841
  - STORAGE call to update_option("mo_oauth_admin_phone", $phone) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:845
  - STORAGE call to update_option("message", " A one time passcode is sent to " . get_site_option("mo_oauth_admin_phone") . ". Please enter the otp here to verify your email.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:847
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:850
  - STORAGE call to update_option("message", "There was an error in sending SMS. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:851
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:858
  - STORAGE call to update_option("message", "Plugin deactivated successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:880
  - STORAGE call to update_option("message", "Thank you for the feedback.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:883
  - STORAGE call to update_option("message", "Please Select one of the reasons ,if your reason is not mentioned please select Other Reasons") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:896
  - STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:897
  - STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:898
  - STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:899
  - STORAGE call to update_option("password", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:900
  - STORAGE call to update_option("message", "Customer retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:901
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:902
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:906
  - STORAGE call to update_option("message", "You already have an account with miniOrange. Please enter a valid password.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:907
  - STORAGE call to update_option("verify_customer", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:920
  - STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:922
  - STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:923
  - STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:924
  - STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:925
  - STORAGE call to update_option("password", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:926
  - STORAGE call to update_option("message", "Registered successfully.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:927
  - STORAGE call to update_option("mo_oauth_registration_status", "MO_OAUTH_REGISTRATION_COMPLETE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:928
  - STORAGE call to update_option("mo_oauth_new_customer", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:929
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:930
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:937
  - STORAGE call to update_option("message", "<a href="http://php.net/manual/en/curl.installation.php" target="_blank">PHP CURL extension</a> is not installed or disabled. Please enable it to continue.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
uninstall.php:6
  - STORAGE call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:7
  - STORAGE call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:8
  - STORAGE call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:9
  - STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:10
  - STORAGE call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:11
  - STORAGE call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:12
  - STORAGE call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:13
  - STORAGE call to delete_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:14
  - STORAGE call to delete_option("mo_oauth_google_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:15
  - STORAGE call to delete_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:16
  - STORAGE call to delete_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:17
  - STORAGE call to delete_option("mo_oauth_google_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:18
  - STORAGE call to delete_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:19
  - STORAGE call to delete_option("mo_oauth_facebook_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:20
  - STORAGE call to delete_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:21
  - STORAGE call to delete_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:22
  - STORAGE call to delete_option("mo_oauth_facebook_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:23
  - STORAGE call to delete_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:24
  - STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:25
  - STORAGE call to delete_option("mo_oauth_eveonline_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:26
  - STORAGE call to delete_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:27
  - STORAGE call to delete_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:28
  - STORAGE call to delete_option("mo_oauth_eveonline_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:29
  - STORAGE call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:30
  - STORAGE call to delete_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:31
  - STORAGE call to delete_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:32
  - STORAGE call to delete_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:33
  - STORAGE call to delete_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:34
  - STORAGE call to delete_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:35
  - STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:36
  - STORAGE call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:37
  - STORAGE call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

class-customer.php:159
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-customer.php:230
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-customer.php:313
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-customer.php:397
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-customer.php:460
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-customer.php:523
  - CRYPTOGRAPHY call to hash("sha512", $stringToHash).
class-mo-oauth-widget.php:486
  - CRYPTOGRAPHY call to openssl_encrypt($token, $method, $customer_token, OPENSSL_RAW_DATAOPENSSL_ZERO_PADDING, $iv). 

admin/partials/apps/partials/app-list.php:83
  - DELETION call to delete_option("mo_oauth_client_custom_token_endpoint_no_csecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:85
  - DELETION call to delete_option("mo_oauth_attr_name_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
admin/partials/apps/partials/app-list.php:88
  - DELETION call to delete_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
includes/manage-avatar.php:402
  - DELETION call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
includes/manage-avatar.php:403
  - DELETION call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
includes/manage-avatar.php:404
  - DELETION call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
includes/manage-avatar.php:405
  - DELETION call to delete_post_meta($attachment_id, "_wp_attached_file") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
includes/manage-avatar.php:406
  - DELETION call to delete_post_meta($attachment_id, "_wp_attachment_metadata") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
includes/manage-avatar.php:419
  - DELETION call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_avatar_type") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
includes/manage-avatar.php:420
  - DELETION call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
includes/manage-avatar.php:422
  - DELETION call to wp_delete_post($attachment_id, true) alters data types {'post', 'post_meta', 'wp_post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post, post_meta, wp_post
mo_openidconnect_settings.php:172
  - DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:173
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:174
  - DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:175
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:176
  - DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:177
  - DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:178
  - DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:179
  - DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:180
  - DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:181
  - DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:182
  - DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:297
  - DELETION call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:299
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:315
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:321
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:376
  - DELETION call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:378
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:901
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:902
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:920
  - DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:929
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
mo_openidconnect_settings.php:930
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:6
  - DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:7
  - DELETION call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:8
  - DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:9
  - DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:10
  - DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:11
  - DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:12
  - DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:13
  - DELETION call to delete_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:14
  - DELETION call to delete_option("mo_oauth_google_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:15
  - DELETION call to delete_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:16
  - DELETION call to delete_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:17
  - DELETION call to delete_option("mo_oauth_google_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:18
  - DELETION call to delete_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:19
  - DELETION call to delete_option("mo_oauth_facebook_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:20
  - DELETION call to delete_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:21
  - DELETION call to delete_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:22
  - DELETION call to delete_option("mo_oauth_facebook_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:23
  - DELETION call to delete_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:24
  - DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:25
  - DELETION call to delete_option("mo_oauth_eveonline_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:26
  - DELETION call to delete_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:27
  - DELETION call to delete_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:28
  - DELETION call to delete_option("mo_oauth_eveonline_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:29
  - DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:30
  - DELETION call to delete_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:31
  - DELETION call to delete_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:32
  - DELETION call to delete_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:33
  - DELETION call to delete_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:34
  - DELETION call to delete_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:35
  - DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:36
  - DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:37
  - DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

uninstall.php:6
  - Uninstall deletion call: DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:7
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:8
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:9
  - Uninstall deletion call: DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:10
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:11
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:12
  - Uninstall deletion call: DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:13
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:14
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:15
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:16
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:17
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:18
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:19
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:20
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:21
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:22
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:23
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:24
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:25
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:26
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:27
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:28
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:29
  - Uninstall deletion call: DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:30
  - Uninstall deletion call: DELETION call to delete_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:31
  - Uninstall deletion call: DELETION call to delete_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:32
  - Uninstall deletion call: DELETION call to delete_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:33
  - Uninstall deletion call: DELETION call to delete_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:34
  - Uninstall deletion call: DELETION call to delete_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:35
  - Uninstall deletion call: DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:36
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
uninstall.php:37
  - Uninstall deletion call: DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

By data type:
email
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
file
	PHPRetrievalDetector.file_get_contents(dirname() . DIRECTORY_SEPARATOR . "admin/partials/apps/partials/defaultapps.json") - {'file'}
	PHPStorageDetector.file_put_contents($img, file_get_contents($characterurl)) - {'file'}
	PHPRetrievalDetector.file_get_contents(dirname() . DIRECTORY_SEPARATOR . "defaultapps.json") - {'file'}
	PHPRetrievalDetector.file_get_contents($characterurl) - {'file'}
	PHPRetrievalDetector.file_get_contents(dirname() . DIRECTORY_SEPARATOR . "defaultapps.json") - {'file'}
first_name
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
last_name
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
none
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	HashDetector.(unknown) - set()
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	HashDetector.(unknown) - set()
	HashDetector.(unknown) - set()
	HashDetector.(unknown) - set()
	HashDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	OpenSSLDetector.(unknown) - set()
	GenericEncryptionDetector.openssl_encrypt($token, $method, $customer_token, OPENSSL_RAW_DATAOPENSSL_ZERO_PADDING, $iv) - set()
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	GenericEncryptionDetector.hash("sha512", $stringToHash) - set()
	HashDetector.(unknown) - set()
option
	WordPressRetrievalDetector.get_option("mo_eve_allowed_corps") - {'option'}
	UninstallDetector.delete_option("mo_eve_allowed_alliances") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Client ID and Client Secret to save settings") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_client_show_mo_server_message") - {'option'}
	WordPressStorageDetector.update_option("message", "Your settings are saved successfully.") - {'option'}
	WordPressStorageDetector.update_option("message", "Plugin deactivated successfully") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_api_key") - {'option'}
	DeletionDetector.delete_option("customer_token") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") - {'option'}
	UninstallDetector.delete_option("mo_oauth_facebook_message") - {'option'}
	WordPressStorageDetector.delete_option("host_name") - {'option'}
	DeletionDetector.delete_option("mo_oauth_new_customer") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Client ID and Client Secret to save settings.") - {'option'}
	DeletionDetector.delete_option("message") - {'option'}
	UninstallDetector.delete_option("mo_oauth_google_message") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_google_enable", false) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_google_enable", isset($_POST["mo_oauth_google_enable"])$_POST["mo_oauth_google_enable"]0) - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_email") - {'option'}
	UninstallDetector.delete_option("mo_oauth_facebook_scope") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_enable") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_google_scope", $scope) - {'option'}
	UninstallDetector.delete_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_enable") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_margin") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_phone") - {'option'}
	UninstallDetector.delete_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_google_client_secret", $clientsecret) - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_google_client_id", $clientid) - {'option'}
	WordPressStorageDetector.update_option("message", "Please register customer before trying to save other configurations") - {'option'}
	DeletionDetector.delete_option("mo_oauth_client_show_mo_server_message") - {'option'}
	DeletionDetector.delete_option("password") - {'option'}
	WordPressStorageDetector.delete_option("message") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_api_key") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_corps") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_char_name") - {'option'}
	WordPressStorageDetector.delete_option("customer_token") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_verification_code") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	DeletionDetector.delete_option("mo_oauth_client_custom_token_endpoint_no_csecret") - {'option'}
	UninstallDetector.delete_option("mo_oauth_eveonline_client_id") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_height") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_alliances") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_google_enable") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_api_key") - {'option'}
	DeletionDetector.delete_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_google_scope") - {'option'}
	DeletionDetector.delete_option("password") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_google_client_id") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_google_client_secret") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_char_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_alliances") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_verification_code") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_corps") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_google_message") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	DeletionDetector.delete_option("mo_oauth_new_customer") - {'option'}
	DeletionDetector.delete_option("mo_oauth_facebook_message") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_facebook_enable") - {'option'}
	UninstallDetector.delete_option("mo_oauth_google_client_secret") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_phone", $customerKey["phone"]) - {'option'}
	DeletionDetector.delete_option("mo_oauth_facebook_client_id") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_facebook_scope") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_company", $company) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_client_secret", $clientsecret) - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_customer_key") - {'option'}
	DeletionDetector.delete_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_char_name") - {'option'}
	WordPressStorageDetector.update_option("message", "Your settings were saved. Go to Advanced EVE Online Settings for configuring restrictions on user sign in.") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_facebook_client_id") - {'option'}
	WordPressRetrievalDetector.get_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("oauth_client_am_display_name") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_facebook_client_secret") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("message", $message) - {'option'}
	WordPressRetrievalDetector.get_option("avatar_default") - {'option'}
	DeletionDetector.delete_option("customer_token") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	DeletionDetector.delete_option("mo_oauth_facebook_client_secret") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("password") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_enable", 1) - {'option'}
	WordPressRetrievalDetector.get_option("new_registration") - {'option'}
	DeletionDetector.delete_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_facebook_message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_customer_key") - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_enable") - {'option'}
	WordPressStorageDetector.update_option("message", $message) - {'option'}
	WordPressStorageDetector.delete_option("mo_eve_api_key") - {'option'}
	WordPressStorageDetector.delete_option("mo_eve_allowed_alliances") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("message", "Your settings were saved. Go to Advanced EVE Online Settings for configuring restrictions on user sign in.") - {'option'}
	WordPressStorageDetector.update_option("message", "Registered successfully.") - {'option'}
	WordPressStorageDetector.update_option("message", "Please Select one of the reasons ,if your reason is not mentioned please select Other Reasons") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_client_secret") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OAUTH_REGISTRATION_COMPLETE") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Key ID and Verification code to filter Characters. Characters of all Corporations and Alliances will be allowed.") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter valid Client ID and Client Secret.") - {'option'}
	WordPressStorageDetector.update_option("message", "Thank you for the feedback.") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_customer_key", $customerKey["id"]) - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_eveonline_client_secret") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("message", "<a href="http://php.net/manual/en/curl.installation.php" target="_blank">PHP CURL extension</a> is not installed or disabled. Please enable it to continue.") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) - {'option'}
	WordPressStorageDetector.delete_option("mo_eve_verification_code") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressStorageDetector.update_option("message", "Customer retrieved successfully") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_alliances") - {'option'}
	WordPressRetrievalDetector.get_option("new_registration") - {'option'}
	WordPressStorageDetector.update_option("customer_token", $customerKey["token"]) - {'option'}
	WordPressStorageDetector.delete_option("mo_eve_allowed_char_name") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.update_option("password", "") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_verification_code") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_corps") - {'option'}
	WordPressStorageDetector.update_option("message", "You can only add 1 application with free version. Upgrade to enterprise version if you want to add more applications.") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_client_custom_token_endpoint_no_csecret") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_phone", $phone) - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_configure_css") - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_client_show_mo_server_message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_char_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("new_registration", "true") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_api_key") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_new_customer", 1) - {'option'}
	DeletionDetector.delete_option("mo_oauth_eveonline_message") - {'option'}
	WordPressStorageDetector.delete_option("mo_eve_allowed_corps") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_apps_list", $appslist) - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_verification_code") - {'option'}
	WordPressStorageDetector.update_option("customer_token", $customerKey["token"]) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_client_id") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_enable", false) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_client_secret") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("new_registration", "true") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Client ID and Client Secret to save settings.") - {'option'}
	WordPressStorageDetector.update_option("message", "There was an error in sending SMS. Please click on Resend OTP to try again.") - {'option'}
	WordPressRetrievalDetector.get_option("message") - {'option'}
	WordPressStorageDetector.update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_client_secret") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_facebook_enable", isset($_POST["mo_oauth_facebook_enable"])$_POST["mo_oauth_facebook_enable"]0) - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_facebook_scope", $scope) - {'option'}
	WordPressStorageDetector.update_option("message", "Your allowed Corporations, Alliances and Characters have been saved") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_" . $name . "_client_id") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_client_secret") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	DeletionDetector.delete_option("mo_oauth_facebook_enable") - {'option'}
	DeletionDetector.delete_option("mo_oauth_google_client_secret") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	DeletionDetector.delete_option("mo_oauth_google_message") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Client ID and Client Secret to save settings.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_char_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressStorageDetector.update_option("message", "Failed to create customer. Try again.") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_alliances") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_client_secret") - {'option'}
	WordPressStorageDetector.update_option("message", $content["status"]) - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("message", "Passwords do not match.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_height") - {'option'}
	UninstallDetector.delete_option("mo_eve_allowed_char_name") - {'option'}
	WordPressRetrievalDetector.get_option("oauth_client_am_display_name") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_eveonline_message") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_client_id") - {'option'}
	WordPressRetrievalDetector.get_option("show_avatars") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_client_id") - {'option'}
	WordPressStorageDetector.update_option("verify_customer", "true") - {'option'}
	WordPressStorageDetector.update_option("password", "") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_client_id") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Client ID and Client Secret to save settings") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_client_secret") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_verification_code") - {'option'}
	UninstallDetector.delete_option("mo_eve_api_key") - {'option'}
	UninstallDetector.delete_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_enable") - {'option'}
	UninstallDetector.delete_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_enable") - {'option'}
	UninstallDetector.delete_option("mo_oauth_eveonline_message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_enable") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressStorageDetector.update_option("customer_token", $customerKey["token"]) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_client_secret") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_api_key") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_phone") - {'option'}
	UninstallDetector.delete_option("mo_oauth_google_scope") - {'option'}
	WordPressStorageDetector.update_option("message", "Customer created & retrieved successfully") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_customer_key", $customerKey["id"]) - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_client_id") - {'option'}
	UninstallDetector.delete_option("mo_oauth_facebook_client_secret") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_width") - {'option'}
	DeletionDetector.delete_option("message") - {'option'}
	WordPressStorageDetector.update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") - {'option'}
	DeletionDetector.delete_option("mo_oauth_facebook_scope") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_admin_api_key") - {'option'}
	UninstallDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("message", $message) - {'option'}
	DeletionDetector.delete_option("mo_eve_api_key") - {'option'}
	UninstallDetector.delete_option("mo_oauth_facebook_client_id") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_alliances") - {'option'}
	DeletionDetector.delete_option("mo_oauth_eveonline_client_secret") - {'option'}
	WordPressRetrievalDetector.get_option("avatar_rating") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_new_customer") - {'option'}
	DeletionDetector.delete_option("mo_eve_allowed_corps") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_api_key") - {'option'}
	WordPressStorageDetector.delete_option("message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	DeletionDetector.delete_option("mo_eve_allowed_char_name") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("verify_customer", "true") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_client_show_mo_server_message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	DeletionDetector.delete_option("mo_oauth_eveonline_scope") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_char_name") - {'option'}
	WordPressStorageDetector.update_option("new_registration", "true") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	DeletionDetector.delete_option("mo_eve_verification_code") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_alliances") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_enable", isset($_POST["mo_oauth_eveonline_enable"])$_POST["mo_oauth_eveonline_enable"]0) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_email", $email) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_enable", 0) - {'option'}
	WordPressStorageDetector.delete_option("customer_token") - {'option'}
	DeletionDetector.delete_option("mo_oauth_client_show_mo_server_message") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_apps_list", $appslist) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressStorageDetector.update_option($newkey, $appslist) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_phone", $customerKey["phone"]) - {'option'}
	WordPressRetrievalDetector.get_option("message") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_client_show_mo_server_message", 1) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_corps") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_client_secret", $clientsecret) - {'option'}
	DeletionDetector.delete_option("mo_oauth_google_client_id") - {'option'}
	WordPressStorageDetector.update_option($newkey, $option->option_value) - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	WordPressStorageDetector.delete_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressRetrievalDetector.get_option("oauth_client_am_display_name") - {'option'}
	WordPressRetrievalDetector.get_option($newkey) - {'option'}
	UninstallDetector.delete_option("mo_eve_allowed_corps") - {'option'}
	WordPressStorageDetector.update_option("message", "Choose a password with minimum length 8.") - {'option'}
	WordPressStorageDetector.update_option("message", "Please fill up Usecase, Email field and Requested demo plan to submit your query.") - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressStorageDetector.update_option("host_name", "https://login.xecurify.com") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_attr_name_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_company") - {'option'}
	DeletionDetector.delete_option("mo_oauth_google_enable") - {'option'}
	WordPressRetrievalDetector.get_option("customer_token") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_phone", $phone) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_" . $name . "_client_secret") - {'option'}
	UninstallDetector.delete_option("mo_oauth_client_show_mo_server_message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_lname") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_width") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_fname", $fname) - {'option'}
	DeletionDetector.delete_option("mo_eve_allowed_alliances") - {'option'}
	UninstallDetector.delete_option("customer_token") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_api_key") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_email", $email) - {'option'}
	UninstallDetector.delete_option("mo_oauth_admin_api_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_client_id", $clientid) - {'option'}
	WordPressRetrievalDetector.get_option("show_avatars") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_allowed_corps") - {'option'}
	WordPressStorageDetector.update_option("message", "Please register customer before trying to save other configurations") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_client_disable_authorization_header") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("password", $password) - {'option'}
	DeletionDetector.delete_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option($newkey) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_customer_key", $customerKey["id"]) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_redirect_url") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_google_enable", false) - {'option'}
	UninstallDetector.delete_option("mo_oauth_google_enable") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) - {'option'}
	WordPressStorageDetector.update_option("customer_token", $customerKey["token"]) - {'option'}
	WordPressStorageDetector.update_option("message", "Characters of all Corporations and Alliances will be allowed.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_" . $_REQUEST["app_name"] . "_client_id") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_openidconnect_apps_list") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_VALIDATION_FAILURE") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	DeletionDetector.delete_option("mo_oauth_google_scope") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_" . $name . "_scope") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressStorageDetector.delete_option("password") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressRetrievalDetector.get_option("oauth_client_am_display_name") - {'option'}
	UninstallDetector.delete_option("mo_eve_verification_code") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_facebook_client_secret", $clientsecret) - {'option'}
	WordPressStorageDetector.update_option("mo_saml_license_message", "") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_facebook_client_id", $clientid) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressStorageDetector.update_option("message", "Your settings were saved") - {'option'}
	WordPressStorageDetector.update_option("message", $message) - {'option'}
	WordPressStorageDetector.update_option("host_name", "https://login.xecurify.com") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_client_id", $clientid) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Client ID and Client Secret to save settings") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_enable") - {'option'}
	WordPressRetrievalDetector.get_option("mo_attr_option") - {'option'}
	WordPressStorageDetector.update_option("message", "Please fill up Email and Query fields to submit your query.") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter a value in OTP field.") - {'option'}
	WordPressStorageDetector.update_option("message", "Thanks for getting in touch! We shall get back to you shortly.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("message", "Your query could not be submitted. Please try again.") - {'option'}
	WordPressStorageDetector.update_option("message", "Thanks for getting in touch! We shall get back to you shortly.") - {'option'}
	DeletionDetector.delete_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS") - {'option'}
	WordPressStorageDetector.update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") - {'option'}
	WordPressStorageDetector.update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_message", "ERROR: <a href="http://php.net/manual/en/curl.installation.php" target="_blank">PHP cURL extension</a> is not installed or disabled. Resend OTP failed.") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_transactionId", $content["txId"]) - {'option'}
	DeletionDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_enable") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	DeletionDetector.delete_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_client_id") - {'option'}
	UninstallDetector.delete_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_client_id") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("verify_customer", "") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_customer_key", $customerKey["id"]) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_apps_list", $appslist) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_apps_list", $appslist) - {'option'}
	UninstallDetector.delete_option("new_registration") - {'option'}
	WordPressStorageDetector.update_option("message", "Your settings were saved") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_icon_width", stripslashes($_POST["mo_oauth_icon_width"])) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_icon_margin", stripslashes($_POST["mo_oauth_icon_margin"])) - {'option'}
	DeletionDetector.delete_option("mo_oauth_new_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	UninstallDetector.delete_option("mo_oauth_new_customer") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_icon_height", stripslashes($_POST["mo_oauth_icon_height"])) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_margin") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_icon_configure_css", stripcslashes(stripslashes($_POST["mo_oauth_icon_configure_css"]))) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_fname") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_eveonline_scope") - {'option'}
	WordPressStorageDetector.update_option("message", "Your settings were saved") - {'option'}
	DeletionDetector.delete_option("mo_oauth_eveonline_client_id") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("mo_eve_allowed_char_name", $charName) - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_client_custom_token_endpoint_no_csecret", true) - {'option'}
	WordPressStorageDetector.update_option("mo_eve_allowed_corps", $corps) - {'option'}
	WordPressStorageDetector.update_option("mo_eve_allowed_alliances", $alliances) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("message", "Customer retrieved successfully") - {'option'}
	WordPressStorageDetector.update_option("message", "Invalid username or password. Please try again.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("mo_eve_api_key", $apiKey) - {'option'}
	WordPressStorageDetector.update_option("message", "All the fields are required. Please enter Key ID and Verfication code to save API Key details.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_eve_verification_code") - {'option'}
	WordPressStorageDetector.delete_option("password") - {'option'}
	WordPressStorageDetector.update_option("message", "All the fields are required. Please enter valid entries.") - {'option'}
	WordPressStorageDetector.update_option("mo_eve_verification_code", $verificationCode) - {'option'}
	DeletionDetector.delete_option("mo_oauth_attr_name_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Key ID and Verification code to filter Characters. Your allowed Corporations, Alliances and Characters have been saved.") - {'option'}
	WordPressStorageDetector.update_option("message", "Please enter Key ID and Verfication code to save API Key details") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressStorageDetector.update_option("message", "Your API Key details have been saved") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_configure_css") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("oauth_client_am_display_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_margin") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_admin_lname", $lname) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressStorageDetector.update_option("mo_attr_option", $attr_option) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressStorageDetector.update_option("message", "All the fields are required. Please enter valid entries.") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_VALIDATION_FAILURE") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressStorageDetector.update_option("password", $password) - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_attr_name_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_new_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_client_id") - {'option'}
	WordPressStorageDetector.update_option("message", "Invalid one time passcode. Please enter a valid OTP.") - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_new_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_client_id") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_client_secret") - {'option'}
	WordPressStorageDetector.update_option("mo_openidconnect_apps_list", $appslist) - {'option'}
	WordPressStorageDetector.update_option("message", "You already have an account with miniOrange. Please enter a valid password.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_client_secret") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressStorageDetector.update_option("mo_license_plan_from_feedback", "") - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_eveonline_client_secret") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressRetrievalDetector.get_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_height") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	UninstallDetector.delete_option("mo_oauth_facebook_enable") - {'option'}
	WordPressRetrievalDetector.get_option("password") - {'option'}
	WordPressStorageDetector.delete_option("new_registration") - {'option'}
	WordPressStorageDetector.update_option("message", "Account already exist. Please Login.") - {'option'}
	UninstallDetector.delete_option("mo_oauth_google_client_id") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_client_show_mo_server_message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_facebook_client_id") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_attr_name_list", $resourceOwner) - {'option'}
	UninstallDetector.delete_option("mo_oauth_eveonline_client_secret") - {'option'}
	WordPressStorageDetector.delete_option("verify_customer") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	UninstallDetector.delete_option("mo_oauth_eveonline_enable") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") - {'option'}
	DeletionDetector.delete_option("mo_oauth_eveonline_enable") - {'option'}
	UninstallDetector.delete_option("mo_oauth_eveonline_scope") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_apps_list", $appslist) - {'option'}
	WordPressStorageDetector.delete_option("mo_oauth_eveonline_client_id") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	WordPressStorageDetector.update_option("message", " A one time passcode is sent to " . get_site_option("mo_oauth_admin_phone") . ". Please enter the otp here to verify your email.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_email") - {'option'}
	UninstallDetector.delete_option("message") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_registration_status") - {'option'}
	WordPressStorageDetector.update_option("message", "Please register customer before trying to save other configurations") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_icon_width") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_redirect_url", $_REQUEST["redirect_url"]) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_customer_key") - {'option'}
	WordPressRetrievalDetector.get_option("host_name") - {'option'}
	WordPressStorageDetector.update_option("message", "You MUST configure an application before you map attributes.") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_google_enable") - {'option'}
	WordPressStorageDetector.update_option("mo_oauth_eveonline_enable", 0) - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_apps_list") - {'option'}
	DeletionDetector.delete_option("verify_customer") - {'option'}
	WordPressRetrievalDetector.get_option("mo_oauth_admin_phone") - {'option'}
password
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
post
	DeletionDetector.wp_delete_post($attachment_id, true) - {'post', 'post_meta', 'wp_post'}
	WordPressStorageDetector.wp_delete_post($attachment_id, true) - {'post', 'post_meta', 'wp_post'}
post_meta
	WordPressRetrievalDetector.get_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", true) - {'post_meta'}
	DeletionDetector.wp_delete_post($attachment_id, true) - {'post', 'post_meta', 'wp_post'}
	WordPressStorageDetector.update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating", "G") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", $custom_avatar) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($attachment_id, "_wp_attachment_metadata") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", $avatar) - {'post_meta'}
	DeletionDetector.delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating") - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar") - {'post_meta'}
	DeletionDetector.delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar") - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($attachment_id, "_wp_attached_file") - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar") - {'post_meta'}
	DeletionDetector.delete_post_meta($attachment_id, "_wp_attachment_metadata") - {'post_meta'}
	DeletionDetector.delete_post_meta($attachment_id, "_wp_attached_file") - {'post_meta'}
	WordPressStorageDetector.wp_delete_post($attachment_id, true) - {'post', 'post_meta', 'wp_post'}
	DeletionDetector.delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar_rating", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true) - {'post_meta'}
remote
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
	WordPressRemoteDetector.(unknown) - {'remote'}
user
	WordPressRetrievalDetector.get_user_by("login", $username) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $characterID) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($id) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_update_user(["ID" => $user_id]) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressStorageDetector.wp_create_user($username, $random_password) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_insert_user($userdata) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($id) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $username) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $characterID) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	WordPressRetrievalDetector.get_user_by("ID", $user->ID) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressRetrievalDetector.get_userdata($id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	WordpressHashingFnDetector.wp_create_user($user_email, $random_password, $user_email) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_create_user($username, $random_password) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_update_user(["ID" => $user_id]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("email", $user_email) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_insert_user($userdata) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	ArrayElementDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "user_eveonline_alliance_name", true) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressRetrievalDetector.get_users($args) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "user_eveonline_character_name", true) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_create_user($user_email, $random_password, $user_email) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "user_eveonline_corporation_name", true) - {'user_meta', 'user'}
user_meta
	WordPressRetrievalDetector.get_user_by("login", $username) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $characterID) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($id) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_update_user(["ID" => $user_id]) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressStorageDetector.wp_create_user($username, $random_password) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_insert_user($userdata) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($id) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.delete_user_meta($user->ID, "mo_oauth_avatar_manager_avatar_type") - {'user_meta'}
	WordPressRetrievalDetector.get_user_by("login", $username) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $characterID) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	DeletionDetector.delete_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar") - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", true) - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta(get_current_user_id(), "dismissed_wp_pointers", "") - {'user_meta'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	DeletionDetector.delete_user_meta($user->ID, "mo_oauth_avatar_manager_avatar_type") - {'user_meta'}
	WordPressRetrievalDetector.get_user_by("ID", $user->ID) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressRetrievalDetector.get_userdata($id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($uid, "dismissed_wp_pointers", TRUE) - {'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	WordpressHashingFnDetector.wp_create_user($user_email, $random_password, $user_email) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "mo_oauth_avatar_manager_avatar_type", "custom") - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", $attachment_id) - {'user_meta'}
	WordpressHashingFnDetector.wp_create_user($username, $random_password) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_update_user(["ID" => $user_id]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("email", $user_email) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressRetrievalDetector.get_userdata($user_id) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_insert_user($userdata) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", true) - {'user_meta'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	ArrayElementDetector.(unknown) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user', 'first_name'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "user_eveonline_alliance_name", true) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'last_name', 'user'}
	WordPressRetrievalDetector.get_users($args) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "user_eveonline_character_name", true) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_create_user($user_email, $random_password, $user_email) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "user_eveonline_corporation_name", true) - {'user_meta', 'user'}
	WordPressStorageDetector.delete_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar") - {'user_meta'}
	WordPressRetrievalDetector.wp_set_current_user($user->ID) - {'user_meta'}
wp_post
	DeletionDetector.wp_delete_post($attachment_id, true) - {'post', 'post_meta', 'wp_post'}
	WordPressStorageDetector.wp_delete_post($attachment_id, true) - {'post', 'post_meta', 'wp_post'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:01:04.310577.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 47874 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:02.620912.

!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 376
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 6211
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 6544
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 7963
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 13831
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 21019
1000 STORE_REACHES edges created
2000 STORE_REACHES edges created
3000 STORE_REACHES edges created
4000 STORE_REACHES edges created
5000 STORE_REACHES edges created
6000 STORE_REACHES edges created
7000 STORE_REACHES edges created
8000 STORE_REACHES edges created
9000 STORE_REACHES edges created
10000 STORE_REACHES edges created
11000 STORE_REACHES edges created
12000 STORE_REACHES edges created
13000 STORE_REACHES edges created
14000 STORE_REACHES edges created
15000 STORE_REACHES edges created
16000 STORE_REACHES edges created
17000 STORE_REACHES edges created
18000 STORE_REACHES edges created
19000 STORE_REACHES edges created
20000 STORE_REACHES edges created
21000 STORE_REACHES edges created
22000 STORE_REACHES edges created
23000 STORE_REACHES edges created
24000 STORE_REACHES edges created
25000 STORE_REACHES edges created
26000 STORE_REACHES edges created
27000 STORE_REACHES edges created
28000 STORE_REACHES edges created
29000 STORE_REACHES edges created
30000 STORE_REACHES edges created
31000 STORE_REACHES edges created
32000 STORE_REACHES edges created
33000 STORE_REACHES edges created
34000 STORE_REACHES edges created
35000 STORE_REACHES edges created
36000 STORE_REACHES edges created
37000 STORE_REACHES edges created
38000 STORE_REACHES edges created
39000 STORE_REACHES edges created
40000 STORE_REACHES edges created
41000 STORE_REACHES edges created
42000 STORE_REACHES edges created
43000 STORE_REACHES edges created
44000 STORE_REACHES edges created
45000 STORE_REACHES edges created
46000 STORE_REACHES edges created
47000 STORE_REACHES edges created
47874 STORE_REACHES edges created
47874 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 1000 nodes as PERSONAL
Tainted 1734 nodes as PERSONAL
In total, tainted 1734 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
Tainted 507 nodes as ENCRYPTED
In total, tainted 507 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:01:46.805387.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:05:16.658626!
Request variable '$_POST["email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["mo_oauth_username_attr"]' of personal types {'user_meta', 'user'} is found.,,None
Request variable '$_POST["mo_oauth_contact_us_email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["mo_oauth_client_demo_email"]' of personal types {'email'} is found.,,None
DELETION call to delete_option("mo_oauth_client_custom_token_endpoint_no_csecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_attr_name_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($attachment_id, "_wp_attached_file") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_post_meta($attachment_id, "_wp_attachment_metadata") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_avatar_type") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to wp_delete_post($attachment_id, true) alters data types {'post', 'post_meta', 'wp_post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_google_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_google_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_facebook_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_facebook_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_eveonline_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_eveonline_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to hash("sha512", $stringToHash).,None,None
CRYPTOGRAPHY call to openssl_encrypt($token, $method, $customer_token, OPENSSL_RAW_DATAOPENSSL_ZERO_PADDING, $iv).,None,None
hash called with approved hash algorithm sha512.,sha512,None
hash called with approved hash algorithm sha512.,sha512,None
hash called with approved hash algorithm sha512.,sha512,None
hash called with approved hash algorithm sha512.,sha512,None
hash called with approved hash algorithm sha512.,sha512,None
hash called with approved hash algorithm sha512.,sha512,None
openssl_encrypt called with unknown encryption algorithm.,None,None
MD5 called with parameters [strtolower, trim, email]. Ignore if [strtolower, trim, email] does not contain personal information.,md5,None
RETRIEVAL call to file_get_contents(dirname() . DIRECTORY_SEPARATOR . "defaultapps.json").,None,None
RETRIEVAL call to file_get_contents(dirname() . DIRECTORY_SEPARATOR . "defaultapps.json").,None,None
RETRIEVAL call to file_get_contents($characterurl).,None,None
RETRIEVAL call to file_get_contents(dirname() . DIRECTORY_SEPARATOR . "admin/partials/apps/partials/defaultapps.json").,None,None
STORAGE call to file_put_contents($img, file_get_contents($characterurl)).,None,None
object property '$current_user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.,,None
object property '$current_user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.,,None
object property '$current_user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.,,None
object property '$current_user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.,,None
object property '$current_user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.,,None
object property '$current_user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.,,None
object property '$current_user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.,,None
object property '$current_user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.,,None
object property '$this->email' of personal types {'email'} is found.,,None
object property '$user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.,,None
object property '$user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.,,None
object property '$user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.,,None
object property '$user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.,,None
object property '$this->email' of personal types {'email'} is found.,,None
object property '$user->user_email' of personal types {'email'} is found.,,None
object property '$user->user_email' of personal types {'email'} is found.,,None
object property '$user->user_email' of personal types {'email'} is found.,,None
object property '$id_or_email->comment_author_email' of personal types {'email'} is found.,,None
object property '$id_or_email->comment_author_email' of personal types {'email'} is found.,,None
object property '$current_user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.,,None
object property '$current_user->user_firstname' of personal types {'user_meta', 'user', 'first_name'} is found.,,None
object property '$current_user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.,,None
object property '$current_user->user_lastname' of personal types {'user_meta', 'last_name', 'user'} is found.,,None
object property '$user->user_email' of personal types {'email'} is found.,,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_google_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_facebook_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_eveonline_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
variable '$mo_oauth_client_demo_email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$link_with_username' of personal types {'user_meta', 'user'} is found.,,None
variable '$link_with_username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username_attr' of personal types {'user_meta', 'user'} is found.,,None
variable '$username_attr' of personal types {'user_meta', 'user'} is found.,,None
variable '$username_attr' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username_attr' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username_attr' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$user_email' of personal types {'email'} is found.,,None
variable '$eveonline_email' of personal types {'email'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$eveonline_email' of personal types {'email'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$eveonline_email' of personal types {'email'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$eveonline_email' of personal types {'email'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$username' of personal types {'user_meta', 'user'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email_hash' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email_hash' of personal types {'email'} is found.,,None
variable '$email_hash' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$id_or_email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email_attr' of personal types {'email'} is found.,,None
variable '$username_attr' of personal types {'user_meta', 'user'} is found.,,None
variable '$username_attr' of personal types {'user_meta', 'user'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($url, $args). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_get($url, ["method" => "GET", "timeout" => 45, "redirection" => 5, "httpversion" => , "blocking" => true, "headers" => [], "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,[]
API call to wp_remote_post($tokenendpoint, ["method" => "POST", "timeout" => 45, "redirection" => 5, "httpversion" => "1.0", "blocking" => true, "headers" => $headers, "body" => $body, "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,['https://www.googleapis.com/oauth2/v4/token']
API call to wp_remote_post($resourceownerdetailsurl, ["method" => "GET", "timeout" => 45, "redirection" => 5, "httpversion" => "1.0", "blocking" => true, "headers" => $headers, "cookies" => [], "sslverify" => false]). Passed arguments: 0: $url (string), 1: $args (array). Returns (array|WP_Error).,https,['https://www.googleapis.com/oauth2/v1/userinfo', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token', 'https://www.googleapis.com/oauth2/v4/token']
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_openidconnect_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_attr_name_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_attr_option") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_" . $name . "_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_" . $name . "_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_" . $name . "_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_fname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_lname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_company") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("login", $username) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to wp_set_current_user($user->ID) alters data types {'user_meta'}. Passed arguments: 0: $id (int). Returns (WP_User).,None,None
RETRIEVAL call to get_user_by("ID", $user->ID) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("mo_oauth_redirect_url") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_" . $_REQUEST["app_name"] . "_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("email", $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("login", $characterID) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_user_by("login", $characterID) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_user_by("login", $username) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("show_avatars") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_userdata($user_id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("avatar_default") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("avatar_rating") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar_rating", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("show_avatars") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_userdata($id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_userdata($id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_userdata($id) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_users($args) alters data types {'user_meta', 'user'}. Passed arguments: 0: $args (array). Returns (array).,None,None
RETRIEVAL call to get_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_configure_css") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_width") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_height") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_icon_margin") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("mo_oauth_client_disable_authorization_header") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("oauth_client_am_display_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("oauth_client_am_display_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("oauth_client_am_display_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("oauth_client_am_display_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("oauth_client_am_display_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option($newkey) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option($newkey) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "user_eveonline_character_name", true) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "user_eveonline_corporation_name", true) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "user_eveonline_alliance_name", true) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($uid, "dismissed_wp_pointers", TRUE) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
STORAGE call to update_option("host_name", "https://login.xecurify.com") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("new_registration", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_openidconnect_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_client_custom_token_endpoint_no_csecret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_attr_name_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_enable", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_apps_list") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_license_plan_from_feedback", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_saml_license_message", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_redirect_url", $_REQUEST["redirect_url"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_attr_name_list", $resourceOwner) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_create_user($user_email, $random_password, $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_user($userdata) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,None,None
STORAGE call to update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_create_user($username, $random_password) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string). Returns (int|WP_Error).,None,None
STORAGE call to wp_update_user(["ID" => $user_id]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,None,None
STORAGE call to update_option("host_name", "https://login.xecurify.com") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", $avatar) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_post_meta($attachment_id, "_wp_attached_file") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_post_meta($attachment_id, "_wp_attachment_metadata") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_avatar_type") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to wp_delete_post($attachment_id, true) alters data types {'post', 'post_meta', 'wp_post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", $custom_avatar) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating", "G") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "mo_oauth_avatar_manager_avatar_type", "custom") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", $attachment_id) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("new_registration", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_enable", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option($newkey, $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option($newkey, $option->option_value) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_client_show_mo_server_message", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_user_meta(get_current_user_id(), "dismissed_wp_pointers", "") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("message", "All the fields are required. Please enter valid entries.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Choose a password with minimum length 8.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_email", $email) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_phone", $phone) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_fname", $fname) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_lname", $lname) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_company", $company) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("password", $password) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_phone", $customerKey["phone"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Customer created & retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Failed to create customer. Try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Account already exist. Please Login.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", $content["status"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Passwords do not match.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("verify_customer", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter a value in OTP field.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_VALIDATION_FAILURE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Invalid one time passcode. Please enter a valid OTP.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_VALIDATION_FAILURE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "All the fields are required. Please enter valid entries.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_email", $email) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("password", $password) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_phone", $customerKey["phone"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("password") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Customer retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "Invalid username or password. Please try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "All the fields are required. Please enter Key ID and Verfication code to save API Key details.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_eve_api_key", $apiKey) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_eve_verification_code", $verificationCode) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your API Key details have been saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Key ID and Verfication code to save API Key details") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_eve_allowed_corps", $corps) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_eve_allowed_alliances", $alliances) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_eve_allowed_char_name", $charName) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your allowed Corporations, Alliances and Characters have been saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Key ID and Verification code to filter Characters. Your allowed Corporations, Alliances and Characters have been saved.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Characters of all Corporations and Alliances will be allowed.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Key ID and Verification code to filter Characters. Characters of all Corporations and Alliances will be allowed.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter valid Client ID and Client Secret.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_client_custom_token_endpoint_no_csecret", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "You can only add 1 application with free version. Upgrade to enterprise version if you want to add more applications.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_enable", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your settings were saved. Go to Advanced EVE Online Settings for configuring restrictions on user sign in.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_icon_width", stripslashes($_POST["mo_oauth_icon_width"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_icon_height", stripslashes($_POST["mo_oauth_icon_height"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_icon_margin", stripslashes($_POST["mo_oauth_icon_margin"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_icon_configure_css", stripcslashes(stripslashes($_POST["mo_oauth_icon_configure_css"]))) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your settings were saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "You MUST configure an application before you map attributes.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_apps_list", $appslist) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_attr_option", $attr_option) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your settings are saved successfully.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_google_enable", isset($_POST["mo_oauth_google_enable"])$_POST["mo_oauth_google_enable"]0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_google_scope", $scope) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_google_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_google_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your settings were saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_google_enable", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please register customer before trying to save other configurations") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_enable", isset($_POST["mo_oauth_eveonline_enable"])$_POST["mo_oauth_eveonline_enable"]0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your settings were saved. Go to Advanced EVE Online Settings for configuring restrictions on user sign in.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_eveonline_enable", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please register customer before trying to save other configurations") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_facebook_enable", isset($_POST["mo_oauth_facebook_enable"])$_POST["mo_oauth_facebook_enable"]0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_facebook_scope", $scope) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_facebook_client_id", $clientid) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_facebook_client_secret", $clientsecret) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your settings were saved") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", $message) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please enter Client ID and Client Secret to save settings") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_google_enable", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please register customer before trying to save other configurations") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please fill up Email and Query fields to submit your query.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your query could not be submitted. Please try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Thanks for getting in touch! We shall get back to you shortly.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please fill up Usecase, Email field and Requested demo plan to submit your query.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Thanks for getting in touch! We shall get back to you shortly.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_transactionId", $content["txId"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "There was an error in sending email. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_message", "ERROR: <a href="http://php.net/manual/en/curl.installation.php" target="_blank">PHP cURL extension</a> is not installed or disabled. Resend OTP failed.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("verify_customer", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("new_registration", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_phone", $phone) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", " A one time passcode is sent to " . get_site_option("mo_oauth_admin_phone") . ". Please enter the otp here to verify your email.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_SUCCESS_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "There was an error in sending SMS. Please click on Resend OTP to try again.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OTP_DELIVERED_FAILURE_PHONE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Plugin deactivated successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Thank you for the feedback.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Please Select one of the reasons ,if your reason is not mentioned please select Other Reasons") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("password", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Customer retrieved successfully") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "You already have an account with miniOrange. Please enter a valid password.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("verify_customer", "true") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_customer_key", $customerKey["id"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_token", $customerKey["token"]) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("password", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("message", "Registered successfully.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_registration_status", "MO_OAUTH_REGISTRATION_COMPLETE") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mo_oauth_new_customer", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("message", "<a href="http://php.net/manual/en/curl.installation.php" target="_blank">PHP CURL extension</a> is not installed or disabled. Please enable it to continue.") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_customer_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("customer_token") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_google_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_google_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_google_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_google_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_google_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_facebook_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_facebook_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_facebook_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_facebook_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_facebook_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_eveonline_enable") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_new_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_eveonline_scope") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_eveonline_client_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_eveonline_client_secret") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_eveonline_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_eve_api_key") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_eve_verification_code") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_eve_allowed_corps") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_eve_allowed_alliances") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_eve_allowed_char_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("new_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_registration_status") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_client_show_mo_server_message") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("host_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mo_oauth_admin_phone") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("verify_customer") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
CRYPTOGRAPHY call to wp_create_user($user_email, $random_password, $user_email) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).,hash,None
CRYPTOGRAPHY call to wp_create_user($username, $random_password) alters data types {'user_meta', 'user'}. Passed arguments: 0: $username (string), 1: $password (string). Returns (int|WP_Error).,hash,None
CRYPTOGRAPHY call to wp_update_user(["ID" => $user_id]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,hash,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
Data Deletion violation! The plugin has storage node that has no identifier and cannot be accessed!
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['email', 'password', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating", "G")", found in file includes/manage-avatar.php at line 51. 

[has_storage] PII of types (['email', 'password', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", $custom_avatar)", found in file includes/manage-avatar.php at line 50. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("mo_oauth_admin_phone", $customerKey["phone"])", found in file mo_openidconnect_settings.php at line 375. 

[has_storage] PII of types (['email', 'password', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", $avatar)", found in file includes/manage-avatar.php at line 238. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("message", $message)", found in file mo_openidconnect_settings.php at line 674. 

[has_storage] PII of types (['email', 'password', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"])", found in file class-mo-oauth-widget.php at line 568. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("message", $message)", found in file mo_openidconnect_settings.php at line 524. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("mo_oauth_admin_customer_key", $customerKey["id"])", found in file mo_openidconnect_settings.php at line 896. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("mo_oauth_admin_api_key", $customerKey["apiKey"])", found in file mo_openidconnect_settings.php at line 897. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("customer_token", $customerKey["token"])", found in file mo_openidconnect_settings.php at line 898. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("mo_oauth_apps_list", $appslist)", found in file admin/partials/apps/partials/app-list.php at line 91. 

[has_storage] WP User info of types (['user', 'password', 'user_meta']) stored through WordPress function "wp_update_user(["ID" => $user_id])", found in file class-mo-oauth-widget.php at line 645. 

[has_storage] PII of types (['email', 'user', 'password', 'user_meta']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"])", found in file class-mo-oauth-widget.php at line 624. 

[has_storage] WP User info of types (['user', 'password', 'user_meta']) stored through WordPress function "wp_create_user($username, $random_password)", found in file class-mo-oauth-widget.php at line 643. 

[has_storage] WP User info of types (['email', 'user', 'password', 'user_meta']) stored through WordPress function "wp_insert_user($userdata)", found in file class-mo-oauth-widget.php at line 582. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("message", $content["status"])", found in file mo_openidconnect_settings.php at line 311. 

[has_storage] PII of types (['email', 'user', 'password', 'user_meta']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"])", found in file class-mo-oauth-widget.php at line 584. 

[has_storage] PII of types (['email', 'user', 'password', 'user_meta']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"])", found in file class-mo-oauth-widget.php at line 585. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("customer_token", $customerKey["token"])", found in file mo_openidconnect_settings.php at line 374. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("message", $message)", found in file mo_openidconnect_settings.php at line 633. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("mo_oauth_admin_email", $email)", found in file mo_openidconnect_settings.php at line 271. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("mo_oauth_apps_list", $appslist)", found in file mo_oauth_settings_page.php at line 993. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("mo_oauth_admin_phone", $customerKey["phone"])", found in file mo_openidconnect_settings.php at line 296. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta(get_current_user_id(), "dismissed_wp_pointers", "")", found in file mo_openidconnect_settings.php at line 235. 

[has_storage] PII of types (['email']) stored through WordPress function "update_option("mo_oauth_admin_email", $email)", found in file mo_openidconnect_settings.php at line 366. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("mo_oauth_admin_customer_key", $customerKey["id"])", found in file mo_openidconnect_settings.php at line 293. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("mo_oauth_admin_api_key", $customerKey["apiKey"])", found in file mo_openidconnect_settings.php at line 294. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("customer_token", $customerKey["token"])", found in file mo_openidconnect_settings.php at line 295. 

[has_storage] PII of types (['email', 'password', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true)", found in file includes/manage-avatar.php at line 52. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("message", $message)", found in file mo_openidconnect_settings.php at line 718. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.")", found in file mo_openidconnect_settings.php at line 786. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".")", found in file mo_openidconnect_settings.php at line 826. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.")", found in file mo_openidconnect_settings.php at line 804. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("mo_oauth_transactionId", $content["txId"])", found in file mo_openidconnect_settings.php at line 805. 

[has_storage] PII of types (['email', 'password', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_user_meta($user_id, "mo_oauth_avatar_manager_avatar_type", "custom")", found in file includes/manage-avatar.php at line 55. 

[has_storage] Unstructured data storage of PII types (['email', 'password', 'user_meta', 'last_name', 'user', 'first_name']) to files through function "file_put_contents", found in file includes/manage-avatar.php at line 17. 

[has_storage] PII of types (['email', 'password', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", $attachment_id)", found in file includes/manage-avatar.php at line 56. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("mo_oauth_admin_customer_key", $customerKey["id"])", found in file mo_openidconnect_settings.php at line 372. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("mo_oauth_apps_list", $appslist)", found in file mo_openidconnect_settings.php at line 596. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("mo_oauth_admin_api_key", $customerKey["apiKey"])", found in file mo_openidconnect_settings.php at line 373. 

[has_storage] WP User info of types (['email', 'user', 'password', 'user_meta']) stored through WordPress function "wp_insert_user($userdata)", found in file class-mo-oauth-widget.php at line 623. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("mo_openidconnect_apps_list", $appslist)", found in file admin/partials/apps/partials/app-list.php at line 103. 

[has_storage] PII of types (['email', 'password', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"])", found in file class-mo-oauth-widget.php at line 611. 

[has_storage] PII of types (['email', 'password', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"])", found in file class-mo-oauth-widget.php at line 567. 

[has_storage] PII of types (['email', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_option("mo_oauth_apps_list", $appslist)", found in file class-mo-oauth-widget.php at line 267. 

[has_storage] PII of types (['email', 'user', 'password', 'user_meta']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"])", found in file class-mo-oauth-widget.php at line 583. 

[has_storage] WP User info of types (['email', 'user', 'password', 'user_meta']) stored through WordPress function "wp_create_user($user_email, $random_password, $user_email)", found in file class-mo-oauth-widget.php at line 511. 

[has_storage] PII of types (['email', 'password', 'user_meta', 'last_name', 'user', 'first_name']) stored through WordPress function "update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"])", found in file class-mo-oauth-widget.php at line 569. 

[has_storage] Storage check is CUSTOM_UNSTRUCTURED 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating", "G") has deletion method delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar_rating"). Storage method found in file includes/manage-avatar.php at line 51. Deletion method found in file includes/manage-avatar.php at line 403. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar", $custom_avatar) has deletion method delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar"). Storage method found in file includes/manage-avatar.php at line 50. Deletion method found in file includes/manage-avatar.php at line 402. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 375. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($custom_avatar, "_mo_oauth_avatar_manager_custom_avatar", $avatar) has deletion method delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_custom_avatar"). Storage method found in file includes/manage-avatar.php at line 238. Deletion method found in file includes/manage-avatar.php at line 402. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 674. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) does not have corresponding deletion method. Storage method found in file class-mo-oauth-widget.php at line 568. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 524. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 896. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 897. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 898. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_api_key"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 91. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) does not have corresponding deletion method. Storage method found in file class-mo-oauth-widget.php at line 624. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $content["status"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 311. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_alliance_name", $_SESSION["alliance_name"]) does not have corresponding deletion method. Storage method found in file class-mo-oauth-widget.php at line 584. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) does not have corresponding deletion method. Storage method found in file class-mo-oauth-widget.php at line 585. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 374. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 633. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 271. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_oauth_settings_page.php at line 993. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_phone", $customerKey["phone"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 296. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta(get_current_user_id(), "dismissed_wp_pointers", "") does not have corresponding deletion method. Storage method found in file mo_openidconnect_settings.php at line 235. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_email", $email) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 366. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 293. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 294. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("customer_token", $customerKey["token"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 295. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar", true) has deletion method delete_post_meta($attachment_id, "_mo_oauth_avatar_manager_is_custom_avatar"). Storage method found in file includes/manage-avatar.php at line 52. Deletion method found in file includes/manage-avatar.php at line 404. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", $message) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 718. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . get_option("mo_oauth_admin_email") . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 786. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", "Your password has been reset successfully. Please enter the new password sent to " . $email . ".") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 826. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("message", " A one time passcode is sent to " . $phone . " again. Please check if you got the otp and enter it here.") has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 804. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_transactionId", $content["txId"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 805. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "mo_oauth_avatar_manager_avatar_type", "custom") has deletion method delete_user_meta($user->ID, "mo_oauth_avatar_manager_avatar_type"). Storage method found in file includes/manage-avatar.php at line 55. Deletion method found in file includes/manage-avatar.php at line 419. 

[Art.17, Right to erasure] Complete data deletion is required for storage at node ID 12139 , but is impossible due to custom storage of PII without identifiers. Found in file includes/manage-avatar.php at line 17 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "mo_oauth_avatar_manager_custom_avatar", $attachment_id) has deletion method delete_user_meta($user->ID, "mo_oauth_avatar_manager_custom_avatar"). Storage method found in file includes/manage-avatar.php at line 56. Deletion method found in file includes/manage-avatar.php at line 420. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_customer_key", $customerKey["id"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 372. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 596. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("password"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("host_name"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("verify_customer"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("customer_token"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("message"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_api_key"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("new_registration"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_admin_api_key", $customerKey["apiKey"]) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file mo_openidconnect_settings.php at line 373. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_eve_api_key"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_openidconnect_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file admin/partials/apps/partials/app-list.php at line 103. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) does not have corresponding deletion method. Storage method found in file class-mo-oauth-widget.php at line 611. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) does not have corresponding deletion method. Storage method found in file class-mo-oauth-widget.php at line 567. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_custom_token_endpoint_no_csecret"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file admin/partials/apps/partials/app-list.php at line 83. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_attr_name_list"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file admin/partials/apps/partials/app-list.php at line 85. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_apps_list"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file admin/partials/apps/partials/app-list.php at line 88. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 176. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 177. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 178. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 179. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 180. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 181. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 182. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 297. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 315. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 321. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("password"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 376. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 378. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 901. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 902. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 920. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 929. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file mo_openidconnect_settings.php at line 930. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("host_name"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 6. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_email"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 7. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_phone"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 8. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("verify_customer"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 9. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_customer_key"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 10. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_admin_api_key"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 11. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("customer_token"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 12. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_enable"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 13. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_scope"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 14. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_client_id"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 15. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_client_secret"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 16. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_google_message"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 17. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_enable"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 18. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_scope"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 19. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_client_id"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 20. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_client_secret"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 21. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_facebook_message"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 22. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_enable"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 23. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_new_customer"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 24. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_scope"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 25. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_client_id"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 26. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_client_secret"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 27. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_eveonline_message"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 28. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("message"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 29. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_api_key"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 30. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_verification_code"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 31. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_corps"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 32. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_alliances"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 33. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_eve_allowed_char_name"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 34. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("new_registration"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 35. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_registration_status"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 36. 

[Art.17, Right to erasure] Wordpress storage of PII through update_option("mo_oauth_apps_list", $appslist) has deletion method delete_option("mo_oauth_client_show_mo_server_message"). Storage method found in file class-mo-oauth-widget.php at line 267. Deletion method found in file uninstall.php at line 37. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_corporation_name", $_SESSION["corporation_name"]) does not have corresponding deletion method. Storage method found in file class-mo-oauth-widget.php at line 583. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "user_eveonline_character_name", $_SESSION["character_name"]) does not have corresponding deletion method. Storage method found in file class-mo-oauth-widget.php at line 569. 

[Art.17, Right to erasure] Deletion access is NONE 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 12285. Found in file includes/manage-avatar.php at line 51 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 12276. Found in file includes/manage-avatar.php at line 50 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 18037. Found in file mo_openidconnect_settings.php at line 375 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 12932. Found in file includes/manage-avatar.php at line 238 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 19822. Found in file mo_openidconnect_settings.php at line 674 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9841. Found in file class-mo-oauth-widget.php at line 568 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 18917. Found in file mo_openidconnect_settings.php at line 524 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 21223. Found in file mo_openidconnect_settings.php at line 896 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 21232. Found in file mo_openidconnect_settings.php at line 897 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 21241. Found in file mo_openidconnect_settings.php at line 898 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1546. Found in file admin/partials/apps/partials/app-list.php at line 91 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 10116. Found in file class-mo-oauth-widget.php at line 624 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 17660. Found in file mo_openidconnect_settings.php at line 311 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9942. Found in file class-mo-oauth-widget.php at line 584 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9953. Found in file class-mo-oauth-widget.php at line 585 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 18028. Found in file mo_openidconnect_settings.php at line 374 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 19585. Found in file mo_openidconnect_settings.php at line 633 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 17381. Found in file mo_openidconnect_settings.php at line 271 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 15546. Found in file mo_oauth_settings_page.php at line 993 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 17582. Found in file mo_openidconnect_settings.php at line 296 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 17130. Found in file mo_openidconnect_settings.php at line 235 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 17958. Found in file mo_openidconnect_settings.php at line 366 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 17555. Found in file mo_openidconnect_settings.php at line 293 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 17564. Found in file mo_openidconnect_settings.php at line 294 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 17573. Found in file mo_openidconnect_settings.php at line 295 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 12293. Found in file includes/manage-avatar.php at line 52 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 20091. Found in file mo_openidconnect_settings.php at line 718 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 20483. Found in file mo_openidconnect_settings.php at line 786 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 20757. Found in file mo_openidconnect_settings.php at line 826 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 20622. Found in file mo_openidconnect_settings.php at line 804 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 20633. Found in file mo_openidconnect_settings.php at line 805 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 12303. Found in file includes/manage-avatar.php at line 55 

[Art.15, Right to access] Complete data access is required for storage at node ID 12139 , but is impossible due to custom storage of PII without identifiers. Found in file includes/manage-avatar.php at line 17 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 12311. Found in file includes/manage-avatar.php at line 56 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 18010. Found in file mo_openidconnect_settings.php at line 372 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 19334. Found in file mo_openidconnect_settings.php at line 596 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 18019. Found in file mo_openidconnect_settings.php at line 373 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1590. Found in file admin/partials/apps/partials/app-list.php at line 103 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 10037. Found in file class-mo-oauth-widget.php at line 611 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9830. Found in file class-mo-oauth-widget.php at line 567 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8129. Found in file class-mo-oauth-widget.php at line 267 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9931. Found in file class-mo-oauth-widget.php at line 583 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 9852. Found in file class-mo-oauth-widget.php at line 569 

[Art.15, Right to access] Data access is NONE 

[third_party] Third party usage is NONE for data types [] 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 553 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is securely encrypted with ['hash']. Found in file class-customer.php at line 441 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 59 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 265 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 289 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 94 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 375 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 344 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 140 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 502 

[encryption] API call that sends PII to unknown url uses unknown protocol. PII is insecurely encrypted with []. Found in file class-customer.php at line 207 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? True 

[main] Is access in violation? True 

[main] Is third_party in violation? False 

[main] Is encryption in violation? True 

[main] Complaint? False 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        

##################
### Fix Report ###
##################

############################
# Data Deletion Fix Report #
############################

This report suggests fixes to comply with the GDPR Art. 17, Right to erasure (https://gdpr-info.eu/art-17-gdpr/). The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/adding-the-personal-data-eraser-to-your-plugin/ for more details.

1) Implement a function that deletes all the user data collected in the plugin. Sample code:


/**
* Removes all collected data of a user.
*
* @param string $email_address   email address to manipulate
* @param int    $page            pagination
*
* @return array
*/
function miniorange-openid-connect-client_remove_data( $email_address, $page = 1 ) {
    
    $page = (int) $page;


    //TODO: Delete the user data that was stored using Wordpress functions

    //Below is the sample code for deleting user meta and may need to be modified to suit the plugin.
    $user_id = get_user_by('email', $email_address)
    $key = 'email' //Sample user meta key
    if ( $customer->user_id > 0 ) {
        //Delete user meta data by $key
        delete_user_meta( $user_id, $key );
    }
        



    // Tell core if we have more data to delete still
    $done = true;
    return array(
        'items_removed'  => $items_removed, // true if collected data of a user is being deleted
        'items_retained' => $items_retained, // true if certain data needs to be retained
        'messages'       => sprintf( __( 'Data of user with email %s successfully deleted.', 'miniorange-openid-connect-client' ), $email_address ), // Put messages for data removal
        'done'           => $done, // true if all the removal processes are done (all data of the user is removed)
    );
}
        

2) Hook the deletion function to the Wordpress's Personal Data Removal tool


/**
* Registers all data erasers.
*
* @param array $exporters
*
* @return mixed
*/
function miniorange-openid-connect-client_register_privacy_erasers( $erasers ) {
    $erasers['my-plugin-slug'] = array(
        'eraser_friendly_name' => __( '<eraser name>', 'miniorange-openid-connect-client' ),
        'callback'             => 'miniorange-openid-connect-client_remove_data',
    );
    return $erasers;
}
        

add_filter( 'wp_privacy_personal_data_erasers', 'miniorange-openid-connect-client_register_privacy_erasers' );
        

        

#############################
# Privacy Policy Fix Report #
#############################

This report suggests fixes to comply with the GDPR Art. 13 (https://gdpr-info.eu/art-13-gdpr/) through including a privacy notice. The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/suggesting-text-for-the-site-privacy-policy/ for more details.

1) Implement a function that includes the privacy policy for the plugin and provide it to wordpress through wp_add_privacy_policy_content(). Sample code:


/**
* Adds a privacy policy statement.
*/
function miniorange-openid-connect-client_add_privacy_policy_content() {
    if ( ! function_exists( 'wp_add_privacy_policy_content' ) ) {
        return;
    }
    //TODO: modify the content below to include the privacy policy for the plugin.
    $content = '<p class="privacy-policy-tutorial">' . __( 'Some introductory content for the suggested text.', 'miniorange-openid-connect-client' ) . '</p>'
            . '<strong class="privacy-policy-tutorial">' . __( 'Suggested Text:', 'miniorange-openid-connect-client' ) . '</strong> '
            . sprintf(
                __( 'When you leave a comment on this site, we send your name, email address, IP address and comment text to example.com. Example.com does not retain your personal data. The example.com privacy policy is <a href="%1$s" target="_blank">here</a>.', 'miniorange-openid-connect-client' ),
                'https://example.com/privacy-policy'
            );
    wp_add_privacy_policy_content( 'miniorange-openid-connect-client', wp_kses_post( wpautop( $content, false ) ) );
}
        

2) Hook the privacy policy function to the Wordpress's admin initialization action.


add_action( 'admin_init', 'miniorange-openid-connect-client_add_privacy_policy_content' );
        

        


Disclaimer: The sample code provided above is only for reference and does not guarantee GDPR compliance. The recommended list of data to delete/export may not be comprehensive. 
        
Done.
