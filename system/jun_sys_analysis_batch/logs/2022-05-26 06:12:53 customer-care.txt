Timeout in resolving values
Timeout in running neo4j query
Running Main.py on customer-care

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:00.820329.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:01.083911.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 0 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.337841.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 3 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.746821.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 556 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:01.008901.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 0 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.581991.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.093437.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 318 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:05.064204.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 4429
Added 3552 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 4568
Added 139 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:01.337239.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/customer-care/activation_settings.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/customer-care/admin_page.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/customer-care/check_date.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/customer-care/customer_care.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/customer-care/email_template.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/customer-care/holy_tagline.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/customer-care/premium_access.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/customer-care/readme_first.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/customer-care/registration_form.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/customer-care/shortcode_front.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/customer-care/user_profile.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/customer-care/webapp_functions.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:01.094730.

3 REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
4426 PHP_REACHES edges created
139 PHP_REACHES edges created
4568 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 1551 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.134802.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:04.253093.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 20 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.745770.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 16 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.135795.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.402327.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.136103.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.006853.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.036548.

36 PHP_REACHES edges created
36 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 20 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.106137.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
2 SQL operations to process.
CREATE TABLE $wpdbcustomer_care_unsubscribe (
					id mediumint(9) NOT NULL AUTO_INCREMENT,
					hash varchar(100) NOT NULL,
					userid mediumint(9) NOT NULL,
					created date NOT NULL,
					PRIMARY KEY  (ID)
			) $wpdb->get_charset_collate();
SQL command (CREATE TABLE $wpdbcustomer_care_unsubscribe ( id mediumint(9) NOT NULL AUTO_INCREMENT, hash varchar(100) NOT NULL, userid mediumint(9) NOT NULL, created date NOT NULL, PRIMARY KEY (ID) ) $wpdb->get_charset_collate();) cannot be parsed correct.
SELECT id from $wpdbcustomer_care_unsubscribe WHERE created < date("Y-m-d", mktime(0, 0, 0, date("m"), date("d") - 90, date("Y")))
SQL command (SELECT id from $wpdbcustomer_care_unsubscribe WHERE created < date("Y-m-d", mktime(0, 0, 0, date("m"), date("d") - 90, date("Y")))) cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [5667, 3778]
Added 0 SQL nodes. 0 out of 2 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:02.264575.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'admin_url("admin.php?page=customer_care&amp;action=help")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=customer_care&amp;action=premium_content")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=customer_care&amp;action=reminder")'' cannot be parsed correct.
HTML code '$'$adminURL'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=customer_care&amp;action=tagline")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=customer_care&amp;action=data")'' cannot be parsed correct.
HTML code '$'<a style="" href="admin_url("options-general.php")"'' cannot be parsed correct.
HTML code '$'admin_url("admin.php")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php")'' cannot be parsed correct.
HTML code '$'<li>$ui_message</li>'' cannot be parsed correct.
HTML code '$'get_option("blogdescription")'' cannot be parsed correct.
HTML code '$'$subscriber'' cannot be parsed correct.
HTML code '$'$subscriber'' cannot be parsed correct.
HTML code '$'<p class="description">Pick a start time by inserting an hour in the day (integer 0-23)</p>'' cannot be parsed correct.
HTML code '$'<input type="checkbox" name="customer_care_settings[customer_care_checkbox_Notify_YesNo]" value="true"   " /'' cannot be parsed correct.
HTML code '$'<p class="description">Stored in DataBase [ table : wp_options ]</p>'' cannot be parsed correct.
HTML code '$'<h1>Note:</h1><br/>Use the Title, at the top of this page, for the Subject line of the Email.<br/><br/>_x("To insert the user\\'s full name type ", "ends with opening quote", "customer_care")@fullname_x("" (without quotes", "begins with close quote", "customer_care")<br/><br/>'' cannot be parsed correct.
HTML code '$'<p id="dolly">$chosen</p>'' cannot be parsed correct.
HTML code '$'
		<style type=\'text/css\'>
			#dolly {
				float: $x;
				padding-$x: 15px;
				padding-top: 5px;		
				margin: 0;
				font-size: 11px;
			}
			.block-editor-page #dolly {
				display: none;
			}
		</style>
		'' cannot be parsed correct.
HTML code '$'_x("", "opening quote", "opening quote", "customer_care")@fullname_x("" will be replaced with the cusomer Full Name", "begins with close quote", "customer_care")<br/>'' cannot be parsed correct.
HTML code '$'_x("", "opening quote", "customer_care")@firstname_x("" will be replaced with the customer First Name", "begins with close quote", "customer_care")<br/>'' cannot be parsed correct.
HTML code '$'_x("", "opening quote", "customer_care")@nickname_x("" will be replaced with the customer Nick Name", "begins with close quote", "customer_care")<br/>'' cannot be parsed correct.
HTML code '$'_x("", "opening quote", "customer_care")@sitetitle_x("" will be replaced with the Blog Site Title from the Settings/General page", "begins with close quote", "customer_care")<br/>'' cannot be parsed correct.
HTML code '$'_x("", "opening quote", "customer_care")@unsubscribe_x("" will be replaced with a link allowing the recipient to unsubscribe from Birthday Emails", "begins with close quote", "customer_care")<br/>'' cannot be parsed correct.
HTML code '$'_x("", "opening quote", "customer_care")@defaultcarimage_x("" will be replaced with an image that comes with the Check-day Emails plugin", "begins with close quote", "customer_care")<br/>'' cannot be parsed correct.
HTML code '$'<!-- dur : $interval->format("%R%a")/n-->'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=customer_care")'' cannot be parsed correct.
HTML code '$'plugin_dir_url()'' cannot be parsed correct.
HTML code '$'2019-12-31'' cannot be parsed correct.
HTML code '$'2019-12-31'' cannot be parsed correct.
HTML code '$'_e("Undefined date", "customer_care")'' cannot be parsed correct.
HTML code '$'get_the_author_meta("customer_care_maintenance_date", $user->ID)'' cannot be parsed correct.
HTML code '$'get_the_author_meta("customer_care_payment_date", $user->ID)'' cannot be parsed correct.
HTML code '$'plugins_url("images/new_logo_roof.png", )'' cannot be parsed correct.
HTML code '$'<form action=site_url("wp-login.php?action=register", "login_post")" method="post">'' cannot be parsed correct.
HTML code '$'<input type="text" name="user_login" placeholder ="Username" id="user_login" class="input" />'' cannot be parsed correct.
HTML code '$'<input type="text" name="user_email" placeholder ="Email account" id="user_email" class="input" />'' cannot be parsed correct.
HTML code '$'<input type="submit" value="Subscribe" id="register" />'' cannot be parsed correct.
HTML code '$'unchecked'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'get_the_author_meta("customer_care_mobile", $user->ID)'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'" style="text-align:center">
						'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'nav-tab-active'' cannot be parsed correct.
HTML code '$'<span style="color:#0a0">'' cannot be parsed correct.
HTML code '$'</span>'' cannot be parsed correct.
HTML code '$'<span class="">'' cannot be parsed correct.
HTML code '$'</a>'' cannot be parsed correct.
HTML code '$'<span style="color:#a00">'' cannot be parsed correct.
HTML code '$'</span>'' cannot be parsed correct.
HTML code '$'</a>'' cannot be parsed correct.
HTML code '$'">
						'' cannot be parsed correct.
HTML code '$'<tr>'' cannot be parsed correct.
HTML code '$'<td>'' cannot be parsed correct.
HTML code '$'</td>'' cannot be parsed correct.
HTML code '$'<td>'' cannot be parsed correct.
HTML code '$'</td>'' cannot be parsed correct.
HTML code '$'</tr>'' cannot be parsed correct.
HTML code '$'
				<style type="text/css">
					#delete-action,
					#misc-publishing-actions,
					#minor-publishing-actions{
						display:none;
					}
				</style>
			'' cannot be parsed correct.
HTML code '$'</span>
			<br />
			<input type="date" name="customer_care_maintenance_date" id="customer_care_maintenance_date" class="input" size="25" min="2019-01-01" max="2050-12-31" value="'' cannot be parsed correct.
HTML code '$'</span>
			<br />
			<input type="date" name="customer_care_payment_date" id="customer_care_payment_date" class="input" size="25"  min="2019-01-01" max="2050-12-31" value="'' cannot be parsed correct.
HTML code '$'			</label>
		</p>
		<br />
		<hr />
		<br />
		'' cannot be parsed correct.
HTML code '$'<br />'' cannot be parsed correct.
HTML code '$'</form>'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:06.069743.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.047697.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 0 do_action/apply_filters calls and 31 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:01.076102.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running DbaseDetector
### Start running FrontBaseDetector
### Finish running FileProDetector
### Start running HashDetector
### Finish running FirebirdInterBaseDetector
### Start running IBMDb2Detector
### Finish running DbplusDetector
### Start running InformixDetector
### Finish running CubridDetector
### Start running IngresDetector
### Finish running InformixDetector
### Start running maxdbDetector
### Finish running FrontBaseDetector
### Start running MongoDbDetector
### Finish running IngresDetector
### Start running MongoDetector
### Finish running IBMDb2Detector
### Start running MsqlDetector
### Finish running MongoDetector
### Start running MySQLDetector
### Finish running MsqlDetector
### Start running MySQLiDetector
### Finish running MySQLDetector
### Start running Oci8Detector
### Finish running MongoDbDetector
### Start running OpenSSLDetector
### Finish running Oci8Detector
### Start running ParadoxDetector
### Finish running ParadoxDetector
### Start running PasswordHashingDetector
### Finish running ArrayElementDetector
### Start running PhpCurlDetector
### Finish running HashDetector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running PasswordHashingDetector
### Start running PHPRetrievalDetector
### Finish running PhpCurlDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running OpenSSLDetector
### Start running PhpVarDetector
### Finish running PhpVarDetector
### Start running PostgreSQLDetector
### Finish running PHPIncludedDetector
### Start running PropertyDetector
### Finish running PostgreSQLDetector
### Start running Sqlite3Detector
### Finish running PHPRetrievalDetector
### Start running SqliteDetector
### Finish running Sqlite3Detector
### Start running SqlServerDetector
### Finish running PropertyDetector
### Start running SybaseDetector
### Finish running maxdbDetector
### Start running TokyoTyrantDetector
### Finish running MySQLiDetector
### Start running UserInputDetector
### Finish running SqliteDetector
### Start running VariableDetector
### Finish running SybaseDetector
### Start running WordpressHashingFnDetector
### Finish running TokyoTyrantDetector
### Start running WordPressRemoteDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressRetrievalDetector
### Finish running WordPressRemoteDetector
### Start running WordPressStorageDetector
### Finish running PHPStorageDetector
### Start running WP_UserDetector
### Finish running SqlServerDetector
### Start running GenericDatabaseUsageDetector
### Finish running WP_UserDetector
### Start running GenericEncryptionDetector
### Finish running UserInputDetector
### Start running DeletionDetector
### Finish running GenericDatabaseUsageDetector
### Start running UninstallDetector
### Finish running GenericEncryptionDetector
### Finish running VariableDetector
### Finish running DeletionDetector
### Finish running UninstallDetector
### Finish running WordPressRetrievalDetector
### Finish running WordPressStorageDetector
### Finished running detectors
check_date.php:599
  - Salt provided, however password_hash is recommended over crypt (https://www.php.net/crypt). 

check_date.php:34
  - RETRIEVAL call to file_get_contents(WP_CONTENT_DIR . "/logs/customer_care_dates_checked.log").
  - Data types: file 

check_date.php:35
  - STORAGE call to file_put_contents(WP_CONTENT_DIR . "/logs/customer_care_dates_checked.log", $check_date).
  - Data types: file
check_date.php:153
  - STORAGE call to file_put_contents(WP_CONTENT_DIR . "/logs/customer_care_no_reminds.log", "No customers notified on " . gmdate("Y-m-d H:i", time())).
  - Data types: file 

admin_page.php:256
  - object property '$subscriber->user_email' of personal types {'email'} is found.
  - Data types: email
webapp_functions.php:38
  - object property '$user_obj->user_nicename' of personal types {'user_meta', 'user'} is found.
  - Data types: user_meta, user 

check_date.php:159
  - variable '$emails_per_hour_count' of personal types {'email'} is found.
  - Data types: email
check_date.php:171
  - variable '$emails_per_hour_count' of personal types {'email'} is found.
  - Data types: email
check_date.php:216
  - variable '$customer_care_maintenance_email_done' of personal types {'email'} is found.
  - Data types: email
check_date.php:220
  - variable '$customer_care_maintenance_email_done' of personal types {'email'} is found.
  - Data types: email
check_date.php:225
  - variable '$customer_care_maintenance_email_done' of personal types {'email'} is found.
  - Data types: email
check_date.php:228
  - variable '$customer_care_maintenance_email_done' of personal types {'email'} is found.
  - Data types: email
check_date.php:230
  - variable '$emailStatus' of personal types {'email'} is found.
  - Data types: email
check_date.php:233
  - variable '$emailStatus' of personal types {'email'} is found.
  - Data types: email
check_date.php:243
  - variable '$emailStatus' of personal types {'email'} is found.
  - Data types: email
check_date.php:246
  - variable '$emails_per_hour_count' of personal types {'email'} is found.
  - Data types: email
check_date.php:265
  - variable '$emails_per_hour_count' of personal types {'email'} is found.
  - Data types: email
check_date.php:314
  - variable '$customer_care_payment_email_done' of personal types {'email'} is found.
  - Data types: email
check_date.php:318
  - variable '$customer_care_payment_email_done' of personal types {'email'} is found.
  - Data types: email
check_date.php:323
  - variable '$customer_care_payment_email_done' of personal types {'email'} is found.
  - Data types: email
check_date.php:326
  - variable '$customer_care_payment_email_done' of personal types {'email'} is found.
  - Data types: email
check_date.php:328
  - variable '$insurance_email_status' of personal types {'email'} is found.
  - Data types: email
check_date.php:329
  - variable '$emails_per_hour_count' of personal types {'email'} is found.
  - Data types: email
check_date.php:330
  - variable '$insurance_email_status' of personal types {'email'} is found.
  - Data types: email
check_date.php:340
  - variable '$insurance_email_status' of personal types {'email'} is found.
  - Data types: email
check_date.php:389
  - variable '$customer_care_maintenance_email_done' of personal types {'email'} is found.
  - Data types: email
check_date.php:393
  - variable '$customer_care_maintenance_email_done' of personal types {'email'} is found.
  - Data types: email
check_date.php:505
  - variable '$email_purpose' of personal types {'email'} is found.
  - Data types: email
check_date.php:507
  - variable '$email_body' of personal types {'email'} is found.
  - Data types: email
check_date.php:508
  - variable '$email_body' of personal types {'email'} is found.
  - Data types: email
check_date.php:509
  - variable '$email_body' of personal types {'email'} is found.
  - Data types: email
check_date.php:510
  - variable '$email_body' of personal types {'email'} is found.
  - Data types: email
check_date.php:511
  - variable '$email_body' of personal types {'email'} is found.
  - Data types: email
check_date.php:513
  - variable '$email_purpose' of personal types {'email'} is found.
  - Data types: email
check_date.php:515
  - variable '$email_body' of personal types {'email'} is found.
  - Data types: email
check_date.php:516
  - variable '$email_body' of personal types {'email'} is found.
  - Data types: email
check_date.php:517
  - variable '$email_body' of personal types {'email'} is found.
  - Data types: email
check_date.php:518
  - variable '$email_body' of personal types {'email'} is found.
  - Data types: email
check_date.php:519
  - variable '$email_body' of personal types {'email'} is found.
  - Data types: email
check_date.php:522
  - variable '$email_status' of personal types {'email'} is found.
  - Data types: email
check_date.php:537
  - variable '$email_body' of personal types {'email'} is found.
  - Data types: email
check_date.php:548
  - variable '$firstname' of personal types {'first_name'} is found.
  - Data types: first_name
check_date.php:549
  - variable '$firstname' of personal types {'first_name'} is found.
  - Data types: first_name
check_date.php:572
  - variable '$email_status' of personal types {'email'} is found.
  - Data types: email
check_date.php:574
  - variable '$email_status' of personal types {'email'} is found.
  - Data types: email
email_template.php:124
  - variable '$blog_email' of personal types {'email'} is found.
  - Data types: email
email_template.php:128
  - variable '$blog_email' of personal types {'email'} is found.
  - Data types: email
email_template.php:129
  - variable '$blog_email' of personal types {'email'} is found.
  - Data types: email
email_template.php:130
  - variable '$blog_email' of personal types {'email'} is found.
  - Data types: email
user_profile.php:166
  - variable '$email_unsubscribe' of personal types {'email'} is found.
  - Data types: email
user_profile.php:167
  - variable '$email_unsubscribe' of personal types {'email'} is found.
  - Data types: email 

activation_settings.php:61
  - RETRIEVAL call to get_option("customer_care_CPT_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_page.php:138
  - RETRIEVAL call to get_option("users_can_register") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_page.php:235
  - RETRIEVAL call to get_option("blogdescription") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_page.php:248
  - RETRIEVAL call to get_users() alters data types {'user_meta', 'user'}. Returns (array).
  - Data types: user_meta, user
admin_page.php:442
  - RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_page.php:452
  - RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_page.php:461
  - RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_page.php:470
  - RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_page.php:484
  - RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_page.php:493
  - RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_page.php:502
  - RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_page.php:512
  - RETRIEVAL call to get_option("customer_care_tagline_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_page.php:569
  - RETRIEVAL call to get_option("customer_care_CPT_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_page.php:590
  - RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_page.php:649
  - RETRIEVAL call to get_option("data_export_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
check_date.php:29
  - RETRIEVAL call to get_option("customer_care_running", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
check_date.php:43
  - RETRIEVAL call to get_option("timezone_string") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
check_date.php:53
  - RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
check_date.php:473
  - RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
check_date.php:523
  - RETRIEVAL call to get_option("customer_care_CPT_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
check_date.php:528
  - RETRIEVAL call to get_post($custom_ID) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: wp_post, post_meta, post
check_date.php:543
  - RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
email_template.php:77
  - RETRIEVAL call to get_option("customer_care_CPT_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
email_template.php:82
  - RETRIEVAL call to get_post($custom_care_Id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: wp_post, post_meta, post
email_template.php:118
  - RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
email_template.php:133
  - RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
email_template.php:160
  - RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).
holy_tagline.php:31
  - RETRIEVAL call to get_option("customer_care_tagline_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
holy_tagline.php:41
  - RETRIEVAL call to get_option("blogdescription") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
premium_access.php:20
  - RETRIEVAL call to get_userdata(get_current_user_id()) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
premium_access.php:26
  - RETRIEVAL call to get_posts(["meta_key" => "_customer_user", "meta_value" => get_current_user_id(), "post_type" => wc_get_order_types(), "post_status" => array_keys(wc_get_order_statuses())]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).
user_profile.php:140
  - RETRIEVAL call to get_the_author_meta("customer_care_maintenance_date", $user->ID) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).
  - Data types: user_meta
user_profile.php:141
  - RETRIEVAL call to get_the_author_meta("customer_care_payment_date", $user->ID) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).
  - Data types: user_meta
user_profile.php:144
  - RETRIEVAL call to get_the_author_meta("customer_care_accomplished", $user->ID) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).
  - Data types: user_meta
user_profile.php:155
  - RETRIEVAL call to get_the_author_meta("customer_accpets_news", $user->ID) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).
  - Data types: user_meta
user_profile.php:166
  - RETRIEVAL call to get_the_author_meta("customer_care_Unsubscribed", $user->ID) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).
  - Data types: user_meta
user_profile.php:175
  - RETRIEVAL call to get_the_author_meta("customer_care_mobile", $user->ID) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).
  - Data types: user_meta
webapp_functions.php:17
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
webapp_functions.php:18
  - RETRIEVAL call to get_post() alters data types {'wp_post', 'post_meta', 'post'}. Returns (WP_Post|array|null).
  - Data types: wp_post, post_meta, post 

activation_settings.php:62
  - STORAGE call to wp_delete_post($customer_care_CPT_ID, true) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: wp_post, post_meta, post
activation_settings.php:63
  - STORAGE call to delete_option("customer_care_CPT_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
activation_settings.php:64
  - STORAGE call to delete_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
activation_settings.php:65
  - STORAGE call to delete_option("tagline_alteration_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
check_date.php:71
  - STORAGE call to update_option("customer_care_settings", $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
check_date.php:80
  - STORAGE call to update_option("customer_care_settings", $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
check_date.php:90
  - STORAGE call to update_option("customer_care_settings", $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
check_date.php:235
  - STORAGE call to update_user_meta($user->get("ID"), "customer_care_maintenance_email_done", $date_today) alters data types {'user_meta', 'email'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, email
check_date.php:332
  - STORAGE call to update_user_meta($user->get("ID"), "customer_care_payment_email_done", $date_today) alters data types {'user_meta', 'email'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta, email
email_template.php:97
  - STORAGE call to update_option("customer_care_CPT_ID", $custom_care_Id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
email_template.php:111
  - STORAGE call to wp_insert_post($args). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
email_template.php:114
  - STORAGE call to update_option("customer_care_CPT_ID", $custom_care_Id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
email_template.php:132
  - STORAGE call to update_option("customer_care_settings", $args) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
email_template.php:141
  - STORAGE call to update_option("customer_care_settings", $custom_care_Id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
holy_tagline.php:88
  - STORAGE call to update_option("blogdescription", $chosen) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
registration_form.php:71
  - STORAGE call to update_user_meta($user_id, "customer_care_maintenance_date", sanitize_text_field($_POST["customer_care_maintenance_date"])) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
registration_form.php:75
  - STORAGE call to update_user_meta($user_id, "customer_care_payment_date", sanitize_text_field($_POST["customer_care_payment_date"])) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
registration_form.php:77
  - STORAGE call to update_user_meta($user_id, "customer_accpets_news", "true") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
user_profile.php:57
  - STORAGE call to update_usermeta($user_id, "customer_care_maintenance_date", $customer_care_date_1) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (bool).
  - Data types: user_meta
user_profile.php:76
  - STORAGE call to update_usermeta($user_id, "customer_care_payment_date", $customer_care_date_2) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (bool).
  - Data types: user_meta
user_profile.php:89
  - STORAGE call to update_usermeta($user_id, "customer_care_accomplished", $customer_care_accomplished) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (bool).
  - Data types: user_meta
user_profile.php:94
  - STORAGE call to delete_user_meta($user_id, "customer_care_accomplished") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
user_profile.php:102
  - STORAGE call to update_usermeta($user_id, "customer_care_mobile", $customer_mobile_phone) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (bool).
  - Data types: user_meta
user_profile.php:116
  - STORAGE call to update_usermeta($user_id, "customer_accpet_news", "on") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (bool).
  - Data types: user_meta
user_profile.php:120
  - STORAGE call to delete_user_meta($user_id, "customer_accpet_news") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta 

check_date.php:599
  - CRYPTOGRAPHY call to crypt($recipientID, $salt). 

activation_settings.php:62
  - DELETION call to wp_delete_post($customer_care_CPT_ID, true) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: wp_post, post_meta, post
activation_settings.php:63
  - DELETION call to delete_option("customer_care_CPT_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
activation_settings.php:64
  - DELETION call to delete_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
activation_settings.php:65
  - DELETION call to delete_option("tagline_alteration_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
check_date.php:458
  - Data from table $wpdbcustomer_care_unsubscribe deleted: "$wpdb->delete($table_name, $result)"
user_profile.php:94
  - DELETION call to delete_user_meta($user_id, "customer_care_accomplished") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
user_profile.php:120
  - DELETION call to delete_user_meta($user_id, "customer_accpet_news") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta 

activation_settings.php:62
  - Uninstall deletion call: DELETION call to wp_delete_post($customer_care_CPT_ID, true) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: wp_post, post_meta, post
activation_settings.php:63
  - Uninstall deletion call: DELETION call to delete_option("customer_care_CPT_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
activation_settings.php:64
  - Uninstall deletion call: DELETION call to delete_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
activation_settings.php:65
  - Uninstall deletion call: DELETION call to delete_option("tagline_alteration_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

By data type:
email
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	WordPressStorageDetector.update_user_meta($user->get("ID"), "customer_care_payment_email_done", $date_today) - {'user_meta', 'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	WordPressStorageDetector.update_user_meta($user->get("ID"), "customer_care_maintenance_email_done", $date_today) - {'user_meta', 'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
file
	PHPStorageDetector.file_put_contents(WP_CONTENT_DIR . "/logs/customer_care_dates_checked.log", $check_date) - {'file'}
	PHPStorageDetector.file_put_contents(WP_CONTENT_DIR . "/logs/customer_care_no_reminds.log", "No customers notified on " . gmdate("Y-m-d H:i", time())) - {'file'}
	PHPRetrievalDetector.file_get_contents(WP_CONTENT_DIR . "/logs/customer_care_dates_checked.log") - {'file'}
first_name
	VariableDetector.(unknown) - {'first_name'}
	VariableDetector.(unknown) - {'first_name'}
none
	GenericEncryptionDetector.crypt($recipientID, $salt) - set()
	DeletionDetector.$wpdb->delete($table_name, $result) - set()
	WordPressStorageDetector.wp_insert_post($args) - set()
	WordPressRetrievalDetector.dbDelta($sql) - set()
	PHPIncludedDetector.(unknown) - set()
	WordPressRetrievalDetector.get_posts(["meta_key" => "_customer_user", "meta_value" => get_current_user_id(), "post_type" => wc_get_order_types(), "post_status" => array_keys(wc_get_order_statuses())]) - set()
option
	WordPressStorageDetector.delete_option("customer_care_CPT_ID") - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_settings") - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_settings") - {'option'}
	WordPressRetrievalDetector.get_option("blogdescription") - {'option'}
	WordPressStorageDetector.update_option("customer_care_CPT_ID", $custom_care_Id) - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_settings") - {'option'}
	WordPressRetrievalDetector.get_option("users_can_register") - {'option'}
	WordPressStorageDetector.update_option("customer_care_CPT_ID", $custom_care_Id) - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_settings") - {'option'}
	WordPressStorageDetector.update_option("customer_care_settings", $options) - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_settings") - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_settings") - {'option'}
	WordPressStorageDetector.update_option("customer_care_settings", $options) - {'option'}
	DeletionDetector.delete_option("tagline_alteration_mode") - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_tagline_settings") - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_settings") - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_running", true) - {'option'}
	WordPressRetrievalDetector.get_option("blogdescription") - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_CPT_ID") - {'option'}
	WordPressRetrievalDetector.get_option("timezone_string") - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_tagline_settings") - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_settings") - {'option'}
	WordPressRetrievalDetector.get_option("data_export_ID") - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_CPT_ID") - {'option'}
	UninstallDetector.delete_option("tagline_alteration_mode") - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_settings") - {'option'}
	DeletionDetector.delete_option("customer_care_settings") - {'option'}
	DeletionDetector.delete_option("customer_care_CPT_ID") - {'option'}
	UninstallDetector.delete_option("customer_care_settings") - {'option'}
	WordPressStorageDetector.update_option("customer_care_settings", $options) - {'option'}
	WordPressStorageDetector.update_option("blogdescription", $chosen) - {'option'}
	UninstallDetector.delete_option("customer_care_CPT_ID") - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_CPT_ID") - {'option'}
	WordPressStorageDetector.delete_option("customer_care_settings") - {'option'}
	WordPressStorageDetector.delete_option("tagline_alteration_mode") - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_settings") - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_settings") - {'option'}
	WordPressStorageDetector.update_option("customer_care_settings", $args) - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_settings") - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_CPT_ID") - {'option'}
	WordPressStorageDetector.update_option("customer_care_settings", $custom_care_Id) - {'option'}
	WordPressRetrievalDetector.get_option("customer_care_settings") - {'option'}
post
	WordPressRetrievalDetector.get_post($custom_care_Id) - {'wp_post', 'post_meta', 'post'}
	UninstallDetector.wp_delete_post($customer_care_CPT_ID, true) - {'wp_post', 'post_meta', 'post'}
	DeletionDetector.wp_delete_post($customer_care_CPT_ID, true) - {'wp_post', 'post_meta', 'post'}
	WordPressStorageDetector.wp_delete_post($customer_care_CPT_ID, true) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post($custom_ID) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post() - {'wp_post', 'post_meta', 'post'}
post_meta
	WordPressRetrievalDetector.get_post($custom_care_Id) - {'wp_post', 'post_meta', 'post'}
	UninstallDetector.wp_delete_post($customer_care_CPT_ID, true) - {'wp_post', 'post_meta', 'post'}
	DeletionDetector.wp_delete_post($customer_care_CPT_ID, true) - {'wp_post', 'post_meta', 'post'}
	WordPressStorageDetector.wp_delete_post($customer_care_CPT_ID, true) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post($custom_ID) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post() - {'wp_post', 'post_meta', 'post'}
user
	WordPressRetrievalDetector.get_users() - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata(get_current_user_id()) - {'user_meta', 'user'}
user_meta
	WordPressStorageDetector.delete_user_meta($user_id, "customer_accpet_news") - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "customer_accpets_news", "true") - {'user_meta'}
	WordPressStorageDetector.update_usermeta($user_id, "customer_care_mobile", $customer_mobile_phone) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "customer_care_payment_date", sanitize_text_field($_POST["customer_care_payment_date"])) - {'user_meta'}
	WordPressRetrievalDetector.get_users() - {'user_meta', 'user'}
	DeletionDetector.delete_user_meta($user_id, "customer_care_accomplished") - {'user_meta'}
	WordPressRetrievalDetector.get_the_author_meta("customer_care_Unsubscribed", $user->ID) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user->get("ID"), "customer_care_payment_email_done", $date_today) - {'user_meta', 'email'}
	WordPressStorageDetector.update_usermeta($user_id, "customer_accpet_news", "on") - {'user_meta'}
	WordPressStorageDetector.delete_user_meta($user_id, "customer_care_accomplished") - {'user_meta'}
	WordPressRetrievalDetector.get_the_author_meta("customer_care_accomplished", $user->ID) - {'user_meta'}
	WordPressRetrievalDetector.get_the_author_meta("customer_care_payment_date", $user->ID) - {'user_meta'}
	WordPressStorageDetector.update_usermeta($user_id, "customer_care_payment_date", $customer_care_date_2) - {'user_meta'}
	DeletionDetector.delete_user_meta($user_id, "customer_accpet_news") - {'user_meta'}
	WordPressRetrievalDetector.get_the_author_meta("customer_accpets_news", $user->ID) - {'user_meta'}
	WordPressStorageDetector.update_usermeta($user_id, "customer_care_maintenance_date", $customer_care_date_1) - {'user_meta'}
	WordPressRetrievalDetector.get_the_author_meta("customer_care_mobile", $user->ID) - {'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "customer_care_maintenance_date", sanitize_text_field($_POST["customer_care_maintenance_date"])) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user->get("ID"), "customer_care_maintenance_email_done", $date_today) - {'user_meta', 'email'}
	PropertyDetector.(unknown) - {'user_meta', 'user'}
	WordPressStorageDetector.update_usermeta($user_id, "customer_care_accomplished", $customer_care_accomplished) - {'user_meta'}
	WordPressRetrievalDetector.get_userdata(get_current_user_id()) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_the_author_meta("customer_care_maintenance_date", $user->ID) - {'user_meta'}
wp_post
	WordPressRetrievalDetector.get_post($custom_care_Id) - {'wp_post', 'post_meta', 'post'}
	UninstallDetector.wp_delete_post($customer_care_CPT_ID, true) - {'wp_post', 'post_meta', 'post'}
	DeletionDetector.wp_delete_post($customer_care_CPT_ID, true) - {'wp_post', 'post_meta', 'post'}
	WordPressStorageDetector.wp_delete_post($customer_care_CPT_ID, true) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post($custom_ID) - {'wp_post', 'post_meta', 'post'}
	WordPressRetrievalDetector.get_post() - {'wp_post', 'post_meta', 'post'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:13.769188.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 388 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.508932.

!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 7921
388 STORE_REACHES edges created
388 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 147 nodes as PERSONAL
In total, tainted 147 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
Tainted 9 nodes as ENCRYPTED
In total, tainted 9 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:04.209962.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:00:54.498927!
DELETION call to wp_delete_post($customer_care_CPT_ID, true) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
DELETION call to delete_option("customer_care_CPT_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("tagline_alteration_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Data from table $wpdbcustomer_care_unsubscribe deleted: "$wpdb->delete($table_name, $result)",None,None
DELETION call to delete_user_meta($user_id, "customer_accpet_news") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_user_meta($user_id, "customer_care_accomplished") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
CRYPTOGRAPHY call to crypt($recipientID, $salt).,None,None
Salt provided, however password_hash is recommended over crypt (https://www.php.net/crypt).,crypt,None
RETRIEVAL call to file_get_contents(WP_CONTENT_DIR . "/logs/customer_care_dates_checked.log").,None,None
STORAGE call to file_put_contents(WP_CONTENT_DIR . "/logs/customer_care_no_reminds.log", "No customers notified on " . gmdate("Y-m-d H:i", time())).,None,None
STORAGE call to file_put_contents(WP_CONTENT_DIR . "/logs/customer_care_dates_checked.log", $check_date).,None,None
object property '$subscriber->user_email' of personal types {'email'} is found.,,None
object property '$user_obj->user_nicename' of personal types {'user_meta', 'user'} is found.,,None
Uninstall deletion call: DELETION call to wp_delete_post($customer_care_CPT_ID, true) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
Uninstall deletion call: DELETION call to delete_option("customer_care_CPT_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("tagline_alteration_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
variable '$emails_per_hour_count' of personal types {'email'} is found.,,None
variable '$emails_per_hour_count' of personal types {'email'} is found.,,None
variable '$customer_care_maintenance_email_done' of personal types {'email'} is found.,,None
variable '$customer_care_maintenance_email_done' of personal types {'email'} is found.,,None
variable '$customer_care_maintenance_email_done' of personal types {'email'} is found.,,None
variable '$customer_care_maintenance_email_done' of personal types {'email'} is found.,,None
variable '$emailStatus' of personal types {'email'} is found.,,None
variable '$emailStatus' of personal types {'email'} is found.,,None
variable '$emailStatus' of personal types {'email'} is found.,,None
variable '$emails_per_hour_count' of personal types {'email'} is found.,,None
variable '$emails_per_hour_count' of personal types {'email'} is found.,,None
variable '$customer_care_payment_email_done' of personal types {'email'} is found.,,None
variable '$customer_care_payment_email_done' of personal types {'email'} is found.,,None
variable '$customer_care_payment_email_done' of personal types {'email'} is found.,,None
variable '$customer_care_payment_email_done' of personal types {'email'} is found.,,None
variable '$insurance_email_status' of personal types {'email'} is found.,,None
variable '$emails_per_hour_count' of personal types {'email'} is found.,,None
variable '$insurance_email_status' of personal types {'email'} is found.,,None
variable '$insurance_email_status' of personal types {'email'} is found.,,None
variable '$customer_care_maintenance_email_done' of personal types {'email'} is found.,,None
variable '$customer_care_maintenance_email_done' of personal types {'email'} is found.,,None
variable '$email_purpose' of personal types {'email'} is found.,,None
variable '$email_body' of personal types {'email'} is found.,,None
variable '$email_body' of personal types {'email'} is found.,,None
variable '$email_body' of personal types {'email'} is found.,,None
variable '$email_body' of personal types {'email'} is found.,,None
variable '$email_body' of personal types {'email'} is found.,,None
variable '$email_purpose' of personal types {'email'} is found.,,None
variable '$email_body' of personal types {'email'} is found.,,None
variable '$email_body' of personal types {'email'} is found.,,None
variable '$email_body' of personal types {'email'} is found.,,None
variable '$email_body' of personal types {'email'} is found.,,None
variable '$email_body' of personal types {'email'} is found.,,None
variable '$email_status' of personal types {'email'} is found.,,None
variable '$email_body' of personal types {'email'} is found.,,None
variable '$firstname' of personal types {'first_name'} is found.,,None
variable '$firstname' of personal types {'first_name'} is found.,,None
variable '$email_status' of personal types {'email'} is found.,,None
variable '$email_status' of personal types {'email'} is found.,,None
variable '$blog_email' of personal types {'email'} is found.,,None
variable '$blog_email' of personal types {'email'} is found.,,None
variable '$blog_email' of personal types {'email'} is found.,,None
variable '$blog_email' of personal types {'email'} is found.,,None
variable '$email_unsubscribe' of personal types {'email'} is found.,,None
variable '$email_unsubscribe' of personal types {'email'} is found.,,None
RETRIEVAL call to get_option("customer_care_CPT_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("users_can_register") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("blogdescription") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_users() alters data types {'user_meta', 'user'}. Returns (array).,None,None
RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_care_tagline_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_care_CPT_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("data_export_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_care_running", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_option("timezone_string") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_care_CPT_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($custom_ID) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to get_option("customer_care_CPT_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($custom_care_Id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("customer_care_tagline_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("blogdescription") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_userdata(get_current_user_id()) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_posts(["meta_key" => "_customer_user", "meta_value" => get_current_user_id(), "post_type" => wc_get_order_types(), "post_status" => array_keys(wc_get_order_statuses())]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
RETRIEVAL call to get_the_author_meta("customer_care_maintenance_date", $user->ID) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).,None,None
RETRIEVAL call to get_the_author_meta("customer_care_payment_date", $user->ID) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).,None,None
RETRIEVAL call to get_the_author_meta("customer_care_accomplished", $user->ID) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).,None,None
RETRIEVAL call to get_the_author_meta("customer_accpets_news", $user->ID) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).,None,None
RETRIEVAL call to get_the_author_meta("customer_care_Unsubscribed", $user->ID) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).,None,None
RETRIEVAL call to get_the_author_meta("customer_care_mobile", $user->ID) alters data types {'user_meta'}. Passed arguments: 1: $user_id (int|false), 0: $field (string). Returns (string).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_post() alters data types {'wp_post', 'post_meta', 'post'}. Returns (WP_Post|array|null).,None,None
STORAGE call to wp_delete_post($customer_care_CPT_ID, true) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to delete_option("customer_care_CPT_ID") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("customer_care_settings") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("tagline_alteration_mode") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_user_meta($user->get("ID"), "customer_care_maintenance_email_done", $date_today) alters data types {'user_meta', 'email'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user->get("ID"), "customer_care_payment_email_done", $date_today) alters data types {'user_meta', 'email'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("customer_care_settings", $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_care_settings", $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_care_settings", $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_insert_post($args). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_option("customer_care_CPT_ID", $custom_care_Id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_care_settings", $args) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_care_settings", $custom_care_Id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("customer_care_CPT_ID", $custom_care_Id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("blogdescription", $chosen) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_user_meta($user_id, "customer_care_maintenance_date", sanitize_text_field($_POST["customer_care_maintenance_date"])) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "customer_care_payment_date", sanitize_text_field($_POST["customer_care_payment_date"])) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "customer_accpets_news", "true") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_usermeta($user_id, "customer_care_mobile", $customer_mobile_phone) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (bool).,None,None
STORAGE call to update_usermeta($user_id, "customer_accpet_news", "on") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (bool).,None,None
STORAGE call to delete_user_meta($user_id, "customer_accpet_news") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to update_usermeta($user_id, "customer_care_maintenance_date", $customer_care_date_1) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (bool).,None,None
STORAGE call to update_usermeta($user_id, "customer_care_payment_date", $customer_care_date_2) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (bool).,None,None
STORAGE call to update_usermeta($user_id, "customer_care_accomplished", $customer_care_accomplished) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (bool).,None,None
STORAGE call to delete_user_meta($user_id, "customer_care_accomplished") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($user_id, "customer_accpets_news", "true")", found in file registration_form.php at line 77. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_usermeta($user_id, "customer_care_mobile", $customer_mobile_phone)", found in file user_profile.php at line 102. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($user_id, "customer_care_payment_date", sanitize_text_field($_POST["customer_care_payment_date"]))", found in file registration_form.php at line 75. 

[has_storage] PII of types (['email', 'user_meta']) stored through WordPress function "update_user_meta($user->get("ID"), "customer_care_payment_email_done", $date_today)", found in file check_date.php at line 332. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_usermeta($user_id, "customer_accpet_news", "on")", found in file user_profile.php at line 116. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_usermeta($user_id, "customer_care_payment_date", $customer_care_date_2)", found in file user_profile.php at line 76. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_usermeta($user_id, "customer_care_maintenance_date", $customer_care_date_1)", found in file user_profile.php at line 57. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($user_id, "customer_care_maintenance_date", sanitize_text_field($_POST["customer_care_maintenance_date"]))", found in file registration_form.php at line 71. 

[has_storage] PII of types (['email', 'user_meta']) stored through WordPress function "update_user_meta($user->get("ID"), "customer_care_maintenance_email_done", $date_today)", found in file check_date.php at line 235. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_usermeta($user_id, "customer_care_accomplished", $customer_care_accomplished)", found in file user_profile.php at line 89. 

[has_storage] Storage check is WP 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "customer_accpets_news", "true") does not have corresponding deletion method. Storage method found in file registration_form.php at line 77. 

[Art.17, Right to erasure] Wordpress storage of PII through update_usermeta($user_id, "customer_care_mobile", $customer_mobile_phone) does not have corresponding deletion method. Storage method found in file user_profile.php at line 102. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "customer_care_payment_date", sanitize_text_field($_POST["customer_care_payment_date"])) does not have corresponding deletion method. Storage method found in file registration_form.php at line 75. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user->get("ID"), "customer_care_payment_email_done", $date_today) does not have corresponding deletion method. Storage method found in file check_date.php at line 332. 

[Art.17, Right to erasure] Wordpress storage of PII through update_usermeta($user_id, "customer_accpet_news", "on") has deletion method delete_user_meta($user_id, "customer_accpet_news"). Storage method found in file user_profile.php at line 116. Deletion method found in file user_profile.php at line 120. 

[Art.17, Right to erasure] Wordpress storage of PII through update_usermeta($user_id, "customer_care_payment_date", $customer_care_date_2) does not have corresponding deletion method. Storage method found in file user_profile.php at line 76. 

[Art.17, Right to erasure] Wordpress storage of PII through update_usermeta($user_id, "customer_care_maintenance_date", $customer_care_date_1) does not have corresponding deletion method. Storage method found in file user_profile.php at line 57. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "customer_care_maintenance_date", sanitize_text_field($_POST["customer_care_maintenance_date"])) does not have corresponding deletion method. Storage method found in file registration_form.php at line 71. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user->get("ID"), "customer_care_maintenance_email_done", $date_today) does not have corresponding deletion method. Storage method found in file check_date.php at line 235. 

[Art.17, Right to erasure] Wordpress storage of PII through update_usermeta($user_id, "customer_care_accomplished", $customer_care_accomplished) has deletion method delete_user_meta($user_id, "customer_care_accomplished"). Storage method found in file user_profile.php at line 89. Deletion method found in file user_profile.php at line 94. 

[Art.17, Right to erasure] Deletion access is NONE 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 6838. Found in file registration_form.php at line 77 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 7546. Found in file user_profile.php at line 102 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 6823. Found in file registration_form.php at line 75 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 3421. Found in file check_date.php at line 332 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 7583. Found in file user_profile.php at line 116 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 7456. Found in file user_profile.php at line 76 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 7338. Found in file user_profile.php at line 57 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 6799. Found in file registration_form.php at line 71 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 3109. Found in file check_date.php at line 235 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 7494. Found in file user_profile.php at line 89 

[Art.15, Right to access] Data access is NONE_BUT_NOT_REQUIRED 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? True 

[main] Is access in violation? False 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? False 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        

##################
### Fix Report ###
##################

############################
# Data Deletion Fix Report #
############################

This report suggests fixes to comply with the GDPR Art. 17, Right to erasure (https://gdpr-info.eu/art-17-gdpr/). The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/adding-the-personal-data-eraser-to-your-plugin/ for more details.

1) Implement a function that deletes all the user data collected in the plugin. Sample code:


/**
* Removes all collected data of a user.
*
* @param string $email_address   email address to manipulate
* @param int    $page            pagination
*
* @return array
*/
function customer-care_remove_data( $email_address, $page = 1 ) {
    
    $page = (int) $page;


    //TODO: Delete the user data that was stored using Wordpress functions

    //Below is the sample code for deleting user meta and may need to be modified to suit the plugin.
    $user_id = get_user_by('email', $email_address)
    $key = 'email' //Sample user meta key
    if ( $customer->user_id > 0 ) {
        //Delete user meta data by $key
        delete_user_meta( $user_id, $key );
    }
        



    // Tell core if we have more data to delete still
    $done = true;
    return array(
        'items_removed'  => $items_removed, // true if collected data of a user is being deleted
        'items_retained' => $items_retained, // true if certain data needs to be retained
        'messages'       => sprintf( __( 'Data of user with email %s successfully deleted.', 'customer-care' ), $email_address ), // Put messages for data removal
        'done'           => $done, // true if all the removal processes are done (all data of the user is removed)
    );
}
        

2) Hook the deletion function to the Wordpress's Personal Data Removal tool


/**
* Registers all data erasers.
*
* @param array $exporters
*
* @return mixed
*/
function customer-care_register_privacy_erasers( $erasers ) {
    $erasers['my-plugin-slug'] = array(
        'eraser_friendly_name' => __( '<eraser name>', 'customer-care' ),
        'callback'             => 'customer-care_remove_data',
    );
    return $erasers;
}
        

add_filter( 'wp_privacy_personal_data_erasers', 'customer-care_register_privacy_erasers' );
        

        

#############################
# Privacy Policy Fix Report #
#############################

This report suggests fixes to comply with the GDPR Art. 13 (https://gdpr-info.eu/art-13-gdpr/) through including a privacy notice. The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/suggesting-text-for-the-site-privacy-policy/ for more details.

1) Implement a function that includes the privacy policy for the plugin and provide it to wordpress through wp_add_privacy_policy_content(). Sample code:


/**
* Adds a privacy policy statement.
*/
function customer-care_add_privacy_policy_content() {
    if ( ! function_exists( 'wp_add_privacy_policy_content' ) ) {
        return;
    }
    //TODO: modify the content below to include the privacy policy for the plugin.
    $content = '<p class="privacy-policy-tutorial">' . __( 'Some introductory content for the suggested text.', 'customer-care' ) . '</p>'
            . '<strong class="privacy-policy-tutorial">' . __( 'Suggested Text:', 'customer-care' ) . '</strong> '
            . sprintf(
                __( 'When you leave a comment on this site, we send your name, email address, IP address and comment text to example.com. Example.com does not retain your personal data. The example.com privacy policy is <a href="%1$s" target="_blank">here</a>.', 'customer-care' ),
                'https://example.com/privacy-policy'
            );
    wp_add_privacy_policy_content( 'customer-care', wp_kses_post( wpautop( $content, false ) ) );
}
        

2) Hook the privacy policy function to the Wordpress's admin initialization action.


add_action( 'admin_init', 'customer-care_add_privacy_policy_content' );
        

        


Disclaimer: The sample code provided above is only for reference and does not guarantee GDPR compliance. The recommended list of data to delete/export may not be comprehensive. 
        
Done.
