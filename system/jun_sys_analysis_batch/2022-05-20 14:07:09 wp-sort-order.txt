Timeout in resolving values
Timeout in running neo4j query
Running Main.py on wp-sort-order

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:01.618079.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:01.267869.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 0 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.169653.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 0 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.323067.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 507 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:00.746304.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 0 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.493916.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.086298.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 232 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:07.132557.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 3711
Added 2972 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 24327
Added 20616 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:02.724151.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-sort-order/index.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-sort-order/inc/functions.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-sort-order/inc/hooks.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/wp-sort-order/inc/settings.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:00.450461.

1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
3711 PHP_REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
12000 PHP_REACHES edges created
13000 PHP_REACHES edges created
14000 PHP_REACHES edges created
15000 PHP_REACHES edges created
16000 PHP_REACHES edges created
17000 PHP_REACHES edges created
18000 PHP_REACHES edges created
19000 PHP_REACHES edges created
20000 PHP_REACHES edges created
20616 PHP_REACHES edges created
24327 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 1511 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:00.911606.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:05.885055.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 16 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:01.065263.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 38 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.161783.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:01.285434.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.191340.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.009542.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.034381.

54 PHP_REACHES edges created
54 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 40 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.147243.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
30 SQL operations to process.
SELECT blog_id FROM $wpdb
SQL command (SELECT blog_id FROM $wpdb) cannot be parsed correct.
SELECT t.term_id FROM $wpdbterm_taxonomy t WHERE t.taxonomy='usercategories'
SQL command (SELECT t.term_id FROM $wpdbterm_taxonomy t WHERE t.taxonomy='usercategories') cannot be parsed correct.

										SELECT 							
											um.user_id
											
										FROM 
											$wpdb um
										WHERE										
											um.meta_key=CONCAT('user_order_', $items)
										ORDER BY
											CAST(um.meta_value AS unsigned)
										ASC
											
									
SQL command ( SELECT um.user_id FROM $wpdb um WHERE um.meta_key=CONCAT('user_order_', $items) ORDER BY CAST(um.meta_value AS unsigned) ASC ) cannot be parsed correct.

						SELECT count(*) as cnt, max(term_order) as max, min(term_order) as min 
						FROM $wpdb AS terms 
						INNER JOIN $wpdb AS term_taxonomy ON ( terms.term_id = term_taxonomy.term_id ) 
						WHERE term_taxonomy.taxonomy = '$taxonomy'
					
SQL command ( SELECT count(*) as cnt, max(term_order) as max, min(term_order) as min FROM $wpdb AS terms INNER JOIN $wpdb AS term_taxonomy ON ( terms.term_id = term_taxonomy.term_id ) WHERE term_taxonomy.taxonomy = '$taxonomy' ) cannot be parsed correct.

						SELECT count(*) as cnt, max(menu_order) as max, min(menu_order) as min 
						FROM $wpdb 
						WHERE post_type = '$object' AND post_status IN ('publish', 'pending', 'draft', 'private', 'future')
					
SQL command ( SELECT count(*) as cnt, max(menu_order) as max, min(menu_order) as min FROM $wpdb WHERE post_type = '$object' AND post_status IN ('publish', 'pending', 'draft', 'private', 'future') ) cannot be parsed correct.

						SELECT ID 
						FROM $wpdb 
						WHERE post_type = '$object' AND post_status IN ('publish', 'pending', 'draft', 'private', 'future') 
						ORDER BY menu_order ASC
					
SQL command ( SELECT ID FROM $wpdb WHERE post_type = '$object' AND post_status IN ('publish', 'pending', 'draft', 'private', 'future') ORDER BY menu_order ASC ) cannot be parsed correct.

						SELECT count(*) as cnt, max(menu_order) as max, min(menu_order) as min 
						FROM $wpdb 
						WHERE post_type = '$object' AND post_status IN ('publish', 'pending', 'draft', 'private', 'future')
					
SQL command ( SELECT count(*) as cnt, max(menu_order) as max, min(menu_order) as min FROM $wpdb WHERE post_type = '$object' AND post_status IN ('publish', 'pending', 'draft', 'private', 'future') ) cannot be parsed correct.

							SELECT ID 
							FROM $wpdb 
							WHERE post_type = '$object' AND post_status IN ('publish', 'pending', 'draft', 'private', 'future') 
							ORDER BY menu_order, post_title ASC
						
SQL command ( SELECT ID FROM $wpdb WHERE post_type = '$object' AND post_status IN ('publish', 'pending', 'draft', 'private', 'future') ORDER BY menu_order, post_title ASC ) cannot be parsed correct.

							SELECT ID 
							FROM $wpdb 
							WHERE post_type = '$object' AND post_status IN ('publish', 'pending', 'draft', 'private', 'future') 
							ORDER BY post_date DESC
						
SQL command ( SELECT ID FROM $wpdb WHERE post_type = '$object' AND post_status IN ('publish', 'pending', 'draft', 'private', 'future') ORDER BY post_date DESC ) cannot be parsed correct.

						SELECT count(*) as cnt, max(term_order) as max, min(term_order) as min 
						FROM $wpdb AS terms 
						INNER JOIN $wpdb AS term_taxonomy ON ( terms.term_id = term_taxonomy.term_id ) 
						WHERE term_taxonomy.taxonomy = '$taxonomy'
					
SQL command ( SELECT count(*) as cnt, max(term_order) as max, min(term_order) as min FROM $wpdb AS terms INNER JOIN $wpdb AS term_taxonomy ON ( terms.term_id = term_taxonomy.term_id ) WHERE term_taxonomy.taxonomy = '$taxonomy' ) cannot be parsed correct.

						SELECT terms.term_id 
						FROM $wpdb AS terms 
						INNER JOIN $wpdb AS term_taxonomy ON ( terms.term_id = term_taxonomy.term_id ) 
						WHERE term_taxonomy.taxonomy = '$taxonomy' 
						ORDER BY name ASC
					
SQL command ( SELECT terms.term_id FROM $wpdb AS terms INNER JOIN $wpdb AS term_taxonomy ON ( terms.term_id = term_taxonomy.term_id ) WHERE term_taxonomy.taxonomy = '$taxonomy' ORDER BY name ASC ) cannot be parsed correct.

						SELECT terms.term_id 
						FROM $wpdb AS terms 
						INNER JOIN $wpdb AS term_taxonomy ON ( terms.term_id = term_taxonomy.term_id ) 
						WHERE term_taxonomy.taxonomy = '$taxonomy' 
						ORDER BY term_order ASC
					
SQL command ( SELECT terms.term_id FROM $wpdb AS terms INNER JOIN $wpdb AS term_taxonomy ON ( terms.term_id = term_taxonomy.term_id ) WHERE term_taxonomy.taxonomy = '$taxonomy' ORDER BY term_order ASC ) cannot be parsed correct.

								SELECT count(*) as cnt, max(um.meta_value) as max, min(um.meta_value) as min 
								FROM
									$wpdb AS r,
									$wpdb AS u,
									$wpdb AS um								
								WHERE
									r.term_taxonomy_id=$item
									AND
									u.ID=r.object_id
									AND
									(um.user_id=r.object_id
									AND
									um.meta_key=CONCAT('user_order_', r.term_taxonomy_id))
							
SQL command ( SELECT count(*) as cnt, max(um.meta_value) as max, min(um.meta_value) as min FROM $wpdb AS r, $wpdb AS u, $wpdb AS um WHERE r.term_taxonomy_id=$item AND u.ID=r.object_id AND (um.user_id=r.object_id AND um.meta_key=CONCAT('user_order_', r.term_taxonomy_id)) ) cannot be parsed correct.

									SELECT 
										um.umeta_id,
										um.user_id
									FROM 
										$wpdb um
									WHERE										
										um.meta_key=CONCAT('user_order_', $item)
										
								
SQL command ( SELECT um.umeta_id, um.user_id FROM $wpdb um WHERE um.meta_key=CONCAT('user_order_', $item) ) cannot be parsed correct.

								
								SELECT 
									um.user_id,
									um.meta_value
								FROM
									$wpdb AS r,
									$wpdb AS u,
									$wpdb AS um								
								WHERE
									r.term_taxonomy_id=$item
									AND
									u.ID=r.object_id
									AND
									(um.user_id=r.object_id
									AND
									um.meta_key=CONCAT('user_order_', r.term_taxonomy_id))
									
							
SQL command ( SELECT um.user_id, um.meta_value FROM $wpdb AS r, $wpdb AS u, $wpdb AS um WHERE r.term_taxonomy_id=$item AND u.ID=r.object_id AND (um.user_id=r.object_id AND um.meta_key=CONCAT('user_order_', r.term_taxonomy_id)) ) cannot be parsed correct.

								
								SELECT 
									u.ID AS user_id
								FROM
									$wpdb AS r,
									$wpdb AS u							
								WHERE
									r.term_taxonomy_id=$item
									AND
									u.ID=r.object_id
									
							
SQL command ( SELECT u.ID AS user_id FROM $wpdb AS r, $wpdb AS u WHERE r.term_taxonomy_id=$item AND u.ID=r.object_id ) cannot be parsed correct.
SELECT menu_order FROM $wpdb WHERE ID = intval($id)
SQL command (SELECT menu_order FROM $wpdb WHERE ID = intval($id)) cannot be parsed correct.
SELECT term_order FROM $wpdb WHERE term_id = intval($id)
SQL command (SELECT term_order FROM $wpdb WHERE term_id = intval($id)) cannot be parsed correct.

						SELECT count(*) as cnt, max(term_order) as max, min(term_order) as min 
						FROM $wpdb AS terms 
						INNER JOIN $wpdb AS term_taxonomy ON ( terms.term_id = term_taxonomy.term_id ) 
						WHERE term_taxonomy.taxonomy = '$taxonomy'
					
SQL command ( SELECT count(*) as cnt, max(term_order) as max, min(term_order) as min FROM $wpdb AS terms INNER JOIN $wpdb AS term_taxonomy ON ( terms.term_id = term_taxonomy.term_id ) WHERE term_taxonomy.taxonomy = '$taxonomy' ) cannot be parsed correct.

						SELECT terms.term_id 
						FROM $wpdb AS terms 
						INNER JOIN $wpdb AS term_taxonomy ON ( terms.term_id = term_taxonomy.term_id ) 
						WHERE term_taxonomy.taxonomy = '$taxonomy' 
						ORDER BY name ASC
					
SQL command ( SELECT terms.term_id FROM $wpdb AS terms INNER JOIN $wpdb AS term_taxonomy ON ( terms.term_id = term_taxonomy.term_id ) WHERE term_taxonomy.taxonomy = '$taxonomy' ORDER BY name ASC ) cannot be parsed correct.
SELECT t.taxonomy, t.term_id FROM $wpdb t, $wpdb tr WHERE tr.term_id='$eterms' AND tr.term_id=t.term_id LIMIT 1
SQL command (SELECT t.taxonomy, t.term_id FROM $wpdb t, $wpdb tr WHERE tr.term_id='$eterms' AND tr.term_id=t.term_id LIMIT 1) cannot be parsed correct.
DESCRIBE $wpdb `term_order`
SQL command (DESCRIBE $wpdb `term_order`) cannot be parsed correct.
ALTER TABLE $wpdb ADD `term_order` INT( 4 ) NULL DEFAULT '0'
SQL command (ALTER TABLE $wpdb ADD `term_order` INT( 4 ) NULL DEFAULT '0') cannot be parsed correct.
DESCRIBE $wpdb `user_order`
SQL command (DESCRIBE $wpdb `user_order`) cannot be parsed correct.
ALTER TABLE $wpdb ADD `user_order` INT( 4 ) NULL DEFAULT '0'
SQL command (ALTER TABLE $wpdb ADD `user_order` INT( 4 ) NULL DEFAULT '0') cannot be parsed correct.
DESCRIBE $wpdb `term_order`
SQL command (DESCRIBE $wpdb `term_order`) cannot be parsed correct.
ALTER TABLE $wpdb DROP `term_order`
SQL command (ALTER TABLE $wpdb DROP `term_order`) cannot be parsed correct.
DESCRIBE $wpdb `user_order`
SQL command (DESCRIBE $wpdb `user_order`) cannot be parsed correct.
ALTER TABLE $wpdb DROP `user_order`
SQL command (ALTER TABLE $wpdb DROP `user_order`) cannot be parsed correct.
DELETE FROM $wpdb WHERE umeta_id=$res
SQL command (DELETE FROM $wpdb WHERE umeta_id=$res) cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [733, 177, 367, 2042, 1927, 1973, 3382, 3435, 3458, 3523, 3574, 2105, 2303, 2385, 2490, 2561, 2683, 2845, 3802, 3853, 248, 1302, 1333, 1343, 1374, 787, 817, 827, 857, 2432]
Added 0 SQL nodes. 0 out of 30 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:08.769195.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'$key'' cannot be parsed correct.
HTML code '$'$order'' cannot be parsed correct.
HTML code '$'$wpso_data_Name ($wpso_data_Version) Pro)'' cannot be parsed correct.
HTML code '$'Settings'' cannot be parsed correct.
HTML code '$'<a href=$wpso_premium_link" target="_blank" class="premium">Go Premium</a>'' cannot be parsed correct.
HTML code '$'$page'' cannot be parsed correct.
HTML code '$'$ptitle'' cannot be parsed correct.
HTML code '$'$post_type'' cannot be parsed correct.
HTML code '$'$post_type'' cannot be parsed correct.
HTML code '$'$taxonomy'' cannot be parsed correct.
HTML code '$'$taxonomy'' cannot be parsed correct.
HTML code '$'User Categories'' cannot be parsed correct.
HTML code '$'$_GET_t0'' cannot be parsed correct.
HTML code '$'User categories required?'' cannot be parsed correct.
HTML code '$'$premium_click'' cannot be parsed correct.
HTML code '$'A shortcode to list users under taxonomy, terms and children.'' cannot be parsed correct.
HTML code '$'taxonomy or term slug<span>"</span> <span>id="</span>taxonomy or term id'' cannot be parsed correct.
HTML code '$'$premium_click'' cannot be parsed correct.
HTML code '$'$taxonomy'' cannot be parsed correct.
HTML code '$'$taxonomy'' cannot be parsed correct.
HTML code '$'User Categories'' cannot be parsed correct.
HTML code '$'$premium_click'' cannot be parsed correct.
HTML code '$'<pre>'' cannot be parsed correct.
HTML code '$'</pre>'' cannot be parsed correct.
HTML code '$'</label>
<table class="form-table">
	<tbody>
		<tr valign="top">
			<th scope="row"><h4>'' cannot be parsed correct.
HTML code '$'</h4><small>menu_order</small></th>
			<td class="options1">
            <ul>
'' cannot be parsed correct.
HTML code '$'checked="checked"'' cannot be parsed correct.
HTML code '$'</label>
<table class="form-table">
	<tbody>
		<tr valign="top">
			<th scope="row"><h4>'' cannot be parsed correct.
HTML code '$'</h4><small>menu_order</small></th>
			<td class="options1">
            <ul>
			'' cannot be parsed correct.
HTML code '$'checked="checked"'' cannot be parsed correct.
HTML code '$'</label>
<table class="form-table">
	<tbody>
		<tr valign="top">
			<th scope="row"><h4>'' cannot be parsed correct.
HTML code '$'</h4><small>term_order</small></th>
			<td class="options2">
            <ul>
			'' cannot be parsed correct.
HTML code '$'checked="checked"'' cannot be parsed correct.
HTML code '$'</label></li>
			'' cannot be parsed correct.
HTML code '$'</label>
                        <table class="form-table">
                            <tbody>
                            <tr valign="top">
                                <th scope="row"><h4>'' cannot be parsed correct.
HTML code '$'</h4><small>term_order</small></th>
                                <td class="options2">
                                    <ul>
                                        '' cannot be parsed correct.
HTML code '$'checked="checked"'' cannot be parsed correct.
HTML code '$'</label></li>
                                                '' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:03.564013.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.043928.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 0 do_action/apply_filters calls and 24 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:01.067484.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running DbplusDetector
### Start running FrontBaseDetector
### Finish running DbaseDetector
### Start running HashDetector
### Finish running FileProDetector
### Start running IBMDb2Detector
### Finish running CubridDetector
### Start running InformixDetector
### Finish running FirebirdInterBaseDetector
### Start running IngresDetector
### Finish running FrontBaseDetector
### Start running maxdbDetector
### Finish running IngresDetector
### Start running MongoDbDetector
### Finish running IBMDb2Detector
### Start running MongoDetector
### Finish running InformixDetector
### Start running MsqlDetector
### Finish running MongoDetector
### Start running MySQLDetector
### Finish running HashDetector
### Start running MySQLiDetector
### Finish running ArrayElementDetector
### Start running Oci8Detector
### Finish running MySQLDetector
### Start running OpenSSLDetector
### Finish running MsqlDetector
### Start running ParadoxDetector
### Finish running Oci8Detector
### Start running PasswordHashingDetector
### Finish running MongoDbDetector
### Start running PhpCurlDetector
### Finish running OpenSSLDetector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running PhpCurlDetector
### Start running PHPRetrievalDetector
### Finish running ParadoxDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PasswordHashingDetector
### Start running PhpVarDetector
### Finish running PHPRetrievalDetector
### Start running PostgreSQLDetector
### Finish running PHPStorageDetector
### Start running PropertyDetector
### Finish running PhpVarDetector
### Start running Sqlite3Detector
### Finish running PHPIncludedDetector
### Start running SqliteDetector
### Finish running PostgreSQLDetector
### Start running SqlServerDetector
### Finish running Sqlite3Detector
### Start running SybaseDetector
### Finish running PropertyDetector
### Start running TokyoTyrantDetector
### Finish running SqliteDetector
### Start running UserInputDetector
### Finish running TokyoTyrantDetector
### Start running VariableDetector
### Finish running SybaseDetector
### Start running WordpressHashingFnDetector
### Finish running SqlServerDetector
### Start running WordPressRemoteDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressRetrievalDetector
### Finish running WordPressRemoteDetector
### Start running WordPressStorageDetector
### Finish running VariableDetector
### Start running WP_UserDetector
### Finish running UserInputDetector
### Start running GenericDatabaseUsageDetector
### Finish running WP_UserDetector
### Start running GenericEncryptionDetector
### Finish running MySQLiDetector
### Start running DeletionDetector
### Finish running maxdbDetector
### Start running UninstallDetector
### Finish running GenericEncryptionDetector
### Finish running GenericDatabaseUsageDetector
### Finish running UninstallDetector
### Finish running DeletionDetector
### Finish running WordPressStorageDetector
### Finish running WordPressRetrievalDetector
### Finished running detectors
c/hooks.php:12
  - RETRIEVAL call to get_option("wpso_activation") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
c/hooks.php:575
  - RETRIEVAL call to get_user_meta($id, $user_order, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
c/hooks.php:700
  - RETRIEVAL call to get_option("wpso_options", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).
  - Data types: option
c/hooks.php:907
  - RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
c/hooks.php:907
  - RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
c/hooks.php:915
  - RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
c/hooks.php:915
  - RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
c/hooks.php:921
  - RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
c/hooks.php:921
  - RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
c/hooks.php:944
  - RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
c/hooks.php:976
  - RETRIEVAL call to get_option("wpso_extras_order") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
c/settings.php:4
  - RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option 

c/functions.php:200
  - STORAGE call to delete_option("wpso_activation") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
c/hooks.php:93
  - STORAGE call to update_option("wpso_activation", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
c/hooks.php:421
  - STORAGE call to update_user_meta(intval($res->user_id), $user_order, $k + 1) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
c/hooks.php:447
  - STORAGE call to update_user_meta(intval($res->user_id), $user_order, $k + 1) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
c/hooks.php:590
  - STORAGE call to update_user_meta(intval($id), $user_order, sanitize_wpso_data($menu_order_arr[$position])) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
c/hooks.php:614
  - STORAGE call to update_option("wpso_extras_order", sanitize_wpso_data($id_arr)) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
c/hooks.php:632
  - STORAGE call to update_option("wpso_options", sanitize_wpso_data($input_options)) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
c/hooks.php:723
  - STORAGE call to update_option("wpso_options", sanitize_wpso_data($input_options)) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
c/hooks.php:955
  - STORAGE call to wp_update_post(["ID" => $post->ID, "menu_order" => $max + 1]). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error). 

c/functions.php:200
  - DELETION call to delete_option("wpso_activation") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

By data type:
none
	WordPressStorageDetector.wp_update_post(["ID" => $post->ID, "menu_order" => $max + 1]) - set()
option
	WordPressRetrievalDetector.get_option("wpso_options") - {'option'}
	WordPressRetrievalDetector.get_option("wpso_activation") - {'option'}
	DeletionDetector.delete_option("wpso_activation") - {'option'}
	WordPressStorageDetector.update_option("wpso_options", sanitize_wpso_data($input_options)) - {'option'}
	WordPressRetrievalDetector.get_option("wpso_options") - {'option'}
	WordPressStorageDetector.update_option("wpso_activation", 1) - {'option'}
	WordPressRetrievalDetector.get_option("wpso_options") - {'option'}
	WordPressStorageDetector.delete_option("wpso_activation") - {'option'}
	WordPressRetrievalDetector.get_option("wpso_extras_order") - {'option'}
	WordPressStorageDetector.update_option("wpso_options", sanitize_wpso_data($input_options)) - {'option'}
	WordPressRetrievalDetector.get_option("wpso_options") - {'option'}
	WordPressRetrievalDetector.get_option("wpso_options") - {'option'}
	WordPressRetrievalDetector.get_option("wpso_options") - {'option'}
	WordPressStorageDetector.update_option("wpso_extras_order", sanitize_wpso_data($id_arr)) - {'option'}
	WordPressRetrievalDetector.get_option("wpso_options", []) - {'option'}
	WordPressRetrievalDetector.get_option("wpso_options") - {'option'}
	WordPressRetrievalDetector.get_option("wpso_options") - {'option'}
user_meta
	WordPressStorageDetector.update_user_meta(intval($id), $user_order, sanitize_wpso_data($menu_order_arr[$position])) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($id, $user_order, true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta(intval($res->user_id), $user_order, $k + 1) - {'user_meta'}
	WordPressStorageDetector.update_user_meta(intval($res->user_id), $user_order, $k + 1) - {'user_meta'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:09.173873.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 58 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.169014.

58 STORE_REACHES edges created
58 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 5 nodes as PERSONAL
In total, tainted 5 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
In total, tainted 0 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:00.715972.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:01:01.650527!
DELETION call to delete_option("wpso_activation") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
RETRIEVAL call to get_option("wpso_activation") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($id, $user_order, true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wpso_options", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $default (mixed). Returns (mixed).,None,None
RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wpso_extras_order") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("wpso_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
STORAGE call to delete_option("wpso_activation") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_user_meta(intval($res->user_id), $user_order, $k + 1) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta(intval($res->user_id), $user_order, $k + 1) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta(intval($id), $user_order, sanitize_wpso_data($menu_order_arr[$position])) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("wpso_extras_order", sanitize_wpso_data($id_arr)) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("wpso_options", sanitize_wpso_data($input_options)) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("wpso_options", sanitize_wpso_data($input_options)) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("wpso_activation", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_update_post(["ID" => $post->ID, "menu_order" => $max + 1]). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta(intval($id), $user_order, sanitize_wpso_data($menu_order_arr[$position]))", found in file c/hooks.php at line 590. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta(intval($res->user_id), $user_order, $k + 1)", found in file c/hooks.php at line 447. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta(intval($res->user_id), $user_order, $k + 1)", found in file c/hooks.php at line 421. 

[has_storage] Storage check is WP 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta(intval($id), $user_order, sanitize_wpso_data($menu_order_arr[$position])) does not have corresponding deletion method. Storage method found in file c/hooks.php at line 590. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta(intval($res->user_id), $user_order, $k + 1) does not have corresponding deletion method. Storage method found in file c/hooks.php at line 447. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta(intval($res->user_id), $user_order, $k + 1) does not have corresponding deletion method. Storage method found in file c/hooks.php at line 421. 

[Art.17, Right to erasure] Deletion access is NONE 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 3152. Found in file c/hooks.php at line 590 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 2590. Found in file c/hooks.php at line 447 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 2519. Found in file c/hooks.php at line 421 

[Art.15, Right to access] Data access is NONE_BUT_NOT_REQUIRED 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? True 

[main] Is access in violation? False 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? False 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        

##################
### Fix Report ###
##################

############################
# Data Deletion Fix Report #
############################

This report suggests fixes to comply with the GDPR Art. 17, Right to erasure (https://gdpr-info.eu/art-17-gdpr/). The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/adding-the-personal-data-eraser-to-your-plugin/ for more details.

1) Implement a function that deletes all the user data collected in the plugin. Sample code:


/**
* Removes all collected data of a user.
*
* @param string $email_address   email address to manipulate
* @param int    $page            pagination
*
* @return array
*/
function wp-sort-order_remove_data( $email_address, $page = 1 ) {
    
    $page = (int) $page;


    //TODO: Delete the user data that was stored using Wordpress functions

    //Below is the sample code for deleting user meta and may need to be modified to suit the plugin.
    $user_id = get_user_by('email', $email_address)
    $key = 'email' //Sample user meta key
    if ( $customer->user_id > 0 ) {
        //Delete user meta data by $key
        delete_user_meta( $user_id, $key );
    }
        



    // Tell core if we have more data to delete still
    $done = true;
    return array(
        'items_removed'  => $items_removed, // true if collected data of a user is being deleted
        'items_retained' => $items_retained, // true if certain data needs to be retained
        'messages'       => sprintf( __( 'Data of user with email %s successfully deleted.', 'wp-sort-order' ), $email_address ), // Put messages for data removal
        'done'           => $done, // true if all the removal processes are done (all data of the user is removed)
    );
}
        

2) Hook the deletion function to the Wordpress's Personal Data Removal tool


/**
* Registers all data erasers.
*
* @param array $exporters
*
* @return mixed
*/
function wp-sort-order_register_privacy_erasers( $erasers ) {
    $erasers['my-plugin-slug'] = array(
        'eraser_friendly_name' => __( '<eraser name>', 'wp-sort-order' ),
        'callback'             => 'wp-sort-order_remove_data',
    );
    return $erasers;
}
        

add_filter( 'wp_privacy_personal_data_erasers', 'wp-sort-order_register_privacy_erasers' );
        

        

#############################
# Privacy Policy Fix Report #
#############################

This report suggests fixes to comply with the GDPR Art. 13 (https://gdpr-info.eu/art-13-gdpr/) through including a privacy notice. The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/suggesting-text-for-the-site-privacy-policy/ for more details.

1) Implement a function that includes the privacy policy for the plugin and provide it to wordpress through wp_add_privacy_policy_content(). Sample code:


/**
* Adds a privacy policy statement.
*/
function wp-sort-order_add_privacy_policy_content() {
    if ( ! function_exists( 'wp_add_privacy_policy_content' ) ) {
        return;
    }
    //TODO: modify the content below to include the privacy policy for the plugin.
    $content = '<p class="privacy-policy-tutorial">' . __( 'Some introductory content for the suggested text.', 'wp-sort-order' ) . '</p>'
            . '<strong class="privacy-policy-tutorial">' . __( 'Suggested Text:', 'wp-sort-order' ) . '</strong> '
            . sprintf(
                __( 'When you leave a comment on this site, we send your name, email address, IP address and comment text to example.com. Example.com does not retain your personal data. The example.com privacy policy is <a href="%1$s" target="_blank">here</a>.', 'wp-sort-order' ),
                'https://example.com/privacy-policy'
            );
    wp_add_privacy_policy_content( 'wp-sort-order', wp_kses_post( wpautop( $content, false ) ) );
}
        

2) Hook the privacy policy function to the Wordpress's admin initialization action.


add_action( 'admin_init', 'wp-sort-order_add_privacy_policy_content' );
        

        


Disclaimer: The sample code provided above is only for reference and does not guarantee GDPR compliance. The recommended list of data to delete/export may not be comprehensive. 
        
Done.
