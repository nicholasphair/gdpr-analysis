Timeout in resolving values
Timeout in running neo4j query
Running Main.py on openid

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:00.529294.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:01.515348.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 699 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:02.093175.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 4 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.875409.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 6397 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:02.844143.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 228 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:02.012990.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.078686.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 2302 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:01:06.858998.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 37490
Added 27860 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 37663
Added 173 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:03.517618.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/admin_panels.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/comments.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/common.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/consumer.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/login.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/openid.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/server_ext.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/server.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/store.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/Association.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/AX.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/BigMath.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/Consumer.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/CryptUtil.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/DatabaseConnection.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/DiffieHellman.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/Discover.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/DumbStore.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/Extension.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/FileStore.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/HMAC.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/Interface.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/KVForm.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/MDB2Store.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/MemcachedStore.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/Message.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/MySQLStore.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/Nonce.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/PAPE.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/Parse.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/PostgreSQLStore.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/PredisStore.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/Server.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/ServerRequest.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/SQLiteStore.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/SQLStore.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/SReg.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/TrustRoot.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/OpenID/URINorm.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/Yadis/HTTPFetcher.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/Yadis/Manager.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/Yadis/Misc.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/Yadis/ParanoidHTTPFetcher.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/Yadis/ParseHTML.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/Yadis/PlainHTTPFetcher.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/Yadis/XML.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/Yadis/XRDS.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/Yadis/XRI.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/Yadis/XRIRes.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/openid/lib/Auth/Yadis/Yadis.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:04.799354.

699 PHP_REACHES edges created
4 REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
6397 PHP_REACHES edges created
228 CALLS edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
12000 PHP_REACHES edges created
13000 PHP_REACHES edges created
14000 PHP_REACHES edges created
15000 PHP_REACHES edges created
16000 PHP_REACHES edges created
17000 PHP_REACHES edges created
18000 PHP_REACHES edges created
19000 PHP_REACHES edges created
20000 PHP_REACHES edges created
21000 PHP_REACHES edges created
22000 PHP_REACHES edges created
23000 PHP_REACHES edges created
24000 PHP_REACHES edges created
25000 PHP_REACHES edges created
26000 PHP_REACHES edges created
27000 PHP_REACHES edges created
28000 PHP_REACHES edges created
29000 PHP_REACHES edges created
30000 PHP_REACHES edges created
30162 PHP_REACHES edges created
173 PHP_REACHES edges created
37663 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 14048 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:02.215160.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 72 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:20.689279.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 62810
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 53188
Added 1558 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:50.254887.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 2017 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.304134.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:08.741303.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 62810
Error! AST Method should have parameters but the parameters cannot be matched. FuncID: 53188
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:27.296015.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.141416.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.026012.

72 CALLS edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
3575 PHP_REACHES edges created
3647 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 2304 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.287759.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
46 SQL operations to process.
implode(";", $statements)
SQL command (implode(";", $statements)) cannot be parsed correct.
sprintf("CREATE TABLE %s (
" . "  server_url VARCHAR(2047) NOT NULL DEFAULT \'\',
" . "  timestamp INTEGER NOT NULL,
" . "  salt CHAR(40) NOT NULL,
" . "  UNIQUE (server_url(255), timestamp, salt)
" . ") TYPE=InnoDB", $this->nonces_table_name)
SQL command (sprintf("CREATE TABLE %s ( " . " server_url VARCHAR(2047) NOT NULL DEFAULT \'\', " . " timestamp INTEGER NOT NULL, " . " salt CHAR(40) NOT NULL, " . " UNIQUE (server_url(255), timestamp, salt) " . ") TYPE=InnoDB", $this->nonces_table_name)) cannot be parsed correct.
sprintf("CREATE TABLE %s(
" . "  server_url VARCHAR(2047) NOT NULL DEFAULT \'\',
" . "  handle VARCHAR(255) NOT NULL,
" . "  secret BLOB NOT NULL,
" . "  issued INTEGER NOT NULL,
" . "  lifetime INTEGER NOT NULL,
" . "  assoc_type VARCHAR(64) NOT NULL,
" . "  PRIMARY KEY (server_url(255), handle)
" . ") TYPE=InnoDB", $this->associations_table_name)
SQL command (sprintf("CREATE TABLE %s( " . " server_url VARCHAR(2047) NOT NULL DEFAULT \'\', " . " handle VARCHAR(255) NOT NULL, " . " secret BLOB NOT NULL, " . " issued INTEGER NOT NULL, " . " lifetime INTEGER NOT NULL, " . " assoc_type VARCHAR(64) NOT NULL, " . " PRIMARY KEY (server_url(255), handle) " . ") TYPE=InnoDB", $this->associations_table_name)) cannot be parsed correct.
sprintf("DELETE FROM %s WHERE timestamp < %d", $this->nonces_table_name, $v)
SQL command (sprintf("DELETE FROM %s WHERE timestamp < %d", $this->nonces_table_name, $v)) cannot be parsed correct.
sprintf("DELETE FROM %s WHERE issued + lifetime < %d", $this->associations_table_name, time())
SQL command (sprintf("DELETE FROM %s WHERE issued + lifetime < %d", $this->associations_table_name, time())) cannot be parsed correct.
SELECT url FROM openid_identity_table() WHERE user_id = get_userdata_by_various($id_or_name)_ID
SELECT url FROM openid_identity_table() WHERE user_id = get_userdata_by_various($id_or_name)_ID
SQL command (SELECT url FROM openid_identity_table() WHERE user_id = get_userdata_by_various($id_or_name)_ID) cannot be parsed correct.
SELECT comment_ID, comment_post_ID from openid_table_prefix(true)comments WHERE openid=1 OR comment_type=%s
SELECT comment_ID, comment_post_ID from openid_table_prefix(true)comments WHERE openid=1 OR comment_type=openid
SELECT comment_ID, comment_post_ID from openid_table_prefix(true)comments WHERE openid=1 OR comment_type=openid
SQL command (SELECT comment_ID, comment_post_ID from openid_table_prefix(true)comments WHERE openid=1 OR comment_type=openid) cannot be parsed correct.
SHOW COLUMNS FROM openid_table_prefix(true)comments LIKE "openid"
SQL command (SHOW COLUMNS FROM openid_table_prefix(true)comments LIKE "openid") cannot be parsed correct.
SHOW COLUMNS FROM openid_table_prefix(true)comments LIKE "openid"
SQL command (SHOW COLUMNS FROM openid_table_prefix(true)comments LIKE "openid") cannot be parsed correct.
openid
SQL command (openid) cannot be parsed correct.
openid
SQL command (openid) cannot be parsed correct.
INSERT INTO openid_identity_table() (user_id,url,hash) VALUES ( wp_get_current_user(), %s, MD5(%s) )
INSERT INTO openid_identity_table() (user_id,url,hash) VALUES ( wp_get_current_user(), $url, MD5(%s) )
INSERT INTO openid_identity_table() (user_id,url,hash) VALUES ( wp_get_current$urlser(), $url, MD5(%s) )
INSERT INTO openid_identity_table() (user_id,url,hash) VALUES ( wp_get_current$urlser(), $url, MD5(%s) )
SQL command (INSERT INTO openid_identity_table() (user_id,url,hash) VALUES ( wp_get_current$urlser(), $url, MD5(%s) )) cannot be parsed correct.
DELETE FROM openid_identity_table() WHERE user_id = wp_get_current_user() AND url = %s
DELETE FROM openid_identity_table() WHERE user_id = wp_get_current_user() AND url = $identity_url
DELETE FROM openid_identity_table() WHERE user_id = wp_get_current_user() AND url = $identity_url
SQL command (DELETE FROM openid_identity_table() WHERE user_id = wp_get_current_user() AND url = $identity_url) cannot be parsed correct.
DELETE FROM openid_identity_table() WHERE user_id = $user_id
DELETE FROM openid_identity_table() WHERE user_id = $user_id
SQL command (DELETE FROM openid_identity_table() WHERE user_id = $user_id) cannot be parsed correct.
query
SQL command (query) cannot be parsed correct.
query
SQL command (query) cannot be parsed correct.
$iname
SQL command ($iname) cannot be parsed correct.
sprintf("SELECT * FROM %s LIMIT 0", $table_name)
SQL command (sprintf("SELECT * FROM %s LIMIT 0", $table_name)) cannot be parsed correct.
sprintf("DELETE FROM %s", $this->associations_table_name)
SQL command (sprintf("DELETE FROM %s", $this->associations_table_name)) cannot be parsed correct.
sprintf("DELETE FROM %s", $this->nonces_table_name)
SQL command (sprintf("DELETE FROM %s", $this->nonces_table_name)) cannot be parsed correct.
$this_set_assoc_update_assoc
SQL command ($this_set_assoc_update_assoc) cannot be parsed correct.
$this_set_assoc_insert_assoc
SQL command ($this_set_assoc_insert_assoc) cannot be parsed correct.
sprintf("DELETE FROM %s", $this->associations_table_name)
SQL command (sprintf("DELETE FROM %s", $this->associations_table_name)) cannot be parsed correct.
sprintf("DELETE FROM %s", $this->nonces_table_name)
SQL command (sprintf("DELETE FROM %s", $this->nonces_table_name)) cannot be parsed correct.
sprintf("SELECT * FROM %s LIMIT 0", $table_name)
SQL command (sprintf("SELECT * FROM %s LIMIT 0", $table_name)) cannot be parsed correct.
$this_sql_add_nonce
SQL command ($this_sql_add_nonce) cannot be parsed correct.
$this_sql_nonce_table
SQL command ($this_sql_nonce_table) cannot be parsed correct.
$this_sql_assoc_table
SQL command ($this_sql_assoc_table) cannot be parsed correct.
$this_sql_set_assoc
SQL command ($this_sql_set_assoc) cannot be parsed correct.
$this_sql_clean_nonce
SQL command ($this_sql_clean_nonce) cannot be parsed correct.
$this_sql_clean_assoc
SQL command ($this_sql_clean_assoc) cannot be parsed correct.
$this_sql_remove_assoc
SQL command ($this_sql_remove_assoc) cannot be parsed correct.
query
SQL command (query) cannot be parsed correct.
$xpath
SQL command ($xpath) cannot be parsed correct.
$xpath
SQL command ($xpath) cannot be parsed correct.
DROP TABLE IF EXISTS openid_identity_table()
SQL command (DROP TABLE IF EXISTS openid_identity_table()) cannot be parsed correct.
DELETE FROM $wpdb WHERE meta_key=openid_comments
DELETE FROM $wpdb WHERE meta_key=openid_comments
SQL command (DELETE FROM $wpdb WHERE meta_key=openid_comments) cannot be parsed correct.
DROP TABLE IF EXISTS openid_table_prefix(true)openid_nonces
SQL command (DROP TABLE IF EXISTS openid_table_prefix(true)openid_nonces) cannot be parsed correct.
DROP TABLE IF EXISTS openid_table_prefix(true)openid_associations
SQL command (DROP TABLE IF EXISTS openid_table_prefix(true)openid_associations) cannot be parsed correct.
ALTER table $comments_table DROP COLUMN openid
SQL command (ALTER table $comments_table DROP COLUMN openid) cannot be parsed correct.
UPDATE $comments_table SET comment_type= WHERE comment_type=%s
UPDATE $comments_table SET comment_type= WHERE comment_type=openid
UPDATE $comments_table SET comment_type= WHERE comment_type=openid
SQL command (UPDATE $comments_table SET comment_type= WHERE comment_type=openid) cannot be parsed correct.
DROP TABLE IF EXISTS openid_table_prefix(true)openid_nonces
SQL command (DROP TABLE IF EXISTS openid_table_prefix(true)openid_nonces) cannot be parsed correct.
DROP TABLE IF EXISTS openid_table_prefix(true)openid_associations
SQL command (DROP TABLE IF EXISTS openid_table_prefix(true)openid_associations) cannot be parsed correct.
ALTER table openid_table_prefix(true)comments DROP COLUMN openid
SQL command (ALTER table openid_table_prefix(true)comments DROP COLUMN openid) cannot be parsed correct.
UPDATE openid_table_prefix(true)comments SET comment_type= WHERE comment_type=%s
UPDATE openid_table_prefix(true)comments SET comment_type= WHERE comment_type=openid
UPDATE openid_table_prefix(true)comments SET comment_type= WHERE comment_type=openid
SQL command (UPDATE openid_table_prefix(true)comments SET comment_type= WHERE comment_type=openid) cannot be parsed correct.
DELETE FROM $usermeta_table WHERE meta_key=has_openid OR meta_key=%s
DELETE FROM $usermeta_table WHERE meta_key=has_openid OR meta_key=registered_with_openid
DELETE FROM $usermeta_table WHERE meta_key=has_openid OR meta_key=registered_with_openid
SQL command (DELETE FROM $usermeta_table WHERE meta_key=has_openid OR meta_key=registered_with_openid) cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [66509, 29223, 29474, 29811, 29837, 61812, 66729, 66598, 66693, 4958, 4994, 8548, 8574, 8611, 17927, 23430, 25075, 29131, 30224, 30240, 36905, 36948, 37995, 38011, 37915, 39094, 38395, 38443, 38500, 39447, 39492, 38762, 55408, 56885, 56903, 66533, 66544, 66563, 66579, 66619, 66630, 66658, 66674, 66853, 66864, 66900]
Added 0 SQL nodes. 0 out of 46 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:08.021758.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'<div class="updated"><p><strong>Success:</strong> openid_message()</p></div>'' cannot be parsed correct.
HTML code '$'<div class="error"><p><strong>Warning:</strong> openid_message()</p></div>'' cannot be parsed correct.
HTML code '$'<div class="error"><p><strong>Error:</strong> openid_message()</p></div>'' cannot be parsed correct.
HTML code '$'<div class="error"><p><strong>Error:</strong> $error</p></div>'' cannot be parsed correct.
HTML code '$'plugin_dir_url()f/icon.png'' cannot be parsed correct.
HTML code '$'<tr><td colspan="2">No Verified Accounts.</td></tr>'' cannot be parsed correct.
HTML code '$'
						<tr>
							<th scope="row" class="check-column"><input type="checkbox" name="delete[]" value="md5($url)" /></th>
							<tdopenid_display_identity($url)</td>
						</tr>'' cannot be parsed correct.
HTML code '$'plugin_dir_url()f/icon.png'' cannot be parsed correct.
HTML code '$'<tr><td colspan="3">No Trusted Sites.</td></tr>'' cannot be parsed correct.
HTML code '$'
						<tr>
							<th scope="row" class="check-column"><input type="checkbox" name="delete[]" value="md5($site)" /></th>
							<tdtrim($site)_url</td>
							<td>date(get_option("date_format") . " - " . get_option("time_format"), $site["last_login"])</td>
						</tr>'' cannot be parsed correct.
HTML code '$'<div class="updated"><p><strong>OpenID cache refreshed.</strong></p></div>'' cannot be parsed correct.
HTML code '$'plugin_dir_url()f/icon.png'' cannot be parsed correct.
HTML code '$'<input type="checkbox" id="$option_name" name="openid_cap[htmlentities($key)]$wp_roles->get_role($key) /><label for=openid_cap[htmlentities($key)]">_x($name, null)</label><br />PHP_EOL'' cannot be parsed correct.
HTML code '$'
						<p class="error">A Blog Owner cannot be set for this blog.  To set a Blog Owner, first remove the following line from your <code>wp-config.php</code>:<br /><code style="margin:1em;">define("OPENID_DISALLOW_OWNER", 1);</code>
						</p>'' cannot be parsed correct.
HTML code '$'<select id="openid_blog_owner" name="openid_blog_owner"><option value="">(none)</option>'' cannot be parsed correct.
HTML code '$'<option value=$user$selected>$user</option>'' cannot be parsed correct.
HTML code '$'<p class="error">sprintf(__("Only the current Blog Owner (%s) can change this setting.", "openid"), $blog_owner)</p>'' cannot be parsed correct.
HTML code '$'<p><strong>Status information:</strong> All Systems Nominal<small> (<a href="#TB_inline?height=600&width=800&inlineId=openid_system_status" id="openid_status_link" class="thickbox" title="System Status"Toggle More/Less</a>)</small> </p>'' cannot be parsed correct.
HTML code '$'<p><strong>Plugin is currently disabled. Fix the problem, then Deactivate/Reactivate the plugin.</strong></p>'' cannot be parsed correct.
HTML code '$'<span style=\'color:red;\'>[FAIL]</span> $name'' cannot be parsed correct.
HTML code '$'<span style=\'color:green;\'>[OK]</span> $name'' cannot be parsed correct.
HTML code '$'<span style=\'color:grey;\'>[INFO]</span> $name'' cannot be parsed correct.
HTML code '$': </strong>'' cannot be parsed correct.
HTML code '$'<ul><li>implode("</li><li>", $message)</li></ul>$message'' cannot be parsed correct.
HTML code '$'checked(true, get_option("openid_enable_commentform"))'' cannot be parsed correct.
HTML code '$'checked(true, get_option("openid_no_require_name"))'' cannot be parsed correct.
HTML code '$'checked(true, get_option("openid_enable_approval"))'' cannot be parsed correct.
HTML code '$'
<table class="form-table">
<tr>
	<th><label for="openid_delegate">OpenID Delegation</label></th>
	<td>
		<p style="margin-top:0;">OpenID Delegation allows you to use an external OpenID provider of your choice.</p>
		<p>
			<input type="text" id="openid_delegate" name="openid_delegate" class="regular-text code openid_link" value="get_user_meta($user->ID, "openid_delegate", true)" />To delegate, enter a valid OpenID. Otherwise leave this blank.</p>
	</td>
</tr>
</table>
'' cannot be parsed correct.
HTML code '$'site_url("index.php")'' cannot be parsed correct.
HTML code '$'wp_create_nonce("openid_ajax")'' cannot be parsed correct.
HTML code '$'$title'' cannot be parsed correct.
HTML code '$'ob_get_contents()'' cannot be parsed correct.
HTML code '$'{ "valid":truefalse, "nonce":"wp_create_nonce("openid_ajax")" '' cannot be parsed correct.
HTML code '$'
	<p style="margin-bottom: 8px;">
		<label style="display: block; margin-bottom: 5px;">Or login using an OpenID<br />
		<input type="text" name="openid_identifier" id="openid_identifier" class="input openid_identifier" value="" size="20" tabindex="25" /></label>
	</p>

	<p style="font-size: 0.9em; margin: 8px 0 24px 0;" id="what_is_openid">
		<a href="http://openid.net/what/" target="_blank">Learn about OpenID</a>
	</p>'' cannot be parsed correct.
HTML code '$'
		<p>
			<label style="display: block; margin-bottom: 5px;">Or register using an OpenID:<br />
			<input type="text" name="openid_identifier" id="openid_identifier" class="input openid_identifier" value="" size="20" tabindex="25" /></label>
		</p>

		<p style="float: left; font-size: 0.8em; margin: 0.8em 0;" id="what_is_openid">
			<a href="http://openid.net/what/" target="_blank">Learn about OpenID</a>
		</p>

	</div>'' cannot be parsed correct.
HTML code '$'<h1>OpenID Login Error</h1>'' cannot be parsed correct.
HTML code '$'<p>sprintf(__("Your full OpenID is: %s", "openid"), "<strong>" . $author_url . "</strong>")</p>'' cannot be parsed correct.
HTML code '$'
					<form method="post">
						<p class="submit">
							<input type="submit" value="Continue" />
							<input type="hidden" name="action" value="cancel" />
							<input type="hidden" name="openid_server" value="1" />
						</p>wp_nonce_field("openid-server_cancel", "_wpnonce", true, false)</form>'' cannot be parsed correct.
HTML code '$'
			<style type="text/css">
				#banner { margin-bottom: 4em; }
				#banner #site { float: left; color: #555; }
				#banner #loggedin { font-size: 0.7em; float: right; }
				p.trust_form_add {
					margin: 3em auto 1em; padding: 0.5em; border: 1px solid #999; background: #FFEBE8; width: 80%; font-size: 0.8em; -moz-border-radius: 3px;
				}
				#submit { font-size: 18px; padding: 10px 35px; margin-left: 1em; }
			</style>

			<div id="banner">
				<div id="site">get_option("blogname")</div>'' cannot be parsed correct.
HTML code '$'
				<div id="loggedin">sprintf(__("Logged in as %1$s (%2$s). <a href="%3$s">Use a different account?</a>", "openid"), $user->display_name, $user->user_login, $logout_url)</div>'' cannot be parsed correct.
HTML code '$'
			</div>

			<form action=openid_server_url()" method="post">
			<h1>Verify Your Identity</h1>
			<p style="margin: 1.5em 0 1em 0;">sprintf(__("%s has asked to verify your identity.", "openid"), "<strong>" . $request->trust_root . "</strong>")</p>

			<p style="margin: 1em 0;">Click <strong>Continue</strong> to verify your identity and login without creating a new password.</p>'' cannot be parsed correct.
HTML code '$'
			<p class="submit" style="text-align: center; margin-top: 2.4em;">
				<a href="add_query_arg("openid_trust", "cancel", openid_server_url())"Cancel and go back</a>
				<input type="submit" id="submit" name="openid_trust" value="Continue" />
			</p>

			<p style="margin: 3em 0 1em 0; font-size: 0.8em;">sprintf(__("Manage or remove access on the <a href="%s" target="_blank">Trusted Sites</a> page.", "openid"), admin_url(current_user_can("edit_users")"users.php""profile.php" . "?page=openid_trusted_sites"))</p>
			<p style="margin: 1em 0; font-size: 0.8em;">sprintf(__("<a href="%s" target="_blank">Edit your profile</a> to change the information that gets shared with Trusted Sites.", "openid"), admin_url("profile.php"))</p>
		'' cannot be parsed correct.
HTML code '$'
					<link rel="openid.server" href="$service_URI" />
					<link rel="openid.delegate" href="$service_openid:Delegate" /'' cannot be parsed correct.
HTML code '$'
					<link rel="openid2.provider" href="$service_URI" />
					<link rel="openid2.local_id" href="$service_LocalID" /'' cannot be parsed correct.
HTML code '$'
			<link rel="openid2.provider" href="openid_server_url()" />
			<link rel="openid2.local_id" href="get_author_posts_url($user->ID)" />
			<link rel="openid.server" href="openid_server_url()" />
			<link rel="openid.delegate" href="get_author_posts_url($user->ID)" /'' cannot be parsed correct.
HTML code '$'
		<p class="trust_form_add" style="padding: 0">
			<input type="checkbox" id="include_sreg" name="include_sreg" checked="checked" style="display: block; float: left; margin: 0.8em;" />
			<label for="include_sreg" style="display: block; padding: 0.5em 2em;">sprintf(__("Also grant access to see my %s.", "openid"), $attr_string)</label>
		</p>'' cannot be parsed correct.
HTML code '$'</th>
					<td>
						'' cannot be parsed correct.
HTML code '$'" /></p>
		</form>
	</div>
	'' cannot be parsed correct.
HTML code '$'</h2>

			<p>'' cannot be parsed correct.
HTML code '$'</p>

		<div class="tablenav">
			<div class="alignleft actions">
				<select name="action">
					<option value="-1" selected="selected">'' cannot be parsed correct.
HTML code '$'</label></th>
				<td><input id="openid_identifier" class="regular-text code" name="openid_identifier" /></td>
			</tr>
		</table>
		'' cannot be parsed correct.
HTML code '$'" />
			<input type="hidden" name="action" value="add" >
		</p>
		</form>
	</div>
'' cannot be parsed correct.
HTML code '$'<div class="updated"><p>'' cannot be parsed correct.
HTML code '$'</p></div>'' cannot be parsed correct.
HTML code '$'<div class="updated"><p>'' cannot be parsed correct.
HTML code '$'</p></div>'' cannot be parsed correct.
HTML code '$'</label></th>
					<td>
						<textarea id="sites" name="sites" cols="60" rows="5"></textarea><br />'' cannot be parsed correct.
HTML code '$'" />
				<input type="hidden" name="action" value="add" >
			</p>

		</form>
	</div>
'' cannot be parsed correct.
HTML code '$'</th>
					<td>

						<p>'' cannot be parsed correct.
HTML code '$'</select>'' cannot be parsed correct.
HTML code '$'<div id="openid_system_status" class="updated">'' cannot be parsed correct.
HTML code '$'<div><strong>'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'</div>
	<script type="text/javascript">
		jQuery("#openid_system_status").hide();
	</script>'' cannot be parsed correct.
HTML code '$'					</label>
				</td>
			</tr>
		</table>

		<script type="text/javascript">
			jQuery(function() {
				jQuery(\'#openid_options\').hide();
				var lastp = jQuery(\'td:has([name="registration"])\').children("p:last");
				jQuery(\'#openid_required_for_registration\').parent().insertBefore(lastp).wrap(\'<p></p>\');
			});
		</script>
'' cannot be parsed correct.
HTML code '$' />
		'' cannot be parsed correct.
HTML code '$'	</label>
	'' cannot be parsed correct.
HTML code '$'		</label>
		<br />

		'' cannot be parsed correct.
HTML code '$'			</label>
			<br />
			'' cannot be parsed correct.
HTML code '$' />
						'' cannot be parsed correct.
HTML code '$'<script type="text/javascript">stylize_profilelink()</script>'' cannot be parsed correct.
HTML code '$'<hr id="openid_split" style="clear: both; margin-bottom: 1.0em; border: 0; border-top: 1px solid #999; height: 1px;" />'' cannot be parsed correct.
HTML code '$'
	<div style="width:100%;">'' cannot be parsed correct.
HTML code '$'<hr id="openid_split" style="clear: both; margin-bottom: 1.5em; border: 0; border-top: 1px solid #999; height: 1px;" />'' cannot be parsed correct.
HTML code '$'
		<script type="text/javascript">
			jQuery(function() {
				jQuery("#reg_passmail").insertBefore("#openid_split");
				jQuery("p.submit").css("margin", "1em 0").clone().insertBefore("#openid_split");
			});
		</script>'' cannot be parsed correct.
HTML code '$'<p>'' cannot be parsed correct.
HTML code '$'</p>'' cannot be parsed correct.
HTML code '$'
			</form>'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:08.468611.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.034135.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 27 do_action/apply_filters calls and 67 add_action/add_filter calls. Now connecting do-add pairs.
Added 23 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:02.920173.

23 PHP_REACHES edges created
23 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running DbplusDetector
### Start running FrontBaseDetector
### Finish running DbaseDetector
### Start running HashDetector
### Finish running FileProDetector
### Start running IBMDb2Detector
### Finish running CubridDetector
### Start running InformixDetector
### Finish running FirebirdInterBaseDetector
### Start running IngresDetector
### Finish running FrontBaseDetector
### Start running maxdbDetector
### Finish running InformixDetector
### Start running MongoDbDetector
### Finish running IBMDb2Detector
### Start running MongoDetector
### Finish running IngresDetector
### Start running MsqlDetector
### Finish running MongoDetector
### Start running MySQLDetector
### Finish running ArrayElementDetector
### Start running MySQLiDetector
### Finish running MySQLDetector
### Start running Oci8Detector
### Finish running MsqlDetector
### Start running OpenSSLDetector
### Finish running MongoDbDetector
### Start running ParadoxDetector
### Finish running Oci8Detector
### Start running PasswordHashingDetector
### Finish running ParadoxDetector
### Start running PhpCurlDetector
### Finish running PasswordHashingDetector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running HashDetector
### Start running PHPRetrievalDetector
### Finish running OpenSSLDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running maxdbDetector
### Start running PhpVarDetector
### Finish running MySQLiDetector
### Start running PostgreSQLDetector
### Finish running PHPRetrievalDetector
### Start running PropertyDetector
### Finish running PostgreSQLDetector
### Start running Sqlite3Detector
### Finish running Sqlite3Detector
### Start running SqliteDetector
### Finish running SqliteDetector
### Start running SqlServerDetector
### Finish running PHPStorageDetector
### Start running SybaseDetector
### Finish running PropertyDetector
### Start running TokyoTyrantDetector
### Finish running SybaseDetector
### Start running UserInputDetector
### Finish running TokyoTyrantDetector
### Start running VariableDetector
### Finish running SqlServerDetector
### Start running WordpressHashingFnDetector
### Finish running PhpCurlDetector
### Start running WordPressRemoteDetector
### Finish running WordPressRemoteDetector
### Start running WordPressRetrievalDetector
### Finish running UserInputDetector
### Start running WordPressStorageDetector
### Finish running PhpVarDetector
### Start running WP_UserDetector
### Finish running WordpressHashingFnDetector
### Start running GenericDatabaseUsageDetector
### Finish running WP_UserDetector
### Start running GenericEncryptionDetector
### Finish running PHPIncludedDetector
### Start running DeletionDetector
### Finish running GenericDatabaseUsageDetector
### Start running UninstallDetector
### Finish running VariableDetector
### Finish running GenericEncryptionDetector
### Finish running UninstallDetector
### Finish running DeletionDetector
### Finish running WordPressStorageDetector
### Finish running WordPressRetrievalDetector
### Finished running detectors
lib/Auth/OpenID/HMAC.php:32
  - hash called with unapproved hash algorithm sha1. Ignore if this is not encrypting personal information
lib/Auth/OpenID/HMAC.php:67
  - hash_hmac called with unapproved hash algorithm sha1. Ignore if this is not encrypting personal information
lib/Auth/OpenID/HMAC.php:85
  - hash called with approved hash algorithm sha256.
lib/Auth/OpenID/HMAC.php:99
  - hash_hmac called with approved hash algorithm sha256. 

admin_panels.php:341
  - MD5 called with parameters [url]. Ignore if [url] does not contain personal information.
admin_panels.php:391
  - MD5 called with parameters [site]. Ignore if [site] does not contain personal information.
admin_panels.php:738
  - MD5 called with parameters [url]. Ignore if [url] does not contain personal information.
common.php:354
  - MD5 called with parameters [microtime, uniqid]. Ignore if [microtime, uniqid] does not contain personal information.
lib/Auth/OpenID/HMAC.php:29
  - SHA1 called with parameters []. Ignore if [] does not contain personal information.
lib/Auth/OpenID/HMAC.php:32
  - SHA1 called with parameters []. Ignore if [] does not contain personal information.
lib/Auth/OpenID/HMAC.php:33
  - SHA1 called with parameters []. Ignore if [] does not contain personal information.
lib/Auth/OpenID/HMAC.php:35
  - SHA1 called with parameters [text]. Ignore if [text] does not contain personal information.
lib/Auth/OpenID/HMAC.php:66
  - SHA1 called with parameters []. Ignore if [] does not contain personal information.
lib/Auth/OpenID/HMAC.php:67
  - SHA1 called with parameters []. Ignore if [] does not contain personal information.
lib/Auth/OpenID/MemcachedStore.php:199
  - SHA1 called with parameters [server_url]. Ignore if [server_url] does not contain personal information.
lib/Auth/OpenID/MemcachedStore.php:199
  - SHA1 called with parameters [salt]. Ignore if [salt] does not contain personal information.
lib/Auth/OpenID/MemcachedStore.php:214
  - SHA1 called with parameters [server_url]. Ignore if [server_url] does not contain personal information.
lib/Auth/OpenID/MemcachedStore.php:214
  - SHA1 called with parameters [handle]. Ignore if [handle] does not contain personal information.
lib/Auth/OpenID/MemcachedStore.php:225
  - SHA1 called with parameters [server_url]. Ignore if [server_url] does not contain personal information.
lib/Auth/OpenID/PredisStore.php:179
  - SHA1 called with parameters [server_url]. Ignore if [server_url] does not contain personal information.
lib/Auth/OpenID/PredisStore.php:179
  - SHA1 called with parameters [salt]. Ignore if [salt] does not contain personal information.
lib/Auth/OpenID/PredisStore.php:189
  - SHA1 called with parameters [server_url]. Ignore if [server_url] does not contain personal information.
lib/Auth/OpenID/PredisStore.php:189
  - SHA1 called with parameters [handle]. Ignore if [handle] does not contain personal information.
lib/Auth/OpenID/PredisStore.php:199
  - SHA1 called with parameters [server_url]. Ignore if [server_url] does not contain personal information.
login.php:38
  - MD5 called with parameters [identity_url]. Ignore if [identity_url] does not contain personal information.
login.php:103
  - MD5 called with parameters [identity_url]. Ignore if [identity_url] does not contain personal information.
server.php:296
  - MD5 called with parameters [request, trust_root]. Ignore if [request, trust_root] does not contain personal information.
server.php:475
  - MD5 called with parameters [request, trust_root]. Ignore if [request, trust_root] does not contain personal information.
server_ext.php:127
  - MD5 called with parameters [request, trust_root]. Ignore if [request, trust_root] does not contain personal information. 

lib/Auth/OpenID.php:170
  - RETRIEVAL call to file_get_contents("php://input").
  - Data types: file
lib/Auth/OpenID/CryptUtil.php:63
  - RETRIEVAL call to fread($f, $num_bytes).
  - Data types: file
lib/Auth/OpenID/FileStore.php:336
  - RETRIEVAL call to fread($assoc_file, $filesize).
  - Data types: file
lib/Auth/OpenID/FileStore.php:448
  - RETRIEVAL call to fread($association_file, filesize($association_filename)).
  - Data types: file
lib/Auth/Yadis/PlainHTTPFetcher.php:119
  - RETRIEVAL call to fgets($sock, 1024).
  - Data types: file
lib/Auth/Yadis/PlainHTTPFetcher.php:224
  - RETRIEVAL call to fgets($sock, 128).
  - Data types: file 

lib/Auth/OpenID/FileStore.php:214
  - STORAGE call to fwrite($tmp_file, $association_s).
  - Data types: file
lib/Auth/Yadis/PlainHTTPFetcher.php:113
  - STORAGE call to fputs($sock, implode("
", $headers) . "

").
  - Data types: file
lib/Auth/Yadis/PlainHTTPFetcher.php:219
  - STORAGE call to fputs($sock, $request).
  - Data types: file 

server_ext.php:171
  - object property '$user->user_email' of personal types {'email'} is found.
  - Data types: email 

comments.php:107
  - variable '$comment_author_email' of personal types {'email'} is found.
  - Data types: email
comments.php:110
  - variable '$comment_author_email' of personal types {'email'} is found.
  - Data types: email
comments.php:112
  - variable '$comment_author_email' of personal types {'email'} is found.
  - Data types: email
common.php:237
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
common.php:238
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
common.php:247
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
common.php:263
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
common.php:271
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
common.php:338
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
common.php:339
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
common.php:343
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
common.php:344
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
common.php:348
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
common.php:349
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
common.php:352
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
common.php:353
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
common.php:471
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
common.php:472
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
common.php:472
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
common.php:473
  - variable '$email' of personal types {'email'} is found.
  - Data types: email
server.php:178
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
server.php:179
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta 

admin_panels.php:756
  - CRYPTOGRAPHY call to wp_update_user(["ID" => $user->ID, "user_url" => $identities[0]]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
admin_panels.php:793
  - CRYPTOGRAPHY call to wp_update_user(["ID" => $user->ID, "user_url" => $identity_url]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user 

admin_panels.php:40
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
admin_panels.php:47
  - RETRIEVAL call to get_user_meta($user->ID, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin_panels.php:65
  - RETRIEVAL call to get_option("users_can_register") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_panels.php:171
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
admin_panels.php:201
  - RETRIEVAL call to get_users() alters data types {'user_meta', 'user'}. Returns (array).
  - Data types: user_meta, user
admin_panels.php:216
  - RETRIEVAL call to get_option("home") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_panels.php:227
  - RETRIEVAL call to get_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_panels.php:234
  - RETRIEVAL call to get_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_panels.php:279
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
admin_panels.php:371
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
admin_panels.php:377
  - RETRIEVAL call to get_user_meta($user->ID, "openid_trusted_sites", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin_panels.php:412
  - RETRIEVAL call to get_user_meta($user->ID, "openid_trusted_sites", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin_panels.php:467
  - RETRIEVAL call to get_user_meta($user->ID, "openid_trusted_sites", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin_panels.php:473
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_panels.php:473
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_panels.php:589
  - RETRIEVAL call to get_option("openid_db_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_panels.php:642
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
admin_panels.php:709
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
admin_panels.php:778
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
admin_panels.php:815
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
admin_panels.php:849
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
admin_panels.php:858
  - RETRIEVAL call to get_user_meta($user->ID, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
admin_panels.php:962
  - RETRIEVAL call to get_option("users_can_register") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_panels.php:965
  - RETRIEVAL call to get_option("openid_required_for_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_panels.php:989
  - RETRIEVAL call to get_option("openid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_panels.php:994
  - RETRIEVAL call to get_option("openid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_panels.php:996
  - RETRIEVAL call to get_option("require_name_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_panels.php:999
  - RETRIEVAL call to get_option("openid_no_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin_panels.php:1007
  - RETRIEVAL call to get_option("openid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
comments.php:16
  - RETRIEVAL call to get_option("openid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
comments.php:20
  - RETRIEVAL call to get_option("openid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
comments.php:105
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
comments.php:109
  - RETRIEVAL call to get_option("require_name_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
comments.php:150
  - RETRIEVAL call to get_option("openid_no_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
comments.php:225
  - RETRIEVAL call to get_comment($comment_id). Passed arguments: 0: $comment (WP_Comment|string|int). Returns (WP_Comment|array|null).
comments.php:346
  - RETRIEVAL call to get_comment($id). Passed arguments: 0: $comment (WP_Comment|string|int). Returns (WP_Comment|array|null).
comments.php:347
  - RETRIEVAL call to get_post_meta($comment->comment_post_ID, "openid_comments", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
comments.php:362
  - RETRIEVAL call to get_comment($id). Passed arguments: 0: $comment (WP_Comment|string|int). Returns (WP_Comment|array|null).
comments.php:363
  - RETRIEVAL call to get_post_meta($comment->comment_post_ID, "openid_comments", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
common.php:73
  - RETRIEVAL call to get_option("openid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
common.php:82
  - RETRIEVAL call to get_option("show_on_front") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
common.php:238
  - RETRIEVAL call to get_user_by("login", $username) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
common.php:284
  - RETRIEVAL call to get_option("home") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
common.php:441
  - RETRIEVAL call to get_option("openid_comment_displayname_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
common.php:735
  - RETRIEVAL call to get_option("blog_charset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
consumer.php:249
  - RETRIEVAL call to get_option("openid_xrds_returnto") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
login.php:76
  - RETRIEVAL call to get_option("users_can_register") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
login.php:90
  - RETRIEVAL call to get_option("siteurl") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
login.php:162
  - RETRIEVAL call to get_option("openid_required_for_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
login.php:200
  - RETRIEVAL call to get_option("openid_required_for_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
login.php:213
  - RETRIEVAL call to get_option("openid_required_for_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
openid.php:71
  - RETRIEVAL call to get_option("openid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
openid.php:71
  - RETRIEVAL call to get_option("openid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
openid.php:104
  - RETRIEVAL call to get_comment($id). Passed arguments: 0: $comment (WP_Comment|string|int). Returns (WP_Comment|array|null).
openid.php:113
  - RETRIEVAL call to get_post_meta($comment->comment_post_ID, "openid_comments", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
openid.php:184
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
openid.php:190
  - RETRIEVAL call to get_user_by("id", $id_or_name) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
openid.php:192
  - RETRIEVAL call to get_user_by("login", $id_or_name) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
server.php:49
  - RETRIEVAL call to get_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
server.php:50
  - RETRIEVAL call to get_option("home") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
server.php:62
  - RETRIEVAL call to get_user_by("login", get_option("openid_blog_owner")) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
server.php:62
  - RETRIEVAL call to get_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
server.php:73
  - RETRIEVAL call to get_user_meta($user->ID, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
server.php:74
  - RETRIEVAL call to get_user_meta($user->ID, "openid_delegate_services", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
server.php:136
  - RETRIEVAL call to get_user_meta($user->ID, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
server.php:138
  - RETRIEVAL call to get_user_meta($user->ID, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
server.php:143
  - RETRIEVAL call to get_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
server.php:143
  - RETRIEVAL call to get_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
server.php:170
  - RETRIEVAL call to get_user_by("id", $_REQUEST["author"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
server.php:172
  - RETRIEVAL call to get_user_by("login", $_REQUEST["author"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
server.php:179
  - RETRIEVAL call to get_user_by("login", $username) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
server.php:251
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
server.php:261
  - RETRIEVAL call to get_user_meta($user->ID, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
server.php:273
  - RETRIEVAL call to get_option("home") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
server.php:295
  - RETRIEVAL call to get_user_meta($user->ID, "openid_trusted_sites", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
server.php:334
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
server.php:389
  - RETRIEVAL call to get_user_by("login", get_option("openid_blog_owner")) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).
  - Data types: user_meta, user
server.php:389
  - RETRIEVAL call to get_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
server.php:403
  - RETRIEVAL call to get_user_meta($user->ID, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
server.php:404
  - RETRIEVAL call to get_user_meta($user->ID, "openid_delegate_services", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
server.php:451
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
server.php:474
  - RETRIEVAL call to get_user_meta($user->ID, "openid_trusted_sites", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
server.php:502
  - RETRIEVAL call to get_option("blogname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
server.php:505
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
server.php:563
  - RETRIEVAL call to get_user_meta($userid, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
server_ext.php:117
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
server_ext.php:125
  - RETRIEVAL call to get_user_meta($user->ID, "openid_trusted_sites", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
server_ext.php:162
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
server_ext.php:167
  - RETRIEVAL call to get_user_meta($user->ID, "nickname", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
server_ext.php:175
  - RETRIEVAL call to get_userdata($user->ID) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user_meta, user
store.php:25
  - RETRIEVAL call to get_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
store.php:39
  - RETRIEVAL call to get_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
store.php:112
  - RETRIEVAL call to get_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
store.php:134
  - RETRIEVAL call to get_option("openid_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
store.php:168
  - RETRIEVAL call to get_option("openid_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
store.php:180
  - RETRIEVAL call to get_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
store.php:257
  - RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).
store.php:310
  - RETRIEVAL call to get_post_meta($post_id, "openid_comments", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta 

admin_panels.php:400
  - STORAGE call to update_user_meta($user->ID, "openid_trusted_sites", $trusted_sites) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
admin_panels.php:421
  - STORAGE call to update_user_meta($user->ID, "openid_trusted_sites", array_filter($trusted_sites)) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
admin_panels.php:756
  - STORAGE call to wp_update_user(["ID" => $user->ID, "user_url" => $identities[0]]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
admin_panels.php:793
  - STORAGE call to wp_update_user(["ID" => $user->ID, "user_url" => $identity_url]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
admin_panels.php:875
  - STORAGE call to delete_user_meta($user_id, "openid_delegate") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
admin_panels.php:876
  - STORAGE call to delete_user_meta($user_id, "openid_delegate_services") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
admin_panels.php:878
  - STORAGE call to update_user_meta($user_id, "openid_delegate", $openid_user_delegation_info["url"]) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
admin_panels.php:879
  - STORAGE call to update_user_meta($user_id, "openid_delegate_services", $openid_user_delegation_info["services"]) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
comments.php:352
  - STORAGE call to update_post_meta($comment->comment_post_ID, "openid_comments", array_unique($openid_comments)) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
comments.php:373
  - STORAGE call to update_post_meta($comment->comment_post_ID, "openid_comments", array_unique($new)) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
common.php:31
  - STORAGE call to add_option("openid_associations", [], null, "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).
  - Data types: option
common.php:32
  - STORAGE call to add_option("openid_nonces", [], null, "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).
  - Data types: option
common.php:34
  - STORAGE call to add_option("openid_associations", [], null, "no") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).
  - Data types: option
common.php:35
  - STORAGE call to add_option("openid_nonces", [], null, "no") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).
  - Data types: option
common.php:84
  - STORAGE call to update_option("show_on_front", "posts") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
common.php:88
  - STORAGE call to add_option("openid_enable_commentform", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
common.php:89
  - STORAGE call to add_option("openid_plugin_enabled", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
common.php:90
  - STORAGE call to add_option("openid_plugin_revision", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
common.php:91
  - STORAGE call to add_option("openid_db_revision", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
common.php:92
  - STORAGE call to add_option("openid_enable_approval", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
common.php:93
  - STORAGE call to add_option("openid_xrds_returnto", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
common.php:94
  - STORAGE call to add_option("openid_comment_displayname_length", 12) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
common.php:110
  - STORAGE call to update_option("openid_plugin_revision", OPENID_PLUGIN_REVISION) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
common.php:120
  - STORAGE call to delete_option("oid_db_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:121
  - STORAGE call to delete_option("oid_db_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:122
  - STORAGE call to delete_option("oid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:123
  - STORAGE call to delete_option("oid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:124
  - STORAGE call to delete_option("oid_enable_email_mapping") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:125
  - STORAGE call to delete_option("oid_enable_foaf") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:126
  - STORAGE call to delete_option("oid_enable_localaccounts") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:127
  - STORAGE call to delete_option("oid_enable_loginform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:128
  - STORAGE call to delete_option("oid_enable_selfstyle") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:129
  - STORAGE call to delete_option("oid_enable_unobtrusive") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:130
  - STORAGE call to delete_option("oid_plugin_enabled") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:131
  - STORAGE call to delete_option("oid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:132
  - STORAGE call to delete_option("oid_plugin_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:133
  - STORAGE call to delete_option("oid_trust_root") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:134
  - STORAGE call to delete_option("force_openid_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:135
  - STORAGE call to delete_option("openid_skip_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:137
  - STORAGE call to delete_option("openid_enable_email_mapping") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:138
  - STORAGE call to delete_option("openid_xrds_idib") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:139
  - STORAGE call to delete_option("openid_xrds_eaut") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:150
  - STORAGE call to delete_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:151
  - STORAGE call to delete_option("openid_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:152
  - STORAGE call to delete_option("openid_server_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:153
  - STORAGE call to delete_option("openid_server_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:165
  - STORAGE call to delete_option("openid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:166
  - STORAGE call to delete_option("openid_plugin_enabled") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:167
  - STORAGE call to delete_option("openid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:168
  - STORAGE call to delete_option("openid_db_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:169
  - STORAGE call to delete_option("openid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:170
  - STORAGE call to delete_option("openid_xrds_returnto") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:171
  - STORAGE call to delete_option("openid_comment_displayname_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:172
  - STORAGE call to delete_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:173
  - STORAGE call to delete_option("openid_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:174
  - STORAGE call to delete_option("openid_server_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:175
  - STORAGE call to delete_option("openid_server_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:176
  - STORAGE call to delete_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:177
  - STORAGE call to delete_option("openid_no_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:178
  - STORAGE call to delete_option("openid_required_for_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:355
  - STORAGE call to wp_insert_user($user_data) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user_meta, user
server.php:299
  - STORAGE call to update_user_meta($user->ID, "openid_trusted_sites", $trusted_sites) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
server.php:478
  - STORAGE call to update_user_meta($user->ID, "openid_trusted_sites", $trusted_sites) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
store.php:30
  - STORAGE call to update_option("openid_associations", $associations) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
store.php:115
  - STORAGE call to update_option("openid_associations", $associations) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
store.php:143
  - STORAGE call to update_option("openid_nonces", $nonces) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
store.php:176
  - STORAGE call to update_option("openid_nonces", $nonces) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
store.php:190
  - STORAGE call to update_option("openid_associations", $associations) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
store.php:194
  - STORAGE call to update_option("openid_nonces", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
store.php:195
  - STORAGE call to update_option("openid_associations", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
store.php:259
  - STORAGE call to update_option("openid_db_revision", OPENID_DB_REVISION) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
store.php:312
  - STORAGE call to update_post_meta($post_id, "openid_comments", array_unique($comments)) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta 

admin_panels.php:203
  - WP_User object is created.
  - Data types: user_meta, user
common.php:366
  - WP_User object is created.
  - Data types: user_meta, user
login.php:46
  - WP_User object is created.
  - Data types: user_meta, user
server.php:68
  - WP_User object is created.
  - Data types: user_meta, user
server.php:398
  - WP_User object is created.
  - Data types: user_meta, user 

comments.php:87
  - CRYPTOGRAPHY call to openid_repost_comment_anonymously($_SESSION["openid_comment_post"]).
comments.php:307
  - CRYPTOGRAPHY call to openid_repost_comment_anonymously($_SESSION["openid_comment_post"]).
lib/Auth/OpenID/Association.php:494
  - CRYPTOGRAPHY call to Auth_OpenID_getOnlyEncryptedOrder().
lib/Auth/OpenID/Consumer.php:374
  - CRYPTOGRAPHY call to $auth_req->setAnonymous($anonymous).
lib/Auth/OpenID/HMAC.php:29
  - CRYPTOGRAPHY call to hash_algos().
lib/Auth/OpenID/HMAC.php:32
  - CRYPTOGRAPHY call to hash("sha1", $text, true).
lib/Auth/OpenID/HMAC.php:66
  - CRYPTOGRAPHY call to hash_algos().
lib/Auth/OpenID/HMAC.php:67
  - CRYPTOGRAPHY call to hash_hmac("sha1", $text, $key, true).
lib/Auth/OpenID/HMAC.php:81
  - CRYPTOGRAPHY call to hash_algos().
lib/Auth/OpenID/HMAC.php:85
  - CRYPTOGRAPHY call to hash("sha256", $text, true).
lib/Auth/OpenID/HMAC.php:94
  - CRYPTOGRAPHY call to hash_algos().
lib/Auth/OpenID/HMAC.php:99
  - CRYPTOGRAPHY call to hash_hmac("sha256", $text, $key, true). 

admin_panels.php:875
  - DELETION call to delete_user_meta($user_id, "openid_delegate") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
admin_panels.php:876
  - DELETION call to delete_user_meta($user_id, "openid_delegate_services") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: user_meta
common.php:120
  - DELETION call to delete_option("oid_db_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:121
  - DELETION call to delete_option("oid_db_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:122
  - DELETION call to delete_option("oid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:123
  - DELETION call to delete_option("oid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:124
  - DELETION call to delete_option("oid_enable_email_mapping") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:125
  - DELETION call to delete_option("oid_enable_foaf") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:126
  - DELETION call to delete_option("oid_enable_localaccounts") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:127
  - DELETION call to delete_option("oid_enable_loginform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:128
  - DELETION call to delete_option("oid_enable_selfstyle") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:129
  - DELETION call to delete_option("oid_enable_unobtrusive") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:130
  - DELETION call to delete_option("oid_plugin_enabled") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:131
  - DELETION call to delete_option("oid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:132
  - DELETION call to delete_option("oid_plugin_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:133
  - DELETION call to delete_option("oid_trust_root") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:134
  - DELETION call to delete_option("force_openid_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:135
  - DELETION call to delete_option("openid_skip_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:137
  - DELETION call to delete_option("openid_enable_email_mapping") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:138
  - DELETION call to delete_option("openid_xrds_idib") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:139
  - DELETION call to delete_option("openid_xrds_eaut") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:150
  - DELETION call to delete_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:151
  - DELETION call to delete_option("openid_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:152
  - DELETION call to delete_option("openid_server_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:153
  - DELETION call to delete_option("openid_server_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:165
  - DELETION call to delete_option("openid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:166
  - DELETION call to delete_option("openid_plugin_enabled") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:167
  - DELETION call to delete_option("openid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:168
  - DELETION call to delete_option("openid_db_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:169
  - DELETION call to delete_option("openid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:170
  - DELETION call to delete_option("openid_xrds_returnto") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:171
  - DELETION call to delete_option("openid_comment_displayname_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:172
  - DELETION call to delete_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:173
  - DELETION call to delete_option("openid_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:174
  - DELETION call to delete_option("openid_server_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:175
  - DELETION call to delete_option("openid_server_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:176
  - DELETION call to delete_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:177
  - DELETION call to delete_option("openid_no_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:178
  - DELETION call to delete_option("openid_required_for_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

common.php:120
  - Uninstall deletion call: DELETION call to delete_option("oid_db_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:121
  - Uninstall deletion call: DELETION call to delete_option("oid_db_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:122
  - Uninstall deletion call: DELETION call to delete_option("oid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:123
  - Uninstall deletion call: DELETION call to delete_option("oid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:124
  - Uninstall deletion call: DELETION call to delete_option("oid_enable_email_mapping") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:125
  - Uninstall deletion call: DELETION call to delete_option("oid_enable_foaf") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:126
  - Uninstall deletion call: DELETION call to delete_option("oid_enable_localaccounts") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:127
  - Uninstall deletion call: DELETION call to delete_option("oid_enable_loginform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:128
  - Uninstall deletion call: DELETION call to delete_option("oid_enable_selfstyle") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:129
  - Uninstall deletion call: DELETION call to delete_option("oid_enable_unobtrusive") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:130
  - Uninstall deletion call: DELETION call to delete_option("oid_plugin_enabled") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:131
  - Uninstall deletion call: DELETION call to delete_option("oid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:132
  - Uninstall deletion call: DELETION call to delete_option("oid_plugin_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:133
  - Uninstall deletion call: DELETION call to delete_option("oid_trust_root") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:134
  - Uninstall deletion call: DELETION call to delete_option("force_openid_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:135
  - Uninstall deletion call: DELETION call to delete_option("openid_skip_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:137
  - Uninstall deletion call: DELETION call to delete_option("openid_enable_email_mapping") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:138
  - Uninstall deletion call: DELETION call to delete_option("openid_xrds_idib") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:139
  - Uninstall deletion call: DELETION call to delete_option("openid_xrds_eaut") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:165
  - Uninstall deletion call: DELETION call to delete_option("openid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:166
  - Uninstall deletion call: DELETION call to delete_option("openid_plugin_enabled") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:167
  - Uninstall deletion call: DELETION call to delete_option("openid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:168
  - Uninstall deletion call: DELETION call to delete_option("openid_db_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:169
  - Uninstall deletion call: DELETION call to delete_option("openid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:170
  - Uninstall deletion call: DELETION call to delete_option("openid_xrds_returnto") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:171
  - Uninstall deletion call: DELETION call to delete_option("openid_comment_displayname_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:172
  - Uninstall deletion call: DELETION call to delete_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:173
  - Uninstall deletion call: DELETION call to delete_option("openid_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:174
  - Uninstall deletion call: DELETION call to delete_option("openid_server_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:175
  - Uninstall deletion call: DELETION call to delete_option("openid_server_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:176
  - Uninstall deletion call: DELETION call to delete_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:177
  - Uninstall deletion call: DELETION call to delete_option("openid_no_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
common.php:178
  - Uninstall deletion call: DELETION call to delete_option("openid_required_for_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

By data type:
email
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	PropertyDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
file
	PHPStorageDetector.fputs($sock, $request) - {'file'}
	PHPRetrievalDetector.fread($assoc_file, $filesize) - {'file'}
	PHPStorageDetector.fputs($sock, implode("
", $headers) . "

") - {'file'}
	PHPRetrievalDetector.fread($association_file, filesize($association_filename)) - {'file'}
	PHPRetrievalDetector.fread($f, $num_bytes) - {'file'}
	PHPRetrievalDetector.fgets($sock, 128) - {'file'}
	PHPRetrievalDetector.fgets($sock, 1024) - {'file'}
	PHPRetrievalDetector.file_get_contents("php://input") - {'file'}
	PHPStorageDetector.fwrite($tmp_file, $association_s) - {'file'}
none
	HashDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	GenericEncryptionDetector.openid_repost_comment_anonymously($_SESSION["openid_comment_post"]) - set()
	PHPIncludedDetector.(unknown) - set()
	HashDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	GenericEncryptionDetector.hash_algos() - set()
	WordPressRetrievalDetector.get_comment($id) - set()
	GenericEncryptionDetector.$auth_req->setAnonymous($anonymous) - set()
	PHPIncludedDetector.(unknown) - set()
	GenericEncryptionDetector.hash("sha1", $text, true) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	GenericEncryptionDetector.openid_repost_comment_anonymously($_SESSION["openid_comment_post"]) - set()
	GenericEncryptionDetector.Auth_OpenID_getOnlyEncryptedOrder() - set()
	GenericEncryptionDetector.hash_algos() - set()
	GenericEncryptionDetector.hash_hmac("sha1", $text, $key, true) - set()
	GenericEncryptionDetector.hash_algos() - set()
	HashDetector.(unknown) - set()
	GenericEncryptionDetector.hash("sha256", $text, true) - set()
	GenericEncryptionDetector.hash_algos() - set()
	GenericEncryptionDetector.hash_hmac("sha256", $text, $key, true) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	HashDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	WordPressRetrievalDetector.dbDelta($sql) - set()
	WordPressRetrievalDetector.get_comment($id) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	PHPIncludedDetector.(unknown) - set()
	WordPressRetrievalDetector.get_comment($id) - set()
	WordPressRetrievalDetector.get_comment($comment_id) - set()
option
	WordPressRetrievalDetector.get_option("openid_plugin_revision") - {'option'}
	WordPressRetrievalDetector.get_option("openid_associations") - {'option'}
	WordPressRetrievalDetector.get_option("openid_comment_displayname_length") - {'option'}
	WordPressStorageDetector.add_option("openid_plugin_revision", 0) - {'option'}
	WordPressRetrievalDetector.get_option("openid_nonces") - {'option'}
	WordPressRetrievalDetector.get_option("openid_blog_owner") - {'option'}
	WordPressRetrievalDetector.get_option("blog_charset") - {'option'}
	WordPressRetrievalDetector.get_option("home") - {'option'}
	DeletionDetector.delete_option("oid_plugin_enabled") - {'option'}
	DeletionDetector.delete_option("oid_plugin_revision") - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	UninstallDetector.delete_option("oid_enable_commentform") - {'option'}
	WordPressRetrievalDetector.get_option("openid_plugin_revision") - {'option'}
	DeletionDetector.delete_option("oid_enable_unobtrusive") - {'option'}
	WordPressStorageDetector.delete_option("oid_db_revision") - {'option'}
	UninstallDetector.delete_option("oid_db_version") - {'option'}
	UninstallDetector.delete_option("openid_enable_commentform") - {'option'}
	WordPressStorageDetector.update_option("openid_plugin_revision", OPENID_PLUGIN_REVISION) - {'option'}
	WordPressRetrievalDetector.get_option("home") - {'option'}
	DeletionDetector.delete_option("openid_associations") - {'option'}
	WordPressRetrievalDetector.get_option("show_on_front") - {'option'}
	WordPressStorageDetector.delete_option("openid_server_nonces") - {'option'}
	WordPressStorageDetector.delete_option("openid_server_associations") - {'option'}
	WordPressStorageDetector.delete_option("openid_xrds_eaut") - {'option'}
	DeletionDetector.delete_option("openid_nonces") - {'option'}
	WordPressStorageDetector.delete_option("openid_enable_commentform") - {'option'}
	DeletionDetector.delete_option("openid_xrds_returnto") - {'option'}
	WordPressStorageDetector.delete_option("openid_associations") - {'option'}
	DeletionDetector.delete_option("openid_server_nonces") - {'option'}
	UninstallDetector.delete_option("openid_enable_approval") - {'option'}
	DeletionDetector.delete_option("openid_enable_commentform") - {'option'}
	DeletionDetector.delete_option("oid_plugin_version") - {'option'}
	WordPressStorageDetector.delete_option("openid_xrds_returnto") - {'option'}
	WordPressRetrievalDetector.get_option("openid_blog_owner") - {'option'}
	DeletionDetector.delete_option("openid_plugin_enabled") - {'option'}
	DeletionDetector.delete_option("openid_server_associations") - {'option'}
	UninstallDetector.delete_option("oid_enable_email_mapping") - {'option'}
	WordPressRetrievalDetector.get_option("openid_enable_approval") - {'option'}
	WordPressStorageDetector.delete_option("openid_blog_owner") - {'option'}
	WordPressStorageDetector.delete_option("openid_nonces") - {'option'}
	DeletionDetector.delete_option("openid_comment_displayname_length") - {'option'}
	WordPressRetrievalDetector.get_option("openid_no_require_name") - {'option'}
	WordPressRetrievalDetector.get_option("openid_enable_commentform") - {'option'}
	UninstallDetector.delete_option("oid_plugin_revision") - {'option'}
	DeletionDetector.delete_option("openid_blog_owner") - {'option'}
	UninstallDetector.delete_option("oid_trust_root") - {'option'}
	UninstallDetector.delete_option("oid_enable_approval") - {'option'}
	WordPressStorageDetector.update_option("openid_nonces", $nonces) - {'option'}
	DeletionDetector.delete_option("oid_trust_root") - {'option'}
	UninstallDetector.delete_option("oid_enable_selfstyle") - {'option'}
	WordPressRetrievalDetector.get_option("openid_nonces") - {'option'}
	UninstallDetector.delete_option("oid_enable_loginform") - {'option'}
	DeletionDetector.delete_option("openid_server_associations") - {'option'}
	UninstallDetector.delete_option("oid_plugin_version") - {'option'}
	UninstallDetector.delete_option("openid_no_require_name") - {'option'}
	UninstallDetector.delete_option("oid_plugin_enabled") - {'option'}
	WordPressRetrievalDetector.get_option("openid_enable_approval") - {'option'}
	UninstallDetector.delete_option("openid_xrds_eaut") - {'option'}
	WordPressStorageDetector.delete_option("openid_db_revision") - {'option'}
	WordPressRetrievalDetector.get_option("openid_db_revision") - {'option'}
	WordPressStorageDetector.delete_option("openid_enable_approval") - {'option'}
	WordPressStorageDetector.delete_option("openid_skip_require_name") - {'option'}
	WordPressStorageDetector.delete_option("oid_enable_email_mapping") - {'option'}
	WordPressStorageDetector.update_option("openid_db_revision", OPENID_DB_REVISION) - {'option'}
	WordPressRetrievalDetector.get_option("openid_required_for_registration") - {'option'}
	WordPressStorageDetector.delete_option("oid_plugin_version") - {'option'}
	WordPressStorageDetector.delete_option("oid_plugin_enabled") - {'option'}
	WordPressStorageDetector.delete_option("oid_trust_root") - {'option'}
	DeletionDetector.delete_option("openid_skip_require_name") - {'option'}
	WordPressRetrievalDetector.get_option("users_can_register") - {'option'}
	DeletionDetector.delete_option("openid_associations") - {'option'}
	WordPressStorageDetector.delete_option("oid_enable_commentform") - {'option'}
	DeletionDetector.delete_option("openid_nonces") - {'option'}
	UninstallDetector.delete_option("openid_blog_owner") - {'option'}
	WordPressStorageDetector.delete_option("oid_db_version") - {'option'}
	WordPressStorageDetector.delete_option("oid_enable_approval") - {'option'}
	DeletionDetector.delete_option("oid_enable_foaf") - {'option'}
	DeletionDetector.delete_option("openid_xrds_eaut") - {'option'}
	WordPressStorageDetector.delete_option("oid_enable_unobtrusive") - {'option'}
	DeletionDetector.delete_option("oid_enable_email_mapping") - {'option'}
	DeletionDetector.delete_option("oid_enable_approval") - {'option'}
	WordPressStorageDetector.update_option("openid_associations", $associations) - {'option'}
	DeletionDetector.delete_option("oid_db_version") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	DeletionDetector.delete_option("oid_enable_commentform") - {'option'}
	DeletionDetector.delete_option("openid_xrds_idib") - {'option'}
	WordPressStorageDetector.delete_option("force_openid_registration") - {'option'}
	WordPressRetrievalDetector.get_option("openid_blog_owner") - {'option'}
	DeletionDetector.delete_option("openid_enable_email_mapping") - {'option'}
	WordPressRetrievalDetector.get_option("openid_enable_commentform") - {'option'}
	WordPressStorageDetector.delete_option("oid_plugin_revision") - {'option'}
	WordPressRetrievalDetector.get_option("openid_enable_commentform") - {'option'}
	WordPressRetrievalDetector.get_option("users_can_register") - {'option'}
	DeletionDetector.delete_option("oid_db_revision") - {'option'}
	WordPressRetrievalDetector.get_option("openid_required_for_registration") - {'option'}
	WordPressStorageDetector.add_option("openid_nonces", [], null, "no") - {'option'}
	DeletionDetector.delete_option("openid_server_nonces") - {'option'}
	WordPressStorageDetector.add_option("openid_nonces", [], null, "yes") - {'option'}
	WordPressStorageDetector.add_option("openid_associations", [], null, "no") - {'option'}
	DeletionDetector.delete_option("oid_enable_localaccounts") - {'option'}
	WordPressStorageDetector.update_option("show_on_front", "posts") - {'option'}
	WordPressRetrievalDetector.get_option("openid_no_require_name") - {'option'}
	WordPressRetrievalDetector.get_option("home") - {'option'}
	DeletionDetector.delete_option("force_openid_registration") - {'option'}
	WordPressStorageDetector.add_option("openid_enable_commentform", true) - {'option'}
	WordPressStorageDetector.add_option("openid_plugin_enabled", true) - {'option'}
	UninstallDetector.delete_option("oid_enable_localaccounts") - {'option'}
	UninstallDetector.delete_option("openid_plugin_enabled") - {'option'}
	WordPressStorageDetector.add_option("openid_enable_approval", false) - {'option'}
	WordPressStorageDetector.add_option("openid_db_revision", 0) - {'option'}
	WordPressRetrievalDetector.get_option("users_can_register") - {'option'}
	WordPressStorageDetector.add_option("openid_xrds_returnto", true) - {'option'}
	UninstallDetector.delete_option("openid_skip_require_name") - {'option'}
	DeletionDetector.delete_option("oid_enable_loginform") - {'option'}
	WordPressStorageDetector.delete_option("openid_enable_email_mapping") - {'option'}
	WordPressRetrievalDetector.get_option("require_name_email") - {'option'}
	UninstallDetector.delete_option("openid_associations") - {'option'}
	DeletionDetector.delete_option("oid_enable_selfstyle") - {'option'}
	WordPressStorageDetector.update_option("openid_associations", $associations) - {'option'}
	WordPressStorageDetector.update_option("openid_nonces", $nonces) - {'option'}
	WordPressRetrievalDetector.get_option("siteurl") - {'option'}
	WordPressRetrievalDetector.get_option("openid_blog_owner") - {'option'}
	WordPressStorageDetector.update_option("openid_associations", $associations) - {'option'}
	UninstallDetector.delete_option("openid_comment_displayname_length") - {'option'}
	WordPressRetrievalDetector.get_option("openid_required_for_registration") - {'option'}
	WordPressStorageDetector.add_option("openid_associations", [], null, "yes") - {'option'}
	WordPressRetrievalDetector.get_option("openid_required_for_registration") - {'option'}
	WordPressStorageDetector.delete_option("openid_xrds_idib") - {'option'}
	WordPressRetrievalDetector.get_option("openid_blog_owner") - {'option'}
	WordPressStorageDetector.delete_option("oid_enable_localaccounts") - {'option'}
	WordPressStorageDetector.delete_option("oid_enable_loginform") - {'option'}
	WordPressRetrievalDetector.get_option("openid_associations") - {'option'}
	WordPressStorageDetector.delete_option("oid_enable_foaf") - {'option'}
	WordPressRetrievalDetector.get_option("openid_associations") - {'option'}
	WordPressRetrievalDetector.get_option("openid_associations") - {'option'}
	WordPressRetrievalDetector.get_option("home") - {'option'}
	WordPressStorageDetector.delete_option("oid_enable_selfstyle") - {'option'}
	UninstallDetector.delete_option("openid_server_associations") - {'option'}
	UninstallDetector.delete_option("openid_server_nonces") - {'option'}
	DeletionDetector.delete_option("openid_db_revision") - {'option'}
	DeletionDetector.delete_option("openid_plugin_revision") - {'option'}
	DeletionDetector.delete_option("openid_enable_approval") - {'option'}
	UninstallDetector.delete_option("openid_xrds_idib") - {'option'}
	WordPressStorageDetector.delete_option("openid_no_require_name") - {'option'}
	WordPressStorageDetector.update_option("openid_associations", []) - {'option'}
	UninstallDetector.delete_option("openid_enable_email_mapping") - {'option'}
	WordPressRetrievalDetector.get_option("require_name_email") - {'option'}
	UninstallDetector.delete_option("openid_xrds_returnto") - {'option'}
	WordPressStorageDetector.delete_option("openid_required_for_registration") - {'option'}
	DeletionDetector.delete_option("openid_no_require_name") - {'option'}
	UninstallDetector.delete_option("openid_nonces") - {'option'}
	UninstallDetector.delete_option("openid_db_revision") - {'option'}
	WordPressStorageDetector.delete_option("openid_plugin_revision") - {'option'}
	UninstallDetector.delete_option("openid_plugin_revision") - {'option'}
	WordPressRetrievalDetector.get_option("openid_blog_owner") - {'option'}
	DeletionDetector.delete_option("openid_required_for_registration") - {'option'}
	WordPressStorageDetector.delete_option("openid_plugin_enabled") - {'option'}
	WordPressRetrievalDetector.get_option("openid_xrds_returnto") - {'option'}
	WordPressRetrievalDetector.get_option("openid_blog_owner") - {'option'}
	WordPressRetrievalDetector.get_option("blogname") - {'option'}
	UninstallDetector.delete_option("oid_enable_unobtrusive") - {'option'}
	WordPressStorageDetector.delete_option("openid_server_nonces") - {'option'}
	WordPressStorageDetector.update_option("openid_nonces", []) - {'option'}
	WordPressStorageDetector.add_option("openid_comment_displayname_length", 12) - {'option'}
	WordPressStorageDetector.delete_option("openid_comment_displayname_length") - {'option'}
	UninstallDetector.delete_option("force_openid_registration") - {'option'}
	WordPressStorageDetector.delete_option("openid_server_associations") - {'option'}
	WordPressStorageDetector.delete_option("openid_associations") - {'option'}
	WordPressStorageDetector.delete_option("openid_nonces") - {'option'}
	WordPressRetrievalDetector.get_option("openid_plugin_revision") - {'option'}
	UninstallDetector.delete_option("oid_db_revision") - {'option'}
	UninstallDetector.delete_option("openid_required_for_registration") - {'option'}
	UninstallDetector.delete_option("oid_enable_foaf") - {'option'}
post_meta
	WordPressRetrievalDetector.get_post_meta($comment->comment_post_ID, "openid_comments", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($comment->comment_post_ID, "openid_comments", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, "openid_comments", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($comment->comment_post_ID, "openid_comments", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($comment->comment_post_ID, "openid_comments", array_unique($new)) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($post_id, "openid_comments", array_unique($comments)) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($comment->comment_post_ID, "openid_comments", array_unique($openid_comments)) - {'post_meta'}
user
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $username) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_users() - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_update_user(["ID" => $user->ID, "user_url" => $identities[0]]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", get_option("openid_blog_owner")) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WP_UserDetector.WP_User($user->ID) - {'user_meta', 'user'}
	WP_UserDetector.WP_User($u->ID) - {'user_meta', 'user'}
	WP_UserDetector.WP_User($user_id) - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_update_user(["ID" => $user->ID, "user_url" => $identity_url]) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_update_user(["ID" => $user->ID, "user_url" => $identities[0]]) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_insert_user($user_data) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_update_user(["ID" => $user->ID, "user_url" => $identity_url]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", get_option("openid_blog_owner")) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.get_user_by("login", $id_or_name) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("id", $id_or_name) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $username) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($user->ID) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.get_user_by("login", $_REQUEST["author"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("id", $_REQUEST["author"]) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WP_UserDetector.WP_User($user->ID) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WP_UserDetector.WP_User($user_id) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
user_meta
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", $username) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "openid_delegate", true) - {'user_meta'}
	WordPressRetrievalDetector.get_users() - {'user_meta', 'user'}
	WordpressHashingFnDetector.wp_update_user(["ID" => $user->ID, "user_url" => $identities[0]]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", get_option("openid_blog_owner")) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "openid_delegate", true) - {'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user_id, "openid_delegate", $openid_user_delegation_info["url"]) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "openid_delegate", true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, "openid_delegate_services", $openid_user_delegation_info["services"]) - {'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "openid_trusted_sites", true) - {'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WP_UserDetector.WP_User($user->ID) - {'user_meta', 'user'}
	WP_UserDetector.WP_User($u->ID) - {'user_meta', 'user'}
	WP_UserDetector.WP_User($user_id) - {'user_meta', 'user'}
	DeletionDetector.delete_user_meta($user_id, "openid_delegate") - {'user_meta'}
	WordpressHashingFnDetector.wp_update_user(["ID" => $user->ID, "user_url" => $identity_url]) - {'user_meta', 'user'}
	WordPressStorageDetector.delete_user_meta($user_id, "openid_delegate_services") - {'user_meta'}
	WordPressStorageDetector.wp_update_user(["ID" => $user->ID, "user_url" => $identities[0]]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "openid_trusted_sites", true) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user->ID, "openid_trusted_sites", $trusted_sites) - {'user_meta'}
	WordPressStorageDetector.wp_insert_user($user_data) - {'user_meta', 'user'}
	WordPressStorageDetector.wp_update_user(["ID" => $user->ID, "user_url" => $identity_url]) - {'user_meta', 'user'}
	WordPressStorageDetector.update_user_meta($user->ID, "openid_trusted_sites", $trusted_sites) - {'user_meta'}
	WordPressStorageDetector.delete_user_meta($user_id, "openid_delegate") - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "openid_trusted_sites", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "openid_trusted_sites", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($userid, "openid_delegate", true) - {'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "nickname", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "openid_delegate_services", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "openid_delegate", true) - {'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("login", get_option("openid_blog_owner")) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.get_user_by("login", $id_or_name) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "openid_trusted_sites", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_by("id", $id_or_name) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "openid_trusted_sites", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_by("login", $username) - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_userdata($user->ID) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "openid_delegate_services", true) - {'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "openid_delegate", true) - {'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "openid_delegate", true) - {'user_meta'}
	WordPressRetrievalDetector.get_user_by("login", $_REQUEST["author"]) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_by("id", $_REQUEST["author"]) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	DeletionDetector.delete_user_meta($user_id, "openid_delegate_services") - {'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WP_UserDetector.WP_User($user->ID) - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WP_UserDetector.WP_User($user_id) - {'user_meta', 'user'}
	WordPressRetrievalDetector.get_user_meta($user->ID, "openid_delegate", true) - {'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressStorageDetector.update_user_meta($user->ID, "openid_trusted_sites", array_filter($trusted_sites)) - {'user_meta'}
	WordPressStorageDetector.update_user_meta($user->ID, "openid_trusted_sites", $trusted_sites) - {'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:31.554615.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 3146 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.711307.

!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 1090
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 1386
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 164
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 634
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 3038
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 3372
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 3535
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 2748
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 3690
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 4533
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 61926
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 63051
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 64090
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 63442
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 63897
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 65152
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 65329
1000 STORE_REACHES edges created
2000 STORE_REACHES edges created
3000 STORE_REACHES edges created
3146 STORE_REACHES edges created
3146 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 639 nodes as PERSONAL
In total, tainted 639 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
Tainted 703 nodes as ENCRYPTED
In total, tainted 703 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:39.812563.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:05:44.341582!
DELETION call to delete_user_meta($user_id, "openid_delegate") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_user_meta($user_id, "openid_delegate_services") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to delete_option("oid_db_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("oid_db_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("oid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("oid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("oid_enable_email_mapping") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("oid_enable_foaf") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("oid_enable_localaccounts") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("oid_enable_loginform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("oid_enable_selfstyle") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("oid_enable_unobtrusive") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("oid_plugin_enabled") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("oid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("oid_plugin_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("oid_trust_root") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("force_openid_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_skip_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_enable_email_mapping") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_xrds_idib") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_xrds_eaut") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_server_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_server_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_plugin_enabled") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_db_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_xrds_returnto") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_comment_displayname_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_server_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_server_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_no_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("openid_required_for_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
CRYPTOGRAPHY call to openid_repost_comment_anonymously($_SESSION["openid_comment_post"]).,None,None
CRYPTOGRAPHY call to openid_repost_comment_anonymously($_SESSION["openid_comment_post"]).,None,None
CRYPTOGRAPHY call to Auth_OpenID_getOnlyEncryptedOrder().,None,None
CRYPTOGRAPHY call to $auth_req->setAnonymous($anonymous).,None,None
CRYPTOGRAPHY call to hash_algos().,None,None
CRYPTOGRAPHY call to hash("sha1", $text, true).,None,None
CRYPTOGRAPHY call to hash_algos().,None,None
CRYPTOGRAPHY call to hash_hmac("sha1", $text, $key, true).,None,None
CRYPTOGRAPHY call to hash_algos().,None,None
CRYPTOGRAPHY call to hash("sha256", $text, true).,None,None
CRYPTOGRAPHY call to hash_algos().,None,None
CRYPTOGRAPHY call to hash_hmac("sha256", $text, $key, true).,None,None
hash called with unapproved hash algorithm sha1. Ignore if this is not encrypting personal information,sha1,None
hash_hmac called with unapproved hash algorithm sha1. Ignore if this is not encrypting personal information,sha1,None
hash called with approved hash algorithm sha256.,sha256,None
hash_hmac called with approved hash algorithm sha256.,sha256,None
MD5 called with parameters [url]. Ignore if [url] does not contain personal information.,md5,None
MD5 called with parameters [site]. Ignore if [site] does not contain personal information.,md5,None
MD5 called with parameters [url]. Ignore if [url] does not contain personal information.,md5,None
MD5 called with parameters [microtime, uniqid]. Ignore if [microtime, uniqid] does not contain personal information.,md5,None
SHA1 called with parameters []. Ignore if [] does not contain personal information.,sha1,None
SHA1 called with parameters []. Ignore if [] does not contain personal information.,sha1,None
SHA1 called with parameters []. Ignore if [] does not contain personal information.,sha1,None
SHA1 called with parameters [text]. Ignore if [text] does not contain personal information.,sha1,None
SHA1 called with parameters []. Ignore if [] does not contain personal information.,sha1,None
SHA1 called with parameters []. Ignore if [] does not contain personal information.,sha1,None
SHA1 called with parameters [server_url]. Ignore if [server_url] does not contain personal information.,sha1,None
SHA1 called with parameters [salt]. Ignore if [salt] does not contain personal information.,sha1,None
SHA1 called with parameters [server_url]. Ignore if [server_url] does not contain personal information.,sha1,None
SHA1 called with parameters [handle]. Ignore if [handle] does not contain personal information.,sha1,None
SHA1 called with parameters [server_url]. Ignore if [server_url] does not contain personal information.,sha1,None
SHA1 called with parameters [salt]. Ignore if [salt] does not contain personal information.,sha1,None
SHA1 called with parameters [server_url]. Ignore if [server_url] does not contain personal information.,sha1,None
SHA1 called with parameters [handle]. Ignore if [handle] does not contain personal information.,sha1,None
SHA1 called with parameters [server_url]. Ignore if [server_url] does not contain personal information.,sha1,None
SHA1 called with parameters [server_url]. Ignore if [server_url] does not contain personal information.,sha1,None
MD5 called with parameters [identity_url]. Ignore if [identity_url] does not contain personal information.,md5,None
MD5 called with parameters [identity_url]. Ignore if [identity_url] does not contain personal information.,md5,None
MD5 called with parameters [request, trust_root]. Ignore if [request, trust_root] does not contain personal information.,md5,None
MD5 called with parameters [request, trust_root]. Ignore if [request, trust_root] does not contain personal information.,md5,None
MD5 called with parameters [request, trust_root]. Ignore if [request, trust_root] does not contain personal information.,md5,None
RETRIEVAL call to file_get_contents("php://input").,None,None
RETRIEVAL call to fread($f, $num_bytes).,None,None
RETRIEVAL call to fread($assoc_file, $filesize).,None,None
RETRIEVAL call to fread($association_file, filesize($association_filename)).,None,None
RETRIEVAL call to fgets($sock, 1024).,None,None
RETRIEVAL call to fgets($sock, 128).,None,None
STORAGE call to fwrite($tmp_file, $association_s).,None,None
STORAGE call to fputs($sock, implode("
", $headers) . "

").,None,None
STORAGE call to fputs($sock, $request).,None,None
object property '$user->user_email' of personal types {'email'} is found.,,None
Uninstall deletion call: DELETION call to delete_option("oid_db_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("oid_db_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("oid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("oid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("oid_enable_email_mapping") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("oid_enable_foaf") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("oid_enable_localaccounts") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("oid_enable_loginform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("oid_enable_selfstyle") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("oid_enable_unobtrusive") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("oid_plugin_enabled") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("oid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("oid_plugin_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("oid_trust_root") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("force_openid_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_skip_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_enable_email_mapping") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_xrds_idib") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_xrds_eaut") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_plugin_enabled") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_db_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_xrds_returnto") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_comment_displayname_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_server_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_server_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_no_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
Uninstall deletion call: DELETION call to delete_option("openid_required_for_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
variable '$comment_author_email' of personal types {'email'} is found.,,None
variable '$comment_author_email' of personal types {'email'} is found.,,None
variable '$comment_author_email' of personal types {'email'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$email' of personal types {'email'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
WP_User object is created.,,None
WP_User object is created.,,None
WP_User object is created.,,None
WP_User object is created.,,None
WP_User object is created.,,None
RETRIEVAL call to get_option("openid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_users() alters data types {'user_meta', 'user'}. Returns (array).,None,None
RETRIEVAL call to get_option("home") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_user_meta($user->ID, "openid_trusted_sites", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_user_meta($user->ID, "openid_trusted_sites", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "openid_trusted_sites", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_db_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("users_can_register") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_user_meta($user->ID, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("users_can_register") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_required_for_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("require_name_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_no_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("require_name_email") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_no_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_comment($comment_id). Passed arguments: 0: $comment (WP_Comment|string|int). Returns (WP_Comment|array|null).,None,None
RETRIEVAL call to get_comment($id). Passed arguments: 0: $comment (WP_Comment|string|int). Returns (WP_Comment|array|null).,None,None
RETRIEVAL call to get_post_meta($comment->comment_post_ID, "openid_comments", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_comment($id). Passed arguments: 0: $comment (WP_Comment|string|int). Returns (WP_Comment|array|null).,None,None
RETRIEVAL call to get_post_meta($comment->comment_post_ID, "openid_comments", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("login", $username) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("home") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_comment_displayname_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("blog_charset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("show_on_front") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_xrds_returnto") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_required_for_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_required_for_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_required_for_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("users_can_register") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("siteurl") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_comment($id). Passed arguments: 0: $comment (WP_Comment|string|int). Returns (WP_Comment|array|null).,None,None
RETRIEVAL call to get_post_meta($comment->comment_post_ID, "openid_comments", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_user_by("id", $id_or_name) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_user_by("login", $id_or_name) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("openid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("id", $_REQUEST["author"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_user_by("login", $_REQUEST["author"]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_user_by("login", $username) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_user_meta($user->ID, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("home") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "openid_trusted_sites", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("login", get_option("openid_blog_owner")) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_user_meta($user->ID, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "openid_delegate_services", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_user_meta($user->ID, "openid_trusted_sites", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("home") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("blogname") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_user_meta($userid, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_by("login", get_option("openid_blog_owner")) alters data types {'user_meta', 'user'}. Passed arguments: 0: $field (string), 1: $value (int|string). Returns (WP_User|false).,None,None
RETRIEVAL call to get_user_meta($user->ID, "openid_delegate", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_user_meta($user->ID, "openid_delegate_services", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_user_meta($user->ID, "openid_trusted_sites", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_user_meta($user->ID, "nickname", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_userdata($user->ID) alters data types {'user_meta', 'user'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to get_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to get_post_meta($post_id, "openid_comments", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
STORAGE call to update_user_meta($user->ID, "openid_trusted_sites", $trusted_sites) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user->ID, "openid_trusted_sites", array_filter($trusted_sites)) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_update_user(["ID" => $user->ID, "user_url" => $identities[0]]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,None,None
STORAGE call to wp_update_user(["ID" => $user->ID, "user_url" => $identity_url]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,None,None
STORAGE call to delete_user_meta($user_id, "openid_delegate") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to delete_user_meta($user_id, "openid_delegate_services") alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to update_user_meta($user_id, "openid_delegate", $openid_user_delegation_info["url"]) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user_id, "openid_delegate_services", $openid_user_delegation_info["services"]) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($comment->comment_post_ID, "openid_comments", array_unique($openid_comments)) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($comment->comment_post_ID, "openid_comments", array_unique($new)) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("openid_plugin_revision", OPENID_PLUGIN_REVISION) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("oid_db_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("oid_db_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("oid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("oid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("oid_enable_email_mapping") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("oid_enable_foaf") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("oid_enable_localaccounts") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("oid_enable_loginform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("oid_enable_selfstyle") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("oid_enable_unobtrusive") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("oid_plugin_enabled") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("oid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("oid_plugin_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("oid_trust_root") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("force_openid_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_skip_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_enable_email_mapping") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_xrds_idib") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_xrds_eaut") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_server_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_server_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_enable_commentform") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_plugin_enabled") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_plugin_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_db_revision") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_enable_approval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_xrds_returnto") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_comment_displayname_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_server_associations") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_server_nonces") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_blog_owner") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_no_require_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("openid_required_for_registration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_option("openid_associations", [], null, "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("openid_nonces", [], null, "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("openid_associations", [], null, "no") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("openid_nonces", [], null, "no") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_insert_user($user_data) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,None,None
STORAGE call to update_option("show_on_front", "posts") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("openid_enable_commentform", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("openid_plugin_enabled", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("openid_plugin_revision", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("openid_db_revision", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("openid_enable_approval", false) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("openid_xrds_returnto", true) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("openid_comment_displayname_length", 12) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_user_meta($user->ID, "openid_trusted_sites", $trusted_sites) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_user_meta($user->ID, "openid_trusted_sites", $trusted_sites) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_option("openid_associations", $associations) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("openid_nonces", $nonces) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("openid_nonces", $nonces) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("openid_associations", $associations) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("openid_nonces", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("openid_associations", []) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("openid_db_revision", OPENID_DB_REVISION) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("openid_associations", $associations) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_post_meta($post_id, "openid_comments", array_unique($comments)) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
CRYPTOGRAPHY call to wp_update_user(["ID" => $user->ID, "user_url" => $identities[0]]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,hash,None
CRYPTOGRAPHY call to wp_update_user(["ID" => $user->ID, "user_url" => $identity_url]) alters data types {'user_meta', 'user'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,hash,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($user_id, "openid_delegate", $openid_user_delegation_info["url"])", found in file admin_panels.php at line 878. 

[has_storage] PII of types (['user_meta']) stored through WordPress function "update_user_meta($user_id, "openid_delegate_services", $openid_user_delegation_info["services"])", found in file admin_panels.php at line 879. 

[has_storage] WP User info of types (['user_meta', 'user']) stored through WordPress function "wp_update_user(["ID" => $user->ID, "user_url" => $identities[0]])", found in file admin_panels.php at line 756. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_user_meta($user->ID, "openid_trusted_sites", $trusted_sites)", found in file server.php at line 478. 

[has_storage] WP User info of types (['user_meta', 'user']) stored through WordPress function "wp_insert_user($user_data)", found in file common.php at line 355. 

[has_storage] WP User info of types (['user_meta', 'user']) stored through WordPress function "wp_update_user(["ID" => $user->ID, "user_url" => $identity_url])", found in file admin_panels.php at line 793. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_user_meta($user->ID, "openid_trusted_sites", $trusted_sites)", found in file server.php at line 299. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_user_meta($user->ID, "openid_trusted_sites", array_filter($trusted_sites))", found in file admin_panels.php at line 421. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_user_meta($user->ID, "openid_trusted_sites", $trusted_sites)", found in file admin_panels.php at line 400. 

[has_storage] Storage check is WP 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "openid_delegate", $openid_user_delegation_info["url"]) has deletion method delete_user_meta($user_id, "openid_delegate"). Storage method found in file admin_panels.php at line 878. Deletion method found in file admin_panels.php at line 875. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, "openid_delegate_services", $openid_user_delegation_info["services"]) has deletion method delete_user_meta($user_id, "openid_delegate_services"). Storage method found in file admin_panels.php at line 879. Deletion method found in file admin_panels.php at line 876. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user->ID, "openid_trusted_sites", $trusted_sites) does not have corresponding deletion method. Storage method found in file server.php at line 478. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user->ID, "openid_trusted_sites", $trusted_sites) does not have corresponding deletion method. Storage method found in file server.php at line 299. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user->ID, "openid_trusted_sites", array_filter($trusted_sites)) does not have corresponding deletion method. Storage method found in file admin_panels.php at line 421. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user->ID, "openid_trusted_sites", $trusted_sites) does not have corresponding deletion method. Storage method found in file admin_panels.php at line 400. 

[Art.17, Right to erasure] Deletion access is NONE 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 3780. Found in file admin_panels.php at line 878 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 3791. Found in file admin_panels.php at line 879 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 64040. Found in file server.php at line 478 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 63319. Found in file server.php at line 299 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1657. Found in file admin_panels.php at line 421 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1557. Found in file admin_panels.php at line 400 

[Art.15, Right to access] Data access is NONE_BUT_NOT_REQUIRED 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? True 

[main] Is access in violation? False 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? False 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        

##################
### Fix Report ###
##################

############################
# Data Deletion Fix Report #
############################

This report suggests fixes to comply with the GDPR Art. 17, Right to erasure (https://gdpr-info.eu/art-17-gdpr/). The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/adding-the-personal-data-eraser-to-your-plugin/ for more details.

1) Implement a function that deletes all the user data collected in the plugin. Sample code:


/**
* Removes all collected data of a user.
*
* @param string $email_address   email address to manipulate
* @param int    $page            pagination
*
* @return array
*/
function openid_remove_data( $email_address, $page = 1 ) {
    
    $page = (int) $page;


    //TODO: Delete the user data that was stored using Wordpress functions

    //Below is the sample code for deleting user meta and may need to be modified to suit the plugin.
    $user_id = get_user_by('email', $email_address)
    $key = 'email' //Sample user meta key
    if ( $customer->user_id > 0 ) {
        //Delete user meta data by $key
        delete_user_meta( $user_id, $key );
    }
        



    // Tell core if we have more data to delete still
    $done = true;
    return array(
        'items_removed'  => $items_removed, // true if collected data of a user is being deleted
        'items_retained' => $items_retained, // true if certain data needs to be retained
        'messages'       => sprintf( __( 'Data of user with email %s successfully deleted.', 'openid' ), $email_address ), // Put messages for data removal
        'done'           => $done, // true if all the removal processes are done (all data of the user is removed)
    );
}
        

2) Hook the deletion function to the Wordpress's Personal Data Removal tool


/**
* Registers all data erasers.
*
* @param array $exporters
*
* @return mixed
*/
function openid_register_privacy_erasers( $erasers ) {
    $erasers['my-plugin-slug'] = array(
        'eraser_friendly_name' => __( '<eraser name>', 'openid' ),
        'callback'             => 'openid_remove_data',
    );
    return $erasers;
}
        

add_filter( 'wp_privacy_personal_data_erasers', 'openid_register_privacy_erasers' );
        

        

#############################
# Privacy Policy Fix Report #
#############################

This report suggests fixes to comply with the GDPR Art. 13 (https://gdpr-info.eu/art-13-gdpr/) through including a privacy notice. The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/suggesting-text-for-the-site-privacy-policy/ for more details.

1) Implement a function that includes the privacy policy for the plugin and provide it to wordpress through wp_add_privacy_policy_content(). Sample code:


/**
* Adds a privacy policy statement.
*/
function openid_add_privacy_policy_content() {
    if ( ! function_exists( 'wp_add_privacy_policy_content' ) ) {
        return;
    }
    //TODO: modify the content below to include the privacy policy for the plugin.
    $content = '<p class="privacy-policy-tutorial">' . __( 'Some introductory content for the suggested text.', 'openid' ) . '</p>'
            . '<strong class="privacy-policy-tutorial">' . __( 'Suggested Text:', 'openid' ) . '</strong> '
            . sprintf(
                __( 'When you leave a comment on this site, we send your name, email address, IP address and comment text to example.com. Example.com does not retain your personal data. The example.com privacy policy is <a href="%1$s" target="_blank">here</a>.', 'openid' ),
                'https://example.com/privacy-policy'
            );
    wp_add_privacy_policy_content( 'openid', wp_kses_post( wpautop( $content, false ) ) );
}
        

2) Hook the privacy policy function to the Wordpress's admin initialization action.


add_action( 'admin_init', 'openid_add_privacy_policy_content' );
        

        


Disclaimer: The sample code provided above is only for reference and does not guarantee GDPR compliance. The recommended list of data to delete/export may not be comprehensive. 
        
Done.
