Timeout in resolving values
Timeout in running neo4j query
Running Main.py on seo-internal-links

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:00.463078.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:00.937275.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 6 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.357325.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 0 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.492864.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 599 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:01.010006.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 0 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.602757.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.123436.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 230 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:03.271697.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 2393
Added 1558 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 2393
Added 0 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:01.072583.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/seo-internal-links/seo-links.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:00.162263.

1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
2393 PHP_REACHES edges created
2393 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 868 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.070034.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.601686.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 10 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.769820.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 21 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.172124.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.047017.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.169802.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.009993.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.039442.

31 PHP_REACHES edges created
31 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 21 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.134521.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
3 SQL operations to process.
SELECT post_title, ID, post_type FROM $wpdb WHERE post_status = 'publish' AND LENGTH(post_title)>3 ORDER BY LENGTH(post_title) DESC LIMIT 2000
SQL command (SELECT post_title, ID, post_type FROM $wpdb WHERE post_status = 'publish' AND LENGTH(post_title)>3 ORDER BY LENGTH(post_title) DESC LIMIT 2000) cannot be parsed correct.
SELECT $wpdb.name, $wpdb.term_id FROM $wpdb LEFT JOIN $wpdb ON $wpdb.term_id = $wpdb.term_id WHERE $wpdb.taxonomy = 'category'  AND LENGTH($wpdb.name)>3 AND $wpdb.count >= $this->get_options() ORDER BY LENGTH($wpdb.name) DESC LIMIT 2000
SQL command (SELECT $wpdb.name, $wpdb.term_id FROM $wpdb LEFT JOIN $wpdb ON $wpdb.term_id = $wpdb.term_id WHERE $wpdb.taxonomy = 'category' AND LENGTH($wpdb.name)>3 AND $wpdb.count >= $this->get_options() ORDER BY LENGTH($wpdb.name) DESC LIMIT 2000) cannot be parsed correct.
SELECT $wpdb.name, $wpdb.term_id FROM $wpdb LEFT JOIN $wpdb ON $wpdb.term_id = $wpdb.term_id WHERE $wpdb.taxonomy = 'post_tag'  AND LENGTH($wpdb.name)>3 AND $wpdb.count >= $this->get_options() ORDER BY LENGTH($wpdb.name) DESC LIMIT 2000
SQL command (SELECT $wpdb.name, $wpdb.term_id FROM $wpdb LEFT JOIN $wpdb ON $wpdb.term_id = $wpdb.term_id WHERE $wpdb.taxonomy = 'post_tag' AND LENGTH($wpdb.name)>3 AND $wpdb.count >= $this->get_options() ORDER BY LENGTH($wpdb.name) DESC LIMIT 2000) cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [971, 1290, 1565]
Added 0 SQL nodes. 0 out of 3 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:03.163854.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'
<div class="wrap" style="">
	<h2>SEO Internal Links</h2>
				
	<div id="poststuff" style="margin-top:10px;">

	  <div id="sideblock" style="float:right;width:270px;margin-left:10px;"> 
	    <h3>Resources</h3>
       <ul>
         <li><a target="_blank" href="http://onlinewebapplication.com/category/wordpress/">WordPress - OnlineWebApplication.com</a> - Lots of WordPress and SEO resources</li>		
	     <li><a target="_blank" href="http://onlinewebapplication.com">OnlineWebApplication.com</a> - Tech News, Social Media, Tutorials and Demos!</li>	
      </ul>
      <br />

 	</div>

	 <div id="mainblock" style="width:710px">
	 
		<div class="dbx-content">
		 	<form name="SEOLinks" action="$_SERVER_REQUEST_URI" method="post">
		 		  <input type="hidden" id="_wpnonce" name="_wpnonce" value="wp_create_nonce("seo-internal-links")" />
					<input type="hidden" name="submitted" value="1" /> 
					<h2>SEO Internal Links</h2>
					<p>SEO Iinternal Links can process your posts, pages and comments in search for keywords to automatically interlink.</p>
					<input type="checkbox" name="post"  $this->get_options()/><label for="post"> Posts</label>
					<ul>&nbsp;<input type="checkbox" name="postself"  $this->get_options()/><label for="postself"> Allow links to self</label></ul>
					<br />
					<input type="checkbox" name="page"  $this->get_options()/><label for="page"> Pages</label>
					<ul>&nbsp;<input type="checkbox" name="pageself"  $this->get_options()/><label for="pageself"> Allow links to self</label></ul>
					<br />
					<input type="checkbox" name="comment"  $this->get_options() /><label for="comment"> Comments</label> (may slow down performance) <br>
		
					<h4>Excluding</h4>
					<input type="checkbox" name="excludeheading"  $this->get_options()/><label for="excludeheading">Prevent linking in heading tags (h1,h2,h3,h4,h5,h6).</label>
					
					<h4>Target</h4>
					<p>The targets SEO Iinternal links should consider. The match will be based on post/page title or category/tag name, case insensitive.</p>
					<input type="checkbox" name="lposts" $this->get_options() /><label for="lposts"> Posts</label>  <br>
					<input type="checkbox" name="lpages" $this->get_options() /><label for="lpages"> Pages</label>  <br>
					<input type="checkbox" name="lcats" $this->get_options() /><label for="lcats"> Categories</label> (may slow down performance)  <br>
					<input type="checkbox" name="ltags" $this->get_options() /><label for="ltags"> Tags</label> (may slow down performance)  <br>
					<br>
					Link tags and categories that have been used at least <input type="text" name="minusage" size="2" value="$this->get_options()_minusage"/> times.
					<br>
					
					<h2>Settings</h2>
					<p>To reduce database load you can choose to have SEO SMART links work only on single posts and pages (for example not on main page or archives).</p>
					<input type="checkbox" name="onlysingle" $this->get_options() /><label for="onlysingle"> Process only single posts and pages</label>  <br>
					<br />
					<p>Allow processing of RSS feeds. SEO Iinternal links will embed links in all posts in your RSS feed (according to other options)</p>
					<input type="checkbox" name="allowfeed" $this->get_options() /><label for="allowfeed"> Process RSS feeds</label>  <br>
					<br />					
					<p>Set whether matching should be case sensitive.</p>
					<input type="checkbox" name="casesens" $this->get_options() /><label for="casesens"> Case sensitive matching</label>  <br>
					
					<h4>Ignore Posts and Pages</h4>				
					<p>You may wish to forbid automatic linking on certain posts or pages. Seperate them by comma. (id, slug or name)</p>
					<input type="text" name="ignorepost" size="90" value="$this->get_options()_ignorepost"/> 
					<br>
                    
					<h4>Ignore keywords</h4>				
					<p>You may wish to ignore certain words or phrases from automatic linking. Seperate them by comma.</p>
					<input type="text" name="ignore" size="90" value="$this->get_options()_ignore"/> 
					<br><br>                 
					 					 
					<h4>Custom Keywords</h4>
					<p>Here you can enter manually the extra keywords you want to automaticaly link. Use comma to seperate keywords and add target url at the end. Use a new line for new url and set of keywords. You can have these keywords link to any url, not only your site.</p>
					<p>Example:<br />
					vladimir prelovac, http://onlinewebapplication.com/tag/social-media/<br />
					cars, car, autos, auto, http://onlinewebapplication.com/<br />
					</p>
					
					<input type="checkbox" name="customkey_preventduplicatelink" $this->get_options() /><label for="customkey_preventduplicatelink"> Prevent Duplicate links for grouped keywords (will link only first of the keywords found in text)</label>  <br>
					
					<textarea name="customkey" id="customkey" rows="10" cols="90"  >stripslashes($options["customkey"])</textarea>
					<br><br>
					
					<h4>Limits</h4>				
					<p>You can limit the maximum number of different links SEO Iinternal Links will generate per post. Set to 0 for no limit. </p>
					Max Links: <input type="text" name="maxlinks" size="2" value="$this->get_options()_maxlinks"/>  
					<p>You can also limit maximum number of links created with the same keyword. Set to 0 for no limit. </p>
					Max Single: <input type="text" name="maxsingle" size="2" value="$this->get_options()_maxsingle"/>
                                       <p>Limit number of same URLs the plugin will link to. Works only when Max Single above is set to 1. Set to 0 for no limit. </p>
					Max Single URLs: <input type="text" name="maxsingleurl" size="2" value="$this->get_options()_maxsingleurl"/>    
					<br><br>
					 
					<h4>External Links</h4>			
					<p>SEO Iinternal links can open external links in new window and add nofollow attribute.</p>
					
				
					<input type="checkbox" name="nofolo" $this->get_options() /><label for="nofolo"> Add nofollow attribute</label>  <br>
					
				
					<input type="checkbox" name="blanko" $this->get_options() /><label for="blanko"> Open in new window</label>  <br>
					
					
					<div class="submit"><input type="submit" name="Submit" value="Update options" class="button-primary" /></div>
			</form>
		</div>
		
		<br/><br/><h3>&nbsp;</h3>	
	 </div>

	</div>
	
<h5>Another WordPress plugin by <a href="http://onlinewebapplication.com/">Pankaj Jha</a></h5>
</div>'' cannot be parsed correct.
HTML code '$'<div class="updated fade"><p>Plugin settings saved.</p></div>'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:01.830885.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.047891.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 0 do_action/apply_filters calls and 7 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:00.418473.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running DbplusDetector
### Start running FrontBaseDetector
### Finish running DbaseDetector
### Start running HashDetector
### Finish running FileProDetector
### Start running IBMDb2Detector
### Finish running FirebirdInterBaseDetector
### Start running InformixDetector
### Finish running CubridDetector
### Start running IngresDetector
### Finish running FrontBaseDetector
### Start running maxdbDetector
### Finish running IngresDetector
### Start running MongoDbDetector
### Finish running InformixDetector
### Start running MongoDetector
### Finish running IBMDb2Detector
### Start running MsqlDetector
### Finish running MongoDetector
### Start running MySQLDetector
### Finish running MsqlDetector
### Start running MySQLiDetector
### Finish running MySQLDetector
### Start running Oci8Detector
### Finish running MongoDbDetector
### Start running OpenSSLDetector
### Finish running Oci8Detector
### Start running ParadoxDetector
### Finish running ParadoxDetector
### Start running PasswordHashingDetector
### Finish running PasswordHashingDetector
### Start running PhpCurlDetector
### Finish running HashDetector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running ArrayElementDetector
### Start running PHPRetrievalDetector
### Finish running PHPIncludedDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PhpCurlDetector
### Start running PhpVarDetector
### Finish running OpenSSLDetector
### Start running PostgreSQLDetector
### Finish running PhpVarDetector
### Start running PropertyDetector
### Finish running PostgreSQLDetector
### Start running Sqlite3Detector
### Finish running PHPStorageDetector
### Start running SqliteDetector
### Finish running PHPRetrievalDetector
### Start running SqlServerDetector
### Finish running SqliteDetector
### Start running SybaseDetector
### Finish running SybaseDetector
### Start running TokyoTyrantDetector
### Finish running TokyoTyrantDetector
### Start running UserInputDetector
### Finish running Sqlite3Detector
### Start running VariableDetector
### Finish running PropertyDetector
### Start running WordpressHashingFnDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressRemoteDetector
### Finish running SqlServerDetector
### Start running WordPressRetrievalDetector
### Finish running maxdbDetector
### Start running WordPressStorageDetector
### Finish running MySQLiDetector
### Start running WP_UserDetector
### Finish running WordPressRemoteDetector
### Start running GenericDatabaseUsageDetector
### Finish running WP_UserDetector
### Start running GenericEncryptionDetector
### Finish running GenericEncryptionDetector
### Start running DeletionDetector
### Finish running GenericDatabaseUsageDetector
### Start running UninstallDetector
### Finish running VariableDetector
### Finish running UserInputDetector
### Finish running WordPressRetrievalDetector
### Finish running DeletionDetector
### Finish running WordPressStorageDetector
### Finish running UninstallDetector
### Finished running detectors
seo-links.php:389
  - RETRIEVAL call to get_option($this->SEOLinks_DB_option) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
seo-links.php:496
  - RETRIEVAL call to get_option("siteurl") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option 

seo-links.php:398
  - STORAGE call to update_option($this->SEOLinks_DB_option, $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
seo-links.php:422
  - STORAGE call to update_option($this->SEOLinks_DB_option, $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
seo-links.php:456
  - STORAGE call to update_option($this->SEOLinks_DB_option, $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option 

By data type:
option
	WordPressStorageDetector.update_option($this->SEOLinks_DB_option, $options) - {'option'}
	WordPressRetrievalDetector.get_option("siteurl") - {'option'}
	WordPressRetrievalDetector.get_option($this->SEOLinks_DB_option) - {'option'}
	WordPressStorageDetector.update_option($this->SEOLinks_DB_option, $options) - {'option'}
	WordPressStorageDetector.update_option($this->SEOLinks_DB_option, $options) - {'option'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:06.211033.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 6 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.056817.

6 STORE_REACHES edges created
6 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
In total, tainted 0 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
In total, tainted 0 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:00.004920.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:00:29.945078!
RETRIEVAL call to get_option($this->SEOLinks_DB_option) alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("siteurl") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
STORAGE call to update_option($this->SEOLinks_DB_option, $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option($this->SEOLinks_DB_option, $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option($this->SEOLinks_DB_option, $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found no personal data in the plugin. No analysis needed. 

[main] Complaint? True 

No findings
