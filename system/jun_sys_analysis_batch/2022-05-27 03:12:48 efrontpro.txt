Timeout in resolving values
Timeout in running neo4j query
Running Main.py on efrontpro

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:02.985491.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:01.570570.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 63 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.701151.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 0 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.672197.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 316 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:00.769472.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 0 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.668677.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.087281.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 128 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:05.894906.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 4473
Added 3966 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 49282
Added 44809 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:04.619926.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontpro.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/admin/admin.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/admin/menu-pages/dashboard.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/admin/menu-pages/help.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/admin/menu-pages/integrations.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/admin/menu-pages/setup.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/AutoLoader.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/index.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/eFrontProSDK.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Abstraction/AbstractAPI.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/Account.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/BranchList.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/Branch.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/BranchUser.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/CategoryList.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/Category.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/CourseList.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/Course.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/CourseUser.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/CurriculumList.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/CurriculumUser.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/ExtendedProfile.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/GroupList.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/Group.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/JobList.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/Job.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/Plugin.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/System.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/TrainingSession.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/UserGroup.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/UserJob.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/UserList.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/API/Handler/User.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/Factory/Exception/API.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/Factory/Handler/API.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/Request/Abstraction/RequestHandlerInterface.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/Request/Exception/cURL.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/efrontPRO-SDK/Source/Epignosis/eFrontPro/Sdk/Request/Handler/cURL.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/integrations/woocommerce.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/shortcodes/ef_courses.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/shortcodes/reg_shortcodes.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/utils/db.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/utils/install.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/efrontpro/utils/utils.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:04.558339.

1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
4473 PHP_REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
12000 PHP_REACHES edges created
13000 PHP_REACHES edges created
14000 PHP_REACHES edges created
15000 PHP_REACHES edges created
16000 PHP_REACHES edges created
17000 PHP_REACHES edges created
18000 PHP_REACHES edges created
19000 PHP_REACHES edges created
20000 PHP_REACHES edges created
21000 PHP_REACHES edges created
22000 PHP_REACHES edges created
23000 PHP_REACHES edges created
24000 PHP_REACHES edges created
25000 PHP_REACHES edges created
26000 PHP_REACHES edges created
27000 PHP_REACHES edges created
28000 PHP_REACHES edges created
29000 PHP_REACHES edges created
30000 PHP_REACHES edges created
31000 PHP_REACHES edges created
32000 PHP_REACHES edges created
33000 PHP_REACHES edges created
34000 PHP_REACHES edges created
35000 PHP_REACHES edges created
36000 PHP_REACHES edges created
37000 PHP_REACHES edges created
38000 PHP_REACHES edges created
39000 PHP_REACHES edges created
40000 PHP_REACHES edges created
41000 PHP_REACHES edges created
42000 PHP_REACHES edges created
43000 PHP_REACHES edges created
44000 PHP_REACHES edges created
44809 PHP_REACHES edges created
49282 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 1596 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.031042.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 3 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:06.807569.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 102 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:06.616245.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 106 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.260590.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.357034.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:01.005256.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.013260.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.030075.

3 CALLS edges created
208 PHP_REACHES edges created
211 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 203 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.142021.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
21 SQL operations to process.
DELETE FROM EFNT_PRODUCTS_TABLE WHERE course_id = sanitize_key($_POST["course_id"])
SQL command (DELETE FROM EFNT_PRODUCTS_TABLE WHERE course_id = sanitize_key($_POST["course_id"])) cannot be parsed correct.
DELETE FROM EFNT_COURSES_TABLE WHERE id = sanitize_key($_POST["course_id"])
SQL command (DELETE FROM EFNT_COURSES_TABLE WHERE id = sanitize_key($_POST["course_id"])) cannot be parsed correct.
DELETE FROM wp_posts WHERE ID = $wpdb->get_var("SELECT product_id FROM " . EFNT_PRODUCTS_TABLE . " WHERE course_id = " . sanitize_key($_POST["course_id"]))
SQL command (DELETE FROM wp_posts WHERE ID = $wpdb->get_var("SELECT product_id FROM " . EFNT_PRODUCTS_TABLE . " WHERE course_id = " . sanitize_key($_POST["course_id"]))) cannot be parsed correct.
CREATE TABLE EFNT_COURSES_TABLE (
		 id mediumint(9) unsigned NOT NULL AUTO_INCREMENT,
		 name varchar(150) NOT NULL,
		 price mediumint(9) unsigned,
		 public_id varchar(30), 
		 categories_ID mediumint(9) unsigned,
		 description text,
		 course_type varchar(30),
		 course_code varchar(30),
		 course_image_large varchar(80),
		 course_image_medium varchar(80),
		 course_image_small varchar(80),
		 PRIMARY KEY  (id)
		 ) $wpdb->get_charset_collate();
SQL command (CREATE TABLE EFNT_COURSES_TABLE ( id mediumint(9) unsigned NOT NULL AUTO_INCREMENT, name varchar(150) NOT NULL, price mediumint(9) unsigned, public_id varchar(30), categories_ID mediumint(9) unsigned, description text, course_type varchar(30), course_code varchar(30), course_image_large varchar(80), course_image_medium varchar(80), course_image_small varchar(80), PRIMARY KEY (id) ) $wpdb->get_charset_collate();) cannot be parsed correct.
CREATE TABLE EFNT_PRODUCTS_TABLE (
			id mediumint(9) NOT NULL AUTO_INCREMENT,
			product_id mediumint(9) NOT NULL,
			course_id mediumint (9) NOT NULL,
			PRIMARY KEY  (id)
		) $wpdb->get_charset_collate();
SQL command (CREATE TABLE EFNT_PRODUCTS_TABLE ( id mediumint(9) NOT NULL AUTO_INCREMENT, product_id mediumint(9) NOT NULL, course_id mediumint (9) NOT NULL, PRIMARY KEY (id) ) $wpdb->get_charset_collate();) cannot be parsed correct.
CREATE TABLE EFNT_CATEGORIES_TABLE (
		  id mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
		  name varchar(150) NOT NULL,
		  PRIMARY KEY  (id)
		) $wpdb->get_charset_collate();
SQL command (CREATE TABLE EFNT_CATEGORIES_TABLE ( id mediumint(8) unsigned NOT NULL AUTO_INCREMENT, name varchar(150) NOT NULL, PRIMARY KEY (id) ) $wpdb->get_charset_collate();) cannot be parsed correct.
CREATE TABLE EFNT_PRODUCT_CATEGORIES_TABLE (
			id mediumint(9) unsigned NOT NULL AUTO_INCREMENT,
			ef_categories_ID mediumint (9),
			woo_categories_ID mediumint (9),
			PRIMARY KEY  (id)
		) $wpdb->get_charset_collate();
SQL command (CREATE TABLE EFNT_PRODUCT_CATEGORIES_TABLE ( id mediumint(9) unsigned NOT NULL AUTO_INCREMENT, ef_categories_ID mediumint (9), woo_categories_ID mediumint (9), PRIMARY KEY (id) ) $wpdb->get_charset_collate();) cannot be parsed correct.
DROP TABLE EFNT_COURSES_TABLE
SQL command (DROP TABLE EFNT_COURSES_TABLE) cannot be parsed correct.
DROP TABLE EFNT_CATEGORIES_TABLE
SQL command (DROP TABLE EFNT_CATEGORIES_TABLE) cannot be parsed correct.
DROP TABLE EFNT_PRODUCTS_TABLE
SQL command (DROP TABLE EFNT_PRODUCTS_TABLE) cannot be parsed correct.
DROP TABLE EFNT_PRODUCT_CATEGORIES_TABLE
SQL command (DROP TABLE EFNT_PRODUCT_CATEGORIES_TABLE) cannot be parsed correct.
TRUNCATE TABLE EFNT_COURSES_TABLE
SQL command (TRUNCATE TABLE EFNT_COURSES_TABLE) cannot be parsed correct.
SELECT * FROM EFNT_COURSES_TABLE
SQL command (SELECT * FROM EFNT_COURSES_TABLE) cannot be parsed correct.
TRUNCATE TABLE EFNT_CATEGORIES_TABLE
SQL command (TRUNCATE TABLE EFNT_CATEGORIES_TABLE) cannot be parsed correct.
SELECT * FROM EFNT_CATEGORIES_TABLE
SQL command (SELECT * FROM EFNT_CATEGORIES_TABLE) cannot be parsed correct.
SELECT c.*, cat.name as category_name FROM EFNT_COURSES_TABLE c JOIN EFNT_CATEGORIES_TABLE cat ON c.categories_ID=cat.id
SQL command (SELECT c.*, cat.name as category_name FROM EFNT_COURSES_TABLE c JOIN EFNT_CATEGORIES_TABLE cat ON c.categories_ID=cat.id) cannot be parsed correct.
SELECT * FROM EFNT_COURSES_TABLE WHERE id = $course_id
SQL command (SELECT * FROM EFNT_COURSES_TABLE WHERE id = $course_id) cannot be parsed correct.
SELECT * FROM EFNT_CATEGORIES_TABLE
SQL command (SELECT * FROM EFNT_CATEGORIES_TABLE) cannot be parsed correct.
SELECT * FROM EFNT_PRODUCT_CATEGORIES_TABLE
SQL command (SELECT * FROM EFNT_PRODUCT_CATEGORIES_TABLE) cannot be parsed correct.
SELECT * FROM EFNT_PRODUCTS_TABLE WHERE course_id = $course_id
SQL command (SELECT * FROM EFNT_PRODUCTS_TABLE WHERE course_id = $course_id) cannot be parsed correct.
SELECT * FROM EFNT_PRODUCT_CATEGORIES_TABLE WHERE ef_categories_ID = $category_id
SQL command (SELECT * FROM EFNT_PRODUCT_CATEGORIES_TABLE WHERE ef_categories_ID = $category_id) cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [735, 756, 777, 6685, 6711, 6737, 6763, 6779, 6789, 6799, 6809, 7549, 7562, 7766, 7779, 7879, 7932, 8019, 8054, 8560, 8707]
Added 0 SQL nodes. 0 out of 21 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:05.351773.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'admin_url("admin.php?page=efrontpro-setup")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=efrontpro-integrations")'' cannot be parsed correct.
HTML code '$'<div id=\'efrontpro-warning\' class=\'error fade\'><p><strong>You need to specify an eFrontPro domain and API key.</strong> sprintf(__("You must <a href="%1$s">enter your domain and API key</a> to setup your plugin.", "eFrontPro"), "admin.php?page=efrontpro-setup")</p></div>'' cannot be parsed correct.
HTML code '$'$e->getMessage()'' cannot be parsed correct.
HTML code '$'$action_status'' cannot be parsed correct.
HTML code '$'$action_message'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=efrontpro-integrations")'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=efrontpro-integrations")'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'wp_create_nonce("ef_reset_course")'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'checked'' cannot be parsed correct.
HTML code '$'$action_status'' cannot be parsed correct.
HTML code '$'$action_message'' cannot be parsed correct.
HTML code '$'admin_url("admin.php?page=efrontpro-setup")'' cannot be parsed correct.
HTML code '$'$domain_validation'' cannot be parsed correct.
HTML code '$'$domain_validation'' cannot be parsed correct.
HTML code '$'get_option("ef-domain")'' cannot be parsed correct.
HTML code '$'$api_validation'' cannot be parsed correct.
HTML code '$'$api_validation'' cannot be parsed correct.
HTML code '$'get_option("ef-apikey")'' cannot be parsed correct.
HTML code '$'$category'' cannot be parsed correct.
HTML code '$'$category'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'($course)'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'$course'' cannot be parsed correct.
HTML code '$'efnt_getCourse($_GET["ef-course"])_avatar_small'' cannot be parsed correct.
HTML code '$'efnt_getCourse($_GET["ef-course"])_name'' cannot be parsed correct.
HTML code '$'efnt_getCourse($_GET["ef-course"])_name'' cannot be parsed correct.
HTML code '$'efnt_getCourse($_GET["ef-course"])_price-'' cannot be parsed correct.
HTML code '$'efnt_getCourse($_GET["ef-course"])_description'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'$lesson'' cannot be parsed correct.
HTML code '$'</p>
                    <p>'' cannot be parsed correct.
HTML code '$'<div class=\'alert alert-error\'>'' cannot be parsed correct.
HTML code '$'</div>'' cannot be parsed correct.
HTML code '$'</p>
        </div>


        <h2>WooCommerce</h2>

        <!-- form to post to get new courses -->
        <form action='' cannot be parsed correct.
HTML code '$'
                            <div class="row-actions">
                                <span class="inline hide-if-no-js">
                                    <a class="ef-reset-course" data-wpnonce="'' cannot be parsed correct.
HTML code '$'">
            </p>

        </form>

'' cannot be parsed correct.
HTML code '$'</p>
	</div>

	<form name="efrontpro-setup-form" method="post" action="'' cannot be parsed correct.
HTML code '$'" />
		</p>
	</form>

</div'' cannot be parsed correct.
HTML code '$'    </fieldset>



    <table id="ef_courses_table" >
        <thead>
        <tr>
            <th>'' cannot be parsed correct.
HTML code '$'" alt="'' cannot be parsed correct.
HTML code '$'<pre>'' cannot be parsed correct.
HTML code '$'</pre>'' cannot be parsed correct.
HTML code '$'<pre>'' cannot be parsed correct.
HTML code '$'</pre>'' cannot be parsed correct.
HTML code '$'<pre>'' cannot be parsed correct.
HTML code '$'</pre>'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:06.396492.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.043190.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 2 do_action/apply_filters calls and 8 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:00.545740.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running FileProDetector
### Start running FrontBaseDetector
### Finish running DbaseDetector
### Start running HashDetector
### Finish running DbplusDetector
### Start running IBMDb2Detector
### Finish running CubridDetector
### Start running InformixDetector
### Finish running FirebirdInterBaseDetector
### Start running IngresDetector
### Finish running IBMDb2Detector
### Start running maxdbDetector
### Finish running HashDetector
### Start running MongoDbDetector
### Finish running FrontBaseDetector
### Start running MongoDetector
### Finish running MongoDetector
### Start running MsqlDetector
### Finish running InformixDetector
### Start running MySQLDetector
### Finish running ArrayElementDetector
### Start running MySQLiDetector
### Finish running IngresDetector
### Start running Oci8Detector
### Finish running MongoDbDetector
### Start running OpenSSLDetector
### Finish running MsqlDetector
### Start running ParadoxDetector
### Finish running MySQLDetector
### Start running PasswordHashingDetector
### Finish running OpenSSLDetector
### Start running PhpCurlDetector
### Finish running Oci8Detector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running ParadoxDetector
### Start running PHPRetrievalDetector
### Finish running PHPRetrievalDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PasswordHashingDetector
### Start running PhpVarDetector
### Finish running PHPStorageDetector
### Start running PostgreSQLDetector
### Finish running PostgreSQLDetector
### Start running PropertyDetector
### Finish running PHPIncludedDetector
### Start running Sqlite3Detector
### Finish running PhpVarDetector
### Start running SqliteDetector
### Finish running Sqlite3Detector
### Start running SqlServerDetector
### Finish running PropertyDetector
### Start running SybaseDetector
### Finish running SqliteDetector
### Start running TokyoTyrantDetector
### Finish running SqlServerDetector
### Start running UserInputDetector
### Finish running TokyoTyrantDetector
### Start running VariableDetector
### Finish running SybaseDetector
### Start running WordpressHashingFnDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressRemoteDetector
### Finish running WordPressRemoteDetector
### Start running WordPressRetrievalDetector
### Finish running UserInputDetector
### Start running WordPressStorageDetector
### Finish running VariableDetector
### Start running WP_UserDetector
### Finish running WP_UserDetector
### Start running GenericDatabaseUsageDetector
### Finish running GenericDatabaseUsageDetector
### Start running GenericEncryptionDetector
### Finish running PhpCurlDetector
### Start running DeletionDetector
### Finish running GenericEncryptionDetector
### Start running UninstallDetector
### Finish running UninstallDetector
### Finish running maxdbDetector
### Finish running MySQLiDetector
### Finish running WordPressRetrievalDetector
### Finish running DeletionDetector
### Finish running WordPressStorageDetector
### Finished running detectors
integrations/woocommerce.php:11
  - Request variable '$_POST["account_username"]' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
integrations/woocommerce.php:12
  - Request variable '$_POST["account_username"]' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
integrations/woocommerce.php:14
  - Request variable '$_POST["billing_email"]' of personal types {'email'} is found.
  - Data types: email
integrations/woocommerce.php:19
  - Request variable '$_POST["billing_first_name"]' of personal types {'first_name'} is found.
  - Data types: first_name
integrations/woocommerce.php:20
  - Request variable '$_POST["billing_last_name"]' of personal types {'last_name'} is found.
  - Data types: last_name
integrations/woocommerce.php:21
  - Request variable '$_POST["billing_email"]' of personal types {'email'} is found.
  - Data types: email
integrations/woocommerce.php:23
  - Request variable '$_POST["account_password"]' of personal types {'password'} is found.
  - Data types: password 

integrations/woocommerce.php:43
  - object property 'get_userdata($order->user_id)->user_email' of personal types {'email'} is found.
  - Data types: email 

integrations/woocommerce.php:12
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
integrations/woocommerce.php:14
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
integrations/woocommerce.php:15
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
integrations/woocommerce.php:15
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
integrations/woocommerce.php:22
  - variable '$username' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta 

admin/admin.php:159
  - RETRIEVAL call to get_option("ef-domain") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/admin.php:159
  - RETRIEVAL call to get_option("ef-apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/admin.php:168
  - RETRIEVAL call to get_option("ef-domain") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/admin.php:169
  - RETRIEVAL call to get_option("ef-apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/menu-pages/integrations.php:5
  - RETRIEVAL call to get_option("ef-woocommerce-active") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/menu-pages/setup.php:18
  - RETRIEVAL call to get_option("ef-domain") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
admin/menu-pages/setup.php:26
  - RETRIEVAL call to get_option("ef-apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
integrations/woocommerce.php:4
  - RETRIEVAL call to get_option("ef-woocommerce-active") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
integrations/woocommerce.php:41
  - RETRIEVAL call to get_post_meta($items["product_id"], "_efront_course_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $key (string). Returns (mixed).
  - Data types: post_meta
integrations/woocommerce.php:43
  - RETRIEVAL call to get_userdata($order->user_id) alters data types {'user', 'user_meta'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).
  - Data types: user, user_meta
utils/db.php:33
  - RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).
utils/db.php:43
  - RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).
utils/db.php:51
  - RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).
utils/db.php:60
  - RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).
utils/install.php:117
  - RETRIEVAL call to get_option("ef_courses_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
utils/install.php:118
  - RETRIEVAL call to get_option("ef_courses_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
utils/install.php:119
  - RETRIEVAL call to get_option("ef_courses_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
utils/install.php:131
  - RETRIEVAL call to get_option("ef_signup_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
utils/install.php:132
  - RETRIEVAL call to get_option("ef_signup_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
utils/install.php:133
  - RETRIEVAL call to get_option("ef_signup_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
utils/utils.php:140
  - RETRIEVAL call to wp_get_current_user() alters data types {'user', 'user_meta'}. Returns (WP_User).
  - Data types: user, user_meta 

admin/admin.php:67
  - STORAGE call to update_option("ef-domain", sanitize_text_field($_POST["ef-domain"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin/admin.php:68
  - STORAGE call to update_option("ef-apikey", sanitize_text_field($_POST["ef-apikey"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin/admin.php:80
  - STORAGE call to update_option("ef-domain", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
admin/admin.php:86
  - STORAGE call to update_option("ef-apikey", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
efrontpro.php:35
  - STORAGE call to update_option("ef-woocommerce-active", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
efrontpro.php:37
  - STORAGE call to update_option("ef-woocommerce-active", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
utils/install.php:14
  - STORAGE call to update_option("ef-domain", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
utils/install.php:15
  - STORAGE call to update_option("ef-apikey", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
utils/install.php:16
  - STORAGE call to update_option("ef-woocommerce-active", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
utils/install.php:31
  - STORAGE call to delete_option("ef_courses_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:32
  - STORAGE call to add_option("ef_courses_page_title", $the_page_title, "", "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).
  - Data types: option
utils/install.php:33
  - STORAGE call to delete_option("ef_courses_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:34
  - STORAGE call to add_option("ef_courses_page_name", $the_page_name, "", "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).
  - Data types: option
utils/install.php:35
  - STORAGE call to delete_option("ef_courses_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:36
  - STORAGE call to add_option("ef_courses_page_id", "0", "", "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).
  - Data types: option
utils/install.php:48
  - STORAGE call to wp_insert_post($_p). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
utils/install.php:52
  - STORAGE call to wp_update_post($the_page). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).
utils/install.php:54
  - STORAGE call to delete_option("ef_courses_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:55
  - STORAGE call to add_option("ef_courses_page_id", $the_page_id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
utils/install.php:64
  - STORAGE call to delete_option("ef_signup_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:65
  - STORAGE call to add_option("ef_signup_page_title", $the_page_title, "", "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).
  - Data types: option
utils/install.php:66
  - STORAGE call to delete_option("ef_signup_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:67
  - STORAGE call to add_option("ef_signup_page_name", $the_page_name, "", "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).
  - Data types: option
utils/install.php:68
  - STORAGE call to delete_option("ef_signup_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:69
  - STORAGE call to add_option("ef_signup_page_id", "1", "", "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).
  - Data types: option
utils/install.php:81
  - STORAGE call to wp_insert_post($_p). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
utils/install.php:85
  - STORAGE call to wp_update_post($the_page). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).
utils/install.php:87
  - STORAGE call to delete_option("ef_signup_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:88
  - STORAGE call to add_option("ef_signup_page_id", $the_page_id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
utils/install.php:104
  - STORAGE call to delete_option("ef-domain") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:105
  - STORAGE call to delete_option("ef-apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:106
  - STORAGE call to delete_option("ef-woocommerce-active") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:121
  - STORAGE call to wp_delete_post($the_page_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: wp_post, post_meta, post
utils/install.php:123
  - STORAGE call to delete_option("ef_courses_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:124
  - STORAGE call to delete_option("ef_courses_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:125
  - STORAGE call to delete_option("ef_courses_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:135
  - STORAGE call to wp_delete_post($the_page_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: wp_post, post_meta, post
utils/install.php:137
  - STORAGE call to delete_option("ef_signup_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:138
  - STORAGE call to delete_option("ef_signup_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:139
  - STORAGE call to delete_option("ef_signup_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/utils.php:148
  - STORAGE call to wp_insert_post($post). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
utils/utils.php:153
  - STORAGE call to update_post_meta($product_id, "_visibility", "visible") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:154
  - STORAGE call to update_post_meta($product_id, "_stock_status", "instock") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:155
  - STORAGE call to update_post_meta($product_id, "total_sales", "0") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:156
  - STORAGE call to update_post_meta($product_id, "_downloadable", "no") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:157
  - STORAGE call to update_post_meta($product_id, "_virtual", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:158
  - STORAGE call to update_post_meta($product_id, "_purchase_note", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:159
  - STORAGE call to update_post_meta($product_id, "_featured", "no") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:160
  - STORAGE call to update_post_meta($product_id, "_weight", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:161
  - STORAGE call to update_post_meta($product_id, "_length", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:162
  - STORAGE call to update_post_meta($product_id, "_width", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:163
  - STORAGE call to update_post_meta($product_id, "_height", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:164
  - STORAGE call to update_post_meta($product_id, "_sku", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:165
  - STORAGE call to update_post_meta($product_id, "_product_attributes", []) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:166
  - STORAGE call to update_post_meta($product_id, "_sale_price_dates_from", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:167
  - STORAGE call to update_post_meta($product_id, "_sale_price_dates_to", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:168
  - STORAGE call to update_post_meta($product_id, "_price", $courses[$course_id]->price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:169
  - STORAGE call to update_post_meta($product_id, "_regular_price", $courses[$course_id]->price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:170
  - STORAGE call to update_post_meta($product_id, "_sale_price", $courses[$course_id]->price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:171
  - STORAGE call to update_post_meta($product_id, "_sold_individually", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:172
  - STORAGE call to update_post_meta($product_id, "_manage_stock", "no") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:173
  - STORAGE call to update_post_meta($product_id, "_backorders", "no") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:174
  - STORAGE call to update_post_meta($product_id, "_stock", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
utils/utils.php:175
  - STORAGE call to update_post_meta($product_id, "_efront_course_id", $course_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta 

utils/install.php:31
  - DELETION call to delete_option("ef_courses_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:33
  - DELETION call to delete_option("ef_courses_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:35
  - DELETION call to delete_option("ef_courses_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:54
  - DELETION call to delete_option("ef_courses_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:64
  - DELETION call to delete_option("ef_signup_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:66
  - DELETION call to delete_option("ef_signup_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:68
  - DELETION call to delete_option("ef_signup_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:87
  - DELETION call to delete_option("ef_signup_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:104
  - DELETION call to delete_option("ef-domain") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:105
  - DELETION call to delete_option("ef-apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:106
  - DELETION call to delete_option("ef-woocommerce-active") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:121
  - DELETION call to wp_delete_post($the_page_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: wp_post, post_meta, post
utils/install.php:123
  - DELETION call to delete_option("ef_courses_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:124
  - DELETION call to delete_option("ef_courses_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:125
  - DELETION call to delete_option("ef_courses_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:135
  - DELETION call to wp_delete_post($the_page_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: wp_post, post_meta, post
utils/install.php:137
  - DELETION call to delete_option("ef_signup_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:138
  - DELETION call to delete_option("ef_signup_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
utils/install.php:139
  - DELETION call to delete_option("ef_signup_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

By data type:
email
	PropertyDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
first_name
	ArrayElementDetector.(unknown) - {'first_name'}
last_name
	ArrayElementDetector.(unknown) - {'last_name'}
none
	WordPressStorageDetector.wp_update_post($the_page) - set()
	WordPressRetrievalDetector.dbDelta($sql) - set()
	WordPressStorageDetector.wp_insert_post($_p) - set()
	WordPressStorageDetector.wp_insert_post($post) - set()
	WordPressRetrievalDetector.dbDelta($sql) - set()
	WordPressRetrievalDetector.dbDelta($sql) - set()
	WordPressRetrievalDetector.dbDelta($sql) - set()
	WordPressStorageDetector.wp_insert_post($_p) - set()
	WordPressStorageDetector.wp_update_post($the_page) - set()
option
	WordPressRetrievalDetector.get_option("ef_signup_page_id") - {'option'}
	WordPressStorageDetector.delete_option("ef-domain") - {'option'}
	WordPressStorageDetector.delete_option("ef-woocommerce-active") - {'option'}
	WordPressStorageDetector.update_option("ef-domain", "") - {'option'}
	WordPressStorageDetector.add_option("ef_courses_page_title", $the_page_title, "", "yes") - {'option'}
	WordPressStorageDetector.add_option("ef_courses_page_name", $the_page_name, "", "yes") - {'option'}
	WordPressStorageDetector.update_option("ef-domain", sanitize_text_field($_POST["ef-domain"])) - {'option'}
	DeletionDetector.delete_option("ef_signup_page_title") - {'option'}
	WordPressStorageDetector.delete_option("ef_courses_page_name") - {'option'}
	DeletionDetector.delete_option("ef-apikey") - {'option'}
	WordPressStorageDetector.add_option("ef_courses_page_id", $the_page_id) - {'option'}
	WordPressStorageDetector.add_option("ef_signup_page_name", $the_page_name, "", "yes") - {'option'}
	DeletionDetector.delete_option("ef_signup_page_id") - {'option'}
	WordPressStorageDetector.update_option("ef-apikey", "") - {'option'}
	WordPressStorageDetector.delete_option("ef_courses_page_title") - {'option'}
	WordPressStorageDetector.add_option("ef_signup_page_id", $the_page_id) - {'option'}
	WordPressRetrievalDetector.get_option("ef-apikey") - {'option'}
	WordPressStorageDetector.add_option("ef_courses_page_id", "0", "", "yes") - {'option'}
	WordPressStorageDetector.delete_option("ef_courses_page_name") - {'option'}
	DeletionDetector.delete_option("ef_courses_page_id") - {'option'}
	WordPressRetrievalDetector.get_option("ef_courses_page_id") - {'option'}
	WordPressRetrievalDetector.get_option("ef-domain") - {'option'}
	WordPressRetrievalDetector.get_option("ef_courses_page_name") - {'option'}
	WordPressStorageDetector.update_option("ef-woocommerce-active", 1) - {'option'}
	WordPressRetrievalDetector.get_option("ef-apikey") - {'option'}
	DeletionDetector.delete_option("ef_courses_page_title") - {'option'}
	WordPressRetrievalDetector.get_option("ef_signup_page_title") - {'option'}
	WordPressStorageDetector.update_option("ef-domain", "") - {'option'}
	WordPressStorageDetector.update_option("ef-apikey", sanitize_text_field($_POST["ef-apikey"])) - {'option'}
	WordPressRetrievalDetector.get_option("ef-woocommerce-active") - {'option'}
	WordPressStorageDetector.delete_option("ef_courses_page_id") - {'option'}
	DeletionDetector.delete_option("ef_courses_page_id") - {'option'}
	WordPressRetrievalDetector.get_option("ef-apikey") - {'option'}
	WordPressStorageDetector.delete_option("ef_courses_page_title") - {'option'}
	WordPressRetrievalDetector.get_option("ef-domain") - {'option'}
	WordPressStorageDetector.delete_option("ef_signup_page_id") - {'option'}
	WordPressStorageDetector.update_option("ef-apikey", "") - {'option'}
	WordPressRetrievalDetector.get_option("ef-woocommerce-active") - {'option'}
	DeletionDetector.delete_option("ef_signup_page_id") - {'option'}
	WordPressStorageDetector.update_option("ef-woocommerce-active", 0) - {'option'}
	WordPressRetrievalDetector.get_option("ef_signup_page_name") - {'option'}
	WordPressRetrievalDetector.get_option("ef-domain") - {'option'}
	DeletionDetector.delete_option("ef_signup_page_id") - {'option'}
	WordPressStorageDetector.delete_option("ef_signup_page_id") - {'option'}
	WordPressStorageDetector.delete_option("ef_courses_page_id") - {'option'}
	WordPressStorageDetector.delete_option("ef_signup_page_name") - {'option'}
	DeletionDetector.delete_option("ef_signup_page_name") - {'option'}
	DeletionDetector.delete_option("ef-domain") - {'option'}
	DeletionDetector.delete_option("ef_courses_page_id") - {'option'}
	WordPressStorageDetector.update_option("ef-woocommerce-active", 0) - {'option'}
	DeletionDetector.delete_option("ef_signup_page_name") - {'option'}
	DeletionDetector.delete_option("ef_courses_page_title") - {'option'}
	WordPressStorageDetector.delete_option("ef_signup_page_title") - {'option'}
	WordPressRetrievalDetector.get_option("ef_courses_page_title") - {'option'}
	DeletionDetector.delete_option("ef_courses_page_name") - {'option'}
	WordPressStorageDetector.add_option("ef_signup_page_title", $the_page_title, "", "yes") - {'option'}
	DeletionDetector.delete_option("ef_signup_page_title") - {'option'}
	WordPressStorageDetector.add_option("ef_signup_page_id", "1", "", "yes") - {'option'}
	WordPressStorageDetector.delete_option("ef_signup_page_title") - {'option'}
	DeletionDetector.delete_option("ef_courses_page_name") - {'option'}
	WordPressStorageDetector.delete_option("ef_signup_page_name") - {'option'}
	DeletionDetector.delete_option("ef-woocommerce-active") - {'option'}
	WordPressStorageDetector.delete_option("ef-apikey") - {'option'}
	WordPressStorageDetector.delete_option("ef_signup_page_id") - {'option'}
	WordPressStorageDetector.delete_option("ef_courses_page_id") - {'option'}
password
	ArrayElementDetector.(unknown) - {'password'}
post
	WordPressStorageDetector.wp_delete_post($the_page_id) - {'wp_post', 'post_meta', 'post'}
	WordPressStorageDetector.wp_delete_post($the_page_id) - {'wp_post', 'post_meta', 'post'}
	DeletionDetector.wp_delete_post($the_page_id) - {'wp_post', 'post_meta', 'post'}
	DeletionDetector.wp_delete_post($the_page_id) - {'wp_post', 'post_meta', 'post'}
post_meta
	WordPressStorageDetector.update_post_meta($product_id, "_backorders", "no") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_sale_price", $courses[$course_id]->price) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($items["product_id"], "_efront_course_id") - {'post_meta'}
	WordPressStorageDetector.wp_delete_post($the_page_id) - {'wp_post', 'post_meta', 'post'}
	WordPressStorageDetector.wp_delete_post($the_page_id) - {'wp_post', 'post_meta', 'post'}
	WordPressStorageDetector.update_post_meta($product_id, "_stock_status", "instock") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_virtual", "yes") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_regular_price", $courses[$course_id]->price) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_downloadable", "no") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_price", $courses[$course_id]->price) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_sale_price_dates_to", "") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_efront_course_id", $course_id) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "total_sales", "0") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_visibility", "visible") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_sold_individually", "") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_product_attributes", []) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_width", "") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_weight", "") - {'post_meta'}
	DeletionDetector.wp_delete_post($the_page_id) - {'wp_post', 'post_meta', 'post'}
	WordPressStorageDetector.update_post_meta($product_id, "_length", "") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_manage_stock", "no") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_purchase_note", "") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_stock", "") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_sale_price_dates_from", "") - {'post_meta'}
	DeletionDetector.wp_delete_post($the_page_id) - {'wp_post', 'post_meta', 'post'}
	WordPressStorageDetector.update_post_meta($product_id, "_height", "") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_featured", "no") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_sku", "") - {'post_meta'}
user
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	ArrayElementDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	ArrayElementDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.get_userdata($order->user_id) - {'user', 'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user', 'user_meta'}
user_meta
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	ArrayElementDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	ArrayElementDetector.(unknown) - {'user', 'user_meta'}
	WordPressRetrievalDetector.get_userdata($order->user_id) - {'user', 'user_meta'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user', 'user_meta'}
wp_post
	WordPressStorageDetector.wp_delete_post($the_page_id) - {'wp_post', 'post_meta', 'post'}
	WordPressStorageDetector.wp_delete_post($the_page_id) - {'wp_post', 'post_meta', 'post'}
	DeletionDetector.wp_delete_post($the_page_id) - {'wp_post', 'post_meta', 'post'}
	DeletionDetector.wp_delete_post($the_page_id) - {'wp_post', 'post_meta', 'post'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:20.922813.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 501 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.592031.

!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 8101
501 STORE_REACHES edges created
501 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 247 nodes as PERSONAL
In total, tainted 247 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
In total, tainted 0 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:10.516514.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:01:43.928428!
Request variable '$_POST["account_username"]' of personal types {'user', 'user_meta'} is found.,,None
Request variable '$_POST["account_username"]' of personal types {'user', 'user_meta'} is found.,,None
Request variable '$_POST["billing_email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["billing_first_name"]' of personal types {'first_name'} is found.,,None
Request variable '$_POST["billing_last_name"]' of personal types {'last_name'} is found.,,None
Request variable '$_POST["billing_email"]' of personal types {'email'} is found.,,None
Request variable '$_POST["account_password"]' of personal types {'password'} is found.,,None
DELETION call to delete_option("ef-domain") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("ef-apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("ef-woocommerce-active") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to wp_delete_post($the_page_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).,None,None
DELETION call to delete_option("ef_courses_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("ef_courses_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("ef_courses_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to wp_delete_post($the_page_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).,None,None
DELETION call to delete_option("ef_signup_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("ef_signup_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("ef_signup_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("ef_courses_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("ef_courses_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("ef_courses_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("ef_courses_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("ef_signup_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("ef_signup_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("ef_signup_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("ef_signup_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
object property 'get_userdata($order->user_id)->user_email' of personal types {'email'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
variable '$username' of personal types {'user', 'user_meta'} is found.,,None
RETRIEVAL call to get_option("ef-apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("ef-domain") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("ef-domain") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("ef-apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("ef-woocommerce-active") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("ef-domain") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("ef-apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("ef-woocommerce-active") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($items["product_id"], "_efront_course_id") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_userdata($order->user_id) alters data types {'user', 'user_meta'}. Passed arguments: 0: $user_id (int). Returns (WP_User|false).,None,None
RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to get_option("ef_courses_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("ef_courses_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("ef_courses_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("ef_signup_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("ef_signup_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("ef_signup_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user', 'user_meta'}. Returns (WP_User).,None,None
STORAGE call to update_option("ef-domain", sanitize_text_field($_POST["ef-domain"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("ef-apikey", sanitize_text_field($_POST["ef-apikey"])) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("ef-domain", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("ef-apikey", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("ef-woocommerce-active", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("ef-woocommerce-active", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("ef-domain") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("ef-apikey") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("ef-woocommerce-active") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to wp_delete_post($the_page_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to delete_option("ef_courses_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("ef_courses_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("ef_courses_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to wp_delete_post($the_page_id) alters data types {'wp_post', 'post_meta', 'post'}. Passed arguments: 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to delete_option("ef_signup_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("ef_signup_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("ef_signup_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to update_option("ef-domain", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("ef-apikey", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("ef-woocommerce-active", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("ef_courses_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_option("ef_courses_page_title", $the_page_title, "", "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("ef_courses_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_option("ef_courses_page_name", $the_page_name, "", "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("ef_courses_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_option("ef_courses_page_id", "0", "", "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_insert_post($_p). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to wp_update_post($the_page). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).,None,None
STORAGE call to delete_option("ef_courses_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_option("ef_courses_page_id", $the_page_id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("ef_signup_page_title") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_option("ef_signup_page_title", $the_page_title, "", "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("ef_signup_page_name") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_option("ef_signup_page_name", $the_page_name, "", "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("ef_signup_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_option("ef_signup_page_id", "1", "", "yes") alters data types {'option'}. Passed arguments: 0: $option (string), 3: $autoload (string|bool), 2: $deprecated (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_insert_post($_p). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to wp_update_post($the_page). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).,None,None
STORAGE call to delete_option("ef_signup_page_id") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_option("ef_signup_page_id", $the_page_id) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to wp_insert_post($post). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($product_id, "_visibility", "visible") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_stock_status", "instock") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "total_sales", "0") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_downloadable", "no") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_virtual", "yes") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_purchase_note", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_featured", "no") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_weight", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_length", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_width", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_height", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_sku", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_product_attributes", []) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_sale_price_dates_from", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_sale_price_dates_to", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_price", $courses[$course_id]->price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_regular_price", $courses[$course_id]->price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_sale_price", $courses[$course_id]->price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_sold_individually", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_manage_stock", "no") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_backorders", "no") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_stock", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_efront_course_id", $course_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_backorders", "no")", found in file utils/utils.php at line 173. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_sale_price", $courses[$course_id]->price)", found in file utils/utils.php at line 170. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_stock_status", "instock")", found in file utils/utils.php at line 154. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_virtual", "yes")", found in file utils/utils.php at line 157. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_regular_price", $courses[$course_id]->price)", found in file utils/utils.php at line 169. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_downloadable", "no")", found in file utils/utils.php at line 156. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_price", $courses[$course_id]->price)", found in file utils/utils.php at line 168. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_sale_price_dates_to", "")", found in file utils/utils.php at line 167. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_efront_course_id", $course_id)", found in file utils/utils.php at line 175. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "wp_insert_post($post)", found in file utils/utils.php at line 148. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "total_sales", "0")", found in file utils/utils.php at line 155. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_visibility", "visible")", found in file utils/utils.php at line 153. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_sold_individually", "")", found in file utils/utils.php at line 171. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_product_attributes", [])", found in file utils/utils.php at line 165. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_width", "")", found in file utils/utils.php at line 162. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_weight", "")", found in file utils/utils.php at line 160. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_length", "")", found in file utils/utils.php at line 161. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_manage_stock", "no")", found in file utils/utils.php at line 172. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_purchase_note", "")", found in file utils/utils.php at line 158. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_stock", "")", found in file utils/utils.php at line 174. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_sale_price_dates_from", "")", found in file utils/utils.php at line 166. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_height", "")", found in file utils/utils.php at line 163. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_featured", "no")", found in file utils/utils.php at line 159. 

[has_storage] PII of types (['user', 'user_meta']) stored through WordPress function "update_post_meta($product_id, "_sku", "")", found in file utils/utils.php at line 164. 

[has_storage] Storage check is WP 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_backorders", "no") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 173. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_sale_price", $courses[$course_id]->price) does not have corresponding deletion method. Storage method found in file utils/utils.php at line 170. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_stock_status", "instock") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 154. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_virtual", "yes") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 157. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_regular_price", $courses[$course_id]->price) does not have corresponding deletion method. Storage method found in file utils/utils.php at line 169. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_downloadable", "no") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 156. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_price", $courses[$course_id]->price) does not have corresponding deletion method. Storage method found in file utils/utils.php at line 168. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_sale_price_dates_to", "") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 167. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_efront_course_id", $course_id) does not have corresponding deletion method. Storage method found in file utils/utils.php at line 175. 

[Art.17, Right to erasure] Wordpress storage of PII through wp_insert_post($post) does not have corresponding deletion method. Storage method found in file utils/utils.php at line 148. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "total_sales", "0") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 155. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_visibility", "visible") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 153. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_sold_individually", "") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 171. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_product_attributes", []) does not have corresponding deletion method. Storage method found in file utils/utils.php at line 165. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_width", "") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 162. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_weight", "") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 160. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_length", "") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 161. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_manage_stock", "no") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 172. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_purchase_note", "") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 158. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_stock", "") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 174. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_sale_price_dates_from", "") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 166. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_height", "") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 163. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_featured", "no") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 159. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_sku", "") does not have corresponding deletion method. Storage method found in file utils/utils.php at line 164. 

[Art.17, Right to erasure] Deletion access is NONE 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8349. Found in file utils/utils.php at line 173 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8319. Found in file utils/utils.php at line 170 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8179. Found in file utils/utils.php at line 154 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8203. Found in file utils/utils.php at line 157 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8305. Found in file utils/utils.php at line 169 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8195. Found in file utils/utils.php at line 156 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8291. Found in file utils/utils.php at line 168 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8283. Found in file utils/utils.php at line 167 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8365. Found in file utils/utils.php at line 175 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8143. Found in file utils/utils.php at line 148 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8187. Found in file utils/utils.php at line 155 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8171. Found in file utils/utils.php at line 153 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8333. Found in file utils/utils.php at line 171 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8267. Found in file utils/utils.php at line 165 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8243. Found in file utils/utils.php at line 162 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8227. Found in file utils/utils.php at line 160 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8235. Found in file utils/utils.php at line 161 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8341. Found in file utils/utils.php at line 172 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8211. Found in file utils/utils.php at line 158 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8357. Found in file utils/utils.php at line 174 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8275. Found in file utils/utils.php at line 166 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8251. Found in file utils/utils.php at line 163 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8219. Found in file utils/utils.php at line 159 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 8259. Found in file utils/utils.php at line 164 

[Art.15, Right to access] Data access is NONE_BUT_NOT_REQUIRED 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? True 

[main] Is access in violation? False 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? False 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        
