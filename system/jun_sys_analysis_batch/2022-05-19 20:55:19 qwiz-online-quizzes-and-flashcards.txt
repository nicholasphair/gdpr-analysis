Timeout in resolving values
Timeout in running neo4j query
Running Main.py on qwiz-online-quizzes-and-flashcards

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:07.879309.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:03.840991.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 0 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.549128.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 2 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:02.074712.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 2548 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:03.484645.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 0 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.943225.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.208612.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 964 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:01:43.184713.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 11465
Added 7951 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 230121
Added 218656 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:14.811006.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/qwiz-online-quizzes-and-flashcards/browse_dataset_questions.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/qwiz-online-quizzes-and-flashcards/globals.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/qwiz-online-quizzes-and-flashcards/payment_received.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/qwiz-online-quizzes-and-flashcards/qwiz_admin.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/qwiz-online-quizzes-and-flashcards/qwizcards-header.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/qwiz-online-quizzes-and-flashcards/qwizcards-plugin.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/qwiz-online-quizzes-and-flashcards/qwiz_get_attr.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/qwiz-online-quizzes-and-flashcards/qwiz_update_datasets.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:00.889218.

2 REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
11463 PHP_REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
12000 PHP_REACHES edges created
13000 PHP_REACHES edges created
14000 PHP_REACHES edges created
15000 PHP_REACHES edges created
16000 PHP_REACHES edges created
17000 PHP_REACHES edges created
18000 PHP_REACHES edges created
19000 PHP_REACHES edges created
20000 PHP_REACHES edges created
21000 PHP_REACHES edges created
22000 PHP_REACHES edges created
23000 PHP_REACHES edges created
24000 PHP_REACHES edges created
25000 PHP_REACHES edges created
26000 PHP_REACHES edges created
27000 PHP_REACHES edges created
28000 PHP_REACHES edges created
29000 PHP_REACHES edges created
30000 PHP_REACHES edges created
31000 PHP_REACHES edges created
32000 PHP_REACHES edges created
33000 PHP_REACHES edges created
34000 PHP_REACHES edges created
35000 PHP_REACHES edges created
36000 PHP_REACHES edges created
37000 PHP_REACHES edges created
38000 PHP_REACHES edges created
39000 PHP_REACHES edges created
40000 PHP_REACHES edges created
41000 PHP_REACHES edges created
42000 PHP_REACHES edges created
43000 PHP_REACHES edges created
44000 PHP_REACHES edges created
45000 PHP_REACHES edges created
46000 PHP_REACHES edges created
47000 PHP_REACHES edges created
48000 PHP_REACHES edges created
49000 PHP_REACHES edges created
50000 PHP_REACHES edges created
51000 PHP_REACHES edges created
52000 PHP_REACHES edges created
53000 PHP_REACHES edges created
54000 PHP_REACHES edges created
55000 PHP_REACHES edges created
56000 PHP_REACHES edges created
57000 PHP_REACHES edges created
58000 PHP_REACHES edges created
59000 PHP_REACHES edges created
60000 PHP_REACHES edges created
61000 PHP_REACHES edges created
62000 PHP_REACHES edges created
63000 PHP_REACHES edges created
64000 PHP_REACHES edges created
65000 PHP_REACHES edges created
66000 PHP_REACHES edges created
67000 PHP_REACHES edges created
68000 PHP_REACHES edges created
69000 PHP_REACHES edges created
70000 PHP_REACHES edges created
71000 PHP_REACHES edges created
72000 PHP_REACHES edges created
73000 PHP_REACHES edges created
74000 PHP_REACHES edges created
75000 PHP_REACHES edges created
76000 PHP_REACHES edges created
77000 PHP_REACHES edges created
78000 PHP_REACHES edges created
79000 PHP_REACHES edges created
80000 PHP_REACHES edges created
81000 PHP_REACHES edges created
82000 PHP_REACHES edges created
83000 PHP_REACHES edges created
84000 PHP_REACHES edges created
85000 PHP_REACHES edges created
86000 PHP_REACHES edges created
87000 PHP_REACHES edges created
88000 PHP_REACHES edges created
89000 PHP_REACHES edges created
90000 PHP_REACHES edges created
91000 PHP_REACHES edges created
92000 PHP_REACHES edges created
93000 PHP_REACHES edges created
94000 PHP_REACHES edges created
95000 PHP_REACHES edges created
96000 PHP_REACHES edges created
97000 PHP_REACHES edges created
98000 PHP_REACHES edges created
99000 PHP_REACHES edges created
100000 PHP_REACHES edges created
101000 PHP_REACHES edges created
102000 PHP_REACHES edges created
103000 PHP_REACHES edges created
104000 PHP_REACHES edges created
105000 PHP_REACHES edges created
106000 PHP_REACHES edges created
107000 PHP_REACHES edges created
108000 PHP_REACHES edges created
109000 PHP_REACHES edges created
110000 PHP_REACHES edges created
111000 PHP_REACHES edges created
112000 PHP_REACHES edges created
113000 PHP_REACHES edges created
114000 PHP_REACHES edges created
115000 PHP_REACHES edges created
116000 PHP_REACHES edges created
117000 PHP_REACHES edges created
118000 PHP_REACHES edges created
119000 PHP_REACHES edges created
120000 PHP_REACHES edges created
121000 PHP_REACHES edges created
122000 PHP_REACHES edges created
123000 PHP_REACHES edges created
124000 PHP_REACHES edges created
125000 PHP_REACHES edges created
126000 PHP_REACHES edges created
127000 PHP_REACHES edges created
128000 PHP_REACHES edges created
129000 PHP_REACHES edges created
130000 PHP_REACHES edges created
131000 PHP_REACHES edges created
132000 PHP_REACHES edges created
133000 PHP_REACHES edges created
134000 PHP_REACHES edges created
135000 PHP_REACHES edges created
136000 PHP_REACHES edges created
137000 PHP_REACHES edges created
138000 PHP_REACHES edges created
139000 PHP_REACHES edges created
140000 PHP_REACHES edges created
141000 PHP_REACHES edges created
142000 PHP_REACHES edges created
143000 PHP_REACHES edges created
144000 PHP_REACHES edges created
145000 PHP_REACHES edges created
146000 PHP_REACHES edges created
147000 PHP_REACHES edges created
148000 PHP_REACHES edges created
149000 PHP_REACHES edges created
150000 PHP_REACHES edges created
151000 PHP_REACHES edges created
152000 PHP_REACHES edges created
153000 PHP_REACHES edges created
154000 PHP_REACHES edges created
155000 PHP_REACHES edges created
156000 PHP_REACHES edges created
157000 PHP_REACHES edges created
158000 PHP_REACHES edges created
159000 PHP_REACHES edges created
160000 PHP_REACHES edges created
161000 PHP_REACHES edges created
162000 PHP_REACHES edges created
163000 PHP_REACHES edges created
164000 PHP_REACHES edges created
165000 PHP_REACHES edges created
166000 PHP_REACHES edges created
167000 PHP_REACHES edges created
168000 PHP_REACHES edges created
169000 PHP_REACHES edges created
170000 PHP_REACHES edges created
171000 PHP_REACHES edges created
172000 PHP_REACHES edges created
173000 PHP_REACHES edges created
174000 PHP_REACHES edges created
175000 PHP_REACHES edges created
176000 PHP_REACHES edges created
177000 PHP_REACHES edges created
178000 PHP_REACHES edges created
179000 PHP_REACHES edges created
180000 PHP_REACHES edges created
181000 PHP_REACHES edges created
182000 PHP_REACHES edges created
183000 PHP_REACHES edges created
184000 PHP_REACHES edges created
185000 PHP_REACHES edges created
186000 PHP_REACHES edges created
187000 PHP_REACHES edges created
188000 PHP_REACHES edges created
189000 PHP_REACHES edges created
190000 PHP_REACHES edges created
191000 PHP_REACHES edges created
192000 PHP_REACHES edges created
193000 PHP_REACHES edges created
194000 PHP_REACHES edges created
195000 PHP_REACHES edges created
196000 PHP_REACHES edges created
197000 PHP_REACHES edges created
198000 PHP_REACHES edges created
199000 PHP_REACHES edges created
200000 PHP_REACHES edges created
201000 PHP_REACHES edges created
202000 PHP_REACHES edges created
203000 PHP_REACHES edges created
204000 PHP_REACHES edges created
205000 PHP_REACHES edges created
206000 PHP_REACHES edges created
207000 PHP_REACHES edges created
208000 PHP_REACHES edges created
209000 PHP_REACHES edges created
210000 PHP_REACHES edges created
211000 PHP_REACHES edges created
212000 PHP_REACHES edges created
213000 PHP_REACHES edges created
214000 PHP_REACHES edges created
215000 PHP_REACHES edges created
216000 PHP_REACHES edges created
217000 PHP_REACHES edges created
218000 PHP_REACHES edges created
218656 PHP_REACHES edges created
230121 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 4014 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.167774.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:06.672639.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 156 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:05.205198.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 88 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.199260.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:01.494465.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:01.090582.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.017314.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.041244.

244 PHP_REACHES edges created
244 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 156 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.133436.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
10 SQL operations to process.
INSERT INTO $wpdbqwiz_textentry_suggestions
                     (word, metaphone)
                     VALUES
implode(",", $value_lines)
SQL command (INSERT INTO $wpdbqwiz_textentry_suggestions (word, metaphone) VALUES implode(",", $value_lines)) cannot be parsed correct.
SELECT   word
            FROM     $wpdbqwiz_textentry_suggestions
            WHERE        word LIKE sanitize_text_field(urldecode($_POST["entry"]))%
                     OR  (metaphone LIKE %s )
            ORDER BY SUBSTR(word, 1, %d) != %s, word
            LIMIT 15
SELECT   word
            FROM     $wpdbqwiz_textentry_suggestions
            WHERE        word LIKE sanitize_text_field(urldecode($_POST["entry"]))%
                     OR  (metaphone LIKE sanitize_text_field(urldecode($_POST["entry_metaphone"]))% )
            ORDER BY SUBSTR(word, 1, %d) != %s, word
            LIMIT 15
SELECT   word
            FROM     $wpdbqwiz_textentry_suggestions
            WHERE        word LIKE sanitize_text_field(urldecode($_POST["entry"]))%
                     OR  (metaphone LIKE sanitize_text_field(urldecode($_POST["entry_metaphonsubstr($entry, 0, $n_hints)%]))% )
            ORDER BY SUBSTR(word, 1, %d) != %s, word
            LIMIT 15
SELECT   word
            FROM     $wpdbqwiz_textentry_suggestions
            WHERE        word LIKE sanitize_text_field(urldecodestrlen($entry)_POST["entry"]))%
                     OR  (metaphone LIKE sanitize_text_field(urldecode($_POST["entry_metaphonsubstr($entry, 0, $n_hints)%]))% )
            ORDER BY SUBSTR(word, 1, %d) != %s, word
            LIMIT 15
SELECT   word
            FROM     $wpdbqwiz_textentry_suggestions
            WHERE        word LIKE sanitize_text_field(urldecodestrlen($entry)_POST["entry"]))%
                     OR  (metaphone LIKE sanitize_text_field(urldecode($_POST["entry_metaphonsubstr($entry, 0, $n_hints)%]))% )
            ORDER BY SUBSTR(word, 1, %d) != %s, word
            LIMIT 15
SQL command (SELECT word FROM $wpdbqwiz_textentry_suggestions WHERE word LIKE sanitize_text_field(urldecodestrlen($entry)_POST["entry"]))% OR (metaphone LIKE sanitize_text_field(urldecode($_POST["entry_metaphonsubstr($entry, 0, $n_hints)%]))% ) ORDER BY SUBSTR(word, 1, %d) != %s, word LIMIT 15) cannot be parsed correct.
CREATE TABLE $wpdbqwiz_dataset_json2 (
                  post_id                 INTEGER NOT NULL,
                  maker_session_id        VARCHAR(255),
                  qwizzes_json_string     LONGTEXT,
                  qdecks_json_string      LONGTEXT,
                  update_msg              VARCHAR(255),
                  updated                 TIMESTAMP,
                  PRIMARY KEY  (post_id)
               );
SQL command (CREATE TABLE $wpdbqwiz_dataset_json2 ( post_id INTEGER NOT NULL, maker_session_id VARCHAR(255), qwizzes_json_string LONGTEXT, qdecks_json_string LONGTEXT, update_msg VARCHAR(255), updated TIMESTAMP, PRIMARY KEY (post_id) );) cannot be parsed correct.
REPLACE INTO   $wpdbqwiz_dataset_json2
            SET            post_id             = sanitize_text_field($_POST["post_id"]),
                           maker_session_id    = %s,
                           qwizzes_json_string = %s,
                           qdecks_json_string  = %s
REPLACE INTO   $wpdbqwiz_dataset_json2
            SET            post_id             = sanitize_text_field($_POST["post_id"]),
                           maker_session_id    = sanitize_text_field(urldecode($_POST["maker_session_id"])),
                           qwizzes_json_string = %s,
                           qdecks_json_string  = %s
REPLACE INTOjson_encode($qwizzes_data) $wpdbqwiz_dataset_json2
            SET            post_id             = sanitize_text_field($_POST["post_id"]),
                           maker_session_id    = sanitize_text_field(urldecode($_POST["maker_session_id"])),
                           qwizzes_json_string = %s,
                           qdecks_json_string  = %s
REPLACE INTOjson_encode($qwizzes_data) $wpdbqwiz_dataset_json2
json_encode($qdecks_data)          SET            post_id             = sanitize_text_field($_POST["post_id"]),
                           maker_session_id    = sanitize_text_field(urldecode($_POST["maker_session_id"])),
                           qwizzes_json_string = %s,
                           qdecks_json_string  = %s
REPLACE INTOjson_encode($qwizzes_data) $wpdbqwiz_dataset_json2
json_encode($qdecks_data)          SET            post_id             = sanitize_text_field($_POST["post_id"]),
                           maker_session_id    = sanitize_text_field(urldecode($_POST["maker_session_id"])),
                           qwizzes_json_string = %s,
                           qdecks_json_string  = %s
SQL command (REPLACE INTOjson_encode($qwizzes_data) $wpdbqwiz_dataset_json2 json_encode($qdecks_data) SET post_id = sanitize_text_field($_POST["post_id"]), maker_session_id = sanitize_text_field(urldecode($_POST["maker_session_id"])), qwizzes_json_string = %s, qdecks_json_string = %s) cannot be parsed correct.
CREATE TABLE $wpdbqwiz_textentry_suggestions (
                  word           varchar(31) NOT NULL,
                  metaphone      varchar(31),
                  UNIQUE KEY index_word (word),
                  KEY index_metaphone (metaphone)
               ) $wpdb->get_charset_collate();
SQL command (CREATE TABLE $wpdbqwiz_textentry_suggestions ( word varchar(31) NOT NULL, metaphone varchar(31), UNIQUE KEY index_word (word), KEY index_metaphone (metaphone) ) $wpdb->get_charset_collate();) cannot be parsed correct.
DELETE FROM $wpdbqwiz_textentry_suggestions
SQL command (DELETE FROM $wpdbqwiz_textentry_suggestions) cannot be parsed correct.
SELECT   maker_session_id,
                     qwizzes_json_string,
                     qdecks_json_string
            FROM     $wpdbqwiz_dataset_json2
            WHERE    post_id = $postarr_ID
SELECT   maker_session_id,
                     qwizzes_json_string,
                     qdecks_json_string
            FROM     $wpdbqwiz_dataset_json2
            WHERE    post_id = $postarr_ID
SQL command (SELECT maker_session_id, qwizzes_json_string, qdecks_json_string FROM $wpdbqwiz_dataset_json2 WHERE post_id = $postarr_ID) cannot be parsed correct.
INSERT INTO       $wpdbqwiz_dataset_json2
            SET               post_id    = sanitize_text_field($_POST["post_id"]),
                              update_msg = %s
            ON DUPLICATE KEY  UPDATE update_msg = %s
INSERT INTO       $wpdbqwiz_dataset_json2
            SET               post_id    = sanitize_text_field($_POST["post_id"]),
                              update_msg = Unable to update questions/cards in Qwizcards database.
            ON DUPLICATE KEY  UPDATE update_msg = %s
INSERT INTO       $wpdbqwiz_dataset_json2
            SET               post_id    = sanitize_text_field($_POST["post_id"]),
                              update_msg = Unable to update questions/cards in Qwizcards database.
            ONUnable to update questions/cards in Qwizcards database.UPLICATE KEY  UPDATE update_msg = %s
INSERT INTO       $wpdbqwiz_dataset_json2
            SET               post_id    = sanitize_text_field($_POST["post_id"]),
                              update_msg = Unable to update questions/cards in Qwizcards database.
            ONUnable to update questions/cards in Qwizcards database.UPLICATE KEY  UPDATE update_msg = %s
SQL command (INSERT INTO $wpdbqwiz_dataset_json2 SET post_id = sanitize_text_field($_POST["post_id"]), update_msg = Unable to update questions/cards in Qwizcards database. ONUnable to update questions/cards in Qwizcards database.UPLICATE KEY UPDATE update_msg = %s) cannot be parsed correct.
SELECT   update_msg
            FROM     $wpdbqwiz_dataset_json2
            WHERE    post_id = get_the_ID()
SELECT   update_msg
            FROM     $wpdbqwiz_dataset_json2
            WHERE    post_id = get_the_ID()
SQL command (SELECT update_msg FROM $wpdbqwiz_dataset_json2 WHERE post_id = get_the_ID()) cannot be parsed correct.
SELECT     post_content,
                        ID,
                        post_name,
                        post_type
             FROM       $wpdbposts
             WHERE          post_parent = $postarr_ID
                        AND post_name   NOT LIKE '%autosave%'
                        AND post_type   = 'revision'
             ORDER BY   post_date DESC
             LIMIT      1
SQL command (SELECT post_content, ID, post_name, post_type FROM $wpdbposts WHERE post_parent = $postarr_ID AND post_name NOT LIKE '%autosave%' AND post_type = 'revision' ORDER BY post_date DESC LIMIT 1) cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [15075, 14312, 15189, 15431, 14772, 14873, 15682, 15926, 16003, 16498]
Added 0 SQL nodes. 0 out of 10 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:05.473564.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$' from database
   </title>
   <!-- For jjax ().  Need to pass it server loc (qwiz_params not otherwise
        set). -->
   <script>
      var qwiz_params = {server_loc:        \''' cannot be parsed correct.
HTML code '$'\',
                         secure_server_loc: \''' cannot be parsed correct.
HTML code '$'\',
                         qjax_bypass:       \''' cannot be parsed correct.
HTML code '$'\',
                         wp_site_url:       \''' cannot be parsed correct.
HTML code '$'\'
                        };
   </script>
   <script>
      var $ = jQuery;
      var qqc;
      var debug         = \''' cannot be parsed correct.
HTML code '$'\';
      var plugin_loc    = \''' cannot be parsed correct.
HTML code '$'\';
      var qwizard_page  = \''' cannot be parsed correct.
HTML code '$'\';
      var q_f           = \''' cannot be parsed correct.
HTML code '$'\';
      var question_card = \''' cannot be parsed correct.
HTML code '$'\';
      var qwizard_php_f = '' cannot be parsed correct.
HTML code '$';
      var question_card_type_display = '' cannot be parsed correct.
HTML code '$';
      var combobox_callback          = qwiz_unit_topic_selected;
      var dataset_question_ids    = [];
      var question_card_page_urls = [];
      var skip_records;
      var records_per_query    = '' cannot be parsed correct.
HTML code '$';
      var more_records_available_f;
      var browse_records_shown = '' cannot be parsed correct.
HTML code '$';
      var ii_row = 0;
      var input_search_words        = \'\';
      var search_words_array        = '' cannot be parsed correct.
HTML code '$';
      var search_question_card_type = \''' cannot be parsed correct.
HTML code '$'\';
      var search_unit_topic         = \''' cannot be parsed correct.
HTML code '$'\';
      var reinit_scrollY            = '' cannot be parsed correct.
HTML code '$';
      var $dialog_request_permission;
      var $dialog_dataset_question_page_link;
      var $dialog_search_help;
      var requested_dataset;
      var requested_question_card_page_url;
      var request_permission_email_msg_body;
      $ (document).ready (function () {
         qqc = qwiz_qcards_common;
         qwiz_create_questions_cards_table ();
         skip_records = 0;
         qwiz_get_data (browse_records_shown, search_words_array, search_question_card_type);
         qwiz_get_units_topics ();
         $dialog_request_permission = $ (\'#dialog_request_permission\').dialog ({
            autoOpen:      false,
            width:         700,
            height:        500,
            modal:         true,
            draggable:     false,
            resizable:     false
         });
         $dialog_dataset_question_page_link = $ (\'#dialog_dataset_question_page_link\').dialog ({
            autoOpen:      false,
            width:         500,
            height:        350,
            modal:         true,
            draggable:     false,
            resizable:     false,
            buttons:       {\'Close\':        function () {
                                               $dialog_dataset_question_page_link.dialog (\'close\');
                                            }
                           }
         });
         $dialog_search_help = $ (\'#dialog_search_help\').dialog ({
            autoOpen:      false,
            width:         500,
            height:        200,
            modal:         false,
            draggable:     true,
            resizable:     false,
            position:      {my: \'left top\',
                            at: \'center\',
                            of: \'#search_info_icon\'},
         });
      });
      function qwiz_get_units_topics () {
         var data = {qwizard_page:         qwizard_page,
                     q_f:                  q_f
                    };
         if (debug) {
            console.log (\'[browse_dataset_questions.php > qwiz_get_units_topics ()] data:\', data);
         }
         qqc.qjax (\'\', 0, 0, \'browse_dataset_questions_units_topics\', data);
      }
      function set_units_topics (data) {
         if (debug) {
            console.log (\'[set_units_topics] data:\', data);
         }
         var $units_topics = $ (\'div#qwiz_unit_topic_select\');
         $units_topics_select = $units_topics.find (\'select\');
         var opts = $units_topics_select[0].options;
         var units_topics = data.units_topics;
         var n = units_topics.length;
         for (var i=0; i<n; i++) {
            opts[opts.length] = new Option (units_topics[i]);
         }
         $units_topics_select.combobox ();
         $units_topics_input = $units_topics.find (\'input\');
         $units_topics_input.attr (\'placeholder\', \'Enter unit or topic, or use pull-down\');
         if (search_unit_topic) {
            $units_topics_input.val (search_unit_topic);
         }
      }
      function qwiz_unit_topic_selected (unit_topic) {
         if (debug) {
            console.log (\'[qwiz_unit_topic_selected] unit_topic:\', unit_topic);
         }
         if (unit_topic == \'[Any]\') {
            unit_topic = \'\';
         }
         search_unit_topic = unit_topic;
         qwiz_new_search ();
      }
      function qwiz_get_data (local_browse_records_shown, search_words_array, search_question_card_type) {
         var data = {qwizard_page:         qwizard_page,
                     q_f:                  q_f,
                     skip_records:         skip_records,
                     records_per_query:    local_browse_records_shown
                    };
         if (search_words_array.length) {
            if (search_words_array[0]) {
               data.search_words_array = search_words_array;
            }
         }
         if (search_question_card_type) {
            data.search_question_card_type = search_question_card_type;
         }
         if (search_unit_topic) {
            data.search_unit_topic = search_unit_topic;
         }
         if (debug) {
            console.log (\'[browse_dataset_questions.php > qwiz_get_data ()] data:\', data);
         }
         qqc.qjax (\'\', 0, 0, \'browse_dataset_questions_sql\', data);
      }
      function qwiz_full_text_search (input_el) {
         input_search_words = trim (input_el.value);
         if (debug) {
            console.log (\'[qwiz_full_text_search] input_search_words:\', input_search_words);
         }
         search_words_array = [];
         if (input_search_words.length) {
            var search_words = input_search_words.replace (/[-\s]+/g, \' \').toUpperCase ();
            search_words = search_words.replace (/[^A-Z0-9 *\'"]/g, \'\');
            var quoted_strings = search_words.match (/"[^"]*?"/g);
            if (quoted_strings) {
               search_words = search_words.replace (/"[^"]*?"/g, \'\');
            }
            if (search_words.indexOf (\'"\') != -1) {
               alert (\'Double-quotes must be entered in pairs surrounding exact-match search terms\');
               var delay_focus = function () {
                  input_el.focus ();
               }
               setTimeout (delay_focus, 100);
               return;
            }
            search_words = trim (search_words);
            search_words_array = search_words.split (/\s+/);
            if (search_words_array[0] != \'\') {
               if (quoted_strings) {
                  search_words_array = search_words_array.concat (quoted_strings);
               }
            } else {
               search_words_array = quoted_strings;
            }
            if (debug) {
               console.log (\'[qwiz_full_text_search] search_words_array:\', search_words_array);
            }
            var ok_f = false;
            var n_words = search_words_array.length;
            for (var i=0; i<n_words; i++) {
               if (search_words_array[i].length > 3) {
                  ok_f = true;
                  break;
               }
            }
            if (! ok_f) {
               alert (\'Word must be at least four letters or longer\');
               var delay_focus = function () {
                  input_el.focus ();
               }
               setTimeout (delay_focus, 100);
               return;
            }
         }
         qwiz_new_search ();
      }
      function qwiz_new_search () {
         skip_records            = 0;
         ii_row                  = 0;
         browse_records_shown    = records_per_query;
         dataset_question_ids    = [];
         question_card_page_urls = [];
         window.removeEventListener (\'scroll\', qwiz_detect_scroll_near_bottom);
         $ (\'#questions_cards_tbody\').html (\'\');
         qwiz_get_data (records_per_query, search_words_array, search_question_card_type);
      }
      function qwiz_question_card_type_search (select_el) {
         var display_type = select_el.value;
         search_question_card_type = qwiz_findKey (question_card_type_display, display_type);
         if (debug) {
            console.log (\'[qwiz_question_card_type_search] display_type:\', display_type, \'search_question_card_type:\', search_question_card_type);
         }
         qwiz_new_search ();
      }
      function qwiz_cancel_browse () {
         if (window.opener && window.opener.qwizard) {
            window.opener.qwizard.cancel_browse_alert (question_card);
         }
         window.close ();
      }
      function qwiz_create_questions_cards_table () {
         if (debug) {
            console.log (\'[qwiz_create_questions_cards_table]\');
         }
         var Question_Card;
         if (q_f == \'Q\') {
            Question_Card       = \'Question\';
         } else {
            Question_Card       = \'Card\';
         }
         var htm = [];
         htm.push (\'<table id="qwiz_questions_cards" class="qwiz_questions_cards">\');
         htm.push (   \'<thead>\');
         htm.push (      \'<tr>\');
         htm.push (         \'<th>\');
         htm.push (         \'</th>\');
         htm.push (         \'<th>\');
         htm.push (            \'Type\');
         htm.push (         \'</th>\');
         htm.push (         \'<th>\');
         htm.push (            \'Unit&nbsp;/&nbsp;topic\');
         htm.push (         \'</th>\');
         htm.push (         \'<th>\');
         if (q_f == \'Q\') {
            htm.push (         Question_Card + \'&nbsp;text\');
         } else {
            htm.push (         \'<table class="qwiz_card_front_back">\');
            htm.push (            \'<thead>\');
            htm.push (               \'<tr>\');
            htm.push (                  \'<th>\');
            htm.push (                     \'Card front\');
            htm.push (                  \'</th>\');
            htm.push (                  \'<th>\');
            htm.push (                     \'Card back\');
            htm.push (                  \'</th>\');
            htm.push (               \'</tr>\');
            htm.push (            \'</thead>\');
            htm.push (         \'</table>\');
         }
         htm.push (         \'</th>\');
         htm.push (         \'<th class="center">\');
         htm.push (            Question_Card + \'&nbsp;image\');
         htm.push (            \'<br />\');
         htm.push (            \'<span class="normal smaller">\');
         htm.push (               \'(hover to enlarge)\');
         htm.push (            \'</span>\');
         htm.push (          \'</th>\');
         htm.push (      \'</tr>\');
         htm.push (   \'</thead>\');
         htm.push (   \'<tbody id="questions_cards_tbody">\');
         htm.push (    \'</tbody>\');
         htm.push (\'</table>\');
         htm = htm.join (\'\n\');
         $ (\'div#qwiz_questions_cards_table\').html (htm);
      }
      function add_to_questions_cards_table (data) {
         if (debug) {
            console.log (\'[add_to_questions_cards_table] data:\', data);
         }
         var quiz_flashcard_deck;
         if (q_f == \'Q\') {
            quiz_flashcard_deck = \'quiz\';
         } else {
            quiz_flashcard_deck = \'flashcard_deck\';
         }
         var units  = data.units;
         var topics = data.topics;
         var htmls  = data.htmls;
         var n_additional_questions_cards = htmls.length;
         if (n_additional_questions_cards > 0) {
            $ (\'#getting_more\').html (\'Added \' + n_additional_questions_cards + \' \' + question_card + \'s\').fadeOut (4000, \'easeInCubic\');
         } else {
            $ (\'#getting_more\').hide ();
            var msg =  \'<tr>\'
                     +    \'<td colspan="4">\'
                     +       \'<br />\'
                     +       \'<span class="red">Did not find any \' + question_card + \'s matching \';
               if (search_words_array) {
                  msg +=        \'&ldquo;\' + input_search_words.toLowerCase () + \'&rdquo;\';
                  if (search_question_card_type) {
                     msg +=     \' and \';
                  }
               }
               if (search_question_card_type) {
                  msg +=        \'&ldquo;\' + question_card_type_display[search_question_card_type] + \'&rdquo;\';
               }
               msg +=        \'</span>\';
                     +    \'</td>\';
                     + \'</tr>\';
               $ (\'#questions_cards_tbody\').append (msg);
            return;
         }
         var browse_image_urls          = data.browse_image_urls;
         var thumbnail_urls             = data.thumbnail_urls;
         var question_card_types        = data.question_card_types;
         var permission_requested_fs    = data.permission_requested_fs;
         var permission_requested_dates = data.permission_requested_dates;
         var permission_ok_fs           = data.permission_ok_fs;
         var records_queried            = data.records_queried;
         more_records_available_f       = data.more_records_available_f;
         var add_question_card_title = \'Add \' + question_card + \' to \' + quiz_flashcard_deck;
         var request_permission_title = \'Click to open form to request permission to use \' + question_card + \'s from this dataset on your site/page\';
         var htm = [];
         for (var i_row=0; i_row<n_additional_questions_cards; i_row++) {
            htm.push (\'<tr class="i_row\' + ii_row + \'">\');
            htm.push (   \'<td class="pad_top center">\');
            if (permission_ok_fs[i_row]) {
               htm.push (   \'<img src="'' cannot be parsed correct.
HTML code '$'images/add_icon.png" class="pointer" onclick="qwiz_add_question_card (\' + ii_row + \')" title="\' + add_question_card_title + \'" />\');
            } else if (permission_requested_fs[i_row]) {
               var rerequest_permission_title = \'Permission requested \' + permission_requested_dates[i_row] + \'.  Click to open form to resend request\';
               htm.push (   \'<img src="\' + plugin_loc + \'images/icon_question_checked.png" class="pointer" onclick="qwiz_request_permission (\' + ii_row + \', \\'\' + permission_requested_dates[i_row] + \'\\')" title="\' + rerequest_permission_title + \'" />\');
            } else if (qwizard_php_f) {
               var save_first_title = \'To use this \' + question_card + \' you need to save your new \' + quiz_flashcard_deck + \'.  Please close this page and click &ldquo;Publish/update&rdquo;\';
               htm.push (   \'<img src="\' + plugin_loc + \'images/warning_icon.png" + title="\' + save_first_title + \'" />\');
            } else {
               var dataset_question_id = data.dataset_question_ids[i_row];
               var i_pos = dataset_question_id.indexOf (\'|\');
               var dataset = dataset_question_id.substr (0, i_pos);
               var b64_dataset = btoa (dataset).replace (/=/g, \'\');
               htm.push (   \'<img src="\' + plugin_loc + \'images/icon_question.png" class="pointer \' + b64_dataset + \'" onclick="qwiz_request_permission (\' + ii_row + \')" title="\' + request_permission_title + \'" />\');
            }
            htm.push (      \'<br />\' + (ii_row + 1));
            htm.push (   \'</td>\');
            var question_card_type = question_card_types[i_row];
            htm.push (   \'<td class="pad_top">\');
            htm.push (      question_card_type_display[question_card_type]);
            htm.push (   \'</td>\');
            var unit  = units[i_row];
            var topic = topics[i_row];
            var unit_topic = \'\';
            if (unit || topic) {
               unit_topic = unit + \' / \' + topic;
            }
            htm.push (   \'<td class="pad_top">\');
            htm.push (      unit_topic);
            htm.push (   \'</td>\');
            var html = htmls[i_row];
            htm.push (   \'<td>\');
            htm.push (      \'<div class="question_card">\');
            htm.push (         html);
            htm.push (      \'</div>\');
            htm.push (   \'</td>\');
            var browse_image_url = browse_image_urls[i_row];
            var thumbnail_url    = thumbnail_urls[i_row];
            htm.push (   \'<td>\');
            if (browse_image_url) {
               htm.push (\'<a href="#" class="qwiz_thumbnail" data-featherlight="\' + browse_image_url + \'">\');
               htm.push (   \'<img class="qwiz_thumbnail" src="\' + thumbnail_url + \'"></a>\');
            }
            htm.push (   \'</td>\');
            htm.push (\'</tr>\');
            dataset_question_ids.push (data.dataset_question_ids[i_row]);
            question_card_page_urls.push (data.question_card_page_urls[i_row]);
            ii_row++;
         }
         htm = htm.join (\'\n\');
         $ (\'#questions_cards_tbody\').append (htm);
         if (reinit_scrollY) {
            window.scrollTo (0, reinit_scrollY);
            reinit_scrollY = 0;
         }
         $ (\'a.qwiz_thumbnail\').featherlight (null, {openTrigger: \'mouseenter\', closeTrigger: \'mousemove\', loading: \'Getting image...\'});
         if (debug) {
            console.log (\'[add_to_questions_cards_table] more_records_available_f:\', more_records_available_f);
         }
         if (more_records_available_f) {
            skip_records += records_queried;
            setTimeout (qwiz_near_bottom_add_data, 500);
         }
      }
      function qwiz_near_bottom_add_data () {
         if (debug) {
            console.log (\'[qwiz_near_bottom_add_data] skip_records:\', skip_records);
         }
         window.addEventListener (\'scroll\', qwiz_detect_scroll_near_bottom);
      }
      function qwiz_detect_scroll_near_bottom () {
         var doc_height_trigger = parseInt ($ (document).height ()) - 200;;
         var scroll =   parseInt (window.innerHeight)
                      + parseInt (window.scrollY);
         if (debug) {
         }
         if (scroll > doc_height_trigger) {
            window.removeEventListener (\'scroll\', qwiz_detect_scroll_near_bottom);
            $ (\'#getting_more\').html (\'Getting more \' + question_card + \'s...\').show ();
            qwiz_get_data (records_per_query, search_words_array, search_question_card_type);
         }
      }
      function qwiz_add_question_card (i_row) {
         var dataset_question_id = dataset_question_ids[i_row];
         if (debug) {
            console.log (\'[qwiz_add_question_card] i_row:\', i_row, \', dataset_question_ids.length:\', dataset_question_ids.length);
         }
         var data = {dataset_question_id:  dataset_question_id,
                     page_url:             qwizard_page,
                     skip_records:         skip_records
                    };
         qqc.jjax (\'\', 0, 0, \'browse_dataset_questions_get\', data);
      }
      function qwiz_request_permission (i_row, permission_requested_date) {
         var dataset_question_id    = dataset_question_ids[i_row];
         var question_card_page_url = question_card_page_urls[i_row];
         if (debug) {
            console.log (\'[qwiz_request_permission] i_row:\', i_row, \', dataset_question_ids.length:\', dataset_question_ids.length);
            console.log (\'[qwiz_request_permission] dataset_question_id:\', dataset_question_id, \', question_card_page_url:\', question_card_page_url);
         }
         var rerequest_msg = \'\';
         if (permission_requested_date) {
            rerequest_msg = \'You previously requested permission to use \' + question_card + \'s from this dataset on \' + permission_requested_date + \'<br /><br />\';
         }
         $ (\'#rerequest_msg\').html (rerequest_msg);
         var i_pos = dataset_question_id.indexOf (\'|\');
         var dataset = dataset_question_id.substr (0, i_pos);
         var data = {dataset:                 dataset,
                     question_card_page_url:  question_card_page_url
                    };
         qqc.jjax (\'\', 0, 0, \'maker_email_from_dataset\', data);
      }
      function open_dialog_request_permission (data) {
         if (debug) {
            console.log (\'[open_dialog_request_permission] data:\', data);
         }
         var maker_email_f = data.maker_email_f;
         requested_question_card_page_url = data.question_card_page_url;
         requested_dataset                = data.dataset;
         $ (\'a.dialog_request_permission_page_url\').html (requested_question_card_page_url);
         $ (\'a.dialog_request_permission_page_url\').attr (\'href\', requested_question_card_page_url);
         if (maker_email_f == 1) {
            var msg = [];
            msg.push (\'Hello:\');
            msg.push (\'This is a request to use questions from Qwizcards dataset "\' + requested_dataset + \'"\');
            msg.push (\'I would like to use them on this site/page: \' + qwizard_page);
            msg.push (\'(Permissions can be set on the Qwizcards "Manage datasets" page.)\');
            msg.push (\'\');
            request_permission_email_msg_body = msg.join (\'\n\');
            $ (\'div.request_permission_email_msg_body\').html (request_permission_email_msg_body);
            qwiz_hide_request_permission_feedback ();
            $ (\'#preface_message_to_send\').show ();
            $ (\'button.qwiz_send_permission_request\').show ();
            $ (\'button.cancel_permission_request\').html (\'Cancel\');
            $dialog_request_permission.dialog (\'open\');
         } else {
            $dialog_dataset_question_page_link.dialog (\'open\');
         }
      }
      function qwiz_send_permission_request () {
         var errmsg = \'\';
         var msg_addition        = $ (\'#request_permission_email_msg_body_addition\').val ();
         var current_maker_email = $ (\'#current_maker_email\').val ();
         var cc_sender_f         = $ (\'#cc_sender\')[0].checked ? 1 : 0;
         if (trim (current_maker_email) == \'\') {
            errmsg = \'Please enter your email address\';
         } else {
            if (! qwiz_validate_email (current_maker_email)) {
               errmsg = \'Email address is not valid\';
            }
         }
         if (errmsg) {
            $ (\'#dialog_request_permission_feedback\').addClass (\'red\').html (errmsg).show ();
         } else {
            var request_permission_msg =   request_permission_email_msg_body
                                         + msg_addition
                                         + \'\n\n\'
                                         + \'Thanks.  I look forward to hearing from you\'
                                         + \'\n\';
            var data = {dataset:                requested_dataset,
                        request_for_page_url:   qwizard_page,
                        current_maker_email:    current_maker_email,
                        cc_sender_f:            cc_sender_f,
                        request_permission_msg: request_permission_msg
                       };
            if (debug) {
               console.log (\'[qwiz_send_permission_request] data:\', data);
            }
            qqc.jjax (\'\', 0, 0, \'send_request_permission_email\', data);
         }
      }
      function sent_permission_request (data) {
         if (debug) {
            console.log (\'[sent_permission_request]: data:\', data);
         }
         if (data.errmsg == \'ok\') {
            var b64_dataset = btoa (requested_dataset).replace (/=/g, \'\');
            $ (\'img.\' + b64_dataset).attr (\'src\', \'images/icon_question_checked.png\')
                                    .attr (\'title\', \'Permission requested\')
                                    .attr (\'disabled\', true);
            $ (\'button.qwiz_send_permission_request\').hide ();
            $ (\'button.cancel_permission_request\').html (\'Close\');
            $ (\'#preface_message_to_send\').hide ();
            var msg = \'Email sent to dataset owner\';
            $ (\'#dialog_request_permission_feedback\').addClass (\'green\').html (msg).show ();
         } else {
            var msg;
            if (data.errmsg == \'same_email\') {
               msg = \'Sorry, cannot send to recipient email address same as sender&rsquo;s (that is, yours)\';
            } else {
               msg = \'Sorry, could not send email to dataset owner\';
            }
            $ (\'#dialog_request_permission_feedback\').addClass (\'red\').html (msg).show ();
         }
      }
      function qwiz_show_search_help () {
         $dialog_search_help.dialog (\'open\');
      }
      function qwiz_hide_request_permission_feedback () {
         $ (\'#dialog_request_permission_feedback\').hide ();
      }
      function return_question_card_html (data) {
         if (debug) {
            console.log (\'[return_question_card_html] data:\', data);
         }
         if (data.error) {
            alert (\'Permission problem - question/card not available\');
         } else {
            data.browse_search_words_array        = search_words_array;
            data.browse_search_question_card_type = search_question_card_type;
            data.browse_search_unit_topic         = search_unit_topic;
            data.browse_scrollY                   = window.scrollY;
            if (window.opener.qwizard) {
               window.opener.qwizard.new_dataset_question_card (data);
            }
            window.close ();
         }
      }
      function qwiz_findKey (obj, value) {
         for (var key in obj) {
            if (obj.hasOwnProperty (key)) {
               if (obj[key] == value) {
                  return key;
               }
            }
         }
         return \'\';
      }
      function qwiz_validate_email (email) {
         var ok_f = true;
         var re = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i;
         if (! re.test (email)) {
            ok_f = false;
         }
         return ok_f;
      }
      function trim (s) {
         if (s) {
            if (\'a\'.trim) {
               s = s.trim ();
            } else {
               s = s.replace (/^\s+|\s+$/g, \'\');
            }
         }
         return s;
      }
   </script>
   <style type="text/css">
      body {
         margin:              0;
         font-family:         arial, verdana, sans-serif;
         font-size:           10pt;
         background:          white;
      }
      h2 {
         margin-top:          5px;
         margin-bottom:       10px;
      }
      p {
         margin-top:          0;
      }
      div#qwiz_fixed_header {
         position:            fixed;
         top:                 0;
         width:               100%;
         height:              115px;
         padding:             5px;
         background:          white;
         border-bottom:       1px solid black;
      }
      select#qwiz_question_card_type_select {
         height:              30px;
      }
      div#qwiz_unit_topic_select {
         display:             inline-block;
      }
      div#qwiz_unit_topic_select input {
         width:               20em;
         height:              30px;
         background:          white;
         border:              1px solid darkgray;
         border-radius:       3px;
         font-size:           9pt;
      }
      div#qwiz_unit_topic_select a.ui-button {
         border:              none;
      }
      /* For combobox autocomplete */
      ul.ui-autocomplete {
         max-height:          400px;
         overflow:            auto;
      }
      li.ui-menu-item {
         padding:             0 !important;
      }
      input.qwiz_search_words {
         width:               16em;
         height:              30px;
         font-size:           9pt;
      }
      button.qwiz_cancel {
         float:               right;
         margin-right:        10px !important;
      }
      div#qwiz_questions_cards_table {
         margin-left:         5px;
         margin-top:          115px;
      }
      table.qwiz_questions_cards {
         border:              0;
         border-spacing:      0;
         background:          white;
         table-layout:        auto;
      }
      table.qwiz_questions_cards th {
         text-align:          left;
         vertical-align:      bottom;
         padding:             3px;
      }
      table.qwiz_questions_cards th.center {
         text-align:          center;
      }
      table.qwiz_questions_cards span.normal.smaller {
         font-size:           80%;
         font-weight:         normal;
      }
      table.qwiz_questions_cards td {
         text-align:          left;
         vertical-align:      top;
         margin:              0;
         padding:             3px 6px 3px 3px;
         border-top:          1px solid lightgray;
      }
      table.qwiz_questions_cards td.pad_top {
         padding-top:         8px;
      }
      table.qwiz_questions_cards td div.question_card {
         padding:             5px;
         max-height:          150px;
         overflow:            auto;
      }
      div.clear {
         clear:               both;
      }
      table.qwiz_card_front_back {
                           /* Hor. Ver. */
         border:              0;
         border-spacing:      15px 0;
         width:               100%;
      }
      table.qwiz_card_front_back th,
      table.qwiz_card_front_back td {
         width:               50%;
         min-width:           300px;
         padding:             2px;
         margin-right:        1em;
         text-align:          center;
         vertical-align:      middle;
         overflow:            auto;
         box-sizing:          border-box;
      }
      table.qwiz_card_front_back td {
         border:              1px solid black;
         height:              122px;
      }
      table.qwiz_card_front_back td div.qwiz_card_front_back,
      table.qwiz_card_front_back td div.qwiz_card_front_back {
         display:             inline-block;
         min-height:          50px;
         max-height:          120px;
         padding:             2px;
         overflow:            auto;
         min-width:           300px;
      }
      span.hangman {
         border:              1px solid gray;
         padding:             2px;
         font-family:         courier new;
         color:               blue;
         font-weight:         bold;
      }
      span.textentry {
         border:              1px solid gray;
      }
      ul.radio_bullet {
         margin-top:          0;
         list-style:          url(\''' cannot be parsed correct.
HTML code '$'images/radio.png\');
      }
      ul.radio_bullet span.radio_li {
         vertical-align:      30%;
      }
      ul.inline_bullet {
         margin-top:          0;
      }
      ul.inline_bullet li {
         float:               left;
         padding:             0px;
         margin:              0 0 0.5rem 2rem;
         line-height:         1.2rem;
      }
      img.qwiz_thumbnail {
         border:              1px dotted gray;
      }
      img[src$="info_icon.png"] {
         width:           16px;
         height:          16px;
      }
      br.bigger {
         line-height:         150%;
      }
      div.message_to_send {
         font-size:           10pt;
         border:              1px solid black;
         padding:             3px;
         margin-left:         15px;
         margin-bottom:       5px;
      }
      div.request_permission_email_msg_body {
         white-space:         pre;
      }
      input#current_maker_email {
         width:               17em;
      }
      textarea#request_permission_email_msg_body_addition {
         width:               550px;
         height:               60px;
      }
      div#getting_more {
         position:            fixed;
         bottom:              20px;
         left:                50%;
         transform:           translateX(-50%);
         -webkit-transform:   translateX(-50%);
         width:               200px;
         height:              20px;
         display:             none;
         text-align:          center;
         background:          white;
         border:              1px solid black;
         border-radius:       5px;
         -webkit-border-radius: 5px;
         -moz-border-radius:  5px;
         box-shadow:          3px 3px 2px gray;
         padding:             15px 5px 5px 5px;
      }
      .qwiz_button {
         margin-bottom: 2px;
         border-top: 1px solid #96d1f8;
         background: #65a9d7;
         background: -webkit-gradient(linear, left top, left bottom, from(#3e779d), to(#65a9d7));
         background: -webkit-linear-gradient(top, #3e779d, #65a9d7);
         background: -moz-linear-gradient(top, #3e779d, #65a9d7);
         background: -ms-linear-gradient(top, #3e779d, #65a9d7);
         background: -o-linear-gradient(top, #3e779d, #65a9d7);
         padding: 3px 3px;
         -webkit-border-radius: 8px;
         -moz-border-radius: 8px;
         border-radius: 8px;
         -webkit-box-shadow: rgba(0,0,0,1) 0 1px 0;
         -moz-box-shadow: rgba(0,0,0,1) 0 1px 0;
         box-shadow: rgba(0,0,0,1) 0 1px 0;
         text-shadow: rgba(0,0,0,.4) 0 1px 0;
         color: white;
         font-size: 14px !important;
         font-weight: bold;
         font-family: arial, verdana, sans-serif;
         text-decoration: none;
         vertical-align: middle;
      }
      .indent {
         margin-left:         15px;
      }
      .center {
         text-align:          center !important;
      }
      .green {
         color:               green;
         font-weight:         bold;
      }
      .red {
         color:               red;
         font-weight:         bold;
      }
      .gray {
         color:               gray;
      }
      .highlight {
         background:          #ffffa0;
      }
      .normal {
         font-size:           10pt;
         font-weight:         normal;
      }
      .smaller {
         font-size:           80%;
      }
      .textentry_border {
         border:              1px solid gray;
         padding:             2px;
      }
      img[src$="add_icon.png"] {
         width:           16px;
         height:          16px;
      }
      .shift_icon {
         transform:           translate(0px, 3px);
         -webkit-transform:   translate(0px, 3px);
      }
      .pointer {
         cursor:              pointer;
      }
      .help {
         cursor:              help;
      }
   </style>
</head>
<body>
   <div id="qwiz_fixed_header">
      <h2>
         Select '' cannot be parsed correct.
HTML code '$' from database
      </h2>
      '' cannot be parsed correct.
HTML code '$' type
      <select id="qwiz_question_card_type_select" onchange="qwiz_question_card_type_search (this)">
      '' cannot be parsed correct.
HTML code '$'" />
         <img id="search_info_icon" src="'' cannot be parsed correct.
HTML code '$'/images/info_icon.png" style="cursor: help;" onclick="qwiz_show_search_help ()" title="Click for pop-up search help" />
      &nbsp;
      <button>
         Go
      </button>
      <button class="qwiz_cancel qwiz_button" onclick="qwiz_cancel_browse ()">
         Cancel
      </button>
   </div>
   <div id="qwiz_questions_cards_table">
   </div>
   <div id="dialog_request_permission" title="Request permission to use '' cannot be parsed correct.
HTML code '$' from dataset">
      <div id="rerequest_msg" class="normal">
      </div>
      <p id="preface_message_to_send" style="margin-bottom: 4px;">
         Message to send:
      </p>
      <div class="message_to_send">
         <p>
            <!-- maker_email from maker_classes_from_session_id.php, included
                 above. -->
            From: <input type="text" id="current_maker_email" onfocus="qwiz_hide_request_permission_feedback ()" value="'' cannot be parsed correct.
HTML code '$'" placeholder="Enter your email address" />
            &emsp;
            <span class="smaller">
               <input type="checkbox" id="cc_sender" checked />
               Send copy to this address
            </span>
         </p>
         <div class="request_permission_email_msg_body">
         </div>
         <p>
            <textarea id="request_permission_email_msg_body_addition" placeholder="Add your own message here"></textarea>
         </p>
         <p>
            Thanks!  I look forward to hearing from you.
         </p>
      </div>
      <div id="dialog_request_permission_feedback">
      </div>
      <div style="text-align: right; margin-bottom: 10px;">
         <button class="qwiz_send_permission_request" onclick="qwiz_send_permission_request ()">
            Send message
         </button>
         &ensp;
         <button class="cancel_permission_request" onclick="$dialog_request_permission.dialog (\'close\')">
            Cancel
         </button>
      </div>
      <p style="margin-bottom: 0;">
         <b>View dataset page in new window:</b>
      </p>
      <p class="indent">
         <a href="#" class="dialog_request_permission_page_url" target="_blank">
         </a>
      </p>
   </div>
   <div id="dialog_dataset_question_page_link" title="View dataset '' cannot be parsed correct.
HTML code '$' page in new window">
      <p>
         Sorry, we don&rsquo;t have an email address for this'' cannot be parsed correct.
HTML code '$'/dataset&rsquo;s
         owner.&nbsp;
         You may be able to view the dataset and find contact info here:
      </p>
      <p class="indent">
         <a href="#" class="dialog_request_permission_page_url" target="_blank">
         </a>
      </p>
   </div>
   <div id="dialog_search_help" title="Search help">
      <br />
      Space-separated words have implied &ldquo;AND&rdquo; between them.
      <br />
      <br />
      Word or words in double quotes: search for exact word or phrase.
      <br />
      <br />
      * is wildcard match (at end of words).
   </div>
   <div id="getting_more">
   </div>
</body>
</html>
'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:02.630899.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.041343.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 1 do_action/apply_filters calls and 34 add_action/add_filter calls. Now connecting do-add pairs.
Added 1 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:02.865644.

1 PHP_REACHES edges created
1 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running ArrayElementDetector
### Start running FrontBaseDetector
### Finish running FileProDetector
### Start running HashDetector
### Finish running DbaseDetector
### Start running IBMDb2Detector
### Finish running DbplusDetector
### Start running InformixDetector
### Finish running HashDetector
### Start running IngresDetector
### Finish running IBMDb2Detector
### Start running maxdbDetector
### Finish running CubridDetector
### Start running MongoDbDetector
### Finish running FirebirdInterBaseDetector
### Start running MongoDetector
### Finish running MongoDetector
### Start running MsqlDetector
### Finish running MongoDbDetector
### Start running MySQLDetector
### Finish running FrontBaseDetector
### Start running MySQLiDetector
### Finish running InformixDetector
### Start running Oci8Detector
### Finish running IngresDetector
### Start running OpenSSLDetector
### Finish running OpenSSLDetector
### Start running ParadoxDetector
### Finish running MySQLDetector
### Start running PasswordHashingDetector
### Finish running MsqlDetector
### Start running PhpCurlDetector
### Finish running PhpCurlDetector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running Oci8Detector
### Start running PHPRetrievalDetector
### Finish running ParadoxDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PHPStorageDetector
### Start running PhpVarDetector
### Finish running PHPRetrievalDetector
### Start running PostgreSQLDetector
### Finish running PostgreSQLDetector
### Start running PropertyDetector
### Finish running PropertyDetector
### Start running Sqlite3Detector
### Finish running PhpVarDetector
### Start running SqliteDetector
### Finish running Sqlite3Detector
### Start running SqlServerDetector
### Finish running SqlServerDetector
### Start running SybaseDetector
### Finish running PasswordHashingDetector
### Start running TokyoTyrantDetector
### Finish running TokyoTyrantDetector
### Start running UserInputDetector
### Finish running SqliteDetector
### Start running VariableDetector
### Finish running UserInputDetector
### Start running WordpressHashingFnDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressRemoteDetector
### Finish running WordPressRemoteDetector
### Start running WordPressRetrievalDetector
### Finish running PHPIncludedDetector
### Start running WordPressStorageDetector
### Finish running SybaseDetector
### Start running WP_UserDetector
### Finish running WP_UserDetector
### Start running GenericDatabaseUsageDetector
### Finish running VariableDetector
### Start running GenericEncryptionDetector
### Finish running GenericEncryptionDetector
### Start running DeletionDetector
### Finish running GenericDatabaseUsageDetector
### Start running UninstallDetector
### Finish running WordPressRetrievalDetector
### Finish running WordPressStorageDetector
### Finish running UninstallDetector
### Finish running DeletionDetector
### Finish running MySQLiDetector
### Finish running maxdbDetector
### Finished running detectors
browse_dataset_questions.php:25
  - Request variable '$_REQUEST["maker_email"]' of personal types {'email'} is found.
  - Data types: email
browse_dataset_questions.php:26
  - Request variable '$_REQUEST["maker_email"]' of personal types {'email'} is found.
  - Data types: email 

qwizcards-plugin.php:1196
  - RETRIEVAL call to fgets($fh).
  - Data types: file 

browse_dataset_questions.php:26
  - variable '$maker_email' of personal types {'email'} is found.
  - Data types: email
browse_dataset_questions.php:28
  - variable '$maker_email' of personal types {'email'} is found.
  - Data types: email
browse_dataset_questions.php:1003
  - variable '$maker_email' of personal types {'email'} is found.
  - Data types: email
qwizcards-plugin.php:807
  - variable '$last_closing_tagname' of personal types {'last_name'} is found.
  - Data types: last_name
qwizcards-plugin.php:817
  - variable '$last_closing_tagname' of personal types {'last_name'} is found.
  - Data types: last_name 

qwizcards-plugin.php:4
  - RETRIEVAL call to get_option("qwiz_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
qwizcards-plugin.php:598
  - RETRIEVAL call to get_the_author_meta("ID") alters data types {'user_meta'}. Passed arguments: 0: $field (string). Returns (string).
  - Data types: user_meta
qwizcards-plugin.php:1153
  - RETRIEVAL call to get_option("qwiz_textentry_suggestions_db_table_update") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
qwizcards-plugin.php:1168
  - RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).
qwizcards-plugin.php:1174
  - RETRIEVAL call to get_option("qwiz_textentry_suggestions_ver") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
qwizcards-plugin.php:1244
  - RETRIEVAL call to get_option("dataset_json_db_table_update") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
qwizcards-plugin.php:1261
  - RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array). 

qwizcards-plugin.php:115
  - STORAGE call to update_option("image_default_link_type", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
qwizcards-plugin.php:1155
  - STORAGE call to update_option("qwiz_textentry_suggestions_db_table_update", "ok") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
qwizcards-plugin.php:1181
  - STORAGE call to update_option("qwiz_textentry_suggestions_ver", $qwiz_textentry_suggestions_ver) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
qwizcards-plugin.php:1246
  - STORAGE call to update_option("dataset_json_db_table_update", "ok") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option 

By data type:
email
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
	ArrayElementDetector.(unknown) - {'email'}
	VariableDetector.(unknown) - {'email'}
file
	PHPRetrievalDetector.fgets($fh) - {'file'}
last_name
	VariableDetector.(unknown) - {'last_name'}
	VariableDetector.(unknown) - {'last_name'}
none
	WordPressRetrievalDetector.dbDelta($sql) - set()
	WordPressRetrievalDetector.dbDelta($sql) - set()
option
	WordPressRetrievalDetector.get_option("qwiz_textentry_suggestions_ver") - {'option'}
	WordPressRetrievalDetector.get_option("qwiz_textentry_suggestions_db_table_update") - {'option'}
	WordPressStorageDetector.update_option("image_default_link_type", "") - {'option'}
	WordPressRetrievalDetector.get_option("qwiz_options") - {'option'}
	WordPressStorageDetector.update_option("dataset_json_db_table_update", "ok") - {'option'}
	WordPressStorageDetector.update_option("qwiz_textentry_suggestions_ver", $qwiz_textentry_suggestions_ver) - {'option'}
	WordPressStorageDetector.update_option("qwiz_textentry_suggestions_db_table_update", "ok") - {'option'}
	WordPressRetrievalDetector.get_option("dataset_json_db_table_update") - {'option'}
user_meta
	WordPressRetrievalDetector.get_the_author_meta("ID") - {'user_meta'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:29.452595.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 16 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.106140.

16 STORE_REACHES edges created
16 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 100 nodes as PERSONAL
In total, tainted 100 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
In total, tainted 0 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:13.767089.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:03:52.199447!
Request variable '$_REQUEST["maker_email"]' of personal types {'email'} is found.,,None
Request variable '$_REQUEST["maker_email"]' of personal types {'email'} is found.,,None
RETRIEVAL call to fgets($fh).,None,None
variable '$maker_email' of personal types {'email'} is found.,,None
variable '$maker_email' of personal types {'email'} is found.,,None
variable '$maker_email' of personal types {'email'} is found.,,None
variable '$last_closing_tagname' of personal types {'last_name'} is found.,,None
variable '$last_closing_tagname' of personal types {'last_name'} is found.,,None
RETRIEVAL call to get_option("qwiz_textentry_suggestions_db_table_update") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to get_option("qwiz_textentry_suggestions_ver") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("dataset_json_db_table_update") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to dbDelta($sql). Passed arguments: 0: $queries (string[]|string). Returns (array).,None,None
RETRIEVAL call to get_option("qwiz_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_the_author_meta("ID") alters data types {'user_meta'}. Passed arguments: 0: $field (string). Returns (string).,None,None
STORAGE call to update_option("image_default_link_type", "") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("qwiz_textentry_suggestions_db_table_update", "ok") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("qwiz_textentry_suggestions_ver", $qwiz_textentry_suggestions_ver) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("dataset_json_db_table_update", "ok") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] Storage check is NONE 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['encryption', 'third_party'] 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? True 

No findings
