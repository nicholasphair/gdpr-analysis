Timeout in resolving values
Timeout in running neo4j query
Running Main.py on content-update-scheduler

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:00.589251.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:01.000821.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 4 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.432076.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 2 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.610520.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 828 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:01.229389.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 42 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.956363.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.099586.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 320 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:05.360414.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 5996
Added 4800 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 6372
Added 376 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:01.322263.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/content-update-scheduler/content-update-scheduler.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/content-update-scheduler/options.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/content-update-scheduler/trunk/content-update-scheduler.php' cannot be parsed correct.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/content-update-scheduler/trunk/options.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:00.449165.

4 PHP_REACHES edges created
2 REACHES edges created
828 PHP_REACHES edges created
42 CALLS edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
5120 PHP_REACHES edges created
376 PHP_REACHES edges created
6372 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 2112 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.118358.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:02.492216.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 38 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:01.492320.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 72 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.159062.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.365310.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.379713.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.014332.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.034960.

110 PHP_REACHES edges created
110 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 28 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.108912.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
No SQL nodes to process.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:00.149317.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'This post will be published 5 minutes from now.'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'$dateo->format("d.m.Y")'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'date_i18n(get_option("date_format"), $dateo->getTimestamp() + $offset)'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'sprintf("%02d", $i)'' cannot be parsed correct.
HTML code '$'selected'' cannot be parsed correct.
HTML code '$'sprintf("%02d", $i)'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'sprintf("%02d", $i)'' cannot be parsed correct.
HTML code '$'selected'' cannot be parsed correct.
HTML code '$'sprintf("%02d", $i)'' cannot be parsed correct.
HTML code '$'+-'' cannot be parsed correct.
HTML code '$'sprintf("%02d", $gmt_hour):sprintf("%02d", $gmt_min)'' cannot be parsed correct.
HTML code '$'sprintf(__("Please enter <i>Time</i> as %s", "cus-scheduleupdate-td"), self->get_timezone_string())'' cannot be parsed correct.
HTML code '$'The releasedate is in the past.'' cannot be parsed correct.
HTML code '$'This post will not be published.'' cannot be parsed correct.
HTML code '$'apply_filters("co_wp_dropdown_pages", $output, $parsed_args, $pages)'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'selected($options[$args["label_for"]], "publish", false)'' cannot be parsed correct.
HTML code '$'Publish right away'' cannot be parsed correct.
HTML code '$'selected($options[$args["label_for"]], "nothing", false)'' cannot be parsed correct.
HTML code '$'Don\'t publish'' cannot be parsed correct.
HTML code '$'What should happen to a post if it is saved with no date set?'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'checked="checked"'' cannot be parsed correct.
HTML code '$'Scheduled posts are visible for anonymous users in the frontend'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'Allow recursive scheduling'' cannot be parsed correct.
HTML code '$'get_admin_page_title()'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'$dateo->format("d.m.Y")'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'sprintf("%02d", $i)'' cannot be parsed correct.
HTML code '$'selected'' cannot be parsed correct.
HTML code '$'sprintf("%02d", $i)'' cannot be parsed correct.
HTML code '$'_pubdate'' cannot be parsed correct.
HTML code '$'sprintf("%02d", $i)'' cannot be parsed correct.
HTML code '$'selected'' cannot be parsed correct.
HTML code '$'sprintf("%02d", $i)'' cannot be parsed correct.
HTML code '$'+-'' cannot be parsed correct.
HTML code '$'sprintf("%02d", $gmt_hour):sprintf("%02d", $gmt_min)'' cannot be parsed correct.
HTML code '$'sprintf(__("Please enter <i>Time</i> as %s", "cus-scheduleupdate-td"), self->get_timezone_string())'' cannot be parsed correct.
HTML code '$'The releasedate is in the past.'' cannot be parsed correct.
HTML code '$'This post will not be published.'' cannot be parsed correct.
HTML code '$'This post will be published 5 minutes from now.'' cannot be parsed correct.
HTML code '$'get_admin_page_title()'' cannot be parsed correct.
HTML code '$'apply_filters("co_wp_dropdown_pages", $output, $parsed_args, $pages)'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'selected($options[$args["label_for"]], "publish", false)'' cannot be parsed correct.
HTML code '$'Publish right away'' cannot be parsed correct.
HTML code '$'selected($options[$args["label_for"]], "nothing", false)'' cannot be parsed correct.
HTML code '$'Don\'t publish'' cannot be parsed correct.
HTML code '$'What should happen to a post if it is saved with no date set?'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'Scheduled posts are visible for anonymous users in the frontend'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'$args_label_for'' cannot be parsed correct.
HTML code '$'checked="checked"'' cannot be parsed correct.
HTML code '$'Allow recursive scheduling'' cannot be parsed correct.
HTML code '$'<style> #duplicate-action, #delete-action, #minor-publishing-actions, #misc-publishing-actions, #preview-action {display:none;} </style>'' cannot be parsed correct.
HTML code '$'">
			<p>
			'' cannot be parsed correct.
HTML code '$'<style> #duplicate-action, #delete-action, #minor-publishing-actions, #misc-publishing-actions, #preview-action {display:none;} </style>'' cannot be parsed correct.
HTML code '$'">
			<p>
			'' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:10.405514.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.070951.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 16 do_action/apply_filters calls and 42 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:02.364762.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running FileProDetector
### Start running FrontBaseDetector
### Finish running DbaseDetector
### Start running HashDetector
### Finish running DbplusDetector
### Start running IBMDb2Detector
### Finish running CubridDetector
### Start running InformixDetector
### Finish running FirebirdInterBaseDetector
### Start running IngresDetector
### Finish running FrontBaseDetector
### Start running maxdbDetector
### Finish running InformixDetector
### Start running MongoDbDetector
### Finish running IngresDetector
### Start running MongoDetector
### Finish running MongoDetector
### Start running MsqlDetector
### Finish running IBMDb2Detector
### Start running MySQLDetector
### Finish running MsqlDetector
### Start running MySQLiDetector
### Finish running MySQLDetector
### Start running Oci8Detector
### Finish running MongoDbDetector
### Start running OpenSSLDetector
### Finish running Oci8Detector
### Start running ParadoxDetector
### Finish running ParadoxDetector
### Start running PasswordHashingDetector
### Finish running ArrayElementDetector
### Start running PhpCurlDetector
### Finish running HashDetector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running PasswordHashingDetector
### Start running PHPRetrievalDetector
### Finish running PhpCurlDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PHPIncludedDetector
### Start running PhpVarDetector
### Finish running OpenSSLDetector
### Start running PostgreSQLDetector
### Finish running PostgreSQLDetector
### Start running PropertyDetector
### Finish running MySQLiDetector
### Start running Sqlite3Detector
### Finish running maxdbDetector
### Start running SqliteDetector
### Finish running SqliteDetector
### Start running SqlServerDetector
### Finish running PropertyDetector
### Start running SybaseDetector
### Finish running PhpVarDetector
### Start running TokyoTyrantDetector
### Finish running SybaseDetector
### Start running UserInputDetector
### Finish running Sqlite3Detector
### Start running VariableDetector
### Finish running TokyoTyrantDetector
### Start running WordpressHashingFnDetector
### Finish running SqlServerDetector
### Start running WordPressRemoteDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressRetrievalDetector
### Finish running WordPressRemoteDetector
### Start running WordPressStorageDetector
### Finish running VariableDetector
### Start running WP_UserDetector
### Finish running UserInputDetector
### Start running GenericDatabaseUsageDetector
### Finish running PHPRetrievalDetector
### Start running GenericEncryptionDetector
### Finish running PHPStorageDetector
### Start running DeletionDetector
### Finish running WP_UserDetector
### Start running UninstallDetector
### Finish running GenericEncryptionDetector
### Finish running GenericDatabaseUsageDetector
### Finish running UninstallDetector
### Finish running DeletionDetector
### Finish running WordPressStorageDetector
### Finish running WordPressRetrievalDetector
### Finished running detectors
content-update-scheduler.php:575
  - RETRIEVAL call to file_get_contents($dir).
  - Data types: file
content-update-scheduler.php:757
  - RETRIEVAL call to file_get_contents($dir).
  - Data types: file
trunk/content-update-scheduler.php:575
  - RETRIEVAL call to file_get_contents($dir).
  - Data types: file
trunk/content-update-scheduler.php:757
  - RETRIEVAL call to file_get_contents($dir).
  - Data types: file 

content-update-scheduler.php:579
  - STORAGE call to file_put_contents($dir, $str).
  - Data types: file
content-update-scheduler.php:761
  - STORAGE call to file_put_contents($dir, $str).
  - Data types: file
trunk/content-update-scheduler.php:579
  - STORAGE call to file_put_contents($dir, $str).
  - Data types: file
trunk/content-update-scheduler.php:761
  - STORAGE call to file_put_contents($dir, $str).
  - Data types: file 

content-update-scheduler.php:544
  - object property '$post->post_password' of personal types {'password'} is found.
  - Data types: password
trunk/content-update-scheduler.php:544
  - object property '$post->post_password' of personal types {'password'} is found.
  - Data types: password 

content-update-scheduler.php:105
  - RETRIEVAL call to get_post_meta(absint(wp_unslash($_REQUEST["postid"])), self"_cus_publish_status" . "_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
content-update-scheduler.php:185
  - RETRIEVAL call to get_post(get_post_meta($post->ID, self"_cus_publish_status" . "_original", true)) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
content-update-scheduler.php:185
  - RETRIEVAL call to get_post_meta($post->ID, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
content-update-scheduler.php:254
  - RETRIEVAL call to get_post_meta($post_id, self"_cus_publish_status" . "_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
content-update-scheduler.php:271
  - RETRIEVAL call to get_post(absint(wp_unslash($_REQUEST["post"]))) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
content-update-scheduler.php:292
  - RETRIEVAL call to get_post(absint(wp_unslash($_REQUEST["post"]))) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
content-update-scheduler.php:332
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
content-update-scheduler.php:367
  - RETRIEVAL call to get_post_meta($post->ID, $metaname, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
content-update-scheduler.php:370
  - RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
content-update-scheduler.php:376
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
content-update-scheduler.php:382
  - RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
content-update-scheduler.php:441
  - RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
content-update-scheduler.php:442
  - RETRIEVAL call to get_option("timezone_string") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
content-update-scheduler.php:473
  - RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
content-update-scheduler.php:513
  - RETRIEVAL call to get_post_meta($post->ID, self"_cus_publish_status" . "_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
content-update-scheduler.php:527
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
content-update-scheduler.php:531
  - RETRIEVAL call to get_post_meta($post->ID, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
content-update-scheduler.php:558
  - RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
content-update-scheduler.php:583
  - RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
content-update-scheduler.php:587
  - RETRIEVAL call to get_post_field("post_name", $post->ID) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: post_meta, post, wp_post
content-update-scheduler.php:588
  - RETRIEVAL call to get_post_field("post_name", $new_post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: post_meta, post, wp_post
content-update-scheduler.php:626
  - RETRIEVAL call to get_post($source_post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
content-update-scheduler.php:627
  - RETRIEVAL call to get_post($destination_post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
content-update-scheduler.php:645
  - RETRIEVAL call to get_post_custom_values($key, $source_post->ID). Passed arguments: 1: $post_id (int), 0: $key (string). Returns (array|null).
content-update-scheduler.php:680
  - RETRIEVAL call to get_post_meta($post_id, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
content-update-scheduler.php:725
  - RETRIEVAL call to get_post_meta($post_id, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
content-update-scheduler.php:732
  - RETRIEVAL call to get_post($orig_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
content-update-scheduler.php:734
  - RETRIEVAL call to get_post($post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
content-update-scheduler.php:741
  - RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
content-update-scheduler.php:765
  - RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
content-update-scheduler.php:768
  - RETRIEVAL call to get_post_field("post_name", $post->ID) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: post_meta, post, wp_post
content-update-scheduler.php:769
  - RETRIEVAL call to get_post_field("post_name", $post->post_parent) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: post_meta, post, wp_post
content-update-scheduler.php:844
  - RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
content-update-scheduler.php:845
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
content-update-scheduler.php:845
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
content-update-scheduler.php:927
  - RETRIEVAL call to get_post_meta($post->ID, "cus_sc_publish_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
options.php:82
  - RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
options.php:125
  - RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
options.php:152
  - RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
options.php:178
  - RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/content-update-scheduler.php:105
  - RETRIEVAL call to get_post_meta(absint(wp_unslash($_REQUEST["postid"])), self"_cus_publish_status" . "_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
trunk/content-update-scheduler.php:185
  - RETRIEVAL call to get_post(get_post_meta($post->ID, self"_cus_publish_status" . "_original", true)) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
trunk/content-update-scheduler.php:185
  - RETRIEVAL call to get_post_meta($post->ID, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
trunk/content-update-scheduler.php:254
  - RETRIEVAL call to get_post_meta($post_id, self"_cus_publish_status" . "_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
trunk/content-update-scheduler.php:271
  - RETRIEVAL call to get_post(absint(wp_unslash($_REQUEST["post"]))) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
trunk/content-update-scheduler.php:292
  - RETRIEVAL call to get_post(absint(wp_unslash($_REQUEST["post"]))) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
trunk/content-update-scheduler.php:332
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/content-update-scheduler.php:367
  - RETRIEVAL call to get_post_meta($post->ID, $metaname, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
trunk/content-update-scheduler.php:370
  - RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/content-update-scheduler.php:376
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/content-update-scheduler.php:382
  - RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/content-update-scheduler.php:441
  - RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/content-update-scheduler.php:442
  - RETRIEVAL call to get_option("timezone_string") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/content-update-scheduler.php:473
  - RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/content-update-scheduler.php:513
  - RETRIEVAL call to get_post_meta($post->ID, self"_cus_publish_status" . "_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
trunk/content-update-scheduler.php:527
  - RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).
  - Data types: user_meta, user
trunk/content-update-scheduler.php:531
  - RETRIEVAL call to get_post_meta($post->ID, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
trunk/content-update-scheduler.php:558
  - RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/content-update-scheduler.php:583
  - RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/content-update-scheduler.php:587
  - RETRIEVAL call to get_post_field("post_name", $post->ID) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: post_meta, post, wp_post
trunk/content-update-scheduler.php:588
  - RETRIEVAL call to get_post_field("post_name", $new_post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: post_meta, post, wp_post
trunk/content-update-scheduler.php:626
  - RETRIEVAL call to get_post($source_post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
trunk/content-update-scheduler.php:627
  - RETRIEVAL call to get_post($destination_post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
trunk/content-update-scheduler.php:645
  - RETRIEVAL call to get_post_custom_values($key, $source_post->ID). Passed arguments: 1: $post_id (int), 0: $key (string). Returns (array|null).
trunk/content-update-scheduler.php:680
  - RETRIEVAL call to get_post_meta($post_id, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
trunk/content-update-scheduler.php:725
  - RETRIEVAL call to get_post_meta($post_id, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
trunk/content-update-scheduler.php:732
  - RETRIEVAL call to get_post($orig_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
trunk/content-update-scheduler.php:734
  - RETRIEVAL call to get_post($post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).
  - Data types: post_meta, post, wp_post
trunk/content-update-scheduler.php:741
  - RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/content-update-scheduler.php:765
  - RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/content-update-scheduler.php:768
  - RETRIEVAL call to get_post_field("post_name", $post->ID) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: post_meta, post, wp_post
trunk/content-update-scheduler.php:769
  - RETRIEVAL call to get_post_field("post_name", $post->post_parent) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).
  - Data types: post_meta, post, wp_post
trunk/content-update-scheduler.php:844
  - RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/content-update-scheduler.php:845
  - RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/content-update-scheduler.php:845
  - RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/content-update-scheduler.php:927
  - RETRIEVAL call to get_post_meta($post->ID, "cus_sc_publish_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
trunk/options.php:82
  - RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/options.php:125
  - RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/options.php:152
  - RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
trunk/options.php:178
  - RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option 

content-update-scheduler.php:505
  - STORAGE call to wp_update_post($post, true). Passed arguments: 1: $wp_error (bool), 0: $postarr (array|object). Returns (int|WP_Error).
content-update-scheduler.php:551
  - STORAGE call to wp_insert_post($new_post). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
content-update-scheduler.php:603
  - STORAGE call to update_post_meta($new_post_id, self"_cus_publish_status" . "_original", $original) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
content-update-scheduler.php:648
  - STORAGE call to update_post_meta($destination_post->ID, $key, $value) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
content-update-scheduler.php:704
  - STORAGE call to update_post_meta($post_id, $pub, $stamp) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
content-update-scheduler.php:786
  - STORAGE call to delete_post_meta($post->ID, self"_cus_publish_status" . "_pubdate") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
content-update-scheduler.php:811
  - STORAGE call to wp_update_post($post). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).
content-update-scheduler.php:812
  - STORAGE call to wp_delete_post($post_id, true) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post_meta, post, wp_post
trunk/content-update-scheduler.php:505
  - STORAGE call to wp_update_post($post, true). Passed arguments: 1: $wp_error (bool), 0: $postarr (array|object). Returns (int|WP_Error).
trunk/content-update-scheduler.php:551
  - STORAGE call to wp_insert_post($new_post). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
trunk/content-update-scheduler.php:603
  - STORAGE call to update_post_meta($new_post_id, self"_cus_publish_status" . "_original", $original) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
trunk/content-update-scheduler.php:648
  - STORAGE call to update_post_meta($destination_post->ID, $key, $value) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
trunk/content-update-scheduler.php:704
  - STORAGE call to update_post_meta($post_id, $pub, $stamp) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
trunk/content-update-scheduler.php:786
  - STORAGE call to delete_post_meta($post->ID, self"_cus_publish_status" . "_pubdate") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
trunk/content-update-scheduler.php:811
  - STORAGE call to wp_update_post($post). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).
trunk/content-update-scheduler.php:812
  - STORAGE call to wp_delete_post($post_id, true) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post_meta, post, wp_post 

content-update-scheduler.php:786
  - DELETION call to delete_post_meta($post->ID, self"_cus_publish_status" . "_pubdate") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
content-update-scheduler.php:812
  - DELETION call to wp_delete_post($post_id, true) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post_meta, post, wp_post
trunk/content-update-scheduler.php:786
  - DELETION call to delete_post_meta($post->ID, self"_cus_publish_status" . "_pubdate") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).
  - Data types: post_meta
trunk/content-update-scheduler.php:812
  - DELETION call to wp_delete_post($post_id, true) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).
  - Data types: post_meta, post, wp_post 

By data type:
file
	PHPRetrievalDetector.file_get_contents($dir) - {'file'}
	PHPStorageDetector.file_put_contents($dir, $str) - {'file'}
	PHPRetrievalDetector.file_get_contents($dir) - {'file'}
	PHPStorageDetector.file_put_contents($dir, $str) - {'file'}
	PHPRetrievalDetector.file_get_contents($dir) - {'file'}
	PHPRetrievalDetector.file_get_contents($dir) - {'file'}
	PHPStorageDetector.file_put_contents($dir, $str) - {'file'}
	PHPStorageDetector.file_put_contents($dir, $str) - {'file'}
none
	WordPressStorageDetector.wp_insert_post($new_post) - set()
	WordPressStorageDetector.wp_update_post($post) - set()
	WordPressStorageDetector.wp_update_post($post, true) - set()
	WordPressStorageDetector.wp_insert_post($new_post) - set()
	WordPressRetrievalDetector.get_post_custom_values($key, $source_post->ID) - set()
	WordPressStorageDetector.wp_update_post($post) - set()
	WordPressRetrievalDetector.get_post_custom_values($key, $source_post->ID) - set()
	WordPressStorageDetector.wp_update_post($post, true) - set()
option
	WordPressRetrievalDetector.get_option("timezone_string") - {'option'}
	WordPressRetrievalDetector.get_option("gmt_offset") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("active_plugins") - {'option'}
	WordPressRetrievalDetector.get_option("active_plugins") - {'option'}
	WordPressRetrievalDetector.get_option("gmt_offset") - {'option'}
	WordPressRetrievalDetector.get_option("active_plugins") - {'option'}
	WordPressRetrievalDetector.get_option("gmt_offset") - {'option'}
	WordPressRetrievalDetector.get_option("gmt_offset") - {'option'}
	WordPressRetrievalDetector.get_option("tsu_options") - {'option'}
	WordPressRetrievalDetector.get_option("active_plugins") - {'option'}
	WordPressRetrievalDetector.get_option("tsu_options") - {'option'}
	WordPressRetrievalDetector.get_option("active_plugins") - {'option'}
	WordPressRetrievalDetector.get_option("active_plugins") - {'option'}
	WordPressRetrievalDetector.get_option("gmt_offset") - {'option'}
	WordPressRetrievalDetector.get_option("active_plugins") - {'option'}
	WordPressRetrievalDetector.get_option("gmt_offset") - {'option'}
	WordPressRetrievalDetector.get_option("active_plugins") - {'option'}
	WordPressRetrievalDetector.get_option("gmt_offset") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("gmt_offset") - {'option'}
	WordPressRetrievalDetector.get_option("tsu_options") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.get_option("gmt_offset") - {'option'}
	WordPressRetrievalDetector.get_option("tsu_options") - {'option'}
	WordPressRetrievalDetector.get_option("tsu_options") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("tsu_options") - {'option'}
	WordPressRetrievalDetector.get_option("tsu_options") - {'option'}
	WordPressRetrievalDetector.get_option("time_format") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("timezone_string") - {'option'}
	WordPressRetrievalDetector.get_option("date_format") - {'option'}
	WordPressRetrievalDetector.get_option("gmt_offset") - {'option'}
	WordPressRetrievalDetector.get_option("tsu_options") - {'option'}
password
	PropertyDetector.(unknown) - {'password'}
	PropertyDetector.(unknown) - {'password'}
post
	WordPressStorageDetector.wp_delete_post($post_id, true) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post(absint(wp_unslash($_REQUEST["post"]))) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->ID) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($orig_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->post_parent) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($orig_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->ID) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post(absint(wp_unslash($_REQUEST["post"]))) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $new_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($source_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($destination_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post(get_post_meta($post->ID, self"_cus_publish_status" . "_original", true)) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->ID) - {'post_meta', 'post', 'wp_post'}
	WordPressStorageDetector.wp_delete_post($post_id, true) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->ID) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->post_parent) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post(absint(wp_unslash($_REQUEST["post"]))) - {'post_meta', 'post', 'wp_post'}
	DeletionDetector.wp_delete_post($post_id, true) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $new_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($source_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post(absint(wp_unslash($_REQUEST["post"]))) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($destination_post_id) - {'post_meta', 'post', 'wp_post'}
	DeletionDetector.wp_delete_post($post_id, true) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post(get_post_meta($post->ID, self"_cus_publish_status" . "_original", true)) - {'post_meta', 'post', 'wp_post'}
post_meta
	WordPressStorageDetector.wp_delete_post($post_id, true) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post(absint(wp_unslash($_REQUEST["post"]))) - {'post_meta', 'post', 'wp_post'}
	WordPressStorageDetector.update_post_meta($destination_post->ID, $key, $value) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, self"_cus_publish_status" . "_original", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, self"_cus_publish_status" . "_pubdate", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->ID) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($orig_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->post_parent) - {'post_meta', 'post', 'wp_post'}
	WordPressStorageDetector.update_post_meta($new_post_id, self"_cus_publish_status" . "_original", $original) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, self"_cus_publish_status" . "_original", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($orig_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_meta($post->ID, self"_cus_publish_status" . "_original", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->ID) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_meta($post_id, self"_cus_publish_status" . "_pubdate", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post(absint(wp_unslash($_REQUEST["post"]))) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_meta($post_id, self"_cus_publish_status" . "_original", true) - {'post_meta'}
	DeletionDetector.delete_post_meta($post->ID, self"_cus_publish_status" . "_pubdate") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, self"_cus_publish_status" . "_original", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_name", $new_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($source_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($destination_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_meta($post->ID, self"_cus_publish_status" . "_pubdate", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, self"_cus_publish_status" . "_original", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post($post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_meta($post->ID, self"_cus_publish_status" . "_pubdate", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post(get_post_meta($post->ID, self"_cus_publish_status" . "_original", true)) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->ID) - {'post_meta', 'post', 'wp_post'}
	WordPressStorageDetector.wp_delete_post($post_id, true) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_meta($post->ID, $metaname, true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "cus_sc_publish_pubdate", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post_id, self"_cus_publish_status" . "_original", true) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($post->ID, self"_cus_publish_status" . "_pubdate") - {'post_meta'}
	DeletionDetector.delete_post_meta($post->ID, self"_cus_publish_status" . "_pubdate") - {'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->ID) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_meta(absint(wp_unslash($_REQUEST["postid"])), self"_cus_publish_status" . "_pubdate", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->post_parent) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_meta($post->ID, $metaname, true) - {'post_meta'}
	WordPressRetrievalDetector.get_post(absint(wp_unslash($_REQUEST["post"]))) - {'post_meta', 'post', 'wp_post'}
	WordPressStorageDetector.update_post_meta($post_id, $pub, $stamp) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($post->ID, self"_cus_publish_status" . "_pubdate") - {'post_meta'}
	DeletionDetector.wp_delete_post($post_id, true) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $new_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressStorageDetector.update_post_meta($destination_post->ID, $key, $value) - {'post_meta'}
	WordPressRetrievalDetector.get_post($source_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "cus_sc_publish_pubdate", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post(absint(wp_unslash($_REQUEST["post"]))) - {'post_meta', 'post', 'wp_post'}
	WordPressStorageDetector.update_post_meta($new_post_id, self"_cus_publish_status" . "_original", $original) - {'post_meta'}
	WordPressRetrievalDetector.get_post($destination_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressStorageDetector.update_post_meta($post_id, $pub, $stamp) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, self"_cus_publish_status" . "_original", true) - {'post_meta'}
	DeletionDetector.wp_delete_post($post_id, true) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_meta(absint(wp_unslash($_REQUEST["postid"])), self"_cus_publish_status" . "_pubdate", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post(get_post_meta($post->ID, self"_cus_publish_status" . "_original", true)) - {'post_meta', 'post', 'wp_post'}
user
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
user_meta
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
	WordPressRetrievalDetector.wp_get_current_user() - {'user_meta', 'user'}
wp_post
	WordPressStorageDetector.wp_delete_post($post_id, true) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post(absint(wp_unslash($_REQUEST["post"]))) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->ID) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($orig_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->post_parent) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($orig_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->ID) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post(absint(wp_unslash($_REQUEST["post"]))) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $new_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($source_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($destination_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post(get_post_meta($post->ID, self"_cus_publish_status" . "_original", true)) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->ID) - {'post_meta', 'post', 'wp_post'}
	WordPressStorageDetector.wp_delete_post($post_id, true) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->ID) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $post->post_parent) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post(absint(wp_unslash($_REQUEST["post"]))) - {'post_meta', 'post', 'wp_post'}
	DeletionDetector.wp_delete_post($post_id, true) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post_field("post_name", $new_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($source_post_id) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post(absint(wp_unslash($_REQUEST["post"]))) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post($destination_post_id) - {'post_meta', 'post', 'wp_post'}
	DeletionDetector.wp_delete_post($post_id, true) - {'post_meta', 'post', 'wp_post'}
	WordPressRetrievalDetector.get_post(get_post_meta($post->ID, self"_cus_publish_status" . "_original", true)) - {'post_meta', 'post', 'wp_post'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:19.320115.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 416 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.836097.

!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 2353
!!!!!!!!!!Assumption violated. request variable is assigned to multiple variable at the same time. Check 7397
416 STORE_REACHES edges created
416 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 638 nodes as PERSONAL
In total, tainted 638 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
In total, tainted 0 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:10.262136.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:01:17.982409!
DELETION call to delete_post_meta($post->ID, self"_cus_publish_status" . "_pubdate") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to wp_delete_post($post_id, true) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
DELETION call to delete_post_meta($post->ID, self"_cus_publish_status" . "_pubdate") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
DELETION call to wp_delete_post($post_id, true) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
RETRIEVAL call to file_get_contents($dir).,None,None
RETRIEVAL call to file_get_contents($dir).,None,None
RETRIEVAL call to file_get_contents($dir).,None,None
RETRIEVAL call to file_get_contents($dir).,None,None
STORAGE call to file_put_contents($dir, $str).,None,None
STORAGE call to file_put_contents($dir, $str).,None,None
STORAGE call to file_put_contents($dir, $str).,None,None
STORAGE call to file_put_contents($dir, $str).,None,None
object property '$post->post_password' of personal types {'password'} is found.,,None
object property '$post->post_password' of personal types {'password'} is found.,,None
RETRIEVAL call to get_post_meta(absint(wp_unslash($_REQUEST["postid"])), self"_cus_publish_status" . "_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post(get_post_meta($post->ID, self"_cus_publish_status" . "_original", true)) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post_meta($post_id, self"_cus_publish_status" . "_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post(absint(wp_unslash($_REQUEST["post"]))) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post(absint(wp_unslash($_REQUEST["post"]))) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, $metaname, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("timezone_string") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, self"_cus_publish_status" . "_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_post_meta($post->ID, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_field("post_name", $post->ID) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post_field("post_name", $new_post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post($source_post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post($destination_post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post_custom_values($key, $source_post->ID). Passed arguments: 1: $post_id (int), 0: $key (string). Returns (array|null).,None,None
RETRIEVAL call to get_post_meta($post_id, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($orig_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post($post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_field("post_name", $post->ID) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post_field("post_name", $post->post_parent) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "cus_sc_publish_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta(absint(wp_unslash($_REQUEST["postid"])), self"_cus_publish_status" . "_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post(get_post_meta($post->ID, self"_cus_publish_status" . "_original", true)) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post_meta($post_id, self"_cus_publish_status" . "_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post(absint(wp_unslash($_REQUEST["post"]))) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post(absint(wp_unslash($_REQUEST["post"]))) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, $metaname, true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("timezone_string") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, self"_cus_publish_status" . "_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to wp_get_current_user() alters data types {'user_meta', 'user'}. Returns (WP_User).,None,None
RETRIEVAL call to get_post_meta($post->ID, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_field("post_name", $post->ID) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post_field("post_name", $new_post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post($source_post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post($destination_post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post_custom_values($key, $source_post->ID). Passed arguments: 1: $post_id (int), 0: $key (string). Returns (array|null).,None,None
RETRIEVAL call to get_post_meta($post_id, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post_id, self"_cus_publish_status" . "_original", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post($orig_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_post($post_id) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $post (int|WP_Post|null). Returns (WP_Post|array|null).,None,None
RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_field("post_name", $post->ID) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_post_field("post_name", $post->post_parent) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 0: $field (string), 1: $post (int|WP_Post). Returns (string).,None,None
RETRIEVAL call to get_option("gmt_offset") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("time_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("date_format") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "cus_sc_publish_pubdate", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("tsu_options") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
STORAGE call to wp_update_post($post, true). Passed arguments: 1: $wp_error (bool), 0: $postarr (array|object). Returns (int|WP_Error).,None,None
STORAGE call to wp_insert_post($new_post). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($new_post_id, self"_cus_publish_status" . "_original", $original) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($destination_post->ID, $key, $value) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, $pub, $stamp) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($post->ID, self"_cus_publish_status" . "_pubdate") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to wp_update_post($post). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).,None,None
STORAGE call to wp_delete_post($post_id, true) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
STORAGE call to wp_update_post($post, true). Passed arguments: 1: $wp_error (bool), 0: $postarr (array|object). Returns (int|WP_Error).,None,None
STORAGE call to wp_insert_post($new_post). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($new_post_id, self"_cus_publish_status" . "_original", $original) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($destination_post->ID, $key, $value) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($post_id, $pub, $stamp) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($post->ID, self"_cus_publish_status" . "_pubdate") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string). Returns (bool).,None,None
STORAGE call to wp_update_post($post). Passed arguments: 0: $postarr (array|object). Returns (int|WP_Error).,None,None
STORAGE call to wp_delete_post($post_id, true) alters data types {'post_meta', 'post', 'wp_post'}. Passed arguments: 1: $force_delete (bool), 0: $postid (int). Returns (WP_Post|false|null).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
Data Deletion violation! The plugin has storage node that has no identifier and cannot be accessed!
Data Deletion violation! The plugin has storage node that has no identifier and cannot be accessed!
Data Deletion violation! The plugin has storage node that has no identifier and cannot be accessed!
Data Deletion violation! The plugin has storage node that has no identifier and cannot be accessed!
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] PII of types (['user_meta', 'password', 'user']) stored through WordPress function "wp_insert_post($new_post)", found in file trunk/content-update-scheduler.php at line 551. 

[has_storage] PII of types (['user_meta', 'password', 'user']) stored through WordPress function "update_post_meta($destination_post->ID, $key, $value)", found in file content-update-scheduler.php at line 648. 

[has_storage] PII of types (['user_meta', 'password', 'user']) stored through WordPress function "update_post_meta($new_post_id, self"_cus_publish_status" . "_original", $original)", found in file content-update-scheduler.php at line 603. 

[has_storage] Unstructured data storage of PII types (['user_meta', 'password', 'user']) to files through function "file_put_contents", found in file trunk/content-update-scheduler.php at line 579. 

[has_storage] PII of types (['user_meta', 'password', 'user']) stored through WordPress function "wp_insert_post($new_post)", found in file content-update-scheduler.php at line 551. 

[has_storage] Unstructured data storage of PII types (['user_meta', 'password', 'user']) to files through function "file_put_contents", found in file trunk/content-update-scheduler.php at line 761. 

[has_storage] PII of types (['user_meta', 'password', 'user']) stored through WordPress function "update_post_meta($destination_post->ID, $key, $value)", found in file trunk/content-update-scheduler.php at line 648. 

[has_storage] PII of types (['user_meta', 'password', 'user']) stored through WordPress function "update_post_meta($new_post_id, self"_cus_publish_status" . "_original", $original)", found in file trunk/content-update-scheduler.php at line 603. 

[has_storage] Unstructured data storage of PII types (['user_meta', 'password', 'user']) to files through function "file_put_contents", found in file content-update-scheduler.php at line 761. 

[has_storage] Unstructured data storage of PII types (['user_meta', 'password', 'user']) to files through function "file_put_contents", found in file content-update-scheduler.php at line 579. 

[has_storage] Storage check is CUSTOM_UNSTRUCTURED 

[Art.17, Right to erasure] Wordpress storage of PII through wp_insert_post($new_post) does not have corresponding deletion method. Storage method found in file trunk/content-update-scheduler.php at line 551. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($destination_post->ID, $key, $value) does not have corresponding deletion method. Storage method found in file content-update-scheduler.php at line 648. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($new_post_id, self"_cus_publish_status" . "_original", $original) does not have corresponding deletion method. Storage method found in file content-update-scheduler.php at line 603. 

[Art.17, Right to erasure] Complete data deletion is required for storage at node ID 7655 , but is impossible due to custom storage of PII without identifiers. Found in file trunk/content-update-scheduler.php at line 579 

[Art.17, Right to erasure] Wordpress storage of PII through wp_insert_post($new_post) does not have corresponding deletion method. Storage method found in file content-update-scheduler.php at line 551. 

[Art.17, Right to erasure] Complete data deletion is required for storage at node ID 8533 , but is impossible due to custom storage of PII without identifiers. Found in file trunk/content-update-scheduler.php at line 761 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($destination_post->ID, $key, $value) does not have corresponding deletion method. Storage method found in file trunk/content-update-scheduler.php at line 648. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($new_post_id, self"_cus_publish_status" . "_original", $original) does not have corresponding deletion method. Storage method found in file trunk/content-update-scheduler.php at line 603. 

[Art.17, Right to erasure] Complete data deletion is required for storage at node ID 3489 , but is impossible due to custom storage of PII without identifiers. Found in file content-update-scheduler.php at line 761 

[Art.17, Right to erasure] Complete data deletion is required for storage at node ID 2611 , but is impossible due to custom storage of PII without identifiers. Found in file content-update-scheduler.php at line 579 

[Art.17, Right to erasure] Deletion access is NONE 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 7522. Found in file trunk/content-update-scheduler.php at line 551 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 2899. Found in file content-update-scheduler.php at line 648 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 2757. Found in file content-update-scheduler.php at line 603 

[Art.15, Right to access] Complete data access is required for storage at node ID 7655 , but is impossible due to custom storage of PII without identifiers. Found in file trunk/content-update-scheduler.php at line 579 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 2478. Found in file content-update-scheduler.php at line 551 

[Art.15, Right to access] Complete data access is required for storage at node ID 8533 , but is impossible due to custom storage of PII without identifiers. Found in file trunk/content-update-scheduler.php at line 761 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 7943. Found in file trunk/content-update-scheduler.php at line 648 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 7801. Found in file trunk/content-update-scheduler.php at line 603 

[Art.15, Right to access] Complete data access is required for storage at node ID 3489 , but is impossible due to custom storage of PII without identifiers. Found in file content-update-scheduler.php at line 761 

[Art.15, Right to access] Complete data access is required for storage at node ID 2611 , but is impossible due to custom storage of PII without identifiers. Found in file content-update-scheduler.php at line 579 

[Art.15, Right to access] Data access is NONE 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? True 

[main] Is access in violation? True 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? False 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        
