Timeout in resolving values
Timeout in running neo4j query
Running Main.py on microstock-photo-powersearch-plugin

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:01.102483.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:00.994174.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 18 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.298355.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 0 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:00.445900.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 281 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:00.678310.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 0 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.642072.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.111972.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 64 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:01.464069.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 1411
Added 1048 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 5263
Added 3852 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:01.439209.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/microstock-photo-powersearch-plugin/micro-power-search.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:00.135045.

1000 PHP_REACHES edges created
1411 PHP_REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
3852 PHP_REACHES edges created
5263 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 407 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:00.959948.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.181237.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 1 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.368792.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 5 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.155347.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:00.021254.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.029927.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.008621.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.036218.

6 PHP_REACHES edges created
6 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 8 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.127432.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
No SQL nodes to process.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:00.137227.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'<script type="text/javascript">var mps_updateInterval = window.setInterval (\'mps_updateTextInfo()\', $this->get_plugin_configuration()_update_interval000);</script>'' cannot be parsed correct.
HTML code '$'$this_plugin_dir'' cannot be parsed correct.
HTML code '$'$this_plugin_dir'' cannot be parsed correct.
HTML code '$'$this_plugin_dir'' cannot be parsed correct.
HTML code '$'$this_plugin_dir'' cannot be parsed correct.
HTML code '$'$this_plugin_dir'' cannot be parsed correct.
HTML code '$'$this_plugin_dir'' cannot be parsed correct.
HTML code '$'$this_plugin_dir'' cannot be parsed correct.
HTML code '$'<div class="dbx-b-ox-wrapper"><fieldset id="mpspowersearch" class="dbx-box"><div class="dbx-h-andle-wrapper"><h3 class="dbx-handle">Microstock Power</h3></div><div class="dbx-c-ontent-wrapper"><div class="dbx-content">'' cannot be parsed correct.
HTML code '$'Options not saved - Nonce verification failed: Error while attempting to save plugin configuration!!'' cannot be parsed correct.
HTML code '$'wp_create_nonce("mps_configuration_nonce")'' cannot be parsed correct.
HTML code '$'With these options you can configure the Microstock Powersearch plugin.'' cannot be parsed correct.
HTML code '$' selected="selected"'' cannot be parsed correct.
HTML code '$' selected="selected"'' cannot be parsed correct.
HTML code '$' selected="selected"'' cannot be parsed correct.
HTML code '$' selected="selected"'' cannot be parsed correct.
HTML code '$' selected="selected"'' cannot be parsed correct.
HTML code '$' selected="selected"'' cannot be parsed correct.
HTML code '$' selected="selected"'' cannot be parsed correct.
HTML code '$' selected="selected"'' cannot be parsed correct.
HTML code '$' selected="selected"'' cannot be parsed correct.
HTML code '$'checked="checked"'' cannot be parsed correct.
HTML code '$'<option value=10"selected="selected">10</option>'' cannot be parsed correct.
HTML code '$'checked="checked"'' cannot be parsed correct.
HTML code '$'$this_plugin_dir'' cannot be parsed correct.
HTML code '$'$this_plugin_dir'' cannot be parsed correct.
HTML code '$'$this_plugin_dir'' cannot be parsed correct.
HTML code '$'$this_plugin_dir'' cannot be parsed correct.
HTML code '$'$this_plugin_dir'' cannot be parsed correct.
HTML code '$'$this_plugin_dir'' cannot be parsed correct.
HTML code '$'$this_plugin_dir'' cannot be parsed correct.
HTML code '$'$this_plugin_dir'' cannot be parsed correct.
HTML code '$'get_post_meta($post->ID, "mps_metadata", true)_lang$this->get_plugin_configuration()_default_language'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'selected="selected"'' cannot be parsed correct.
HTML code '$'>fr</option>
						<option value="nl" '' cannot be parsed correct.
HTML code '$'>nl</option>
						<option value="pl" '' cannot be parsed correct.
HTML code '$'>pl</option>
						<option value="pt-br" '' cannot be parsed correct.
HTML code '$'>pt-br</option>
						<option value="tr" '' cannot be parsed correct.
HTML code '$'>tr</option>
					</select>
				</td>
				<td><div class="submit"><input class="right" type="button" name="mpsupdate" onclick="mps_updateTextInfo()" value=" '' cannot be parsed correct.
HTML code '$' " title="Get a list of common terms within your post content (works best above 200 or so words)."/></div></td>
				<td style="text-align: right;">
					<input id="MicroSearchText" type="text" value="Enter Query:" onfocus="if(this.value==\'Enter Query:\') { this.value=\'\'; } else { this.select(); }" onblur="if(this.value==\'\') { this.value=\'Enter Query:\'; } mspsaveLastKnownSearch();" onkeypress="if(event.charCode == 13) { msprunSearch(); document.getElementById(\'MicroSearchText\').focus(); this.select(); }" />
					<div class="submit">
						<input id="MicroSearchButton" class="right" type="button" name="mpsrunsearch" onclick="msprunSearch();" value=" '' cannot be parsed correct.
HTML code '$' " title="Search for Microstock Images"/>
					</div>
				</td>
			</tr>
		</table>
		'' cannot be parsed correct.
HTML code '$'		<hr />
		<div id="mpsstats">
			<div id="MicroImagePreview" onclick="msphidePreviewImage();">
				<div id="MicroImagePreview_Container">
					<img id="MicroImagePreview_Image"  onload="if(this.attachEvent) { /*IE7*/ this.attachEvent(\'ondragstart\', function() { mps_setDragData(event, \'Using these images without purchasing a license is both illegal and traceable.\'); }); }" ondragstart="mps_setDragData(event, \'Using these images without purchasing a license is both illegal and traceable.\')" onclick="mspopenPreviewImageAgencyPage(this);" title="Click on the image or info button to visit this image on the web (in a new tab), or click on the background to remove this preview overlay." />
					<div id="MicroImagePreview_Info">
						<span id="MicroImageBuyInfoButton" class="PreviewImageButton" onclick="mspopenPreviewImageAgencyPage(this);"></span>
						<div class="PreviewImageButton" id="MicroImagePreview_InfoDescription" onclick="mspopenPreviewImageAgencyPage(this);" ></div>
						<iframe id="MicroFacebookLikeFrame" src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.stockphotofeeds.com&amp;layout=button_count&amp;show_faces=false&amp;width=54&amp;action=like&amp;font=arial&amp;colorscheme=light&amp;height=25&amp;ref=spf_micro_unset" scrolling="no" frameborder="0" style="overflow:hidden;width:54px; height:25px;" allowTransparency="true"></iframe>
						<br class="clear" />
					</div>
				</div>
			</div>
			<div id="mpssearches"></div>
			<div id="MicroTools">
				<select id="MicroSearchType" onchange="mspsaveSearchType(event);">
					<option value="engine" selected="true">Best Match</option>
					<option value="new">New Images</option>
				</select>
				<select id="MicroSearchCount" title="Search Results For Each Library" onchange="mspsaveNumResults(event);">
					<option value="5" selected="true">5</option>
					<option value="10">10</option>
					<option value="20">20</option>
					<option value="40">40</option>
				</select>
				<span id="MicroAgencies">
					<label class="simpleButton" for="MicroSearchDreamstime"><input siteid="Dreamstime" onchange="mspsaveAgencyDefaults(event);" type="checkbox" id="MicroSearchDreamstime" title="Dreamstime"><img src="../wp-content/plugins/'' cannot be parsed correct.
HTML code '$'/images/agency/dreamstime.ico" title="Dreamstime"></input></label>
					<label class="simpleButton" for="MicroSearchFotolia"><input siteid="Fotolia" onchange="mspsaveAgencyDefaults(event);" type="checkbox" id="MicroSearchFotolia" title="Fotolia"><img src="../wp-content/plugins/'' cannot be parsed correct.
HTML code '$'/images/agency/fotolia.ico" title="Fotolia"></input></label>
					<label class="simpleButton" for="MicroSearchShutterstock"><input siteid="Shutterstock" onchange="mspsaveAgencyDefaults(event);" type="checkbox" id="MicroSearchShutterstock" title="Shutterstock"><img src="../wp-content/plugins/'' cannot be parsed correct.
HTML code '$'/images/agency/shutterstock.ico" title="Shutterstock"></input></label>
					<label class="simpleButton" for="MicroSearch123RF"><input siteid="123RF" onchange="mspsaveAgencyDefaults(event);" type="checkbox" id="MicroSearch123RF" title="123 Royalty Free"><img src="../wp-content/plugins/'' cannot be parsed correct.
HTML code '$'/images/agency/123rf.png" title="123 Royalty Free"></input></label>
					<label class="simpleButton" for="MicroSearchBigstock"><input siteid="Bigstock" onchange="mspsaveAgencyDefaults(event);" type="checkbox" id="MicroSearchBigstock" title="Bigstock"><img src="../wp-content/plugins/'' cannot be parsed correct.
HTML code '$'/images/agency/bigstockphoto.ico" title="Bigstock"></input></label>
					<span id="MicroMoreLink" onclick="jQuery(\'#MicroMoreLinksBox\').toggle();if(jQuery(this).text() == \'More...\') { jQuery(this).text(\'...Less\'); } else { jQuery(this).text(\'More...\')  }">More...</span>
				</span>
			</div>
			<div id="MicroMoreLinksBox">
				<span>The Microstock Powersearch plugin is fairly simple search tool... if you would like a plugin which is fully integrated into the licensing process, try the <a href="http://www.microstockplugin.com/" target="_blank" title="Opens in a new tab">Microstock Photo wordpress plugin</a> which supports iStockphoto and Fotolia with extra tools and speeds up your image buying even more.</span>
			</div>
			<div id="MicroResults">
				<span id="MicroResultsDreamstime"></span>
				<span id="MicroResultsFotolia"></span>
				<span id="MicroResultsShutterstock"></span>
				<span id="MicroResults123RF"></span>
				<span id="MicroResultsBigstock"></span>
			</div>
			<div id="MicroOptions">
				<div id="MicroLinksPanel">
					<span style="display:none;" onclick="mspopenRequestsPanel()" id="MicroImageRequests" />Image Requests</span>
					<span onclick="mspopenMicroLink(\'http://www.stockphotofeeds.com\');" title="Search and Subscribe to RSS feeds of the latest stock images.">StockPhotoFeeds.com</span>
					<span onclick="mspopenMicroLink(\'http://twitter.com/bobbigmac\');" title="Follow BobBigMac, the creator of this extension on Twitter"><img src="../wp-content/plugins/'' cannot be parsed correct.
HTML code '$'/images/agency/twitter.ico" /></span>
					<span title="Please recommend this extension to your friends." style="max-height: 22px;max-width:50px;height: 22px;width:50px;"><iframe class="" id="MicroFacebookLikeSPFFrame" src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.stockphotofeeds.com&amp;layout=button_count&amp;show_faces=false&amp;width=50&amp;action=like&amp;font=arial&amp;colorscheme=light&amp;height=22&amp;ref=spf_micro_bar" scrolling="no" frameborder="0" style="width: 50px; overflow: hidden; height:22px;" allowTransparency="true"></iframe></span>
				</div>
				<div id="MicroStatusPanel">
					<span id="MicroStatusImage">
						<img src="../wp-content/plugins/'' cannot be parsed correct.
HTML code '$'/images/loading.gif" alt="Loading... " />
					</span>
					<span id="MicroStatusMessage">
					</span>
				</div>
			</div>
		</div>
		'' cannot be parsed correct.
HTML code '$'</div></div></fieldset></div>'' cannot be parsed correct.
HTML code '$'</h2>
			<form name="mps_options" method="post" action="">
				<input type="hidden" name="mps_update_options" value="1" />
				<input type="hidden" name="mps_configuration_nonce" value="'' cannot be parsed correct.
HTML code '$'" />
				<table class="form-table">
					<tr><td colspan="2"><span class="description">'' cannot be parsed correct.
HTML code '$'</span></td></tr>
					<tr valign="top">
						<th scope="row">'' cannot be parsed correct.
HTML code '$'</th>
						<td>
							<select name="mps_default_language">
								<option value="en" '' cannot be parsed correct.
HTML code '$'>en</option>
								<option value="da" '' cannot be parsed correct.
HTML code '$'>da</option>
								<option value="de" '' cannot be parsed correct.
HTML code '$'>de</option>
								<option value="es" '' cannot be parsed correct.
HTML code '$'>es</option>
								<option value="fr" '' cannot be parsed correct.
HTML code '$'>fr</option>
								<option value="nl" '' cannot be parsed correct.
HTML code '$'>nl</option>
								<option value="pl" '' cannot be parsed correct.
HTML code '$'>pl</option>
								<option value="pt-br" '' cannot be parsed correct.
HTML code '$'>pt-br</option>
								<option value="tr" '' cannot be parsed correct.
HTML code '$'>tr</option>
							</select>
							<span class="description">'' cannot be parsed correct.
HTML code '$'</span>
						</td>
					</tr>
					<tr valign="top">
						<th scope="row">'' cannot be parsed correct.
HTML code '$'</th>
						<td>
							<input type="checkbox" name="mps_automatic_update" value="1" '' cannot be parsed correct.
HTML code '$' /><br/>
							<span class="description">'' cannot be parsed correct.
HTML code '$'</span><br/>
							'' cannot be parsed correct.
HTML code '$' <select name="mps_update_interval">
								'' cannot be parsed correct.
HTML code '$'							<span class="description">'' cannot be parsed correct.
HTML code '$'</span>
						</td>
					</tr>
					<tr valign="top">
						<th scope="row">'' cannot be parsed correct.
HTML code '$'</th>
						<td>
							<input type="checkbox" name="mps_authors_can_change_content_language" value="1" '' cannot be parsed correct.
HTML code '$' /> '' cannot be parsed correct.
HTML code '$'<br/>
						</td>
					</tr>
				</table>
				<p class="submit"><input type="submit" name="Submit" value="'' cannot be parsed correct.
HTML code '$'" /></p>
			</form>
		</div>'' cannot be parsed correct.
HTML code '$'/stopwords.js" type="text/javascript"></script>
		<script src="../wp-content/plugins/'' cannot be parsed correct.
HTML code '$'/textstat.js" type="text/javascript"></script>
		<script src="../wp-content/plugins/'' cannot be parsed correct.
HTML code '$'/micro_funcs.js" type="text/javascript"></script>
		<link rel="stylesheet" type="text/css" href="../wp-content/plugins/'' cannot be parsed correct.
HTML code '$'/micro_style.css" />
		
		<style type="text/css">
		/* <![CDATA[ */
		#MicroImagePreview { background-image: url(\'../wp-content/plugins/'' cannot be parsed correct.
HTML code '$'/images/black75.png\'); }
		#MicroImagePreview_Info { background-image: url(\'../wp-content/plugins/'' cannot be parsed correct.
HTML code '$'/images/black75.png\'); }
		#MicroImageBuyInfoButton { background-image:url(\'../wp-content/plugins/'' cannot be parsed correct.
HTML code '$'/images/greenInfo.png\'); }
		#MicroImageBuyInfoButton:hover { background-image:url(\'../wp-content/plugins/'' cannot be parsed correct.
HTML code '$'/images/greenInfo_over.png\'); }
		/* ]]> */
		</style>
		'' cannot be parsed correct.
HTML code '$': \' +
						\'<span id="mps_search_results">\' + 
						\'[MULTI:10]\' +
						\'</span>\';
			// replace template variables
			// do we have an instance of tinyMCE?
			if (typeof tinyMCE != \'undefined\' && tinyMCE.activeEditor)
				// need to save the content of editor before we can read it
				tinyMCE.triggerSave();
			// get content to analyze out of the textarea and filter caption-blocks before analysis
			var t = new TextStatistics (((titlefield && titlefield.value) ? titlefield.value + \' \' : \'\') + textfield.value.replace(/\[caption.*caption=\"([^"]*)\"[^\]]*](.*)\[\/caption\]/ig, " $1 $2 ").replace(/\[picblock.*?\]/ig, " "), lang);
			if (template.match (/\[WORDCOUNT\]/ig))
				template = template.replace (/\[WORDCOUNT\]/ig, t.getWordCount ());
			if (template.match (/\[WORDCOUNT_FILTERED\]/ig))
				template = template.replace (/\[WORDCOUNT_FILTERED\]/ig, t.getWordCount (true));
			if (template.match (/\[WORDCOUNT_DIFFERENT\]/ig))
				template = template.replace (/\[WORDCOUNT_DIFFERENT\]/ig, t.getDifferentWordCount ());
			if (template.match (/\[WORDCOUNT_DIFFERENT_FILTERED\]/ig))
				template = template.replace (/\[WORDCOUNT_DIFFERENT_FILTERED\]/ig, t.getDifferentWordCount (true));
			if (template.match (/\[WORDCOUNT_STOPWORDS\]/ig))
				template = template.replace (/\[WORDCOUNT_STOPWORDS\]/ig, t.getStopWordCount ());
			if (template.match (/\[LANGUAGE\]/ig))
				template = template.replace (/\[LANGUAGE\]/ig, t.getLanguage ());
			if (template.match (/\[KEYWORDS:([0-9]+)\]/ig)) {
				var keycount = parseInt (RegExp.$1);
				template = template.replace (/\[KEYWORDS:[0-9]+\]/ig, t.getKeywordList (keycount));
			}
			if (template.match (/\[MULTI:([0-9]+)\]/ig)) {
				if(typeof(mps_addedImageSearches) == \'undefined\')
				{
					mps_addedImageSearches = [];
				}
				var stats1 = t.getStats (1, true);
				var stats2 = t.getStats (2, true);
				var stats3 = t.getStats (3, true);
				stats3.keys = stats3.keys.concat(stats2.keys.concat(stats1.keys));
				var cleanKeys = [];
				var maxMatches = parseInt(RegExp.$1);
				maxMatches = ((maxMatches) ? maxMatches : 10) + mps_addedImageSearches.length;
				for(var currKey = 0; currKey < stats3.keys.length && currKey < maxMatches; currKey++)
				{
					var currKeyString = stats3.keys[currKey].getKey();
					var safeCurrKeyString = currKeyString.replace(\' \', \'_\');
					if(!mps_addedImageSearches[safeCurrKeyString])
					{
						cleanKeys.push(\'<a id="mpsImageRequestLink_\' + currKeyString.replace(\' \', \'_\') + \'" onclick="javascript:msprunSearch(\\'\' + currKeyString + \'\\');return false;">\' + currKeyString + \'</a>\');
					}
				}
				template = template.replace(/\[MULTI:[0-9]+\]/ig, cleanKeys.join(\' \'));
			}
			var startString = \'\';
			// output of collected information
			document.getElementById (\'mpssearches\').innerHTML = template;
			if(callbackFunc && typeof(callbackFunc) == \'function\')
			{
				callbackFunc();
			}
		}
		
		function mps_insertRandomImageAtCursor()
		{
			var currResults = jQuery(\'#mps_search_results a\');
			if(!currResults || (currResults && currResults.length < 1))
			{
				if(!noImagesLeft)
				{
					mps_updateTextInfo(function() { mps_insertRandomImageAtCursor(); });
				}
			}
			else if(currResults)
			{
				mps_addAtCursorOnLoad = true;
				currResults[0].onclick();
			}
		}
		/* ]]> */
		</script>
		'' cannot be parsed correct.
HTML code '$':</label>
					'' cannot be parsed correct.
HTML code '$'" />
					<select disabled="disabled" id="mpslang_view" name="mpslang_view" onchange="mps_updateTextInfo()">
					'' cannot be parsed correct.
HTML code '$'>en</option>
						<option value="da" '' cannot be parsed correct.
HTML code '$'>da</option>
						<option value="de" '' cannot be parsed correct.
HTML code '$'>de</option>
						<option value="es" '' cannot be parsed correct.
HTML code '$'>es</option>
						<option value="fr" '' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:10.946544.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.056078.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 0 do_action/apply_filters calls and 7 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:00.497032.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running FileProDetector
### Start running FrontBaseDetector
### Finish running DbaseDetector
### Start running HashDetector
### Finish running FirebirdInterBaseDetector
### Start running IBMDb2Detector
### Finish running DbplusDetector
### Start running InformixDetector
### Finish running CubridDetector
### Start running IngresDetector
### Finish running FrontBaseDetector
### Start running maxdbDetector
### Finish running InformixDetector
### Start running MongoDbDetector
### Finish running IngresDetector
### Start running MongoDetector
### Finish running IBMDb2Detector
### Start running MsqlDetector
### Finish running HashDetector
### Start running MySQLDetector
### Finish running MongoDetector
### Start running MySQLiDetector
### Finish running MsqlDetector
### Start running Oci8Detector
### Finish running MySQLDetector
### Start running OpenSSLDetector
### Finish running MongoDbDetector
### Start running ParadoxDetector
### Finish running Oci8Detector
### Start running PasswordHashingDetector
### Finish running ParadoxDetector
### Start running PhpCurlDetector
### Finish running OpenSSLDetector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running ArrayElementDetector
### Start running PHPRetrievalDetector
### Finish running PasswordHashingDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PhpCurlDetector
### Start running PhpVarDetector
### Finish running PHPIncludedDetector
### Start running PostgreSQLDetector
### Finish running PhpVarDetector
### Start running PropertyDetector
### Finish running PostgreSQLDetector
### Start running Sqlite3Detector
### Finish running PHPRetrievalDetector
### Start running SqliteDetector
### Finish running PHPStorageDetector
### Start running SqlServerDetector
### Finish running SqliteDetector
### Start running SybaseDetector
### Finish running SybaseDetector
### Start running TokyoTyrantDetector
### Finish running Sqlite3Detector
### Start running UserInputDetector
### Finish running PropertyDetector
### Start running VariableDetector
### Finish running TokyoTyrantDetector
### Start running WordpressHashingFnDetector
### Finish running SqlServerDetector
### Start running WordPressRemoteDetector
### Finish running WordPressRemoteDetector
### Start running WordPressRetrievalDetector
### Finish running WordpressHashingFnDetector
### Start running WordPressStorageDetector
### Finish running VariableDetector
### Start running WP_UserDetector
### Finish running WP_UserDetector
### Start running GenericDatabaseUsageDetector
### Finish running GenericDatabaseUsageDetector
### Start running GenericEncryptionDetector
### Finish running UserInputDetector
### Start running DeletionDetector
### Finish running GenericEncryptionDetector
### Start running UninstallDetector
### Finish running MySQLiDetector
### Finish running maxdbDetector
### Finish running UninstallDetector
### Finish running DeletionDetector
### Finish running WordPressStorageDetector
### Finish running WordPressRetrievalDetector
### Finished running detectors
micro-power-search.php:55
  - RETRIEVAL call to get_option("mps_power_search_configuration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:58
  - RETRIEVAL call to get_option("mps_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:59
  - RETRIEVAL call to get_option("mps_default_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:60
  - RETRIEVAL call to get_option("mps_filter_stopwords") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:61
  - RETRIEVAL call to get_option("mps_max_list_items") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:62
  - RETRIEVAL call to get_option("mps_automatic_update") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:63
  - RETRIEVAL call to get_option("mps_update_interval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:64
  - RETRIEVAL call to get_option("mps_2word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:65
  - RETRIEVAL call to get_option("mps_3word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:66
  - RETRIEVAL call to get_option("mps_meta_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:67
  - RETRIEVAL call to get_option("mps_max_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:68
  - RETRIEVAL call to get_option("mps_keywords_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:69
  - RETRIEVAL call to get_option("mps_authors_can_change_content_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:70
  - RETRIEVAL call to get_option("mps_authors_can_disable_stopword_filter") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:89
  - RETRIEVAL call to get_option("mps_power_search_configuration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:92
  - RETRIEVAL call to get_option("mps_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:92
  - RETRIEVAL call to get_option("mps_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:93
  - RETRIEVAL call to get_option("mps_default_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:93
  - RETRIEVAL call to get_option("mps_default_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:94
  - RETRIEVAL call to get_option("mps_filter_stopwords") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:94
  - RETRIEVAL call to get_option("mps_filter_stopwords") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:95
  - RETRIEVAL call to get_option("mps_max_list_items") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:95
  - RETRIEVAL call to get_option("mps_max_list_items") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:96
  - RETRIEVAL call to get_option("mps_automatic_update") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:96
  - RETRIEVAL call to get_option("mps_automatic_update") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:97
  - RETRIEVAL call to get_option("mps_update_interval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:97
  - RETRIEVAL call to get_option("mps_update_interval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:98
  - RETRIEVAL call to get_option("mps_2word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:98
  - RETRIEVAL call to get_option("mps_2word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:99
  - RETRIEVAL call to get_option("mps_3word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:99
  - RETRIEVAL call to get_option("mps_3word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:100
  - RETRIEVAL call to get_option("mps_meta_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:100
  - RETRIEVAL call to get_option("mps_meta_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:101
  - RETRIEVAL call to get_option("mps_max_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:101
  - RETRIEVAL call to get_option("mps_max_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:102
  - RETRIEVAL call to get_option("mps_max_keywords_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:102
  - RETRIEVAL call to get_option("mps_keywords_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:103
  - RETRIEVAL call to get_option("mps_authors_can_change_content_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:103
  - RETRIEVAL call to get_option("mps_authors_can_change_content_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:104
  - RETRIEVAL call to get_option("mps_authors_can_disable_stopword_filter") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:104
  - RETRIEVAL call to get_option("mps_authors_can_disable_stopword_filter") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:126
  - RETRIEVAL call to get_option("mps_default_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
micro-power-search.php:158
  - RETRIEVAL call to get_post_meta($post->ID, "mps_metadata", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
micro-power-search.php:411
  - RETRIEVAL call to get_post_meta($post->ID, "mps_metadata", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta 

micro-power-search.php:79
  - STORAGE call to update_option("mps_power_search_configuration", $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
micro-power-search.php:82
  - STORAGE call to update_option("mps_" . $key, $value) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
micro-power-search.php:106
  - STORAGE call to add_option("mps_power_search_configuration", $default_configuration) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
micro-power-search.php:108
  - STORAGE call to delete_option("mps_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:109
  - STORAGE call to delete_option("mps_default_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:110
  - STORAGE call to delete_option("mps_filter_stopwords") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:111
  - STORAGE call to delete_option("mps_max_list_items") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:112
  - STORAGE call to delete_option("mps_automatic_update") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:113
  - STORAGE call to delete_option("mps_update_interval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:114
  - STORAGE call to delete_option("mps_2word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:115
  - STORAGE call to delete_option("mps_3word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:116
  - STORAGE call to delete_option("mps_meta_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:117
  - STORAGE call to delete_option("mps_max_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:118
  - STORAGE call to delete_option("mps_keywords_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:119
  - STORAGE call to delete_option("mps_authors_can_change_content_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:120
  - STORAGE call to delete_option("mps_authors_can_disable_stopword_filter") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:127
  - STORAGE call to add_option("mps_version", $this->plugin_version) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
micro-power-search.php:128
  - STORAGE call to add_option("mps_default_language", "en") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
micro-power-search.php:129
  - STORAGE call to add_option("mps_filter_stopwords", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
micro-power-search.php:130
  - STORAGE call to add_option("mps_max_list_items", 10) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
micro-power-search.php:131
  - STORAGE call to add_option("mps_automatic_update", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
micro-power-search.php:132
  - STORAGE call to add_option("mps_update_interval", 30) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
micro-power-search.php:133
  - STORAGE call to add_option("mps_2word_phrases", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
micro-power-search.php:134
  - STORAGE call to add_option("mps_3word_phrases", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
micro-power-search.php:135
  - STORAGE call to add_option("mps_meta_keywords_count", 8) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
micro-power-search.php:136
  - STORAGE call to add_option("mps_max_keywords_count", 12) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
micro-power-search.php:137
  - STORAGE call to add_option("mps_keywords_length", 40) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
micro-power-search.php:138
  - STORAGE call to add_option("mps_authors_can_change_content_language", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option
micro-power-search.php:139
  - STORAGE call to add_option("mps_authors_can_disable_stopword_filter", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).
  - Data types: option 

micro-power-search.php:108
  - DELETION call to delete_option("mps_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:109
  - DELETION call to delete_option("mps_default_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:110
  - DELETION call to delete_option("mps_filter_stopwords") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:111
  - DELETION call to delete_option("mps_max_list_items") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:112
  - DELETION call to delete_option("mps_automatic_update") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:113
  - DELETION call to delete_option("mps_update_interval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:114
  - DELETION call to delete_option("mps_2word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:115
  - DELETION call to delete_option("mps_3word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:116
  - DELETION call to delete_option("mps_meta_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:117
  - DELETION call to delete_option("mps_max_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:118
  - DELETION call to delete_option("mps_keywords_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:119
  - DELETION call to delete_option("mps_authors_can_change_content_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
micro-power-search.php:120
  - DELETION call to delete_option("mps_authors_can_disable_stopword_filter") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option 

By data type:
option
	WordPressRetrievalDetector.get_option("mps_power_search_configuration") - {'option'}
	WordPressRetrievalDetector.get_option("mps_authors_can_change_content_language") - {'option'}
	WordPressRetrievalDetector.get_option("mps_power_search_configuration") - {'option'}
	WordPressRetrievalDetector.get_option("mps_2word_phrases") - {'option'}
	WordPressStorageDetector.add_option("mps_2word_phrases", 1) - {'option'}
	WordPressRetrievalDetector.get_option("mps_3word_phrases") - {'option'}
	WordPressRetrievalDetector.get_option("mps_authors_can_disable_stopword_filter") - {'option'}
	WordPressStorageDetector.delete_option("mps_version") - {'option'}
	WordPressStorageDetector.add_option("mps_3word_phrases", 1) - {'option'}
	WordPressRetrievalDetector.get_option("mps_meta_keywords_count") - {'option'}
	WordPressRetrievalDetector.get_option("mps_2word_phrases") - {'option'}
	WordPressRetrievalDetector.get_option("mps_authors_can_change_content_language") - {'option'}
	WordPressRetrievalDetector.get_option("mps_automatic_update") - {'option'}
	WordPressRetrievalDetector.get_option("mps_automatic_update") - {'option'}
	WordPressStorageDetector.add_option("mps_automatic_update", 1) - {'option'}
	DeletionDetector.delete_option("mps_authors_can_change_content_language") - {'option'}
	DeletionDetector.delete_option("mps_max_list_items") - {'option'}
	DeletionDetector.delete_option("mps_max_keywords_count") - {'option'}
	DeletionDetector.delete_option("mps_automatic_update") - {'option'}
	WordPressStorageDetector.add_option("mps_max_list_items", 10) - {'option'}
	WordPressStorageDetector.add_option("mps_max_keywords_count", 12) - {'option'}
	WordPressRetrievalDetector.get_option("mps_max_list_items") - {'option'}
	WordPressRetrievalDetector.get_option("mps_2word_phrases") - {'option'}
	WordPressRetrievalDetector.get_option("mps_keywords_length") - {'option'}
	WordPressRetrievalDetector.get_option("mps_3word_phrases") - {'option'}
	DeletionDetector.delete_option("mps_keywords_length") - {'option'}
	WordPressRetrievalDetector.get_option("mps_update_interval") - {'option'}
	WordPressStorageDetector.add_option("mps_meta_keywords_count", 8) - {'option'}
	DeletionDetector.delete_option("mps_update_interval") - {'option'}
	WordPressStorageDetector.delete_option("mps_max_keywords_count") - {'option'}
	WordPressStorageDetector.add_option("mps_default_language", "en") - {'option'}
	WordPressStorageDetector.add_option("mps_filter_stopwords", 1) - {'option'}
	DeletionDetector.delete_option("mps_filter_stopwords") - {'option'}
	WordPressRetrievalDetector.get_option("mps_filter_stopwords") - {'option'}
	WordPressStorageDetector.delete_option("mps_authors_can_disable_stopword_filter") - {'option'}
	WordPressStorageDetector.delete_option("mps_authors_can_change_content_language") - {'option'}
	WordPressStorageDetector.delete_option("mps_keywords_length") - {'option'}
	DeletionDetector.delete_option("mps_default_language") - {'option'}
	DeletionDetector.delete_option("mps_2word_phrases") - {'option'}
	WordPressStorageDetector.delete_option("mps_max_list_items") - {'option'}
	WordPressStorageDetector.add_option("mps_keywords_length", 40) - {'option'}
	DeletionDetector.delete_option("mps_version") - {'option'}
	WordPressRetrievalDetector.get_option("mps_version") - {'option'}
	WordPressStorageDetector.add_option("mps_version", $this->plugin_version) - {'option'}
	WordPressRetrievalDetector.get_option("mps_update_interval") - {'option'}
	WordPressStorageDetector.delete_option("mps_update_interval") - {'option'}
	WordPressRetrievalDetector.get_option("mps_default_language") - {'option'}
	WordPressStorageDetector.delete_option("mps_2word_phrases") - {'option'}
	WordPressStorageDetector.add_option("mps_update_interval", 30) - {'option'}
	WordPressRetrievalDetector.get_option("mps_version") - {'option'}
	WordPressRetrievalDetector.get_option("mps_max_list_items") - {'option'}
	WordPressStorageDetector.delete_option("mps_default_language") - {'option'}
	WordPressRetrievalDetector.get_option("mps_max_list_items") - {'option'}
	WordPressRetrievalDetector.get_option("mps_default_language") - {'option'}
	WordPressRetrievalDetector.get_option("mps_update_interval") - {'option'}
	WordPressStorageDetector.delete_option("mps_meta_keywords_count") - {'option'}
	WordPressStorageDetector.delete_option("mps_filter_stopwords") - {'option'}
	WordPressStorageDetector.delete_option("mps_3word_phrases") - {'option'}
	WordPressStorageDetector.add_option("mps_authors_can_change_content_language", 0) - {'option'}
	WordPressRetrievalDetector.get_option("mps_meta_keywords_count") - {'option'}
	WordPressRetrievalDetector.get_option("mps_meta_keywords_count") - {'option'}
	WordPressRetrievalDetector.get_option("mps_automatic_update") - {'option'}
	WordPressRetrievalDetector.get_option("mps_max_keywords_count") - {'option'}
	WordPressStorageDetector.update_option("mps_" . $key, $value) - {'option'}
	WordPressRetrievalDetector.get_option("mps_max_keywords_length") - {'option'}
	WordPressRetrievalDetector.get_option("mps_3word_phrases") - {'option'}
	WordPressStorageDetector.delete_option("mps_automatic_update") - {'option'}
	WordPressRetrievalDetector.get_option("mps_max_keywords_count") - {'option'}
	WordPressRetrievalDetector.get_option("mps_max_keywords_count") - {'option'}
	WordPressStorageDetector.update_option("mps_power_search_configuration", $options) - {'option'}
	WordPressRetrievalDetector.get_option("mps_version") - {'option'}
	WordPressRetrievalDetector.get_option("mps_filter_stopwords") - {'option'}
	WordPressStorageDetector.add_option("mps_power_search_configuration", $default_configuration) - {'option'}
	WordPressStorageDetector.add_option("mps_authors_can_disable_stopword_filter", 0) - {'option'}
	DeletionDetector.delete_option("mps_authors_can_disable_stopword_filter") - {'option'}
	WordPressRetrievalDetector.get_option("mps_filter_stopwords") - {'option'}
	WordPressRetrievalDetector.get_option("mps_authors_can_disable_stopword_filter") - {'option'}
	WordPressRetrievalDetector.get_option("mps_keywords_length") - {'option'}
	WordPressRetrievalDetector.get_option("mps_authors_can_disable_stopword_filter") - {'option'}
	WordPressRetrievalDetector.get_option("mps_default_language") - {'option'}
	WordPressRetrievalDetector.get_option("mps_authors_can_change_content_language") - {'option'}
	DeletionDetector.delete_option("mps_meta_keywords_count") - {'option'}
	DeletionDetector.delete_option("mps_3word_phrases") - {'option'}
	WordPressRetrievalDetector.get_option("mps_default_language") - {'option'}
post_meta
	WordPressRetrievalDetector.get_post_meta($post->ID, "mps_metadata", true) - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($post->ID, "mps_metadata", true) - {'post_meta'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:12.376987.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 1218 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.559678.

1000 STORE_REACHES edges created
1218 STORE_REACHES edges created
1218 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
In total, tainted 0 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
In total, tainted 0 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:00.005905.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:00:41.095827!
DELETION call to delete_option("mps_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mps_default_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mps_filter_stopwords") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mps_max_list_items") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mps_automatic_update") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mps_update_interval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mps_2word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mps_3word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mps_meta_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mps_max_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mps_keywords_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mps_authors_can_change_content_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("mps_authors_can_disable_stopword_filter") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
RETRIEVAL call to get_option("mps_meta_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_meta_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_max_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_max_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_max_keywords_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_keywords_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_authors_can_change_content_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_authors_can_change_content_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_authors_can_disable_stopword_filter") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_authors_can_disable_stopword_filter") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_default_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "mps_metadata", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($post->ID, "mps_metadata", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_power_search_configuration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_default_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_filter_stopwords") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_max_list_items") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_automatic_update") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_update_interval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_2word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_3word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_meta_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_max_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_keywords_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_authors_can_change_content_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_authors_can_disable_stopword_filter") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_power_search_configuration") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_default_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_default_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_filter_stopwords") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_filter_stopwords") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_max_list_items") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_max_list_items") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_automatic_update") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_automatic_update") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_update_interval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_update_interval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_2word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_2word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_3word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_option("mps_3word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
STORAGE call to add_option("mps_power_search_configuration", $default_configuration) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to delete_option("mps_version") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mps_default_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mps_filter_stopwords") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mps_max_list_items") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mps_automatic_update") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mps_update_interval") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mps_2word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mps_3word_phrases") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mps_meta_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mps_max_keywords_count") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mps_keywords_length") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mps_authors_can_change_content_language") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("mps_authors_can_disable_stopword_filter") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to add_option("mps_version", $this->plugin_version) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mps_default_language", "en") alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mps_filter_stopwords", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mps_max_list_items", 10) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mps_automatic_update", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mps_update_interval", 30) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mps_2word_phrases", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mps_3word_phrases", 1) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mps_meta_keywords_count", 8) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mps_max_keywords_count", 12) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mps_keywords_length", 40) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mps_authors_can_change_content_language", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to add_option("mps_authors_can_disable_stopword_filter", 0) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mps_power_search_configuration", $options) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
STORAGE call to update_option("mps_" . $key, $value) alters data types {'option'}. Passed arguments: 0: $option (string), 1: $value (mixed). Returns (bool).,None,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
[main] Found no personal data in the plugin. No analysis needed. 

[main] Complaint? True 

No findings
