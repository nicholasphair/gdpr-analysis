Timeout in resolving values
Timeout in running neo4j query
Running Main.py on woo-oscommerce-sync

###########################
### Preprocessing stage ###
###########################
### Starting preproccessing!
Registering plugin to plugin database... Plugin registration done
╔[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) begin.
╚[1] Preprocessing step "Add AST_JS label to JS nodes" (__label_js_nodes) finished successfully in 0:00:03.216313.

0 edges imported to Neo4j
Preprocessing step 0 done!
╔[2] Preprocessing step "Create DB indices" (__create_indices) begin.
Creating indices for commonly used features... done.
╚[2] Preprocessing step "Create DB indices" (__create_indices) finished successfully in 0:00:01.793125.

0 edges imported to Neo4j
Preprocessing step 1 done!
Analzying PHP class hierarchy...
Start filling class hierarchy information
Finished filling class hierarchy information
Start filling function information
Finished filling function information
0 edges imported to Neo4j
Preprocessing step 2 done!
╔[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) begin.
Added 0 PHP_REACHES edges.
╚[3] Preprocessing step "connect data flows for class properties" (__handle_class_properties) finished successfully in 0:00:00.582218.

╔[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) begin.
Added 0 REACHES edges for AST_PARAM to variables
╚[4] Preprocessing step "Connect AST_PARAM edges" (__connect_ASTPARAM_to_var) finished successfully in 0:00:01.080236.

╔[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) begin.
Added 394 :PHP_REACHES for original :REACHES edges.
╚[5] Preprocessing step "Create PHP_REACHES edges" (__php_reach_edges) finished successfully in 0:00:00.886225.

╔[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) begin.
Added 0 CALLS edges.
╚[6] Preprocessing step "Create parent-to-self edges" (__parent_self_edges) finished successfully in 0:00:00.640792.

╔[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) begin.
╚[7] Preprocessing step "Connect data flows for class constants" (__class_constant_hierarchy) finished successfully in 0:00:00.101968.

╔[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) begin.
Added 154 PHP_REACHES edges.
╚[8] Preprocessing step "Create AST assign hierarchy PHP_REACHES edges" (__ast_assign_function_edges) finished successfully in 0:00:09.630123.

╔[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) begin.
Building hierarchical edges for PHP...
Number of rows: 3436
Added 2888 PHP_REACHES edges. 
Building hierarchical edges for JS...
Number of rows: 59889
Added 56453 JS_REACHES edges. 
╚[9] Preprocessing step "Build hierarchical data flow edges for php and js" (__build_php_js_hierarchical_edges) finished successfully in 0:00:05.677563.

╔[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) begin.
HTML code from file '/home/ec2-user/GDPR-CCPA-violation-checker/navex_docker/tempApp/woo-oscommerce-sync/woocommerce-osc-sync.php' cannot be parsed correct.
╚[10] Preprocessing step "Building HTML ASTs" (__build_html_ast) finished successfully in 0:00:00.167327.

1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
3436 PHP_REACHES edges created
1000 PHP_REACHES edges created
2000 PHP_REACHES edges created
3000 PHP_REACHES edges created
4000 PHP_REACHES edges created
5000 PHP_REACHES edges created
6000 PHP_REACHES edges created
7000 PHP_REACHES edges created
8000 PHP_REACHES edges created
9000 PHP_REACHES edges created
10000 PHP_REACHES edges created
11000 PHP_REACHES edges created
12000 PHP_REACHES edges created
13000 PHP_REACHES edges created
14000 PHP_REACHES edges created
15000 PHP_REACHES edges created
16000 PHP_REACHES edges created
17000 PHP_REACHES edges created
18000 PHP_REACHES edges created
19000 PHP_REACHES edges created
20000 PHP_REACHES edges created
21000 PHP_REACHES edges created
22000 PHP_REACHES edges created
23000 PHP_REACHES edges created
24000 PHP_REACHES edges created
25000 PHP_REACHES edges created
26000 PHP_REACHES edges created
27000 PHP_REACHES edges created
28000 PHP_REACHES edges created
29000 PHP_REACHES edges created
30000 PHP_REACHES edges created
31000 PHP_REACHES edges created
32000 PHP_REACHES edges created
33000 PHP_REACHES edges created
34000 PHP_REACHES edges created
35000 PHP_REACHES edges created
36000 PHP_REACHES edges created
37000 PHP_REACHES edges created
38000 PHP_REACHES edges created
39000 PHP_REACHES edges created
40000 PHP_REACHES edges created
41000 PHP_REACHES edges created
42000 PHP_REACHES edges created
43000 PHP_REACHES edges created
44000 PHP_REACHES edges created
45000 PHP_REACHES edges created
46000 PHP_REACHES edges created
47000 PHP_REACHES edges created
48000 PHP_REACHES edges created
49000 PHP_REACHES edges created
50000 PHP_REACHES edges created
51000 PHP_REACHES edges created
52000 PHP_REACHES edges created
53000 PHP_REACHES edges created
54000 PHP_REACHES edges created
55000 PHP_REACHES edges created
56000 PHP_REACHES edges created
56453 PHP_REACHES edges created
59889 edges imported to Neo4j
Preprocessing step 3 done!
╔[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) begin.
Deleted 1294 incorrect PHP_REACHES edges. Deleted 0 incorrect JS_REACHES edges.
╚[11] Preprocessing step "Remove wrong/excessive hierarchical edges" (__remove_wrong_hierarchical_edges) finished successfully in 0:00:01.062786.

0 edges imported to Neo4j
Preprocessing step 4 done!
╔[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[12] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:05.234792.

╔[13] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 92 PHP_REACHES edges to function parameters.
╚[13] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:03.277032.

╔[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 5 PHP_REACHES edges.
╚[14] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.173639.

╔[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) begin.
Added 0 CALLS edges.
╚[15] Preprocessing step "Handle class hierarchy and make CALLS edges and certain data flows" (__handle_class_hierarchy) finished successfully in 0:00:01.463022.

╔[16] Preprocessing step "Create function call edges" (__function_call_edges) begin.
Added 0 PHP_REACHES edges to function parameters.
╚[16] Preprocessing step "Create function call edges" (__function_call_edges) finished successfully in 0:00:00.852319.

╔[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) begin.
Added 0 PHP_REACHES edges.
╚[17] Preprocessing step "Create PHP_REACHES edges between function returns and callers" (__ast_call_return_edges) finished successfully in 0:00:00.006809.

╔[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) begin.
Added 0 HTML_TO_PHP_REACHES edges. Successfully connect 0 out of 0 inputs to PHP. 
╚[18] Preprocessing step "Create HTML_TO_PHP_REACHES edges between form inputs and PHP request vars" (__html_to_php_reaches) finished successfully in 0:00:00.036002.

97 PHP_REACHES edges created
97 edges imported to Neo4j
Preprocessing step 5 done!
╔[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) begin.
Deleted 92 PHP_REACHES edges that overtaint function call data flows.
╚[19] Preprocessing step "Overtaint Function Calls" (__overtaintFunctionCalls) finished successfully in 0:00:00.129251.

0 edges imported to Neo4j
Preprocessing step 6 done!
╔[20] Preprocessing step "Create SQL AST" (__add_sql_ast) begin.
20 SQL operations to process.
SELECT c.*,
               cd.* 
               FROM categories c,
               categories_description cd 
               WHERE c.categories_id=cd.categories_id $lang AND c.parent_id=''
SQL command (SELECT c.*, cd.* FROM categories c, categories_description cd WHERE c.categories_id=cd.categories_id $lang AND c.parent_id='') cannot be parsed correct.
SELECT * FROM countries
SQL command (SELECT * FROM countries) cannot be parsed correct.
SELECT zone_id, zone_code FROM zones
SQL command (SELECT zone_id, zone_code FROM zones) cannot be parsed correct.
SELECT c.customers_id,
                              c.customers_firstname,
                              c.customers_lastname,
                              c.customers_telephone,
                              c.customers_email_address,
                              ab.entry_country_id,
                              ab.entry_lastname,
                              ab.entry_firstname,
                              ab.entry_street_address,
                              ab.entry_suburb,
                              ab.entry_postcode,
                              ab.entry_city,
                              ab.entry_state,
                              ab.entry_zone_id 
                              FROM customers c
                              LEFT JOIN address_book ab ON  c.customers_id=ab.customers_id AND c.customers_default_address_id=ab.address_book_id
                              
SQL command (SELECT c.customers_id, c.customers_firstname, c.customers_lastname, c.customers_telephone, c.customers_email_address, ab.entry_country_id, ab.entry_lastname, ab.entry_firstname, ab.entry_street_address, ab.entry_suburb, ab.entry_postcode, ab.entry_city, ab.entry_state, ab.entry_zone_id FROM customers c LEFT JOIN address_book ab ON c.customers_id=ab.customers_id AND c.customers_default_address_id=ab.address_book_id ) cannot be parsed correct.
SELECT
                        tr.tax_rates_id,
                        tr.tax_rate,												
                        tc.tax_class_title,
                        tc.tax_class_description,
                        tr.tax_priority,
                        tr.tax_rate,
                        tr.tax_description,
                        z.*,
                        c.*
                        
                      FROM
                        tax_rates as tr
                        INNER JOIN tax_class as tc ON tr.tax_class_id = tc.tax_class_id
                        INNER JOIN zones as z ON z.zone_id = tr.tax_zone_id
                        INNER JOIN countries as c ON c.countries_id = z.zone_country_id
                    
SQL command (SELECT tr.tax_rates_id, tr.tax_rate, tc.tax_class_title, tc.tax_class_description, tr.tax_priority, tr.tax_rate, tr.tax_description, z.*, c.* FROM tax_rates as tr INNER JOIN tax_class as tc ON tr.tax_class_id = tc.tax_class_id INNER JOIN zones as z ON z.zone_id = tr.tax_zone_id INNER JOIN countries as c ON c.countries_id = z.zone_country_id ) cannot be parsed correct.

                    SELECT p.*, pd.*,
                     p2c.categories_id 
                     FROM products p  
                     LEFT JOIN products_description pd ON p.products_id=pd.products_id
                     LEFT JOIN products_to_categories p2c ON p.products_id=p2c.products_id 
                      AND language_id= 
                    GROUP BY p.products_id    
                    ORDER BY p.products_id
                    
                    
SQL command ( SELECT p.*, pd.*, p2c.categories_id FROM products p LEFT JOIN products_description pd ON p.products_id=pd.products_id LEFT JOIN products_to_categories p2c ON p.products_id=p2c.products_id AND language_id= GROUP BY p.products_id ORDER BY p.products_id ) cannot be parsed correct.
SELECT specials_new_products_price, expires_date FROM specials WHERE status=1 AND products_id='wp_insert_post(["post_title" => $product["products_name"], "post_content" => $product["products_description"], "post_status" => "publish", "post_type" => "product", "post_author" => 1])' LIMIT 1
SQL command (SELECT specials_new_products_price, expires_date FROM specials WHERE status=1 AND products_id='wp_insert_post(["post_title" => $product["products_name"], "post_content" => $product["products_description"], "post_status" => "publish", "post_type" => "product", "post_author" => 1])' LIMIT 1) cannot be parsed correct.
SELECT po.products_options_name, pov.products_options_values_name FROM products_attributes pa, products_options po, products_options_values pov WHERE pa.products_id='$product_products_id' AND  pov.products_options_values_id = pa.options_values_id AND pov.language_id=po.language_id AND pa.options_id=products_options_id
SQL command (SELECT po.products_options_name, pov.products_options_values_name FROM products_attributes pa, products_options po, products_options_values pov WHERE pa.products_id='$product_products_id' AND pov.products_options_values_id = pa.options_values_id AND pov.language_id=po.language_id AND pa.options_id=products_options_id) cannot be parsed correct.
SELECT * FROM products
SQL command (SELECT * FROM products) cannot be parsed correct.
SELECT * FROM products
SQL command (SELECT * FROM products) cannot be parsed correct.
SELECT * FROM products_images ORDER BY sort_order,image
SQL command (SELECT * FROM products_images ORDER BY sort_order,image) cannot be parsed correct.
SELECT ID FROM $wpdb_users
SQL command (SELECT ID FROM $wpdb_users) cannot be parsed correct.
SELECT ID FROM $wpdb_posts WHERE post_type='product'
SQL command (SELECT ID FROM $wpdb_posts WHERE post_type='product') cannot be parsed correct.
SELECT * FROM countries
SQL command (SELECT * FROM countries) cannot be parsed correct.
SELECT * FROM orders ORDER BY orders_id
SQL command (SELECT * FROM orders ORDER BY orders_id) cannot be parsed correct.
SELECT * FROM orders_total WHERE orders_id='$order_orders_id'
SQL command (SELECT * FROM orders_total WHERE orders_id='$order_orders_id') cannot be parsed correct.
SELECT * FROM orders_products WHERE orders_id='$order_orders_id'
SQL command (SELECT * FROM orders_products WHERE orders_id='$order_orders_id') cannot be parsed correct.
SHOW TABLES LIKE 'information'
SQL command (SHOW TABLES LIKE 'information') cannot be parsed correct.
SELECT * FROM information
SQL command (SELECT * FROM information) cannot be parsed correct.
SELECT ID FROM $wpdb_posts WHERE post_type='page' AND LOWER(post_title)='strtolower(esc_sql($information["information_title"]))'
SQL command (SELECT ID FROM $wpdb_posts WHERE post_type='page' AND LOWER(post_title)='strtolower(esc_sql($information["information_title"]))') cannot be parsed correct.
The following function calls could not successfully be analyzed for SQL content: [425, 1104, 1141, 1178, 1596, 1842, 2094, 2178, 2620, 2749, 3072, 3394, 3451, 3501, 3536, 3600, 4042, 4189, 4204, 4224]
Added 0 SQL nodes. 0 out of 20 calls were analyzed successfully.
╚[20] Preprocessing step "Create SQL AST" (__add_sql_ast) finished successfully in 0:00:04.527726.

╔[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) begin.
HTML code '$'ob_get_contents()'' cannot be parsed correct.
HTML code '$'<div class="form-group">Customers Imported: $import_customer_counter</div>'' cannot be parsed correct.
HTML code '$'<div class="form-group">Orders Imported: $order_import_counter</div>'' cannot be parsed correct.
HTML code '$'<div class="form-group">Categories Imported: 0</div>'' cannot be parsed correct.
HTML code '$'<div class="form-group">Taxes Imported: 0</div>'' cannot be parsed correct.
HTML code '$'<div class="form-group">Products Imported: $import_prod_counter</div>'' cannot be parsed correct.
HTML code '$'<div class="form-group">Images Imported: $import_img_counter</div>'' cannot be parsed correct.
HTML code '$'<div class="form-group">Images gallery Imported: $import_gallery_counter</div>'' cannot be parsed correct.
HTML code '$'<div class="form-group">Pages Imported: 0</div>'' cannot be parsed correct.
HTML code '$'sanitize_text_field($_POST["store_url"])'' cannot be parsed correct.
HTML code '$'sanitize_text_field($_POST["store_dbname"])'' cannot be parsed correct.
HTML code '$'sanitize_text_field($_POST["images_url"])'' cannot be parsed correct.
HTML code '$'sanitize_text_field($_POST["store_user"])'' cannot be parsed correct.
HTML code '$'sanitize_text_field($_POST["store_pass"])'' cannot be parsed correct.
HTML code '$'rtrim($_POST["store_url"], "/")/image/urlencode($category["categories_image"])PHP_EOL'' cannot be parsed correct.
HTML code '$'sanitize_text_field($_POST["lang"])'' cannot be parsed correct.
HTML code '$'sanitize_text_field($_POST["offset"])'' cannot be parsed correct.
HTML code '$'sanitize_text_field($_POST["limit"])'' cannot be parsed correct.
HTML code '$' checked '' cannot be parsed correct.
HTML code '$' checked '' cannot be parsed correct.
HTML code '$' checked '' cannot be parsed correct.
HTML code '$' checked '' cannot be parsed correct.
HTML code '$'<div class="col-md-12"><h3>Debug</h3><pre style="padding:10px;max-height:300px;overflow-y:auto;background-color:#cdcdcd;">'' cannot be parsed correct.
HTML code '$'</pre></div>'' cannot be parsed correct.
HTML code '$'<p class="notice">The information (pages) table does not exist in this osCommerce installation.</div>'' cannot be parsed correct.
HTML code '$'<p class="notice">Could not connect to the osCommerce database</div>'' cannot be parsed correct.
HTML code '$' checked '' cannot be parsed correct.
HTML code '$' checked '' cannot be parsed correct.
HTML code '$' checked '' cannot be parsed correct.
HTML code '$' checked '' cannot be parsed correct.
HTML code '$' checked '' cannot be parsed correct.
HTML code '$' checked '' cannot be parsed correct.
╚[21] Preprocessing step "Build HTML AST for HTML embedded in PHP code (HTML to PHP traversal)" (__build_html_ast_in_php) finished successfully in 0:00:03.537358.

╔[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) begin.
Successfully connected PHP to HTML ASTs in 0 out of 0 files. Added 0 PHP_TO_HTML_REACHES edges.
╚[22] Preprocessing step "Connect HTML AST and PHP AST trees (PHP to HTML traversal)" (__connect_html_php_ast) finished successfully in 0:00:00.050813.

╔[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) begin.
Found 1 do_action/apply_filters calls and 2 add_action/add_filter calls. Now connecting do-add pairs.
Added 0 :PHP_REACHES edges.
╚[23] Preprocessing step "Create do_action and apply_filter edges" (__do_action_to_function) finished successfully in 0:00:00.362626.

0 edges imported to Neo4j
Preprocessing step 7 done!
╔[24] Preprocessing step "Security/storage detectors" (__security_detectors) begin.
### Running detectors
### Start running ArrayElementDetector
### Start running CubridDetector
### Start running DbaseDetector
### Start running DbplusDetector
### Start running DefuseDetector
### Finish running DefuseDetector
### Start running FileProDetector
### Start running FirebirdInterBaseDetector
### Finish running FileProDetector
### Start running FrontBaseDetector
### Finish running DbaseDetector
### Start running HashDetector
### Finish running DbplusDetector
### Start running IBMDb2Detector
### Finish running CubridDetector
### Start running InformixDetector
### Finish running FirebirdInterBaseDetector
### Start running IngresDetector
### Finish running FrontBaseDetector
### Start running maxdbDetector
### Finish running IBMDb2Detector
### Start running MongoDbDetector
### Finish running HashDetector
### Start running MongoDetector
### Finish running MongoDetector
### Start running MsqlDetector
### Finish running InformixDetector
### Start running MySQLDetector
### Finish running ArrayElementDetector
### Start running MySQLiDetector
### Finish running IngresDetector
### Start running Oci8Detector
### Finish running MongoDbDetector
### Start running OpenSSLDetector
### Finish running MsqlDetector
### Start running ParadoxDetector
### Finish running OpenSSLDetector
### Start running PasswordHashingDetector
### Finish running MySQLDetector
### Start running PhpCurlDetector
### Finish running Oci8Detector
### Start running PHPDataObjectDetector
### Finish running PHPDataObjectDetector
### Start running PHPIncludedDetector
### Finish running ParadoxDetector
### Start running PHPRetrievalDetector
### Finish running PhpCurlDetector
### Start running PHPSecLibDetector
### Finish running PHPSecLibDetector
### Start running PHPStorageDetector
### Finish running PHPRetrievalDetector
### Start running PhpVarDetector
### Finish running PasswordHashingDetector
### Start running PostgreSQLDetector
### Finish running PhpVarDetector
### Start running PropertyDetector
### Finish running PostgreSQLDetector
### Start running Sqlite3Detector
### Finish running PHPIncludedDetector
### Start running SqliteDetector
### Finish running PHPStorageDetector
### Start running SqlServerDetector
### Finish running Sqlite3Detector
### Start running SybaseDetector
### Finish running PropertyDetector
### Start running TokyoTyrantDetector
### Finish running TokyoTyrantDetector
### Start running UserInputDetector
### Finish running SqliteDetector
### Start running VariableDetector
### Finish running SqlServerDetector
### Start running WordpressHashingFnDetector
### Finish running SybaseDetector
### Start running WordPressRemoteDetector
### Finish running WordPressRemoteDetector
### Start running WordPressRetrievalDetector
### Finish running UserInputDetector
### Start running WordPressStorageDetector
### Finish running WordpressHashingFnDetector
### Start running WP_UserDetector
### Finish running WP_UserDetector
### Start running GenericDatabaseUsageDetector
### Finish running VariableDetector
### Start running GenericEncryptionDetector
### Finish running GenericEncryptionDetector
### Start running DeletionDetector
### Finish running GenericDatabaseUsageDetector
### Start running UninstallDetector
### Finish running WordPressRetrievalDetector
### Finish running UninstallDetector
### Finish running DeletionDetector
### Finish running maxdbDetector
### Finish running MySQLiDetector
### Finish running WordPressStorageDetector
### Finished running detectors
woocommerce-osc-sync.php:180
  - Request variable '$_POST["store_pass"]' of personal types {'password'} is found.
  - Data types: password
woocommerce-osc-sync.php:859
  - Request variable '$_POST["store_pass"]' of personal types {'password'} is found.
  - Data types: password 

woocommerce-osc-sync.php:62
  - RETRIEVAL call to file_get_contents($url).
  - Data types: file 

woocommerce-osc-sync.php:63
  - STORAGE call to file_put_contents($filename, $f).
  - Data types: file
woocommerce-osc-sync.php:966
  - STORAGE call to fwrite($fp, date("Y-m-d H:i:s") . " " . $data . "
").
  - Data types: file 

woocommerce-osc-sync.php:189
  - variable '$country_data' of personal types {'country'} is found.
  - Data types: country
woocommerce-osc-sync.php:191
  - variable '$country_data' of personal types {'country'} is found.
  - Data types: country
woocommerce-osc-sync.php:222
  - variable '$user_name' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
woocommerce-osc-sync.php:225
  - variable '$user_name' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
woocommerce-osc-sync.php:226
  - variable '$user_name' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
woocommerce-osc-sync.php:230
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
woocommerce-osc-sync.php:231
  - variable '$random_password' of personal types {'password'} is found.
  - Data types: password
woocommerce-osc-sync.php:231
  - variable '$user_name' of personal types {'user', 'user_meta'} is found.
  - Data types: user, user_meta
woocommerce-osc-sync.php:632
  - variable '$country_data' of personal types {'country'} is found.
  - Data types: country
woocommerce-osc-sync.php:634
  - variable '$country_data' of personal types {'country'} is found.
  - Data types: country
woocommerce-osc-sync.php:669
  - variable '$billing_firstname' of personal types {'first_name'} is found.
  - Data types: first_name
woocommerce-osc-sync.php:670
  - variable '$billing_lastname' of personal types {'last_name'} is found.
  - Data types: last_name
woocommerce-osc-sync.php:673
  - variable '$shipping_firstname' of personal types {'first_name'} is found.
  - Data types: first_name
woocommerce-osc-sync.php:674
  - variable '$shipping_lastname' of personal types {'last_name'} is found.
  - Data types: last_name
woocommerce-osc-sync.php:680
  - variable '$billing_firstname' of personal types {'first_name'} is found.
  - Data types: first_name
woocommerce-osc-sync.php:681
  - variable '$billing_lastname' of personal types {'last_name'} is found.
  - Data types: last_name
woocommerce-osc-sync.php:689
  - variable '$shipping_firstname' of personal types {'first_name'} is found.
  - Data types: first_name
woocommerce-osc-sync.php:690
  - variable '$shipping_lastname' of personal types {'last_name'} is found.
  - Data types: last_name 

woocommerce-osc-sync.php:231
  - CRYPTOGRAPHY call to wp_create_user($user_name, $random_password, $customer["customers_email_address"]) alters data types {'user', 'user_meta'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).
  - Data types: user, user_meta
woocommerce-osc-sync.php:259
  - CRYPTOGRAPHY call to wp_update_user(["ID" => $user_id, "role" => "customer"]) alters data types {'user', 'user_meta'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user, user_meta 

woocommerce-osc-sync.php:27
  - RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).
  - Data types: option
woocommerce-osc-sync.php:356
  - RETRIEVAL call to get_posts(["post_type" => "product", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $product["products_id"]]]]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).
woocommerce-osc-sync.php:481
  - RETRIEVAL call to get_posts(["post_type" => "product", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $product["products_id"]]]]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).
woocommerce-osc-sync.php:507
  - RETRIEVAL call to get_posts(["post_type" => "product", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $product["products_id"]]]]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).
woocommerce-osc-sync.php:565
  - RETRIEVAL call to get_posts(["post_type" => "product", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $product["products_id"]]]]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).
woocommerce-osc-sync.php:620
  - RETRIEVAL call to get_user_meta($c["ID"], "osc_id", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: user_meta
woocommerce-osc-sync.php:627
  - RETRIEVAL call to get_post_meta($p["ID"], "osc_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).
  - Data types: post_meta
woocommerce-osc-sync.php:640
  - RETRIEVAL call to get_posts(["post_type" => "shop_order", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $order["orders_id"]]]]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).
woocommerce-osc-sync.php:750
  - RETRIEVAL call to get_posts(["post_type" => "page", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $information["information_id"]]]]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]). 

woocommerce-osc-sync.php:108
  - STORAGE call to delete_option("product_cat_children") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
woocommerce-osc-sync.php:134
  - STORAGE call to delete_option("product_cat_children") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
woocommerce-osc-sync.php:231
  - STORAGE call to wp_create_user($user_name, $random_password, $customer["customers_email_address"]) alters data types {'user', 'user_meta'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).
  - Data types: user, user_meta
woocommerce-osc-sync.php:255
  - STORAGE call to update_user_meta($user_id, $k, $v) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: user_meta
woocommerce-osc-sync.php:259
  - STORAGE call to wp_update_user(["ID" => $user_id, "role" => "customer"]) alters data types {'user', 'user_meta'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).
  - Data types: user, user_meta
woocommerce-osc-sync.php:366
  - STORAGE call to wp_insert_post(["post_title" => $product["products_name"], "post_content" => $product["products_description"], "post_status" => "publish", "post_type" => "product", "post_author" => 1]). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
woocommerce-osc-sync.php:373
  - STORAGE call to update_post_meta($product_id, "osc_id", $product["products_id"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:376
  - STORAGE call to update_post_meta($product_id, "_sku", $product["products_model"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:377
  - STORAGE call to update_post_meta($product_id, "_regular_price", $product["products_price"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:378
  - STORAGE call to update_post_meta($product_id, "_price", $product["products_price"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:379
  - STORAGE call to update_post_meta($product_id, "_visibility", "visible") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:380
  - STORAGE call to update_post_meta($product_id, "_stock_status", $product["products_status"]"instock""outofstock") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:381
  - STORAGE call to update_post_meta($product_id, "_manage_stock", "1") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:382
  - STORAGE call to update_post_meta($product_id, "_stock", $product["products_quantity"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:383
  - STORAGE call to update_post_meta($product_id, "_weight", $product["products_weight"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:387
  - STORAGE call to update_post_meta($product_id, "_sale_price", $special["specials_new_products_price"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:390
  - STORAGE call to update_post_meta($product_id, "_sale_price_dates_to", date("Y-m-d", $special["expires_date"])) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:391
  - STORAGE call to update_post_meta($product_id, "_sale_price_dates_from", date("Y-m-d")) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:425
  - STORAGE call to wp_insert_post(["post_title" => "Product " . $product_id . " Variation", "post_content" => "", "post_status" => "publish", "post_type" => "product_variation", "post_author" => 1, "post_parent" => $product_id]). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
woocommerce-osc-sync.php:439
  - STORAGE call to update_post_meta($variation_id, "attribute_" . $k, $v[0]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:443
  - STORAGE call to update_post_meta($variation_id, "_sku", $product["products_model"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:444
  - STORAGE call to update_post_meta($variation_id, "_regular_price", $opt_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:445
  - STORAGE call to update_post_meta($variation_id, "_price", $opt_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:446
  - STORAGE call to update_post_meta($variation_id, "_thumbnail_id", 0) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:447
  - STORAGE call to update_post_meta($variation_id, "_stock", $product["products_quantity"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:449
  - STORAGE call to update_post_meta($variation_id, "_sale_price", $special_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:451
  - STORAGE call to update_post_meta($variation_id, "_sale_price_dates_to", date("Y-m-d", $special["expires_date"])) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:452
  - STORAGE call to update_post_meta($variation_id, "_sale_price_dates_from", date("Y-m-d")) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:463
  - STORAGE call to update_post_meta($product_id, "_product_attributes", $attrib_array) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:464
  - STORAGE call to update_post_meta($product_id, "_max_variation_regular_price", $max_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:465
  - STORAGE call to update_post_meta($product_id, "_min_variation_regular_price", $min_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:466
  - STORAGE call to update_post_meta($product_id, "_max_variation_price", $max_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:467
  - STORAGE call to update_post_meta($product_id, "_min_variation_price", $min_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:493
  - STORAGE call to delete_post_meta($product_id, "_product_image_gallery", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (bool).
  - Data types: post_meta
woocommerce-osc-sync.php:607
  - STORAGE call to update_post_meta($product_id, "_product_image_gallery", $attach_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:665
  - STORAGE call to wp_insert_post($data). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
woocommerce-osc-sync.php:711
  - STORAGE call to update_post_meta($order_id, $k, $v) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta
woocommerce-osc-sync.php:763
  - STORAGE call to wp_insert_post($data). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).
woocommerce-osc-sync.php:764
  - STORAGE call to update_post_meta($page_id, "osc_id", $information["information_id"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).
  - Data types: post_meta 

woocommerce-osc-sync.php:108
  - DELETION call to delete_option("product_cat_children") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
woocommerce-osc-sync.php:134
  - DELETION call to delete_option("product_cat_children") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).
  - Data types: option
woocommerce-osc-sync.php:493
  - DELETION call to delete_post_meta($product_id, "_product_image_gallery", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (bool).
  - Data types: post_meta 

By data type:
country
	VariableDetector.(unknown) - {'country'}
	VariableDetector.(unknown) - {'country'}
	VariableDetector.(unknown) - {'country'}
	VariableDetector.(unknown) - {'country'}
file
	PHPRetrievalDetector.file_get_contents($url) - {'file'}
	PHPStorageDetector.fwrite($fp, date("Y-m-d H:i:s") . " " . $data . "
") - {'file'}
	PHPStorageDetector.file_put_contents($filename, $f) - {'file'}
first_name
	VariableDetector.(unknown) - {'first_name'}
	VariableDetector.(unknown) - {'first_name'}
	VariableDetector.(unknown) - {'first_name'}
	VariableDetector.(unknown) - {'first_name'}
last_name
	VariableDetector.(unknown) - {'last_name'}
	VariableDetector.(unknown) - {'last_name'}
	VariableDetector.(unknown) - {'last_name'}
	VariableDetector.(unknown) - {'last_name'}
none
	WordPressStorageDetector.wp_insert_post($data) - set()
	WordPressRetrievalDetector.get_posts(["post_type" => "shop_order", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $order["orders_id"]]]]) - set()
	WordPressRetrievalDetector.get_posts(["post_type" => "product", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $product["products_id"]]]]) - set()
	WordPressRetrievalDetector.get_posts(["post_type" => "product", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $product["products_id"]]]]) - set()
	WordPressRetrievalDetector.get_posts(["post_type" => "page", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $information["information_id"]]]]) - set()
	WordPressStorageDetector.wp_insert_post($data) - set()
	WordPressRetrievalDetector.get_posts(["post_type" => "product", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $product["products_id"]]]]) - set()
	WordPressRetrievalDetector.get_posts(["post_type" => "product", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $product["products_id"]]]]) - set()
	WordPressStorageDetector.wp_insert_post(["post_title" => $product["products_name"], "post_content" => $product["products_description"], "post_status" => "publish", "post_type" => "product", "post_author" => 1]) - set()
	WordPressStorageDetector.wp_insert_post(["post_title" => "Product " . $product_id . " Variation", "post_content" => "", "post_status" => "publish", "post_type" => "product_variation", "post_author" => 1, "post_parent" => $product_id]) - set()
option
	DeletionDetector.delete_option("product_cat_children") - {'option'}
	WordPressStorageDetector.delete_option("product_cat_children") - {'option'}
	WordPressRetrievalDetector.get_option("active_plugins") - {'option'}
	DeletionDetector.delete_option("product_cat_children") - {'option'}
	WordPressStorageDetector.delete_option("product_cat_children") - {'option'}
password
	VariableDetector.(unknown) - {'password'}
	VariableDetector.(unknown) - {'password'}
	ArrayElementDetector.(unknown) - {'password'}
	ArrayElementDetector.(unknown) - {'password'}
post_meta
	WordPressStorageDetector.update_post_meta($product_id, "_product_image_gallery", $attach_id) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_sku", $product["products_model"]) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_sale_price_dates_from", date("Y-m-d")) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_weight", $product["products_weight"]) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_sale_price", $special["specials_new_products_price"]) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($variation_id, "_sale_price", $special_price) - {'post_meta'}
	WordPressStorageDetector.delete_post_meta($product_id, "_product_image_gallery", "") - {'post_meta'}
	WordPressRetrievalDetector.get_post_meta($p["ID"], "osc_id", true) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($variation_id, "_sku", $product["products_model"]) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_price", $product["products_price"]) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_sale_price_dates_to", date("Y-m-d", $special["expires_date"])) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_max_variation_price", $max_price) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($variation_id, "_sale_price_dates_to", date("Y-m-d", $special["expires_date"])) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_stock", $product["products_quantity"]) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_stock_status", $product["products_status"]"instock""outofstock") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_product_attributes", $attrib_array) - {'post_meta'}
	DeletionDetector.delete_post_meta($product_id, "_product_image_gallery", "") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_regular_price", $product["products_price"]) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_max_variation_regular_price", $max_price) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($order_id, $k, $v) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($variation_id, "_price", $opt_price) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($variation_id, "_regular_price", $opt_price) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($variation_id, "attribute_" . $k, $v[0]) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($variation_id, "_stock", $product["products_quantity"]) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_visibility", "visible") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($page_id, "osc_id", $information["information_id"]) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_manage_stock", "1") - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "osc_id", $product["products_id"]) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($variation_id, "_sale_price_dates_from", date("Y-m-d")) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_min_variation_regular_price", $min_price) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($product_id, "_min_variation_price", $min_price) - {'post_meta'}
	WordPressStorageDetector.update_post_meta($variation_id, "_thumbnail_id", 0) - {'post_meta'}
user
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressStorageDetector.wp_update_user(["ID" => $user_id, "role" => "customer"]) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressStorageDetector.wp_create_user($user_name, $random_password, $customer["customers_email_address"]) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordpressHashingFnDetector.wp_update_user(["ID" => $user_id, "role" => "customer"]) - {'user', 'user_meta'}
	WordpressHashingFnDetector.wp_create_user($user_name, $random_password, $customer["customers_email_address"]) - {'user', 'user_meta'}
user_meta
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressStorageDetector.wp_update_user(["ID" => $user_id, "role" => "customer"]) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordPressStorageDetector.update_user_meta($user_id, $k, $v) - {'user_meta'}
	WordPressStorageDetector.wp_create_user($user_name, $random_password, $customer["customers_email_address"]) - {'user', 'user_meta'}
	WordPressRetrievalDetector.get_user_meta($c["ID"], "osc_id", true) - {'user_meta'}
	VariableDetector.(unknown) - {'user', 'user_meta'}
	WordpressHashingFnDetector.wp_update_user(["ID" => $user_id, "role" => "customer"]) - {'user', 'user_meta'}
	WordpressHashingFnDetector.wp_create_user($user_name, $random_password, $customer["customers_email_address"]) - {'user', 'user_meta'}
╚[24] Preprocessing step "Security/storage detectors" (__security_detectors) finished successfully in 0:00:22.437950.

0 edges imported to Neo4j
Preprocessing step 8 done!
╔[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) begin.
Adding storage reaches edges... Finished collecting storage and retrieval nodes from detectors
Finished collecting sql insert, update, and select nodes
Finished collecting SQL statement info
Start inserting STORE_REACHES
Done adding storage edges. Added 37 edges in all.
╚[25] Preprocessing step "Create source to sink edges" (__storage_to_retrieval) finished successfully in 0:00:00.370123.

37 STORE_REACHES edges created
37 edges imported to Neo4j
Preprocessing step 9 done!
╔[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) begin.
Finished collecting propagation info for personal nodes
Wrote source sink information to database
Tainted 159 nodes as PERSONAL
In total, tainted 159 nodes as PERSONAL
Finished collecting propagation info for encrypted nodes
Tainted 12 nodes as ENCRYPTED
In total, tainted 12 nodes as ENCRYPTED
╚[26] Preprocessing step "Label all of the personal data nodes and encrypted nodes" (__taint_nodes) finished successfully in 0:00:09.968252.

0 edges imported to Neo4j
Preprocessing step 10 done!
### Preprocessing done in 0:01:28.221931!
Request variable '$_POST["store_pass"]' of personal types {'password'} is found.,,None
Request variable '$_POST["store_pass"]' of personal types {'password'} is found.,,None
DELETION call to delete_option("product_cat_children") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_option("product_cat_children") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
DELETION call to delete_post_meta($product_id, "_product_image_gallery", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (bool).,None,None
RETRIEVAL call to file_get_contents($url).,None,None
STORAGE call to file_put_contents($filename, $f).,None,None
STORAGE call to fwrite($fp, date("Y-m-d H:i:s") . " " . $data . "
").,None,None
variable '$country_data' of personal types {'country'} is found.,,None
variable '$country_data' of personal types {'country'} is found.,,None
variable '$user_name' of personal types {'user', 'user_meta'} is found.,,None
variable '$user_name' of personal types {'user', 'user_meta'} is found.,,None
variable '$user_name' of personal types {'user', 'user_meta'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$random_password' of personal types {'password'} is found.,,None
variable '$user_name' of personal types {'user', 'user_meta'} is found.,,None
variable '$country_data' of personal types {'country'} is found.,,None
variable '$country_data' of personal types {'country'} is found.,,None
variable '$billing_firstname' of personal types {'first_name'} is found.,,None
variable '$billing_lastname' of personal types {'last_name'} is found.,,None
variable '$shipping_firstname' of personal types {'first_name'} is found.,,None
variable '$shipping_lastname' of personal types {'last_name'} is found.,,None
variable '$billing_firstname' of personal types {'first_name'} is found.,,None
variable '$billing_lastname' of personal types {'last_name'} is found.,,None
variable '$shipping_firstname' of personal types {'first_name'} is found.,,None
variable '$shipping_lastname' of personal types {'last_name'} is found.,,None
RETRIEVAL call to get_option("active_plugins") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (mixed).,None,None
RETRIEVAL call to get_posts(["post_type" => "product", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $product["products_id"]]]]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
RETRIEVAL call to get_posts(["post_type" => "product", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $product["products_id"]]]]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
RETRIEVAL call to get_posts(["post_type" => "product", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $product["products_id"]]]]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
RETRIEVAL call to get_posts(["post_type" => "product", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $product["products_id"]]]]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
RETRIEVAL call to get_user_meta($c["ID"], "osc_id", true) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_post_meta($p["ID"], "osc_id", true) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 2: $single (bool), 1: $key (string). Returns (mixed).,None,None
RETRIEVAL call to get_posts(["post_type" => "shop_order", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $order["orders_id"]]]]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
RETRIEVAL call to get_posts(["post_type" => "page", "posts_per_page" => 1, "post_status" => "any", "meta_query" => [["key" => "osc_id", "value" => $information["information_id"]]]]). Passed arguments: 0: $args (array). Returns (WP_Post[]|int[]).,None,None
STORAGE call to delete_option("product_cat_children") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to delete_option("product_cat_children") alters data types {'option'}. Passed arguments: 0: $option (string). Returns (bool).,None,None
STORAGE call to wp_create_user($user_name, $random_password, $customer["customers_email_address"]) alters data types {'user', 'user_meta'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).,None,None
STORAGE call to update_user_meta($user_id, $k, $v) alters data types {'user_meta'}. Passed arguments: 0: $user_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_update_user(["ID" => $user_id, "role" => "customer"]) alters data types {'user', 'user_meta'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,None,None
STORAGE call to wp_insert_post(["post_title" => $product["products_name"], "post_content" => $product["products_description"], "post_status" => "publish", "post_type" => "product", "post_author" => 1]). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($product_id, "osc_id", $product["products_id"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_sku", $product["products_model"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_regular_price", $product["products_price"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_price", $product["products_price"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_visibility", "visible") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_stock_status", $product["products_status"]"instock""outofstock") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_manage_stock", "1") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_stock", $product["products_quantity"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_weight", $product["products_weight"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_sale_price", $special["specials_new_products_price"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_sale_price_dates_to", date("Y-m-d", $special["expires_date"])) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_sale_price_dates_from", date("Y-m-d")) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_post(["post_title" => "Product " . $product_id . " Variation", "post_content" => "", "post_status" => "publish", "post_type" => "product_variation", "post_author" => 1, "post_parent" => $product_id]). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($variation_id, "attribute_" . $k, $v[0]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($variation_id, "_sku", $product["products_model"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($variation_id, "_regular_price", $opt_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($variation_id, "_price", $opt_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($variation_id, "_thumbnail_id", 0) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($variation_id, "_stock", $product["products_quantity"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($variation_id, "_sale_price", $special_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($variation_id, "_sale_price_dates_to", date("Y-m-d", $special["expires_date"])) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($variation_id, "_sale_price_dates_from", date("Y-m-d")) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_product_attributes", $attrib_array) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_max_variation_regular_price", $max_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_min_variation_regular_price", $min_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_max_variation_price", $max_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to update_post_meta($product_id, "_min_variation_price", $min_price) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to delete_post_meta($product_id, "_product_image_gallery", "") alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (bool).,None,None
STORAGE call to update_post_meta($product_id, "_product_image_gallery", $attach_id) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_post($data). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($order_id, $k, $v) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
STORAGE call to wp_insert_post($data). Passed arguments: 0: $postarr (array). Returns (int|WP_Error).,None,None
STORAGE call to update_post_meta($page_id, "osc_id", $information["information_id"]) alters data types {'post_meta'}. Passed arguments: 0: $post_id (int), 1: $meta_key (string), 2: $meta_value (mixed). Returns (int|bool).,None,None
CRYPTOGRAPHY call to wp_create_user($user_name, $random_password, $customer["customers_email_address"]) alters data types {'user', 'user_meta'}. Passed arguments: 0: $username (string), 1: $password (string), 2: $email (string). Returns (int|WP_Error).,hash,None
CRYPTOGRAPHY call to wp_update_user(["ID" => $user_id, "role" => "customer"]) alters data types {'user', 'user_meta'}. Passed arguments: 0: $userdata (array|object|WP_User). Returns (int|WP_Error).,hash,None
Finding all hooks in the current plugin...
Storing all hook information in the current plugin...

############################
### Incompliance Finding ###
############################

We found following evidences that your plugin is in violation of General Data Protection Regulation (GDPR).
Data Deletion violation! The plugin has storage node that has no identifier and cannot be accessed!
Data Deletion violation! The plugin has storage node that has no identifier and cannot be accessed!
[main] Found at least one personal data usage in the plugin. Analyzing the plugin. 

[has_storage] WP User info of types (['password', 'user_meta', 'user']) stored through WordPress function "wp_update_user(["ID" => $user_id, "role" => "customer"])", found in file woocommerce-osc-sync.php at line 259. 

[has_storage] PII of types (['password']) stored through WordPress function "update_post_meta($product_id, "_sale_price", $special["specials_new_products_price"])", found in file woocommerce-osc-sync.php at line 387. 

[has_storage] PII of types (['password']) stored through WordPress function "update_post_meta($variation_id, "_sale_price", $special_price)", found in file woocommerce-osc-sync.php at line 449. 

[has_storage] Unstructured data storage of PII types (['password', 'last_name', 'first_name']) to files through function "fwrite", found in file woocommerce-osc-sync.php at line 966. 

[has_storage] PII of types (['password']) stored through WordPress function "update_post_meta($product_id, "_sale_price_dates_to", date("Y-m-d", $special["expires_date"]))", found in file woocommerce-osc-sync.php at line 390. 

[has_storage] PII of types (['password']) stored through WordPress function "update_post_meta($variation_id, "_sale_price_dates_to", date("Y-m-d", $special["expires_date"]))", found in file woocommerce-osc-sync.php at line 451. 

[has_storage] PII of types (['password', 'user_meta', 'user']) stored through WordPress function "update_user_meta($user_id, $k, $v)", found in file woocommerce-osc-sync.php at line 255. 

[has_storage] WP User info of types (['password', 'user_meta', 'user']) stored through WordPress function "wp_create_user($user_name, $random_password, $customer["customers_email_address"])", found in file woocommerce-osc-sync.php at line 231. 

[has_storage] Unstructured data storage of PII types (['password', 'last_name', 'first_name']) to files through function "file_put_contents", found in file woocommerce-osc-sync.php at line 63. 

[has_storage] Storage check is CUSTOM_UNSTRUCTURED 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_sale_price", $special["specials_new_products_price"]) does not have corresponding deletion method. Storage method found in file woocommerce-osc-sync.php at line 387. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($variation_id, "_sale_price", $special_price) does not have corresponding deletion method. Storage method found in file woocommerce-osc-sync.php at line 449. 

[Art.17, Right to erasure] Complete data deletion is required for storage at node ID 5178 , but is impossible due to custom storage of PII without identifiers. Found in file woocommerce-osc-sync.php at line 966 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($product_id, "_sale_price_dates_to", date("Y-m-d", $special["expires_date"])) does not have corresponding deletion method. Storage method found in file woocommerce-osc-sync.php at line 390. 

[Art.17, Right to erasure] Wordpress storage of PII through update_post_meta($variation_id, "_sale_price_dates_to", date("Y-m-d", $special["expires_date"])) does not have corresponding deletion method. Storage method found in file woocommerce-osc-sync.php at line 451. 

[Art.17, Right to erasure] Wordpress storage of PII through update_user_meta($user_id, $k, $v) does not have corresponding deletion method. Storage method found in file woocommerce-osc-sync.php at line 255. 

[Art.17, Right to erasure] Complete data deletion is required for storage at node ID 271 , but is impossible due to custom storage of PII without identifiers. Found in file woocommerce-osc-sync.php at line 63 

[Art.17, Right to erasure] Deletion access is NONE 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 2109. Found in file woocommerce-osc-sync.php at line 387 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 2471. Found in file woocommerce-osc-sync.php at line 449 

[Art.15, Right to access] Complete data access is required for storage at node ID 5178 , but is impossible due to custom storage of PII without identifiers. Found in file woocommerce-osc-sync.php at line 966 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 2145. Found in file woocommerce-osc-sync.php at line 390 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 2492. Found in file woocommerce-osc-sync.php at line 451 

[Art.15, Right to access] Data access is not strictly required for wordpress storage at node ID 1485. Found in file woocommerce-osc-sync.php at line 255 

[Art.15, Right to access] Complete data access is required for storage at node ID 271 , but is impossible due to custom storage of PII without identifiers. Found in file woocommerce-osc-sync.php at line 63 

[Art.15, Right to access] Data access is NONE 

[third_party] Third party usage is NONE for data types [] 

[main] Applicable GDPR requirements: ['access', 'deletion', 'encryption', 'third_party'] 

[main] Is deletion in violation? True 

[main] Is access in violation? True 

[main] Is third_party in violation? False 

[main] Is encryption in violation? False 

[main] Complaint? False 


###########
### Q&A ###
###########

1. Why is my plugin in violation against GDPR?

GDPR (https://gdpr-info.eu/) aims to give citizens in the European Union (EU) control over their personal data. If a website collects or store user data, it is required to provide users functionalities to control their data, such as ones to erase or export their data. While a plugin do not directly interact with users, it may provide functionalities that collect or store personal data, which would make websites that deploy the plugin in violation against GDPR if the plugin does not provide corresponding functionalities to allow users control their personal data. Therefore, plugin developers are responsible to provide functions to manage the personal data they handle in accordance with GDPR. We list requirements by specific GDPR articles relevant to your plugin below.


[Art. 13, Information to be provided where personal data are collected from the data subject] If a plugin collects or handles personal data, it needs to provide privacy policy texts that explain what personal data is being collected and for what purpose. The texts are meant to be added to the privacy policy of the websites that deploy the plugin. 


            
[Art.17, Right to erasure] If a plugin stores personal data in a custom database they create or manage, or through Wordpress's native storage functions (e.g., update_user_meta), it needs to provide methods for users to erase the data upon request. Note that deleting data for all users upon uninstallation does not satisfy the requirement. 


            
        

2. How do I make my plugin compliant?

Please refer to the fix report below to see how you can make your plugin comply with GDPR.

        

##################
### Fix Report ###
##################

############################
# Data Deletion Fix Report #
############################

This report suggests fixes to comply with the GDPR Art. 17, Right to erasure (https://gdpr-info.eu/art-17-gdpr/). The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/adding-the-personal-data-eraser-to-your-plugin/ for more details.

1) Implement a function that deletes all the user data collected in the plugin. Sample code:


/**
* Removes all collected data of a user.
*
* @param string $email_address   email address to manipulate
* @param int    $page            pagination
*
* @return array
*/
function woo-oscommerce-sync_remove_data( $email_address, $page = 1 ) {
    
    $page = (int) $page;


    //TODO: Delete the user data that was stored using Wordpress functions

    //Below is the sample code for deleting user meta and may need to be modified to suit the plugin.
    $user_id = get_user_by('email', $email_address)
    $key = 'email' //Sample user meta key
    if ( $customer->user_id > 0 ) {
        //Delete user meta data by $key
        delete_user_meta( $user_id, $key );
    }
        



    // Tell core if we have more data to delete still
    $done = true;
    return array(
        'items_removed'  => $items_removed, // true if collected data of a user is being deleted
        'items_retained' => $items_retained, // true if certain data needs to be retained
        'messages'       => sprintf( __( 'Data of user with email %s successfully deleted.', 'woo-oscommerce-sync' ), $email_address ), // Put messages for data removal
        'done'           => $done, // true if all the removal processes are done (all data of the user is removed)
    );
}
        

2) Hook the deletion function to the Wordpress's Personal Data Removal tool


/**
* Registers all data erasers.
*
* @param array $exporters
*
* @return mixed
*/
function woo-oscommerce-sync_register_privacy_erasers( $erasers ) {
    $erasers['my-plugin-slug'] = array(
        'eraser_friendly_name' => __( '<eraser name>', 'woo-oscommerce-sync' ),
        'callback'             => 'woo-oscommerce-sync_remove_data',
    );
    return $erasers;
}
        

add_filter( 'wp_privacy_personal_data_erasers', 'woo-oscommerce-sync_register_privacy_erasers' );
        

        

#############################
# Privacy Policy Fix Report #
#############################

This report suggests fixes to comply with the GDPR Art. 13 (https://gdpr-info.eu/art-13-gdpr/) through including a privacy notice. The report
is based on guidelines provided by Wordpress. Refer to https://developer.wordpress.org/plugins/privacy/suggesting-text-for-the-site-privacy-policy/ for more details.

1) Implement a function that includes the privacy policy for the plugin and provide it to wordpress through wp_add_privacy_policy_content(). Sample code:


/**
* Adds a privacy policy statement.
*/
function woo-oscommerce-sync_add_privacy_policy_content() {
    if ( ! function_exists( 'wp_add_privacy_policy_content' ) ) {
        return;
    }
    //TODO: modify the content below to include the privacy policy for the plugin.
    $content = '<p class="privacy-policy-tutorial">' . __( 'Some introductory content for the suggested text.', 'woo-oscommerce-sync' ) . '</p>'
            . '<strong class="privacy-policy-tutorial">' . __( 'Suggested Text:', 'woo-oscommerce-sync' ) . '</strong> '
            . sprintf(
                __( 'When you leave a comment on this site, we send your name, email address, IP address and comment text to example.com. Example.com does not retain your personal data. The example.com privacy policy is <a href="%1$s" target="_blank">here</a>.', 'woo-oscommerce-sync' ),
                'https://example.com/privacy-policy'
            );
    wp_add_privacy_policy_content( 'woo-oscommerce-sync', wp_kses_post( wpautop( $content, false ) ) );
}
        

2) Hook the privacy policy function to the Wordpress's admin initialization action.


add_action( 'admin_init', 'woo-oscommerce-sync_add_privacy_policy_content' );
        

        


Disclaimer: The sample code provided above is only for reference and does not guarantee GDPR compliance. The recommended list of data to delete/export may not be comprehensive. 
        
Done.
